
NucleoL476RG-freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e0  080081e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081e8  080081e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080081f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a80  20000074  08008264  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001af4  08008264  00021af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000201e0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003624  00000000  00000000  00040284  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001980  00000000  00000000  000438a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017f8  00000000  00000000  00045228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004577  00000000  00000000  00046a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014898  00000000  00000000  0004af97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111432  00000000  00000000  0005f82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170c61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007004  00000000  00000000  00170cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008060 	.word	0x08008060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008060 	.word	0x08008060

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc18 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f844 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f970 	bl	8000870 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f93e 	bl	8000810 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f8c6 	bl	8000724 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f004 fbee 	bl	8004d78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <main+0x64>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <main+0x68>)
 80005a2:	f004 fc53 	bl	8004e4c <osThreadNew>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <main+0x6c>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask01 */
  blinkyTask01Handle = osThreadNew(StartBlinkyTask01, NULL, &blinkyTask01_attributes);
 80005ac:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <main+0x70>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <main+0x74>)
 80005b2:	f004 fc4b 	bl	8004e4c <osThreadNew>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <main+0x78>)
 80005ba:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask02 */
  blinkyTask02Handle = osThreadNew(StartBlinkyTask02, NULL, &blinkyTask02_attributes);
 80005bc:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <main+0x7c>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <main+0x80>)
 80005c2:	f004 fc43 	bl	8004e4c <osThreadNew>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x84>)
 80005ca:	601a      	str	r2, [r3, #0]

  /* creation of ReadAndPrintTas */
  ReadAndPrintTasHandle = osThreadNew(StartTaskReadAndPrint01, NULL, &ReadAndPrintTas_attributes);
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <main+0x88>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <main+0x8c>)
 80005d2:	f004 fc3b 	bl	8004e4c <osThreadNew>
 80005d6:	4602      	mov	r2, r0
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <main+0x90>)
 80005da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f004 fc00 	bl	8004de0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x60>
 80005e2:	bf00      	nop
 80005e4:	080080d4 	.word	0x080080d4
 80005e8:	08000945 	.word	0x08000945
 80005ec:	2000195c 	.word	0x2000195c
 80005f0:	080080f8 	.word	0x080080f8
 80005f4:	08000955 	.word	0x08000955
 80005f8:	20001960 	.word	0x20001960
 80005fc:	0800811c 	.word	0x0800811c
 8000600:	08000971 	.word	0x08000971
 8000604:	20001a5c 	.word	0x20001a5c
 8000608:	08008140 	.word	0x08008140
 800060c:	0800098d 	.word	0x0800098d
 8000610:	200019d8 	.word	0x200019d8

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0b8      	sub	sp, #224	; 0xe0
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061e:	2244      	movs	r2, #68	; 0x44
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f007 f917 	bl	8007856 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2288      	movs	r2, #136	; 0x88
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f007 f909 	bl	8007856 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2310      	movs	r3, #16
 8000654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066a:	230a      	movs	r3, #10
 800066c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000670:	2307      	movs	r3, #7
 8000672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000686:	4618      	mov	r0, r3
 8000688:	f002 f902 	bl	8002890 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000692:	f000 f9d1 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fcce 	bl	800305c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006c6:	f000 f9b7 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80006ca:	f244 0302 	movw	r3, #16386	; 0x4002
 80006ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006d8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006da:	2302      	movs	r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006e2:	2308      	movs	r3, #8
 80006e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006f6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fee4 	bl	80034c8 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000706:	f000 f997 	bl	8000a38 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070e:	f002 f869 	bl	80027e4 <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000718:	f000 f98e 	bl	8000a38 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	37e0      	adds	r7, #224	; 0xe0
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000748:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <MX_ADC1_Init+0xe4>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_ADC1_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_ADC1_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000766:	2204      	movs	r2, #4
 8000768:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC1_Init+0xe0>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC1_Init+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC1_Init+0xe0>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC1_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ADC1_Init+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC1_Init+0xe0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <MX_ADC1_Init+0xe0>)
 80007a8:	f000 fd4c 	bl	8001244 <HAL_ADC_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007b2:	f000 f941 	bl	8000a38 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4810      	ldr	r0, [pc, #64]	; (8000804 <MX_ADC1_Init+0xe0>)
 80007c2:	f001 fc99 	bl	80020f8 <HAL_ADCEx_MultiModeConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007cc:	f000 f934 	bl	8000a38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_ADC1_Init+0xe8>)
 80007d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d4:	2306      	movs	r3, #6
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007dc:	237f      	movs	r3, #127	; 0x7f
 80007de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e0:	2304      	movs	r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC1_Init+0xe0>)
 80007ee:	f001 f815 	bl	800181c <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007f8:	f000 f91e 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20001970 	.word	0x20001970
 8000808:	50040000 	.word	0x50040000
 800080c:	14f00020 	.word	0x14f00020

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART2_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000854:	f003 fdba 	bl	80043cc <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f8eb 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200019dc 	.word	0x200019dc
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_GPIO_Init+0xc8>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <MX_GPIO_Init+0xc8>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_GPIO_Init+0xc8>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a25      	ldr	r2, [pc, #148]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a19      	ldr	r2, [pc, #100]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_GPIO_Init+0xc8>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f001 ff38 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_GPIO_Init+0xcc>)
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_GPIO_Init+0xd0>)
 800090a:	f001 fd83 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 800090e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f001 fd73 	bl	8002414 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	10210000 	.word	0x10210000
 8000940:	48000800 	.word	0x48000800

08000944 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f004 fb23 	bl	8004f98 <osDelay>
 8000952:	e7fb      	b.n	800094c <StartDefaultTask+0x8>

08000954 <StartBlinkyTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask01 */
void StartBlinkyTask01(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800095c:	2120      	movs	r1, #32
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f001 ff17 	bl	8002794 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096a:	f004 fb15 	bl	8004f98 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800096e:	e7f5      	b.n	800095c <StartBlinkyTask01+0x8>

08000970 <StartBlinkyTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask02 */
void StartBlinkyTask02(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000978:	2120      	movs	r1, #32
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f001 ff09 	bl	8002794 <HAL_GPIO_TogglePin>
	  osDelay(600);
 8000982:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000986:	f004 fb07 	bl	8004f98 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800098a:	e7f5      	b.n	8000978 <StartBlinkyTask02+0x8>

0800098c <StartTaskReadAndPrint01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadAndPrint01 */
void StartTaskReadAndPrint01(void *argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskReadAndPrint01 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 fee1 	bl	8002764 <HAL_GPIO_WritePin>

	  HAL_ADC_Start(&hadc1);
 80009a2:	4817      	ldr	r0, [pc, #92]	; (8000a00 <StartTaskReadAndPrint01+0x74>)
 80009a4:	f000 fda2 	bl	80014ec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	4814      	ldr	r0, [pc, #80]	; (8000a00 <StartTaskReadAndPrint01+0x74>)
 80009ae:	f000 fe57 	bl	8001660 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <StartTaskReadAndPrint01+0x74>)
 80009b4:	f000 ff24 	bl	8001800 <HAL_ADC_GetValue>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <StartTaskReadAndPrint01+0x78>)
 80009be:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,  GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f001 fecb 	bl	8002764 <HAL_GPIO_WritePin>

	  sprintf(msg, "%hu\r\n", raw);
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <StartTaskReadAndPrint01+0x78>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <StartTaskReadAndPrint01+0x7c>)
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <StartTaskReadAndPrint01+0x80>)
 80009d8:	f006 ff46 	bl	8007868 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <StartTaskReadAndPrint01+0x80>)
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <StartTaskReadAndPrint01+0x80>)
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <StartTaskReadAndPrint01+0x84>)
 80009ee:	f003 fd3b 	bl	8004468 <HAL_UART_Transmit>

	  HAL_Delay(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fa20 	bl	8000e38 <HAL_Delay>
	  osDelay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f004 facd 	bl	8004f98 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80009fe:	e7c9      	b.n	8000994 <StartTaskReadAndPrint01+0x8>
 8000a00:	20001970 	.word	0x20001970
 8000a04:	200019d4 	.word	0x200019d4
 8000a08:	080080b4 	.word	0x080080b4
 8000a0c:	20001964 	.word	0x20001964
 8000a10:	200019dc 	.word	0x200019dc

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 f9e7 	bl	8000df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40001000 	.word	0x40001000

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	; 0x58
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210f      	movs	r1, #15
 8000a82:	f06f 0001 	mvn.w	r0, #1
 8000a86:	f001 fc9b 	bl	80023c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <HAL_ADC_MspInit+0x74>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d124      	bne.n	8000b04 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_ADC_MspInit+0x78>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_ADC_MspInit+0x78>)
 8000ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_ADC_MspInit+0x78>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_ADC_MspInit+0x78>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_ADC_MspInit+0x78>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_ADC_MspInit+0x78>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aee:	230b      	movs	r3, #11
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f001 fc88 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	50040000 	.word	0x50040000
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x7c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d128      	bne.n	8000b88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	6593      	str	r3, [r2, #88]	; 0x58
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x80>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f001 fc46 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2036      	movs	r0, #54	; 0x36
 8000bae:	f001 fc07 	bl	80023c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb2:	2036      	movs	r0, #54	; 0x36
 8000bb4:	f001 fc20 	bl	80023f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_InitTick+0x9c>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_InitTick+0x9c>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_InitTick+0x9c>)
 8000bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd0:	f107 0210 	add.w	r2, r7, #16
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fbe2 	bl	80033a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be0:	f002 fbb4 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8000be4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_InitTick+0xa0>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	0c9b      	lsrs	r3, r3, #18
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_InitTick+0xa4>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <HAL_InitTick+0xa8>)
 8000bf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_InitTick+0xa4>)
 8000bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_InitTick+0xa4>)
 8000c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_InitTick+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_InitTick+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <HAL_InitTick+0xa4>)
 8000c16:	f003 f907 	bl	8003e28 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d104      	bne.n	8000c2a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <HAL_InitTick+0xa4>)
 8000c22:	f003 f963 	bl	8003eec <HAL_TIM_Base_Start_IT>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3730      	adds	r7, #48	; 0x30
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	431bde83 	.word	0x431bde83
 8000c3c:	20001a60 	.word	0x20001a60
 8000c40:	40001000 	.word	0x40001000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM6_DAC_IRQHandler+0x10>)
 8000c7e:	f003 f9a5 	bl	8003fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20001a60 	.word	0x20001a60

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f006 fd96 	bl	80077ec <__errno>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20018000 	.word	0x20018000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	20001af8 	.word	0x20001af8

08000cf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <SystemInit+0x64>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <SystemInit+0x64>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <SystemInit+0x68>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <SystemInit+0x68>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <SystemInit+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <SystemInit+0x68>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <SystemInit+0x68>)
 8000d24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SystemInit+0x68>)
 8000d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <SystemInit+0x68>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <SystemInit+0x68>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <SystemInit+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SystemInit+0x64>)
 8000d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	40021000 	.word	0x40021000

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffc6 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
	ldr	r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LoopForever+0x16>)
	cmp	r2, r3
 8000d8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f006 fd31 	bl	80077f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fbf3 	bl	8000580 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000da0:	080081f0 	.word	0x080081f0
	ldr	r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000da8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000dac:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000db0:	20001af4 	.word	0x20001af4

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_Init+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_Init+0x3c>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f001 faeb 	bl	80023aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fedf 	bl	8000b98 <HAL_InitTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	e001      	b.n	8000dea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de6:	f7ff fe2f 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20001aac 	.word	0x20001aac

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20001aac 	.word	0x20001aac

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff ffee 	bl	8000e20 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_Delay+0x40>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffde 	bl	8000e20 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000008 	.word	0x20000008

08000e7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	609a      	str	r2, [r3, #8]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3360      	adds	r3, #96	; 0x60
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <LL_ADC_SetOffset+0x44>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	4313      	orrs	r3, r2
 8000f14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f1c:	bf00      	nop
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	03fff000 	.word	0x03fff000

08000f2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3360      	adds	r3, #96	; 0x60
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3360      	adds	r3, #96	; 0x60
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f82:	bf00      	nop
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3330      	adds	r3, #48	; 0x30
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	4413      	add	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	211f      	movs	r1, #31
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0e9b      	lsrs	r3, r3, #26
 8000fec:	f003 011f 	and.w	r1, r3, #31
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3314      	adds	r3, #20
 800101c:	461a      	mov	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	0e5b      	lsrs	r3, r3, #25
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	0d1b      	lsrs	r3, r3, #20
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	2107      	movs	r1, #7
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	401a      	ands	r2, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	0d1b      	lsrs	r3, r3, #20
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	431a      	orrs	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001056:	bf00      	nop
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0318 	and.w	r3, r3, #24
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001088:	40d9      	lsrs	r1, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	400b      	ands	r3, r1
 800108e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001092:	431a      	orrs	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	0007ffff 	.word	0x0007ffff

080010ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 031f 	and.w	r3, r3, #31
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6093      	str	r3, [r2, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111c:	d101      	bne.n	8001122 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800116c:	d101      	bne.n	8001172 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <LL_ADC_IsEnabled+0x18>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <LL_ADC_IsEnabled+0x1a>
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e2:	f043 0204 	orr.w	r2, r3, #4
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b04      	cmp	r3, #4
 8001208:	d101      	bne.n	800120e <LL_ADC_REG_IsConversionOngoing+0x18>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b08      	cmp	r3, #8
 800122e:	d101      	bne.n	8001234 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e134      	b.n	80014c8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	2b00      	cmp	r3, #0
 800126a:	d109      	bne.n	8001280 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fc13 	bl	8000a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff3f 	bl	8001108 <LL_ADC_IsDeepPowerDownEnabled>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff25 	bl	80010e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff5a 	bl	8001158 <LL_ADC_IsInternalRegulatorEnabled>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d113      	bne.n	80012d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff3e 	bl	8001130 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012b4:	4b86      	ldr	r3, [pc, #536]	; (80014d0 <HAL_ADC_Init+0x28c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	099b      	lsrs	r3, r3, #6
 80012ba:	4a86      	ldr	r2, [pc, #536]	; (80014d4 <HAL_ADC_Init+0x290>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	099b      	lsrs	r3, r3, #6
 80012c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff3e 	bl	8001158 <LL_ADC_IsInternalRegulatorEnabled>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10d      	bne.n	80012fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	f043 0210 	orr.w	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff77 	bl	80011f6 <LL_ADC_REG_IsConversionOngoing>
 8001308:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 80cf 	bne.w	80014b6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 80cb 	bne.w	80014b6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001328:	f043 0202 	orr.w	r2, r3, #2
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff37 	bl	80011a8 <LL_ADC_IsEnabled>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d115      	bne.n	800136c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001340:	4865      	ldr	r0, [pc, #404]	; (80014d8 <HAL_ADC_Init+0x294>)
 8001342:	f7ff ff31 	bl	80011a8 <LL_ADC_IsEnabled>
 8001346:	4604      	mov	r4, r0
 8001348:	4864      	ldr	r0, [pc, #400]	; (80014dc <HAL_ADC_Init+0x298>)
 800134a:	f7ff ff2d 	bl	80011a8 <LL_ADC_IsEnabled>
 800134e:	4603      	mov	r3, r0
 8001350:	431c      	orrs	r4, r3
 8001352:	4863      	ldr	r0, [pc, #396]	; (80014e0 <HAL_ADC_Init+0x29c>)
 8001354:	f7ff ff28 	bl	80011a8 <LL_ADC_IsEnabled>
 8001358:	4603      	mov	r3, r0
 800135a:	4323      	orrs	r3, r4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4619      	mov	r1, r3
 8001366:	485f      	ldr	r0, [pc, #380]	; (80014e4 <HAL_ADC_Init+0x2a0>)
 8001368:	f7ff fd88 	bl	8000e7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e5b      	ldrb	r3, [r3, #25]
 8001370:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001376:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800137c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001382:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d106      	bne.n	80013a8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	3b01      	subs	r3, #1
 80013a0:	045b      	lsls	r3, r3, #17
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d009      	beq.n	80013c4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_ADC_Init+0x2a4>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff0a 	bl	80011f6 <LL_ADC_REG_IsConversionOngoing>
 80013e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff17 	bl	800121c <LL_ADC_INJ_IsConversionOngoing>
 80013ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d13d      	bne.n	8001472 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001400:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001408:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001418:	f023 0302 	bic.w	r3, r3, #2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	69b9      	ldr	r1, [r7, #24]
 8001422:	430b      	orrs	r3, r1
 8001424:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142c:	2b01      	cmp	r3, #1
 800142e:	d118      	bne.n	8001462 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800143a:	f023 0304 	bic.w	r3, r3, #4
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001446:	4311      	orrs	r1, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800144c:	4311      	orrs	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001452:	430a      	orrs	r2, r1
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	e007      	b.n	8001472 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10c      	bne.n	8001494 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f023 010f 	bic.w	r1, r3, #15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
 8001492:	e007      	b.n	80014a4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 020f 	bic.w	r2, r2, #15
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	f023 0303 	bic.w	r3, r3, #3
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
 80014b4:	e007      	b.n	80014c6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	053e2d63 	.word	0x053e2d63
 80014d8:	50040000 	.word	0x50040000
 80014dc:	50040100 	.word	0x50040100
 80014e0:	50040200 	.word	0x50040200
 80014e4:	50040300 	.word	0x50040300
 80014e8:	fff0c007 	.word	0xfff0c007

080014ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014f4:	4857      	ldr	r0, [pc, #348]	; (8001654 <HAL_ADC_Start+0x168>)
 80014f6:	f7ff fdd9 	bl	80010ac <LL_ADC_GetMultimode>
 80014fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe78 	bl	80011f6 <LL_ADC_REG_IsConversionOngoing>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	f040 809c 	bne.w	8001646 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_ADC_Start+0x30>
 8001518:	2302      	movs	r3, #2
 800151a:	e097      	b.n	800164c <HAL_ADC_Start+0x160>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fd67 	bl	8001ff8 <ADC_Enable>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f040 8083 	bne.w	800163c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a42      	ldr	r2, [pc, #264]	; (8001658 <HAL_ADC_Start+0x16c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d002      	beq.n	800155a <HAL_ADC_Start+0x6e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	e000      	b.n	800155c <HAL_ADC_Start+0x70>
 800155a:	4b40      	ldr	r3, [pc, #256]	; (800165c <HAL_ADC_Start+0x170>)
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	4293      	cmp	r3, r2
 8001562:	d002      	beq.n	800156a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d105      	bne.n	8001576 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001582:	d106      	bne.n	8001592 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	f023 0206 	bic.w	r2, r3, #6
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	; 0x58
 8001590:	e002      	b.n	8001598 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	221c      	movs	r2, #28
 800159e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <HAL_ADC_Start+0x16c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d002      	beq.n	80015b8 <HAL_ADC_Start+0xcc>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	e000      	b.n	80015ba <HAL_ADC_Start+0xce>
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_ADC_Start+0x170>)
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d008      	beq.n	80015d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d002      	beq.n	80015d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d114      	bne.n	80015fe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fde9 	bl	80011ce <LL_ADC_REG_StartConversion>
 80015fc:	e025      	b.n	800164a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_ADC_Start+0x16c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d002      	beq.n	800161a <HAL_ADC_Start+0x12e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	e000      	b.n	800161c <HAL_ADC_Start+0x130>
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_ADC_Start+0x170>)
 800161c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00f      	beq.n	800164a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001632:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	; 0x54
 800163a:	e006      	b.n	800164a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001644:	e001      	b.n	800164a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	50040300 	.word	0x50040300
 8001658:	50040100 	.word	0x50040100
 800165c:	50040000 	.word	0x50040000

08001660 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800166a:	4862      	ldr	r0, [pc, #392]	; (80017f4 <HAL_ADC_PollForConversion+0x194>)
 800166c:	f7ff fd1e 	bl	80010ac <LL_ADC_GetMultimode>
 8001670:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b08      	cmp	r3, #8
 8001678:	d102      	bne.n	8001680 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800167a:	2308      	movs	r3, #8
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e02a      	b.n	80016d6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d002      	beq.n	8001692 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b09      	cmp	r3, #9
 8001690:	d111      	bne.n	80016b6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f043 0220 	orr.w	r2, r3, #32
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e09d      	b.n	80017ec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016b0:	2304      	movs	r3, #4
 80016b2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80016b4:	e00f      	b.n	80016d6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80016b6:	484f      	ldr	r0, [pc, #316]	; (80017f4 <HAL_ADC_PollForConversion+0x194>)
 80016b8:	f7ff fd06 	bl	80010c8 <LL_ADC_GetMultiDMATransfer>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e08c      	b.n	80017ec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016d2:	2304      	movs	r3, #4
 80016d4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016d6:	f7ff fba3 	bl	8000e20 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016dc:	e01a      	b.n	8001714 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d016      	beq.n	8001714 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016e6:	f7ff fb9b 	bl	8000e20 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d302      	bcc.n	80016fc <HAL_ADC_PollForConversion+0x9c>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10b      	bne.n	8001714 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	f043 0204 	orr.w	r2, r3, #4
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e06b      	b.n	80017ec <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0dd      	beq.n	80016de <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fc2b 	bl	8000f8e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01c      	beq.n	8001778 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7e5b      	ldrb	r3, [r3, #25]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d118      	bne.n	8001778 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b08      	cmp	r3, #8
 8001752:	d111      	bne.n	8001778 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <HAL_ADC_PollForConversion+0x198>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d002      	beq.n	8001788 <HAL_ADC_PollForConversion+0x128>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	e000      	b.n	800178a <HAL_ADC_PollForConversion+0x12a>
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_ADC_PollForConversion+0x19c>)
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	4293      	cmp	r3, r2
 8001790:	d008      	beq.n	80017a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d002      	beq.n	80017a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d104      	bne.n	80017ae <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	e00c      	b.n	80017c8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_ADC_PollForConversion+0x198>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d002      	beq.n	80017be <HAL_ADC_PollForConversion+0x15e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e000      	b.n	80017c0 <HAL_ADC_PollForConversion+0x160>
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_ADC_PollForConversion+0x19c>)
 80017c0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d104      	bne.n	80017d8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2208      	movs	r2, #8
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e008      	b.n	80017ea <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	50040300 	.word	0x50040300
 80017f8:	50040100 	.word	0x50040100
 80017fc:	50040000 	.word	0x50040000

08001800 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0b6      	sub	sp, #216	; 0xd8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x22>
 800183a:	2302      	movs	r3, #2
 800183c:	e3c6      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x7b0>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fcd3 	bl	80011f6 <LL_ADC_REG_IsConversionOngoing>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 83a7 	bne.w	8001fa6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d824      	bhi.n	80018aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	3b02      	subs	r3, #2
 8001866:	2b03      	cmp	r3, #3
 8001868:	d81b      	bhi.n	80018a2 <HAL_ADC_ConfigChannel+0x86>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_ADC_ConfigChannel+0x54>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001889 	.word	0x08001889
 8001878:	08001891 	.word	0x08001891
 800187c:	08001899 	.word	0x08001899
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	220c      	movs	r2, #12
 8001884:	605a      	str	r2, [r3, #4]
          break;
 8001886:	e011      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2212      	movs	r2, #18
 800188c:	605a      	str	r2, [r3, #4]
          break;
 800188e:	e00d      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2218      	movs	r2, #24
 8001894:	605a      	str	r2, [r3, #4]
          break;
 8001896:	e009      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189e:	605a      	str	r2, [r3, #4]
          break;
 80018a0:	e004      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2206      	movs	r2, #6
 80018a6:	605a      	str	r2, [r3, #4]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f7ff fb7b 	bl	8000fb4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc97 	bl	80011f6 <LL_ADC_REG_IsConversionOngoing>
 80018c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fca3 	bl	800121c <LL_ADC_INJ_IsConversionOngoing>
 80018d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 81a6 	bne.w	8001c30 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 81a1 	bne.w	8001c30 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f7ff fb86 	bl	800100c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00a      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001932:	f7ff fad7 	bl	8000ee4 <LL_ADC_SetOffset>
 8001936:	e17b      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff faf4 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x148>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fae9 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	0e9b      	lsrs	r3, r3, #26
 800195e:	f003 021f 	and.w	r2, r3, #31
 8001962:	e01e      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x186>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fade 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800198a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e004      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x19e>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	e018      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1d0>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019de:	2320      	movs	r3, #32
 80019e0:	e004      	b.n	80019ec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff faad 	bl	8000f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa91 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x20e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fa86 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	0e9b      	lsrs	r3, r3, #26
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	e01e      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x24c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fa7b 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e004      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x264>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	e018      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x296>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e004      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d106      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2101      	movs	r1, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fa4a 	bl	8000f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fa2e 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x2d4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fa23 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	0e9b      	lsrs	r3, r3, #26
 8001aea:	f003 021f 	and.w	r2, r3, #31
 8001aee:	e01e      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x312>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fa18 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e004      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x32a>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0e9b      	lsrs	r3, r3, #26
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	e016      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x358>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b66:	2320      	movs	r3, #32
 8001b68:	e004      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f9e9 	bl	8000f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f9cd 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x396>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f9c2 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	0e9b      	lsrs	r3, r3, #26
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	e017      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x3c6>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f9b7 	bl	8000f2c <LL_ADC_GetOffsetChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bcc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x3de>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	e011      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x402>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c12:	2320      	movs	r3, #32
 8001c14:	e003      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d106      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2103      	movs	r1, #3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f994 	bl	8000f58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fab7 	bl	80011a8 <LL_ADC_IsEnabled>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 813f 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7ff fa08 	bl	8001064 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a8e      	ldr	r2, [pc, #568]	; (8001e94 <HAL_ADC_ConfigChannel+0x678>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	f040 8130 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x46c>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e019      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x4a0>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	bf94      	ite	ls
 8001cb6:	2301      	movls	r3, #1
 8001cb8:	2300      	movhi	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d079      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x4c0>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	069b      	lsls	r3, r3, #26
 8001cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cda:	e015      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x4ec>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e003      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	069b      	lsls	r3, r3, #26
 8001d04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x50c>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	e017      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x53c>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d40:	2320      	movs	r3, #32
 8001d42:	e003      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	ea42 0103 	orr.w	r1, r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x562>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	051b      	lsls	r3, r3, #20
 8001d7c:	e018      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x594>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e003      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db0:	430b      	orrs	r3, r1
 8001db2:	e080      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x5b4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	069b      	lsls	r3, r3, #26
 8001dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dce:	e015      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x5e0>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e003      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	069b      	lsls	r3, r3, #26
 8001df8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x600>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	e017      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x630>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	61fb      	str	r3, [r7, #28]
  return result;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e003      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	ea42 0103 	orr.w	r1, r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x65c>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	3301      	adds	r3, #1
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b1e      	subs	r3, #30
 8001e70:	051b      	lsls	r3, r3, #20
 8001e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e76:	e01d      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x698>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	613b      	str	r3, [r7, #16]
  return result;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d103      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e005      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x684>
 8001e94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f003 021f 	and.w	r2, r3, #31
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	051b      	lsls	r3, r3, #20
 8001eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6892      	ldr	r2, [r2, #8]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7ff f8a6 	bl	800100c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d079      	beq.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ecc:	4842      	ldr	r0, [pc, #264]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ece:	f7fe fffb 	bl	8000ec8 <LL_ADC_GetCommonPathInternalCh>
 8001ed2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <HAL_ADC_ConfigChannel+0x7c0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d12b      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d125      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a3b      	ldr	r2, [pc, #236]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x6e4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d15c      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f0c:	f7fe ffc9 	bl	8000ea2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	4a35      	ldr	r2, [pc, #212]	; (8001fec <HAL_ADC_ConfigChannel+0x7d0>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	099a      	lsrs	r2, r3, #6
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f36:	e040      	b.n	8001fba <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ff0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d118      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x758>
 8001f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d112      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x746>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12d      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f6e:	f7fe ff98 	bl	8000ea2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f72:	e024      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d120      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d115      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001fa0:	f7fe ff7f 	bl	8000ea2 <LL_ADC_SetCommonPathInternalCh>
 8001fa4:	e00c      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fba:	bf00      	nop
 8001fbc:	e000      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fc8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	37d8      	adds	r7, #216	; 0xd8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	80080000 	.word	0x80080000
 8001fd8:	50040300 	.word	0x50040300
 8001fdc:	c7520000 	.word	0xc7520000
 8001fe0:	50040000 	.word	0x50040000
 8001fe4:	50040200 	.word	0x50040200
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	053e2d63 	.word	0x053e2d63
 8001ff0:	cb840000 	.word	0xcb840000
 8001ff4:	80000001 	.word	0x80000001

08001ff8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f8cf 	bl	80011a8 <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d146      	bne.n	800209e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <ADC_Enable+0xb0>)
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e032      	b.n	80020a0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f89e 	bl	8001180 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002044:	f7fe feec 	bl	8000e20 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800204a:	e021      	b.n	8002090 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f8a9 	bl	80011a8 <LL_ADC_IsEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f88d 	bl	8001180 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002066:	f7fe fedb 	bl	8000e20 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d90d      	bls.n	8002090 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f043 0210 	orr.w	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e007      	b.n	80020a0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d1d6      	bne.n	800204c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	8000003f 	.word	0x8000003f

080020ac <LL_ADC_IsEnabled>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <LL_ADC_IsEnabled+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_IsEnabled+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d101      	bne.n	80020ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b09f      	sub	sp, #124	; 0x7c
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002112:	2302      	movs	r3, #2
 8002114:	e08f      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a47      	ldr	r2, [pc, #284]	; (8002240 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d102      	bne.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	e001      	b.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10b      	bne.n	8002150 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e072      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ffbd 	bl	80020d2 <LL_ADC_REG_IsConversionOngoing>
 8002158:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ffb7 	bl	80020d2 <LL_ADC_REG_IsConversionOngoing>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d154      	bne.n	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800216a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800216c:	2b00      	cmp	r3, #0
 800216e:	d151      	bne.n	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002170:	4b35      	ldr	r3, [pc, #212]	; (8002248 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002172:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02c      	beq.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800217c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800218e:	035b      	lsls	r3, r3, #13
 8002190:	430b      	orrs	r3, r1
 8002192:	431a      	orrs	r2, r3
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002198:	4829      	ldr	r0, [pc, #164]	; (8002240 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800219a:	f7ff ff87 	bl	80020ac <LL_ADC_IsEnabled>
 800219e:	4604      	mov	r4, r0
 80021a0:	4828      	ldr	r0, [pc, #160]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80021a2:	f7ff ff83 	bl	80020ac <LL_ADC_IsEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	431c      	orrs	r4, r3
 80021aa:	4828      	ldr	r0, [pc, #160]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021ac:	f7ff ff7e 	bl	80020ac <LL_ADC_IsEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4323      	orrs	r3, r4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d137      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021c0:	f023 030f 	bic.w	r3, r3, #15
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	6811      	ldr	r1, [r2, #0]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	6892      	ldr	r2, [r2, #8]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d4:	e028      	b.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e2:	4817      	ldr	r0, [pc, #92]	; (8002240 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80021e4:	f7ff ff62 	bl	80020ac <LL_ADC_IsEnabled>
 80021e8:	4604      	mov	r4, r0
 80021ea:	4816      	ldr	r0, [pc, #88]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80021ec:	f7ff ff5e 	bl	80020ac <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	431c      	orrs	r4, r3
 80021f4:	4815      	ldr	r0, [pc, #84]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021f6:	f7ff ff59 	bl	80020ac <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4323      	orrs	r3, r4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d112      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800220a:	f023 030f 	bic.w	r3, r3, #15
 800220e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002210:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002212:	e009      	b.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002226:	e000      	b.n	800222a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002228:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002232:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002236:	4618      	mov	r0, r3
 8002238:	377c      	adds	r7, #124	; 0x7c
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	bf00      	nop
 8002240:	50040000 	.word	0x50040000
 8002244:	50040100 	.word	0x50040100
 8002248:	50040300 	.word	0x50040300
 800224c:	50040200 	.word	0x50040200

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <__NVIC_EnableIRQ+0x38>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff4c 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d2:	f7ff ff61 	bl	8002298 <__NVIC_GetPriorityGrouping>
 80023d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	6978      	ldr	r0, [r7, #20]
 80023de:	f7ff ffb1 	bl	8002344 <NVIC_EncodePriority>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff80 	bl	80022f0 <__NVIC_SetPriority>
}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff54 	bl	80022b4 <__NVIC_EnableIRQ>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	e17f      	b.n	8002724 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	4013      	ands	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8171 	beq.w	800271e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d00b      	beq.n	800245c <HAL_GPIO_Init+0x48>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002450:	2b11      	cmp	r3, #17
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d118      	bne.n	80024fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x128>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b12      	cmp	r3, #18
 800253a:	d123      	bne.n	8002584 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	6939      	ldr	r1, [r7, #16]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80ac 	beq.w	800271e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_GPIO_Init+0x32c>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	4a5d      	ldr	r2, [pc, #372]	; (8002740 <HAL_GPIO_Init+0x32c>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6613      	str	r3, [r2, #96]	; 0x60
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_GPIO_Init+0x32c>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025de:	4a59      	ldr	r2, [pc, #356]	; (8002744 <HAL_GPIO_Init+0x330>)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002608:	d025      	beq.n	8002656 <HAL_GPIO_Init+0x242>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4e      	ldr	r2, [pc, #312]	; (8002748 <HAL_GPIO_Init+0x334>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01f      	beq.n	8002652 <HAL_GPIO_Init+0x23e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_GPIO_Init+0x338>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x23a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <HAL_GPIO_Init+0x33c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x236>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <HAL_GPIO_Init+0x340>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x232>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <HAL_GPIO_Init+0x344>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x22e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a49      	ldr	r2, [pc, #292]	; (800275c <HAL_GPIO_Init+0x348>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x22a>
 800263a:	2306      	movs	r3, #6
 800263c:	e00c      	b.n	8002658 <HAL_GPIO_Init+0x244>
 800263e:	2307      	movs	r3, #7
 8002640:	e00a      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002642:	2305      	movs	r3, #5
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x244>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x244>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x244>
 8002656:	2300      	movs	r3, #0
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002668:	4936      	ldr	r1, [pc, #216]	; (8002744 <HAL_GPIO_Init+0x330>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002676:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_GPIO_Init+0x34c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800269a:	4a31      	ldr	r2, [pc, #196]	; (8002760 <HAL_GPIO_Init+0x34c>)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_GPIO_Init+0x34c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <HAL_GPIO_Init+0x34c>)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_GPIO_Init+0x34c>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_GPIO_Init+0x34c>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_GPIO_Init+0x34c>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002718:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_GPIO_Init+0x34c>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	f47f ae78 	bne.w	8002424 <HAL_GPIO_Init+0x10>
  }
}
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000
 8002748:	48000400 	.word	0x48000400
 800274c:	48000800 	.word	0x48000800
 8002750:	48000c00 	.word	0x48000c00
 8002754:	48001000 	.word	0x48001000
 8002758:	48001400 	.word	0x48001400
 800275c:	48001800 	.word	0x48001800
 8002760:	40010400 	.word	0x40010400

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002780:	e002      	b.n	8002788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43d9      	mvns	r1, r3
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	400b      	ands	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40007000 	.word	0x40007000

080027e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f2:	d130      	bne.n	8002856 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002800:	d038      	beq.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800280a:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2232      	movs	r2, #50	; 0x32
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0c9b      	lsrs	r3, r3, #18
 8002824:	3301      	adds	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002828:	e002      	b.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b01      	subs	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d102      	bne.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x60>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f2      	bne.n	800282a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d110      	bne.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e00f      	b.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d007      	beq.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800286c:	4a05      	ldr	r2, [pc, #20]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002872:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000
 8002888:	20000000 	.word	0x20000000
 800288c:	431bde83 	.word	0x431bde83

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e3d4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a2:	4ba1      	ldr	r3, [pc, #644]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ac:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80e4 	beq.w	8002a8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_RCC_OscConfig+0x4a>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	f040 808b 	bne.w	80029e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 8087 	bne.w	80029e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028da:	4b93      	ldr	r3, [pc, #588]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x62>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e3ac      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_RCC_OscConfig+0x7c>
 8002902:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290a:	e005      	b.n	8002918 <HAL_RCC_OscConfig+0x88>
 800290c:	4b86      	ldr	r3, [pc, #536]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002918:	4293      	cmp	r3, r2
 800291a:	d223      	bcs.n	8002964 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fd71 	bl	8003408 <RCC_SetFlashLatencyFromMSIRange>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e38d      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002930:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4977      	ldr	r1, [pc, #476]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4972      	ldr	r1, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e025      	b.n	80029b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002964:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6f      	ldr	r2, [pc, #444]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	496a      	ldr	r1, [pc, #424]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002982:	4b69      	ldr	r3, [pc, #420]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	4965      	ldr	r1, [pc, #404]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fd31 	bl	8003408 <RCC_SetFlashLatencyFromMSIRange>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e34d      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b0:	f000 fc36 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80029b4:	4601      	mov	r1, r0
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	4a5a      	ldr	r2, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x29c>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa21 f303 	lsr.w	r3, r1, r3
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_RCC_OscConfig+0x2a0>)
 80029ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d0:	4b58      	ldr	r3, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x2a4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f8df 	bl	8000b98 <HAL_InitTick>
 80029da:	4603      	mov	r3, r0
 80029dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d052      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	e331      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d032      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f0:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fa10 	bl	8000e20 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a04:	f7fe fa0c 	bl	8000e20 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e31a      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	493b      	ldr	r1, [pc, #236]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4936      	ldr	r1, [pc, #216]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	e01a      	b.n	8002a8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a33      	ldr	r2, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a62:	f7fe f9dd 	bl	8000e20 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6a:	f7fe f9d9 	bl	8000e20 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e2e7      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1da>
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d074      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x21a>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d064      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d160      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e2c4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x24a>
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e01d      	b.n	8002b16 <HAL_RCC_OscConfig+0x286>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae2:	d10c      	bne.n	8002afe <HAL_RCC_OscConfig+0x26e>
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e00b      	b.n	8002b16 <HAL_RCC_OscConfig+0x286>
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x298>)
 8002b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe f97f 	bl	8000e20 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b24:	e011      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08008164 	.word	0x08008164
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe f972 	bl	8000e20 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e280      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4a:	4baf      	ldr	r3, [pc, #700]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2a8>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe f962 	bl	8000e20 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe f95e 	bl	8000e20 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e26c      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	4ba5      	ldr	r3, [pc, #660]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d0>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d060      	beq.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x310>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d116      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	4b99      	ldr	r3, [pc, #612]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x328>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e249      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	4990      	ldr	r1, [pc, #576]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	e040      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd6:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a8b      	ldr	r2, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe f91d 	bl	8000e20 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe f919 	bl	8000e20 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e227      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	497c      	ldr	r1, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a79      	ldr	r2, [pc, #484]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f8f9 	bl	8000e20 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe f8f5 	bl	8000e20 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e203      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6a:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe f8d4 	bl	8000e20 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe f8d0 	bl	8000e20 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1de      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3ec>
 8002c9c:	e01b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe f8b7 	bl	8000e20 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe f8b3 	bl	8000e20 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1c1      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ef      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a6 	beq.w	8002e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	4a43      	ldr	r2, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d28:	f7fe f87a 	bl	8000e20 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fe f876 	bl	8000e20 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e184      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCC_OscConfig+0x57c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4d8>
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	4a2a      	ldr	r2, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d66:	e024      	b.n	8002db2 <HAL_RCC_OscConfig+0x522>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d110      	bne.n	8002d92 <HAL_RCC_OscConfig+0x502>
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d90:	e00f      	b.n	8002db2 <HAL_RCC_OscConfig+0x522>
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe f831 	bl	8000e20 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe f82d 	bl	8000e20 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e139      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x578>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ed      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x532>
 8002de6:	e01a      	b.n	8002e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe f81a 	bl	8000e20 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe f816 	bl	8000e20 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d906      	bls.n	8002e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e122      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e10:	4b90      	ldr	r3, [pc, #576]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e8      	bne.n	8002df0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e24:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a8a      	ldr	r2, [pc, #552]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8108 	beq.w	800304a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	f040 80d0 	bne.w	8002fe4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e44:	4b83      	ldr	r3, [pc, #524]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d130      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	3b01      	subs	r3, #1
 8002e64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d127      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11f      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e84:	2a07      	cmp	r2, #7
 8002e86:	bf14      	ite	ne
 8002e88:	2201      	movne	r2, #1
 8002e8a:	2200      	moveq	r2, #0
 8002e8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d113      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d109      	bne.n	8002eba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d06e      	beq.n	8002f98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d069      	beq.n	8002f94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ecc:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b7      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002edc:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee8:	f7fd ff9a 	bl	8000e20 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fd ff96 	bl	8000e20 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0a4      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f02:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0e:	4b51      	ldr	r3, [pc, #324]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	4b51      	ldr	r3, [pc, #324]	; (8003058 <HAL_RCC_OscConfig+0x7c8>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f1e:	3a01      	subs	r2, #1
 8002f20:	0112      	lsls	r2, r2, #4
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f28:	0212      	lsls	r2, r2, #8
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f30:	0852      	lsrs	r2, r2, #1
 8002f32:	3a01      	subs	r2, #1
 8002f34:	0552      	lsls	r2, r2, #21
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f3c:	0852      	lsrs	r2, r2, #1
 8002f3e:	3a01      	subs	r2, #1
 8002f40:	0652      	lsls	r2, r2, #25
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f48:	0912      	lsrs	r2, r2, #4
 8002f4a:	0452      	lsls	r2, r2, #17
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	4941      	ldr	r1, [pc, #260]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a3b      	ldr	r2, [pc, #236]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f6c:	f7fd ff58 	bl	8000e20 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fd ff54 	bl	8000e20 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e062      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f92:	e05a      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e059      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d152      	bne.n	800304a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a27      	ldr	r2, [pc, #156]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fbc:	f7fd ff30 	bl	8000e20 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fd ff2c 	bl	8000e20 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e03a      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x734>
 8002fe2:	e032      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d02d      	beq.n	8003046 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003008:	f023 0303 	bic.w	r3, r3, #3
 800300c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4a10      	ldr	r2, [pc, #64]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 8003014:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fd feff 	bl	8000e20 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003026:	f7fd fefb 	bl	8000e20 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e009      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_OscConfig+0x7c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x796>
 8003044:	e001      	b.n	800304a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	f99d808c 	.word	0xf99d808c

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0c8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d910      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 0207 	bic.w	r2, r3, #7
 8003086:	4961      	ldr	r1, [pc, #388]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0b0      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d04c      	beq.n	8003146 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b4:	4b56      	ldr	r3, [pc, #344]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d121      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e09e      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e092      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e086      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e07e      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	493f      	ldr	r1, [pc, #252]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003116:	f7fd fe83 	bl	8000e20 <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	e00a      	b.n	8003134 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7fd fe7f 	bl	8000e20 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e066      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 020c 	and.w	r2, r3, #12
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	429a      	cmp	r2, r3
 8003144:	d1eb      	bne.n	800311e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	492c      	ldr	r1, [pc, #176]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d210      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	4924      	ldr	r1, [pc, #144]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_ClockConfig+0x1b0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e036      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4918      	ldr	r1, [pc, #96]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4910      	ldr	r1, [pc, #64]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031d2:	f000 f825 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031d6:	4601      	mov	r1, r0
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_RCC_ClockConfig+0x1b4>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	fa21 f303 	lsr.w	r3, r1, r3
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd fcce 	bl	8000b98 <HAL_InitTick>
 80031fc:	4603      	mov	r3, r0
 80031fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003200:	7afb      	ldrb	r3, [r7, #11]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
 8003214:	08008164 	.word	0x08008164
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003238:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d121      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d11e      	bne.n	8003292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e005      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d102      	bne.n	800329e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCC_GetSysClockFreq+0x10c>)
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e004      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_GetSysClockFreq+0x110>)
 80032a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d133      	bne.n	8003316 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0xaa>
 80032c2:	e005      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032c6:	617b      	str	r3, [r7, #20]
      break;
 80032c8:	e005      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_RCC_GetSysClockFreq+0x110>)
 80032cc:	617b      	str	r3, [r7, #20]
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	617b      	str	r3, [r7, #20]
      break;
 80032d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	3301      	adds	r3, #1
 80032e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	fb02 f203 	mul.w	r2, r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_GetSysClockFreq+0x104>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0e5b      	lsrs	r3, r3, #25
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	3301      	adds	r3, #1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003316:	69bb      	ldr	r3, [r7, #24]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3724      	adds	r7, #36	; 0x24
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40021000 	.word	0x40021000
 8003328:	0800817c 	.word	0x0800817c
 800332c:	00f42400 	.word	0x00f42400
 8003330:	007a1200 	.word	0x007a1200

08003334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_RCC_GetHCLKFreq+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000000 	.word	0x20000000

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003350:	f7ff fff0 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003354:	4601      	mov	r1, r0
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08008174 	.word	0x08008174

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800337c:	f7ff ffda 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003380:	4601      	mov	r1, r0
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	08008174 	.word	0x08008174

080033a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	220f      	movs	r2, #15
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_RCC_GetClockConfig+0x5c>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0203 	and.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <HAL_RCC_GetClockConfig+0x5c>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_RCC_GetClockConfig+0x5c>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_RCC_GetClockConfig+0x5c>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	08db      	lsrs	r3, r3, #3
 80033de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCC_GetClockConfig+0x60>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0207 	and.w	r2, r3, #7
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	601a      	str	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	40022000 	.word	0x40022000

08003408 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003420:	f7ff f9d2 	bl	80027c8 <HAL_PWREx_GetVoltageRange>
 8003424:	6178      	str	r0, [r7, #20]
 8003426:	e014      	b.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003432:	6593      	str	r3, [r2, #88]	; 0x58
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003440:	f7ff f9c2 	bl	80027c8 <HAL_PWREx_GetVoltageRange>
 8003444:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003458:	d10b      	bne.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d919      	bls.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2ba0      	cmp	r3, #160	; 0xa0
 8003464:	d902      	bls.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003466:	2302      	movs	r3, #2
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	e013      	b.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800346c:	2301      	movs	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	e010      	b.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d902      	bls.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003478:	2303      	movs	r3, #3
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	e00a      	b.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	d102      	bne.n	800348a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003484:	2302      	movs	r3, #2
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	e004      	b.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b70      	cmp	r3, #112	; 0x70
 800348e:	d101      	bne.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003490:	2301      	movs	r3, #1
 8003492:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 0207 	bic.w	r2, r3, #7
 800349c:	4909      	ldr	r1, [pc, #36]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d001      	beq.n	80034b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40022000 	.word	0x40022000

080034c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d0:	2300      	movs	r3, #0
 80034d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d4:	2300      	movs	r3, #0
 80034d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ec:	d01c      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80034ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f2:	d802      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80034f8:	e01f      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80034fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fe:	d003      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003504:	d01c      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003506:	e018      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003508:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a84      	ldr	r2, [pc, #528]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800350e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003512:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003514:	e015      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fab9 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003526:	e00c      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3320      	adds	r3, #32
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fba0 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	74fb      	strb	r3, [r7, #19]
      break;
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003548:	4b75      	ldr	r3, [pc, #468]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003556:	4972      	ldr	r1, [pc, #456]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800355e:	e001      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003578:	d01c      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800357a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357e:	d802      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003584:	e01f      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800358a:	d003      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800358c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003590:	d01c      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003592:	e018      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a61      	ldr	r2, [pc, #388]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a0:	e015      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fa73 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b2:	e00c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3320      	adds	r3, #32
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fb5a 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	74fb      	strb	r3, [r7, #19]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035d4:	4b52      	ldr	r3, [pc, #328]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e2:	494f      	ldr	r1, [pc, #316]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ea:	e001      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80a0 	beq.w	800373e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	4a40      	ldr	r2, [pc, #256]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003622:	6593      	str	r3, [r2, #88]	; 0x58
 8003624:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003630:	2301      	movs	r3, #1
 8003632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3a      	ldr	r2, [pc, #232]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003640:	f7fd fbee 	bl	8000e20 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003646:	e009      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fd fbea 	bl	8000e20 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	74fb      	strb	r3, [r7, #19]
        break;
 800365a:	e005      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800365c:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ef      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d15c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01f      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d019      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	4a20      	ldr	r2, [pc, #128]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b8:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fd fba9 	bl	8000e20 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d0:	e00b      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fd fba5 	bl	8000e20 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d902      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	74fb      	strb	r3, [r7, #19]
            break;
 80036e8:	e006      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ec      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370e:	4904      	ldr	r1, [pc, #16]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003716:	e009      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
 800371c:	e006      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372c:	7c7b      	ldrb	r3, [r7, #17]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003732:	4b9e      	ldr	r3, [pc, #632]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a9d      	ldr	r2, [pc, #628]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374a:	4b98      	ldr	r3, [pc, #608]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f023 0203 	bic.w	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	4994      	ldr	r1, [pc, #592]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800376c:	4b8f      	ldr	r3, [pc, #572]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 020c 	bic.w	r2, r3, #12
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	498c      	ldr	r1, [pc, #560]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800378e:	4b87      	ldr	r3, [pc, #540]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4983      	ldr	r1, [pc, #524]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b0:	4b7e      	ldr	r3, [pc, #504]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	497b      	ldr	r1, [pc, #492]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d2:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	4972      	ldr	r1, [pc, #456]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f4:	4b6d      	ldr	r3, [pc, #436]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	496a      	ldr	r1, [pc, #424]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	4961      	ldr	r1, [pc, #388]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003838:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	4959      	ldr	r1, [pc, #356]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003868:	4950      	ldr	r1, [pc, #320]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	4948      	ldr	r1, [pc, #288]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	493f      	ldr	r1, [pc, #252]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d028      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c0:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ce:	4937      	ldr	r1, [pc, #220]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038de:	d106      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a31      	ldr	r2, [pc, #196]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ea:	60d3      	str	r3, [r2, #12]
 80038ec:	e011      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f6:	d10c      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	2101      	movs	r1, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f8c8 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d028      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	491f      	ldr	r1, [pc, #124]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393c:	d106      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003948:	60d3      	str	r3, [r2, #12]
 800394a:	e011      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003954:	d10c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f899 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a02      	ldr	r2, [pc, #8]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a6:	60d3      	str	r3, [r2, #12]
 80039a8:	e014      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f867 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02f      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	4928      	ldr	r1, [pc, #160]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	2102      	movs	r1, #2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f844 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d014      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	74bb      	strb	r3, [r7, #18]
 8003a1a:	e011      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3320      	adds	r3, #32
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f921 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5a:	490d      	ldr	r1, [pc, #52]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	4904      	ldr	r1, [pc, #16]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000

08003a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aa2:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d018      	beq.n	8003ae0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aae:	4b70      	ldr	r3, [pc, #448]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0203 	and.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d10d      	bne.n	8003ada <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d044      	beq.n	8003b64 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e041      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d00c      	beq.n	8003b02 <RCCEx_PLLSAI1_Config+0x6e>
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d013      	beq.n	8003b14 <RCCEx_PLLSAI1_Config+0x80>
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d120      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003af0:	4b5f      	ldr	r3, [pc, #380]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11d      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b00:	e01a      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b12:	e013      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b14:	4b56      	ldr	r3, [pc, #344]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10f      	bne.n	8003b40 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b30:	e006      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
      break;
 8003b36:	e004      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b38:	bf00      	nop
 8003b3a:	e002      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b40:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10d      	bne.n	8003b64 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b48:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	4944      	ldr	r1, [pc, #272]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d17d      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b6a:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a40      	ldr	r2, [pc, #256]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b76:	f7fd f953 	bl	8000e20 <HAL_GetTick>
 8003b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b7c:	e009      	b.n	8003b92 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b7e:	f7fd f94f 	bl	8000e20 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d902      	bls.n	8003b92 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b90:	e005      	b.n	8003b9e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ef      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d160      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d111      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	0211      	lsls	r1, r2, #8
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68d2      	ldr	r2, [r2, #12]
 8003bc0:	0912      	lsrs	r2, r2, #4
 8003bc2:	0452      	lsls	r2, r2, #17
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	492a      	ldr	r1, [pc, #168]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	610b      	str	r3, [r1, #16]
 8003bcc:	e027      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d112      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd4:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6892      	ldr	r2, [r2, #8]
 8003be4:	0211      	lsls	r1, r2, #8
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6912      	ldr	r2, [r2, #16]
 8003bea:	0852      	lsrs	r2, r2, #1
 8003bec:	3a01      	subs	r2, #1
 8003bee:	0552      	lsls	r2, r2, #21
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	491f      	ldr	r1, [pc, #124]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	610b      	str	r3, [r1, #16]
 8003bf8:	e011      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6892      	ldr	r2, [r2, #8]
 8003c0a:	0211      	lsls	r1, r2, #8
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6952      	ldr	r2, [r2, #20]
 8003c10:	0852      	lsrs	r2, r2, #1
 8003c12:	3a01      	subs	r2, #1
 8003c14:	0652      	lsls	r2, r2, #25
 8003c16:	430a      	orrs	r2, r1
 8003c18:	4915      	ldr	r1, [pc, #84]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fd f8f9 	bl	8000e20 <HAL_GetTick>
 8003c2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c30:	e009      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c32:	f7fd f8f5 	bl	8000e20 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d902      	bls.n	8003c46 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	73fb      	strb	r3, [r7, #15]
          break;
 8003c44:	e005      	b.n	8003c52 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ef      	beq.n	8003c32 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000

08003c74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c82:	4b68      	ldr	r3, [pc, #416]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c8e:	4b65      	ldr	r3, [pc, #404]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0203 	and.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d10d      	bne.n	8003cba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d044      	beq.n	8003d44 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	e041      	b.n	8003d44 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d00c      	beq.n	8003ce2 <RCCEx_PLLSAI2_Config+0x6e>
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d013      	beq.n	8003cf4 <RCCEx_PLLSAI2_Config+0x80>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d120      	bne.n	8003d12 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd0:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11d      	bne.n	8003d18 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce0:	e01a      	b.n	8003d18 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce2:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf2:	e013      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf4:	4b4b      	ldr	r3, [pc, #300]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10f      	bne.n	8003d20 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d00:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d10:	e006      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      break;
 8003d16:	e004      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d18:	bf00      	nop
 8003d1a:	e002      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003d20:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d28:	4b3e      	ldr	r3, [pc, #248]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	4939      	ldr	r1, [pc, #228]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d167      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a35      	ldr	r2, [pc, #212]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d56:	f7fd f863 	bl	8000e20 <HAL_GetTick>
 8003d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d5c:	e009      	b.n	8003d72 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d5e:	f7fd f85f 	bl	8000e20 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d902      	bls.n	8003d72 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	73fb      	strb	r3, [r7, #15]
        break;
 8003d70:	e005      	b.n	8003d7e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d72:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ef      	bne.n	8003d5e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d14a      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d111      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6892      	ldr	r2, [r2, #8]
 8003d9a:	0211      	lsls	r1, r2, #8
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68d2      	ldr	r2, [r2, #12]
 8003da0:	0912      	lsrs	r2, r2, #4
 8003da2:	0452      	lsls	r2, r2, #17
 8003da4:	430a      	orrs	r2, r1
 8003da6:	491f      	ldr	r1, [pc, #124]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	614b      	str	r3, [r1, #20]
 8003dac:	e011      	b.n	8003dd2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003db6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6892      	ldr	r2, [r2, #8]
 8003dbe:	0211      	lsls	r1, r2, #8
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6912      	ldr	r2, [r2, #16]
 8003dc4:	0852      	lsrs	r2, r2, #1
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	0652      	lsls	r2, r2, #25
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	4915      	ldr	r1, [pc, #84]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fd f81f 	bl	8000e20 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003de4:	e009      	b.n	8003dfa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de6:	f7fd f81b 	bl	8000e20 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d902      	bls.n	8003dfa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	73fb      	strb	r3, [r7, #15]
          break;
 8003df8:	e005      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ef      	beq.n	8003de6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e049      	b.n	8003ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f841 	bl	8003ed6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 f9f8 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d001      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e04f      	b.n	8003fa4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01d      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d018      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d115      	bne.n	8003f8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d015      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d011      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8c:	e008      	b.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e000      	b.n	8003fa2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	00010007 	.word	0x00010007

08003fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0202 	mvn.w	r2, #2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f905 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8f7 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f908 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0204 	mvn.w	r2, #4
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8db 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8cd 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8de 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b08      	cmp	r3, #8
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b08      	cmp	r3, #8
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0208 	mvn.w	r2, #8
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2204      	movs	r2, #4
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8b1 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8a3 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8b4 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d122      	bne.n	8004124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d11b      	bne.n	8004124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0210 	mvn.w	r2, #16
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2208      	movs	r2, #8
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f887 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f879 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f88a 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0201 	mvn.w	r2, #1
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fc62 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d10e      	bne.n	800417c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d107      	bne.n	800417c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f914 	bl	80043a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418a:	d10e      	bne.n	80041aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d107      	bne.n	80041aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f907 	bl	80043b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d10e      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d107      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f838 	bl	8004246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d10e      	bne.n	8004202 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d107      	bne.n	8004202 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f06f 0220 	mvn.w	r2, #32
 80041fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f8c7 	bl	8004390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a40      	ldr	r2, [pc, #256]	; (8004370 <TIM_Base_SetConfig+0x114>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d00f      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a3d      	ldr	r2, [pc, #244]	; (8004374 <TIM_Base_SetConfig+0x118>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00b      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <TIM_Base_SetConfig+0x11c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d007      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a3b      	ldr	r2, [pc, #236]	; (800437c <TIM_Base_SetConfig+0x120>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3a      	ldr	r2, [pc, #232]	; (8004380 <TIM_Base_SetConfig+0x124>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <TIM_Base_SetConfig+0x114>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	; (8004374 <TIM_Base_SetConfig+0x118>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <TIM_Base_SetConfig+0x11c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2a      	ldr	r2, [pc, #168]	; (800437c <TIM_Base_SetConfig+0x120>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a29      	ldr	r2, [pc, #164]	; (8004380 <TIM_Base_SetConfig+0x124>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a28      	ldr	r2, [pc, #160]	; (8004384 <TIM_Base_SetConfig+0x128>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a27      	ldr	r2, [pc, #156]	; (8004388 <TIM_Base_SetConfig+0x12c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a26      	ldr	r2, [pc, #152]	; (800438c <TIM_Base_SetConfig+0x130>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a10      	ldr	r2, [pc, #64]	; (8004370 <TIM_Base_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <TIM_Base_SetConfig+0x124>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a11      	ldr	r2, [pc, #68]	; (8004384 <TIM_Base_SetConfig+0x128>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <TIM_Base_SetConfig+0x12c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a0f      	ldr	r2, [pc, #60]	; (800438c <TIM_Base_SetConfig+0x130>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d103      	bne.n	800435c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	615a      	str	r2, [r3, #20]
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40013400 	.word	0x40013400
 8004384:	40014000 	.word	0x40014000
 8004388:	40014400 	.word	0x40014400
 800438c:	40014800 	.word	0x40014800

08004390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e040      	b.n	8004460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fb90 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8c0 	bl	8004590 <UART_SetConfig>
 8004410:	4603      	mov	r3, r0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e022      	b.n	8004460 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fb3e 	bl	8004aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fbc5 	bl	8004be8 <UART_CheckIdleState>
 800445e:	4603      	mov	r3, r0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447c:	2b20      	cmp	r3, #32
 800447e:	f040 8081 	bne.w	8004584 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_UART_Transmit+0x26>
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e079      	b.n	8004586 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_UART_Transmit+0x38>
 800449c:	2302      	movs	r3, #2
 800449e:	e072      	b.n	8004586 <HAL_UART_Transmit+0x11e>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2221      	movs	r2, #33	; 0x21
 80044b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80044b4:	f7fc fcb4 	bl	8000e20 <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	88fa      	ldrh	r2, [r7, #6]
 80044c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	d108      	bne.n	80044e6 <HAL_UART_Transmit+0x7e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	e003      	b.n	80044ee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80044f6:	e02d      	b.n	8004554 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fbb5 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e039      	b.n	8004586 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	881a      	ldrh	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004524:	b292      	uxth	r2, r2
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3302      	adds	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e008      	b.n	8004542 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b292      	uxth	r2, r2
 800453a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3301      	adds	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1cb      	bne.n	80044f8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fb81 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e005      	b.n	8004586 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004590:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004594:	b088      	sub	sp, #32
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4bac      	ldr	r3, [pc, #688]	; (8004870 <UART_SetConfig+0x2e0>)
 80045be:	4013      	ands	r3, r2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	69f9      	ldr	r1, [r7, #28]
 80045c6:	430b      	orrs	r3, r1
 80045c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4aa2      	ldr	r2, [pc, #648]	; (8004874 <UART_SetConfig+0x2e4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a99      	ldr	r2, [pc, #612]	; (8004878 <UART_SetConfig+0x2e8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d121      	bne.n	800465c <UART_SetConfig+0xcc>
 8004618:	4b98      	ldr	r3, [pc, #608]	; (800487c <UART_SetConfig+0x2ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b03      	cmp	r3, #3
 8004624:	d816      	bhi.n	8004654 <UART_SetConfig+0xc4>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x9c>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	0800463d 	.word	0x0800463d
 8004630:	08004649 	.word	0x08004649
 8004634:	08004643 	.word	0x08004643
 8004638:	0800464f 	.word	0x0800464f
 800463c:	2301      	movs	r3, #1
 800463e:	76fb      	strb	r3, [r7, #27]
 8004640:	e0e8      	b.n	8004814 <UART_SetConfig+0x284>
 8004642:	2302      	movs	r3, #2
 8004644:	76fb      	strb	r3, [r7, #27]
 8004646:	e0e5      	b.n	8004814 <UART_SetConfig+0x284>
 8004648:	2304      	movs	r3, #4
 800464a:	76fb      	strb	r3, [r7, #27]
 800464c:	e0e2      	b.n	8004814 <UART_SetConfig+0x284>
 800464e:	2308      	movs	r3, #8
 8004650:	76fb      	strb	r3, [r7, #27]
 8004652:	e0df      	b.n	8004814 <UART_SetConfig+0x284>
 8004654:	2310      	movs	r3, #16
 8004656:	76fb      	strb	r3, [r7, #27]
 8004658:	bf00      	nop
 800465a:	e0db      	b.n	8004814 <UART_SetConfig+0x284>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a87      	ldr	r2, [pc, #540]	; (8004880 <UART_SetConfig+0x2f0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d134      	bne.n	80046d0 <UART_SetConfig+0x140>
 8004666:	4b85      	ldr	r3, [pc, #532]	; (800487c <UART_SetConfig+0x2ec>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d829      	bhi.n	80046c8 <UART_SetConfig+0x138>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0xec>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046b1 	.word	0x080046b1
 8004680:	080046c9 	.word	0x080046c9
 8004684:	080046c9 	.word	0x080046c9
 8004688:	080046c9 	.word	0x080046c9
 800468c:	080046bd 	.word	0x080046bd
 8004690:	080046c9 	.word	0x080046c9
 8004694:	080046c9 	.word	0x080046c9
 8004698:	080046c9 	.word	0x080046c9
 800469c:	080046b7 	.word	0x080046b7
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046c9 	.word	0x080046c9
 80046ac:	080046c3 	.word	0x080046c3
 80046b0:	2300      	movs	r3, #0
 80046b2:	76fb      	strb	r3, [r7, #27]
 80046b4:	e0ae      	b.n	8004814 <UART_SetConfig+0x284>
 80046b6:	2302      	movs	r3, #2
 80046b8:	76fb      	strb	r3, [r7, #27]
 80046ba:	e0ab      	b.n	8004814 <UART_SetConfig+0x284>
 80046bc:	2304      	movs	r3, #4
 80046be:	76fb      	strb	r3, [r7, #27]
 80046c0:	e0a8      	b.n	8004814 <UART_SetConfig+0x284>
 80046c2:	2308      	movs	r3, #8
 80046c4:	76fb      	strb	r3, [r7, #27]
 80046c6:	e0a5      	b.n	8004814 <UART_SetConfig+0x284>
 80046c8:	2310      	movs	r3, #16
 80046ca:	76fb      	strb	r3, [r7, #27]
 80046cc:	bf00      	nop
 80046ce:	e0a1      	b.n	8004814 <UART_SetConfig+0x284>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a6b      	ldr	r2, [pc, #428]	; (8004884 <UART_SetConfig+0x2f4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d120      	bne.n	800471c <UART_SetConfig+0x18c>
 80046da:	4b68      	ldr	r3, [pc, #416]	; (800487c <UART_SetConfig+0x2ec>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d00f      	beq.n	8004708 <UART_SetConfig+0x178>
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d802      	bhi.n	80046f2 <UART_SetConfig+0x162>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <UART_SetConfig+0x16c>
 80046f0:	e010      	b.n	8004714 <UART_SetConfig+0x184>
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d005      	beq.n	8004702 <UART_SetConfig+0x172>
 80046f6:	2b30      	cmp	r3, #48	; 0x30
 80046f8:	d009      	beq.n	800470e <UART_SetConfig+0x17e>
 80046fa:	e00b      	b.n	8004714 <UART_SetConfig+0x184>
 80046fc:	2300      	movs	r3, #0
 80046fe:	76fb      	strb	r3, [r7, #27]
 8004700:	e088      	b.n	8004814 <UART_SetConfig+0x284>
 8004702:	2302      	movs	r3, #2
 8004704:	76fb      	strb	r3, [r7, #27]
 8004706:	e085      	b.n	8004814 <UART_SetConfig+0x284>
 8004708:	2304      	movs	r3, #4
 800470a:	76fb      	strb	r3, [r7, #27]
 800470c:	e082      	b.n	8004814 <UART_SetConfig+0x284>
 800470e:	2308      	movs	r3, #8
 8004710:	76fb      	strb	r3, [r7, #27]
 8004712:	e07f      	b.n	8004814 <UART_SetConfig+0x284>
 8004714:	2310      	movs	r3, #16
 8004716:	76fb      	strb	r3, [r7, #27]
 8004718:	bf00      	nop
 800471a:	e07b      	b.n	8004814 <UART_SetConfig+0x284>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a59      	ldr	r2, [pc, #356]	; (8004888 <UART_SetConfig+0x2f8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d120      	bne.n	8004768 <UART_SetConfig+0x1d8>
 8004726:	4b55      	ldr	r3, [pc, #340]	; (800487c <UART_SetConfig+0x2ec>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d00f      	beq.n	8004754 <UART_SetConfig+0x1c4>
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d802      	bhi.n	800473e <UART_SetConfig+0x1ae>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <UART_SetConfig+0x1b8>
 800473c:	e010      	b.n	8004760 <UART_SetConfig+0x1d0>
 800473e:	2b80      	cmp	r3, #128	; 0x80
 8004740:	d005      	beq.n	800474e <UART_SetConfig+0x1be>
 8004742:	2bc0      	cmp	r3, #192	; 0xc0
 8004744:	d009      	beq.n	800475a <UART_SetConfig+0x1ca>
 8004746:	e00b      	b.n	8004760 <UART_SetConfig+0x1d0>
 8004748:	2300      	movs	r3, #0
 800474a:	76fb      	strb	r3, [r7, #27]
 800474c:	e062      	b.n	8004814 <UART_SetConfig+0x284>
 800474e:	2302      	movs	r3, #2
 8004750:	76fb      	strb	r3, [r7, #27]
 8004752:	e05f      	b.n	8004814 <UART_SetConfig+0x284>
 8004754:	2304      	movs	r3, #4
 8004756:	76fb      	strb	r3, [r7, #27]
 8004758:	e05c      	b.n	8004814 <UART_SetConfig+0x284>
 800475a:	2308      	movs	r3, #8
 800475c:	76fb      	strb	r3, [r7, #27]
 800475e:	e059      	b.n	8004814 <UART_SetConfig+0x284>
 8004760:	2310      	movs	r3, #16
 8004762:	76fb      	strb	r3, [r7, #27]
 8004764:	bf00      	nop
 8004766:	e055      	b.n	8004814 <UART_SetConfig+0x284>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a47      	ldr	r2, [pc, #284]	; (800488c <UART_SetConfig+0x2fc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d124      	bne.n	80047bc <UART_SetConfig+0x22c>
 8004772:	4b42      	ldr	r3, [pc, #264]	; (800487c <UART_SetConfig+0x2ec>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d012      	beq.n	80047a8 <UART_SetConfig+0x218>
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	d802      	bhi.n	800478e <UART_SetConfig+0x1fe>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <UART_SetConfig+0x20c>
 800478c:	e012      	b.n	80047b4 <UART_SetConfig+0x224>
 800478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004792:	d006      	beq.n	80047a2 <UART_SetConfig+0x212>
 8004794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004798:	d009      	beq.n	80047ae <UART_SetConfig+0x21e>
 800479a:	e00b      	b.n	80047b4 <UART_SetConfig+0x224>
 800479c:	2300      	movs	r3, #0
 800479e:	76fb      	strb	r3, [r7, #27]
 80047a0:	e038      	b.n	8004814 <UART_SetConfig+0x284>
 80047a2:	2302      	movs	r3, #2
 80047a4:	76fb      	strb	r3, [r7, #27]
 80047a6:	e035      	b.n	8004814 <UART_SetConfig+0x284>
 80047a8:	2304      	movs	r3, #4
 80047aa:	76fb      	strb	r3, [r7, #27]
 80047ac:	e032      	b.n	8004814 <UART_SetConfig+0x284>
 80047ae:	2308      	movs	r3, #8
 80047b0:	76fb      	strb	r3, [r7, #27]
 80047b2:	e02f      	b.n	8004814 <UART_SetConfig+0x284>
 80047b4:	2310      	movs	r3, #16
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	bf00      	nop
 80047ba:	e02b      	b.n	8004814 <UART_SetConfig+0x284>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <UART_SetConfig+0x2e4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d124      	bne.n	8004810 <UART_SetConfig+0x280>
 80047c6:	4b2d      	ldr	r3, [pc, #180]	; (800487c <UART_SetConfig+0x2ec>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d4:	d012      	beq.n	80047fc <UART_SetConfig+0x26c>
 80047d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047da:	d802      	bhi.n	80047e2 <UART_SetConfig+0x252>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <UART_SetConfig+0x260>
 80047e0:	e012      	b.n	8004808 <UART_SetConfig+0x278>
 80047e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e6:	d006      	beq.n	80047f6 <UART_SetConfig+0x266>
 80047e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ec:	d009      	beq.n	8004802 <UART_SetConfig+0x272>
 80047ee:	e00b      	b.n	8004808 <UART_SetConfig+0x278>
 80047f0:	2300      	movs	r3, #0
 80047f2:	76fb      	strb	r3, [r7, #27]
 80047f4:	e00e      	b.n	8004814 <UART_SetConfig+0x284>
 80047f6:	2302      	movs	r3, #2
 80047f8:	76fb      	strb	r3, [r7, #27]
 80047fa:	e00b      	b.n	8004814 <UART_SetConfig+0x284>
 80047fc:	2304      	movs	r3, #4
 80047fe:	76fb      	strb	r3, [r7, #27]
 8004800:	e008      	b.n	8004814 <UART_SetConfig+0x284>
 8004802:	2308      	movs	r3, #8
 8004804:	76fb      	strb	r3, [r7, #27]
 8004806:	e005      	b.n	8004814 <UART_SetConfig+0x284>
 8004808:	2310      	movs	r3, #16
 800480a:	76fb      	strb	r3, [r7, #27]
 800480c:	bf00      	nop
 800480e:	e001      	b.n	8004814 <UART_SetConfig+0x284>
 8004810:	2310      	movs	r3, #16
 8004812:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a16      	ldr	r2, [pc, #88]	; (8004874 <UART_SetConfig+0x2e4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	f040 8087 	bne.w	800492e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004820:	7efb      	ldrb	r3, [r7, #27]
 8004822:	2b08      	cmp	r3, #8
 8004824:	d836      	bhi.n	8004894 <UART_SetConfig+0x304>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <UART_SetConfig+0x29c>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004851 	.word	0x08004851
 8004830:	08004895 	.word	0x08004895
 8004834:	08004859 	.word	0x08004859
 8004838:	08004895 	.word	0x08004895
 800483c:	0800485f 	.word	0x0800485f
 8004840:	08004895 	.word	0x08004895
 8004844:	08004895 	.word	0x08004895
 8004848:	08004895 	.word	0x08004895
 800484c:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004850:	f7fe fd7c 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8004854:	6178      	str	r0, [r7, #20]
        break;
 8004856:	e022      	b.n	800489e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <UART_SetConfig+0x300>)
 800485a:	617b      	str	r3, [r7, #20]
        break;
 800485c:	e01f      	b.n	800489e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe fcdf 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8004862:	6178      	str	r0, [r7, #20]
        break;
 8004864:	e01b      	b.n	800489e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	617b      	str	r3, [r7, #20]
        break;
 800486c:	e017      	b.n	800489e <UART_SetConfig+0x30e>
 800486e:	bf00      	nop
 8004870:	efff69f3 	.word	0xefff69f3
 8004874:	40008000 	.word	0x40008000
 8004878:	40013800 	.word	0x40013800
 800487c:	40021000 	.word	0x40021000
 8004880:	40004400 	.word	0x40004400
 8004884:	40004800 	.word	0x40004800
 8004888:	40004c00 	.word	0x40004c00
 800488c:	40005000 	.word	0x40005000
 8004890:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	76bb      	strb	r3, [r7, #26]
        break;
 800489c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80f1 	beq.w	8004a88 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d305      	bcc.n	80048c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d902      	bls.n	80048c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	76bb      	strb	r3, [r7, #26]
 80048c6:	e0df      	b.n	8004a88 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4619      	mov	r1, r3
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	f04f 0400 	mov.w	r4, #0
 80048d8:	0214      	lsls	r4, r2, #8
 80048da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048de:	020b      	lsls	r3, r1, #8
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6852      	ldr	r2, [r2, #4]
 80048e4:	0852      	lsrs	r2, r2, #1
 80048e6:	4611      	mov	r1, r2
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	eb13 0b01 	adds.w	fp, r3, r1
 80048f0:	eb44 0c02 	adc.w	ip, r4, r2
 80048f4:	4658      	mov	r0, fp
 80048f6:	4661      	mov	r1, ip
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f04f 0400 	mov.w	r4, #0
 8004900:	461a      	mov	r2, r3
 8004902:	4623      	mov	r3, r4
 8004904:	f7fb fcbc 	bl	8000280 <__aeabi_uldivmod>
 8004908:	4603      	mov	r3, r0
 800490a:	460c      	mov	r4, r1
 800490c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004914:	d308      	bcc.n	8004928 <UART_SetConfig+0x398>
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491c:	d204      	bcs.n	8004928 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	e0af      	b.n	8004a88 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	76bb      	strb	r3, [r7, #26]
 800492c:	e0ac      	b.n	8004a88 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004936:	d15b      	bne.n	80049f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004938:	7efb      	ldrb	r3, [r7, #27]
 800493a:	2b08      	cmp	r3, #8
 800493c:	d827      	bhi.n	800498e <UART_SetConfig+0x3fe>
 800493e:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x3b4>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004969 	.word	0x08004969
 8004948:	08004971 	.word	0x08004971
 800494c:	08004979 	.word	0x08004979
 8004950:	0800498f 	.word	0x0800498f
 8004954:	0800497f 	.word	0x0800497f
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800498f 	.word	0x0800498f
 8004960:	0800498f 	.word	0x0800498f
 8004964:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe fcf0 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 800496c:	6178      	str	r0, [r7, #20]
        break;
 800496e:	e013      	b.n	8004998 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7fe fd02 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8004974:	6178      	str	r0, [r7, #20]
        break;
 8004976:	e00f      	b.n	8004998 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b49      	ldr	r3, [pc, #292]	; (8004aa0 <UART_SetConfig+0x510>)
 800497a:	617b      	str	r3, [r7, #20]
        break;
 800497c:	e00c      	b.n	8004998 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe fc4f 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8004982:	6178      	str	r0, [r7, #20]
        break;
 8004984:	e008      	b.n	8004998 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	617b      	str	r3, [r7, #20]
        break;
 800498c:	e004      	b.n	8004998 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	76bb      	strb	r3, [r7, #26]
        break;
 8004996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d074      	beq.n	8004a88 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	005a      	lsls	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	441a      	add	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d916      	bls.n	80049ea <UART_SetConfig+0x45a>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d212      	bcs.n	80049ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f023 030f 	bic.w	r3, r3, #15
 80049cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	b29a      	uxth	r2, r3
 80049da:	89fb      	ldrh	r3, [r7, #14]
 80049dc:	4313      	orrs	r3, r2
 80049de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	89fa      	ldrh	r2, [r7, #14]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	e04e      	b.n	8004a88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	76bb      	strb	r3, [r7, #26]
 80049ee:	e04b      	b.n	8004a88 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049f0:	7efb      	ldrb	r3, [r7, #27]
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d827      	bhi.n	8004a46 <UART_SetConfig+0x4b6>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x46c>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe fc94 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8004a24:	6178      	str	r0, [r7, #20]
        break;
 8004a26:	e013      	b.n	8004a50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fe fca6 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	6178      	str	r0, [r7, #20]
        break;
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <UART_SetConfig+0x510>)
 8004a32:	617b      	str	r3, [r7, #20]
        break;
 8004a34:	e00c      	b.n	8004a50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fe fbf3 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8004a3a:	6178      	str	r0, [r7, #20]
        break;
 8004a3c:	e008      	b.n	8004a50 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	617b      	str	r3, [r7, #20]
        break;
 8004a44:	e004      	b.n	8004a50 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	085a      	lsrs	r2, r3, #1
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	441a      	add	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d908      	bls.n	8004a84 <UART_SetConfig+0x4f4>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e001      	b.n	8004a88 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a94:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004aa0:	00f42400 	.word	0x00f42400

08004aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01a      	beq.n	8004bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d10a      	bne.n	8004bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004bf6:	f7fc f913 	bl	8000e20 <HAL_GetTick>
 8004bfa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d10e      	bne.n	8004c28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f82a 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e020      	b.n	8004c6a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d10e      	bne.n	8004c54 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f814 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e00a      	b.n	8004c6a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	e05d      	b.n	8004d40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d059      	beq.n	8004d40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8c:	f7fc f8c8 	bl	8000e20 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d302      	bcc.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11b      	bne.n	8004cda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cb0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e042      	b.n	8004d60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02b      	beq.n	8004d40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf6:	d123      	bne.n	8004d40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d10:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e00f      	b.n	8004d60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69da      	ldr	r2, [r3, #28]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d092      	beq.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7e:	f3ef 8305 	mrs	r3, IPSR
 8004d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d96:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <osKernelInitialize+0x3a>
 8004da2:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <osKernelInitialize+0x64>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d103      	bne.n	8004db2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004daa:	f06f 0305 	mvn.w	r3, #5
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e00c      	b.n	8004dcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <osKernelInitialize+0x64>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d105      	bne.n	8004dc6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <osKernelInitialize+0x64>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e002      	b.n	8004dcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000094 	.word	0x20000094

08004de0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de6:	f3ef 8305 	mrs	r3, IPSR
 8004dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df2:	f3ef 8310 	mrs	r3, PRIMASK
 8004df6:	607b      	str	r3, [r7, #4]
  return(result);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004e02:	603b      	str	r3, [r7, #0]
  return(result);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <osKernelStart+0x3a>
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <osKernelStart+0x68>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d103      	bne.n	8004e1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e12:	f06f 0305 	mvn.w	r3, #5
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e010      	b.n	8004e3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <osKernelStart+0x68>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d109      	bne.n	8004e36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e22:	f7ff ffa1 	bl	8004d68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <osKernelStart+0x68>)
 8004e28:	2202      	movs	r2, #2
 8004e2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e2c:	f001 f870 	bl	8005f10 <vTaskStartScheduler>
      stat = osOK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e002      	b.n	8004e3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000094 	.word	0x20000094

08004e4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b090      	sub	sp, #64	; 0x40
 8004e50:	af04      	add	r7, sp, #16
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5c:	f3ef 8305 	mrs	r3, IPSR
 8004e60:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 808f 	bne.w	8004f88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e76:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <osThreadNew+0x3e>
 8004e82:	4b44      	ldr	r3, [pc, #272]	; (8004f94 <osThreadNew+0x148>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d07e      	beq.n	8004f88 <osThreadNew+0x13c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d07b      	beq.n	8004f88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004e94:	2318      	movs	r3, #24
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d045      	beq.n	8004f34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <osThreadNew+0x6a>
        name = attr->name;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <osThreadNew+0x90>
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	2b38      	cmp	r3, #56	; 0x38
 8004ece:	d805      	bhi.n	8004edc <osThreadNew+0x90>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <osThreadNew+0x94>
        return (NULL);
 8004edc:	2300      	movs	r3, #0
 8004ede:	e054      	b.n	8004f8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <osThreadNew+0xca>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b5b      	cmp	r3, #91	; 0x5b
 8004efe:	d90a      	bls.n	8004f16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <osThreadNew+0xca>
        mem = 1;
 8004f10:	2301      	movs	r3, #1
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	e010      	b.n	8004f38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <osThreadNew+0xec>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <osThreadNew+0xec>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <osThreadNew+0xec>
          mem = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	e001      	b.n	8004f38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d110      	bne.n	8004f60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f46:	9202      	str	r2, [sp, #8]
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fe09 	bl	8005b6c <xTaskCreateStatic>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e013      	b.n	8004f88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d110      	bne.n	8004f88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	f107 0310 	add.w	r3, r7, #16
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fe51 	bl	8005c20 <xTaskCreate>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <osThreadNew+0x13c>
          hTask = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f88:	693b      	ldr	r3, [r7, #16]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3730      	adds	r7, #48	; 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000094 	.word	0x20000094

08004f98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa0:	f3ef 8305 	mrs	r3, IPSR
 8004fa4:	613b      	str	r3, [r7, #16]
  return(result);
 8004fa6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <osDelay+0x3c>
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <osDelay+0x58>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d103      	bne.n	8004fd4 <osDelay+0x3c>
    stat = osErrorISR;
 8004fcc:	f06f 0305 	mvn.w	r3, #5
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e007      	b.n	8004fe4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 ff62 	bl	8005ea8 <vTaskDelay>
    }
  }

  return (stat);
 8004fe4:	697b      	ldr	r3, [r7, #20]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000094 	.word	0x20000094

08004ff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4a07      	ldr	r2, [pc, #28]	; (8005020 <vApplicationGetIdleTaskMemory+0x2c>)
 8005004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4a06      	ldr	r2, [pc, #24]	; (8005024 <vApplicationGetIdleTaskMemory+0x30>)
 800500a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2280      	movs	r2, #128	; 0x80
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000098 	.word	0x20000098
 8005024:	200000f4 	.word	0x200000f4

08005028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a07      	ldr	r2, [pc, #28]	; (8005054 <vApplicationGetTimerTaskMemory+0x2c>)
 8005038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4a06      	ldr	r2, [pc, #24]	; (8005058 <vApplicationGetTimerTaskMemory+0x30>)
 800503e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	200002f4 	.word	0x200002f4
 8005058:	20000350 	.word	0x20000350

0800505c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f103 0208 	add.w	r2, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f04f 32ff 	mov.w	r2, #4294967295
 8005074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f103 0208 	add.w	r2, r3, #8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f103 0208 	add.w	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	601a      	str	r2, [r3, #0]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d103      	bne.n	800511e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e00c      	b.n	8005138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3308      	adds	r3, #8
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e002      	b.n	800512c <vListInsert+0x2e>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	d2f6      	bcs.n	8005126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6892      	ldr	r2, [r2, #8]
 8005186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6852      	ldr	r2, [r2, #4]
 8005190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d103      	bne.n	80051a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1e5a      	subs	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	e7fe      	b.n	80051ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80051ec:	f002 f80e 	bl	800720c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	441a      	add	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	3b01      	subs	r3, #1
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005222:	fb01 f303 	mul.w	r3, r1, r3
 8005226:	441a      	add	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	22ff      	movs	r2, #255	; 0xff
 8005230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	22ff      	movs	r2, #255	; 0xff
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d114      	bne.n	800526c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01a      	beq.n	8005280 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3310      	adds	r3, #16
 800524e:	4618      	mov	r0, r3
 8005250:	f001 f8de 	bl	8006410 <xTaskRemoveFromEventList>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <xQueueGenericReset+0xcc>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	e009      	b.n	8005280 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3310      	adds	r3, #16
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fef3 	bl	800505c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff feee 	bl	800505c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005280:	f001 fff2 	bl	8007268 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005284:	2301      	movs	r3, #1
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08e      	sub	sp, #56	; 0x38
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <xQueueGenericCreateStatic+0x28>
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ba:	e7fe      	b.n	80052ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <xQueueGenericCreateStatic+0x42>
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <xQueueGenericCreateStatic+0x4e>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <xQueueGenericCreateStatic+0x52>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueGenericCreateStatic+0x54>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <xQueueGenericCreateStatic+0x6c>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	e7fe      	b.n	80052fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <xQueueGenericCreateStatic+0x78>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <xQueueGenericCreateStatic+0x7c>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <xQueueGenericCreateStatic+0x7e>
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <xQueueGenericCreateStatic+0x96>
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	e7fe      	b.n	8005328 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800532a:	2350      	movs	r3, #80	; 0x50
 800532c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b50      	cmp	r3, #80	; 0x50
 8005332:	d009      	beq.n	8005348 <xQueueGenericCreateStatic+0xb4>
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	e7fe      	b.n	8005346 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005348:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800535c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f805 	bl	800537a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005372:	4618      	mov	r0, r3
 8005374:	3730      	adds	r7, #48	; 0x30
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e002      	b.n	800539c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053a8:	2101      	movs	r1, #1
 80053aa:	69b8      	ldr	r0, [r7, #24]
 80053ac:	f7ff ff0a 	bl	80051c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08e      	sub	sp, #56	; 0x38
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <xQueueGenericSend+0x30>
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	e7fe      	b.n	80053ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <xQueueGenericSend+0x3e>
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <xQueueGenericSend+0x42>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueGenericSend+0x44>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <xQueueGenericSend+0x5c>
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
 800541a:	e7fe      	b.n	800541a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d103      	bne.n	800542a <xQueueGenericSend+0x6a>
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <xQueueGenericSend+0x6e>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <xQueueGenericSend+0x70>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <xQueueGenericSend+0x88>
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	623b      	str	r3, [r7, #32]
 8005446:	e7fe      	b.n	8005446 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005448:	f001 f998 	bl	800677c <xTaskGetSchedulerState>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <xQueueGenericSend+0x98>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <xQueueGenericSend+0x9c>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <xQueueGenericSend+0x9e>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <xQueueGenericSend+0xb6>
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e7fe      	b.n	8005474 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005476:	f001 fec9 	bl	800720c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	429a      	cmp	r2, r3
 8005484:	d302      	bcc.n	800548c <xQueueGenericSend+0xcc>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d129      	bne.n	80054e0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005492:	f000 f9ff 	bl	8005894 <prvCopyDataToQueue>
 8005496:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 ffb3 	bl	8006410 <xTaskRemoveFromEventList>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054b0:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <xQueueGenericSend+0x1f0>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	e00a      	b.n	80054d8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054c8:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <xQueueGenericSend+0x1f0>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054d8:	f001 fec6 	bl	8007268 <vPortExitCritical>
				return pdPASS;
 80054dc:	2301      	movs	r3, #1
 80054de:	e063      	b.n	80055a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054e6:	f001 febf 	bl	8007268 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e05c      	b.n	80055a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 ffeb 	bl	80064d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054fe:	2301      	movs	r3, #1
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005502:	f001 feb1 	bl	8007268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005506:	f000 fd67 	bl	8005fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800550a:	f001 fe7f 	bl	800720c <vPortEnterCritical>
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005514:	b25b      	sxtb	r3, r3
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d103      	bne.n	8005524 <xQueueGenericSend+0x164>
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800552a:	b25b      	sxtb	r3, r3
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <xQueueGenericSend+0x17a>
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800553a:	f001 fe95 	bl	8007268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800553e:	1d3a      	adds	r2, r7, #4
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 ffda 	bl	8006500 <xTaskCheckForTimeOut>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d124      	bne.n	800559c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005554:	f000 fa96 	bl	8005a84 <prvIsQueueFull>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d018      	beq.n	8005590 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	3310      	adds	r3, #16
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ff04 	bl	8006374 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800556c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800556e:	f000 fa21 	bl	80059b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005572:	f000 fd3f 	bl	8005ff4 <xTaskResumeAll>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	f47f af7c 	bne.w	8005476 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <xQueueGenericSend+0x1f0>)
 8005580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	e772      	b.n	8005476 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005592:	f000 fa0f 	bl	80059b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005596:	f000 fd2d 	bl	8005ff4 <xTaskResumeAll>
 800559a:	e76c      	b.n	8005476 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559e:	f000 fa09 	bl	80059b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055a2:	f000 fd27 	bl	8005ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3738      	adds	r7, #56	; 0x38
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	; 0x38
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <xQueueGenericSendFromISR+0x2c>
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
 80055de:	e7fe      	b.n	80055de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <xQueueGenericSendFromISR+0x3a>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <xQueueGenericSendFromISR+0x3e>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueGenericSendFromISR+0x40>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <xQueueGenericSendFromISR+0x58>
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	e7fe      	b.n	800560a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d103      	bne.n	800561a <xQueueGenericSendFromISR+0x66>
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <xQueueGenericSendFromISR+0x6a>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <xQueueGenericSendFromISR+0x6c>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <xQueueGenericSendFromISR+0x84>
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	e7fe      	b.n	8005636 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005638:	f001 fec4 	bl	80073c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800563c:	f3ef 8211 	mrs	r2, BASEPRI
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	61ba      	str	r2, [r7, #24]
 8005652:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005654:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <xQueueGenericSendFromISR+0xb6>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d12c      	bne.n	80056c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567a:	f000 f90b 	bl	8005894 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800567e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d112      	bne.n	80056ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d016      	beq.n	80056be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	3324      	adds	r3, #36	; 0x24
 8005694:	4618      	mov	r0, r3
 8005696:	f000 febb 	bl	8006410 <xTaskRemoveFromEventList>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00e      	beq.n	80056be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e007      	b.n	80056be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056b2:	3301      	adds	r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	b25a      	sxtb	r2, r3
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056be:	2301      	movs	r3, #1
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80056c2:	e001      	b.n	80056c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3738      	adds	r7, #56	; 0x38
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08c      	sub	sp, #48	; 0x30
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <xQueueReceive+0x2e>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	e7fe      	b.n	8005708 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d103      	bne.n	8005718 <xQueueReceive+0x3c>
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <xQueueReceive+0x40>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <xQueueReceive+0x42>
 800571c:	2300      	movs	r3, #0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <xQueueReceive+0x5a>
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	e7fe      	b.n	8005734 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005736:	f001 f821 	bl	800677c <xTaskGetSchedulerState>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <xQueueReceive+0x6a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <xQueueReceive+0x6e>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueReceive+0x70>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <xQueueReceive+0x88>
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e7fe      	b.n	8005762 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005764:	f001 fd52 	bl	800720c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01f      	beq.n	80057b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005778:	f000 f8f6 	bl	8005968 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1e5a      	subs	r2, r3, #1
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00f      	beq.n	80057ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	3310      	adds	r3, #16
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fe3d 	bl	8006410 <xTaskRemoveFromEventList>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800579c:	4b3c      	ldr	r3, [pc, #240]	; (8005890 <xQueueReceive+0x1b4>)
 800579e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057ac:	f001 fd5c 	bl	8007268 <vPortExitCritical>
				return pdPASS;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e069      	b.n	8005888 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057ba:	f001 fd55 	bl	8007268 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057be:	2300      	movs	r3, #0
 80057c0:	e062      	b.n	8005888 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057c8:	f107 0310 	add.w	r3, r7, #16
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fe81 	bl	80064d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057d2:	2301      	movs	r3, #1
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057d6:	f001 fd47 	bl	8007268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057da:	f000 fbfd 	bl	8005fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057de:	f001 fd15 	bl	800720c <vPortEnterCritical>
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e8:	b25b      	sxtb	r3, r3
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d103      	bne.n	80057f8 <xQueueReceive+0x11c>
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057fe:	b25b      	sxtb	r3, r3
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d103      	bne.n	800580e <xQueueReceive+0x132>
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800580e:	f001 fd2b 	bl	8007268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005812:	1d3a      	adds	r2, r7, #4
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fe70 	bl	8006500 <xTaskCheckForTimeOut>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d123      	bne.n	800586e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005828:	f000 f916 	bl	8005a58 <prvIsQueueEmpty>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d017      	beq.n	8005862 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	3324      	adds	r3, #36	; 0x24
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fd9a 	bl	8006374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005842:	f000 f8b7 	bl	80059b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005846:	f000 fbd5 	bl	8005ff4 <xTaskResumeAll>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d189      	bne.n	8005764 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <xQueueReceive+0x1b4>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	e780      	b.n	8005764 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005864:	f000 f8a6 	bl	80059b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005868:	f000 fbc4 	bl	8005ff4 <xTaskResumeAll>
 800586c:	e77a      	b.n	8005764 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800586e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005870:	f000 f8a0 	bl	80059b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005874:	f000 fbbe 	bl	8005ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587a:	f000 f8ed 	bl	8005a58 <prvIsQueueEmpty>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f43f af6f 	beq.w	8005764 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005886:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005888:	4618      	mov	r0, r3
 800588a:	3730      	adds	r7, #48	; 0x30
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10d      	bne.n	80058ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d14d      	bne.n	8005956 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 ff7a 	bl	80067b8 <xTaskPriorityDisinherit>
 80058c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	e043      	b.n	8005956 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d119      	bne.n	8005908 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6858      	ldr	r0, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	461a      	mov	r2, r3
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	f001 ffae 	bl	8007840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	441a      	add	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d32b      	bcc.n	8005956 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	605a      	str	r2, [r3, #4]
 8005906:	e026      	b.n	8005956 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	68d8      	ldr	r0, [r3, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	461a      	mov	r2, r3
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	f001 ff94 	bl	8007840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	425b      	negs	r3, r3
 8005922:	441a      	add	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d207      	bcs.n	8005944 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	425b      	negs	r3, r3
 800593e:	441a      	add	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d105      	bne.n	8005956 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	3b01      	subs	r3, #1
 8005954:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800595e:	697b      	ldr	r3, [r7, #20]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	441a      	add	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	429a      	cmp	r2, r3
 8005992:	d303      	bcc.n	800599c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68d9      	ldr	r1, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	461a      	mov	r2, r3
 80059a6:	6838      	ldr	r0, [r7, #0]
 80059a8:	f001 ff4a 	bl	8007840 <memcpy>
	}
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059bc:	f001 fc26 	bl	800720c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059c8:	e011      	b.n	80059ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d012      	beq.n	80059f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3324      	adds	r3, #36	; 0x24
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fd1a 	bl	8006410 <xTaskRemoveFromEventList>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059e2:	f000 fded 	bl	80065c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	dce9      	bgt.n	80059ca <prvUnlockQueue+0x16>
 80059f6:	e000      	b.n	80059fa <prvUnlockQueue+0x46>
					break;
 80059f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a02:	f001 fc31 	bl	8007268 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a06:	f001 fc01 	bl	800720c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a12:	e011      	b.n	8005a38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d012      	beq.n	8005a42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3310      	adds	r3, #16
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fcf5 	bl	8006410 <xTaskRemoveFromEventList>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a2c:	f000 fdc8 	bl	80065c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dce9      	bgt.n	8005a14 <prvUnlockQueue+0x60>
 8005a40:	e000      	b.n	8005a44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	22ff      	movs	r2, #255	; 0xff
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a4c:	f001 fc0c 	bl	8007268 <vPortExitCritical>
}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a60:	f001 fbd4 	bl	800720c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e001      	b.n	8005a76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a76:	f001 fbf7 	bl	8007268 <vPortExitCritical>

	return xReturn;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a8c:	f001 fbbe 	bl	800720c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d102      	bne.n	8005aa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e001      	b.n	8005aa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005aa6:	f001 fbdf 	bl	8007268 <vPortExitCritical>

	return xReturn;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e014      	b.n	8005aee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ac4:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <vQueueAddToRegistry+0x4c>)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ad0:	490b      	ldr	r1, [pc, #44]	; (8005b00 <vQueueAddToRegistry+0x4c>)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ada:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <vQueueAddToRegistry+0x4c>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ae6:	e005      	b.n	8005af4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b07      	cmp	r3, #7
 8005af2:	d9e7      	bls.n	8005ac4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	20001ab0 	.word	0x20001ab0

08005b04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b14:	f001 fb7a 	bl	800720c <vPortEnterCritical>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d103      	bne.n	8005b2e <vQueueWaitForMessageRestricted+0x2a>
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b34:	b25b      	sxtb	r3, r3
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d103      	bne.n	8005b44 <vQueueWaitForMessageRestricted+0x40>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b44:	f001 fb90 	bl	8007268 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3324      	adds	r3, #36	; 0x24
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fc2f 	bl	80063bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff ff28 	bl	80059b4 <prvUnlockQueue>
	}
 8005b64:	bf00      	nop
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	; 0x38
 8005b70:	af04      	add	r7, sp, #16
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <xTaskCreateStatic+0x28>
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	e7fe      	b.n	8005b92 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <xTaskCreateStatic+0x42>
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	e7fe      	b.n	8005bac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bae:	235c      	movs	r3, #92	; 0x5c
 8005bb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8005bb6:	d009      	beq.n	8005bcc <xTaskCreateStatic+0x60>
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e7fe      	b.n	8005bca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005bcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01e      	beq.n	8005c12 <xTaskCreateStatic+0xa6>
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01b      	beq.n	8005c12 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bec:	2300      	movs	r3, #0
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f850 	bl	8005caa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c0c:	f000 f8dc 	bl	8005dc8 <prvAddNewTaskToReadyList>
 8005c10:	e001      	b.n	8005c16 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c16:	697b      	ldr	r3, [r7, #20]
	}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3728      	adds	r7, #40	; 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	; 0x30
 8005c24:	af04      	add	r7, sp, #16
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fc03 	bl	8007440 <pvPortMalloc>
 8005c3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00e      	beq.n	8005c60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c42:	205c      	movs	r0, #92	; 0x5c
 8005c44:	f001 fbfc 	bl	8007440 <pvPortMalloc>
 8005c48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
 8005c56:	e005      	b.n	8005c64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f001 fcb3 	bl	80075c4 <vPortFree>
 8005c5e:	e001      	b.n	8005c64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	2300      	movs	r3, #0
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f80e 	bl	8005caa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c8e:	69f8      	ldr	r0, [r7, #28]
 8005c90:	f000 f89a 	bl	8005dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c94:	2301      	movs	r3, #1
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e002      	b.n	8005ca0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	21a5      	movs	r1, #165	; 0xa5
 8005cc4:	f001 fdc7 	bl	8007856 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f023 0307 	bic.w	r3, r3, #7
 8005ce0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <prvInitialiseNewTask+0x56>
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	e7fe      	b.n	8005cfe <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01f      	beq.n	8005d46 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e012      	b.n	8005d32 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	7819      	ldrb	r1, [r3, #0]
 8005d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3334      	adds	r3, #52	; 0x34
 8005d1c:	460a      	mov	r2, r1
 8005d1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d006      	beq.n	8005d3a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d9e9      	bls.n	8005d0c <prvInitialiseNewTask+0x62>
 8005d38:	e000      	b.n	8005d3c <prvInitialiseNewTask+0x92>
			{
				break;
 8005d3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d44:	e003      	b.n	8005d4e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	2b37      	cmp	r3, #55	; 0x37
 8005d52:	d901      	bls.n	8005d58 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d54:	2337      	movs	r3, #55	; 0x37
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	2200      	movs	r2, #0
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff f994 	bl	800509c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	3318      	adds	r3, #24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff f98f 	bl	800509c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	2200      	movs	r2, #0
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	68f9      	ldr	r1, [r7, #12]
 8005da6:	69b8      	ldr	r0, [r7, #24]
 8005da8:	f001 f90c 	bl	8006fc4 <pxPortInitialiseStack>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dbe:	bf00      	nop
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dd0:	f001 fa1c 	bl	800720c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dd4:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <prvAddNewTaskToReadyList+0xc4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <prvAddNewTaskToReadyList+0xc4>)
 8005ddc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005de6:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dec:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <prvAddNewTaskToReadyList+0xc4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d110      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005df4:	f000 fc08 	bl	8006608 <prvInitialiseTaskLists>
 8005df8:	e00d      	b.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <prvAddNewTaskToReadyList+0xcc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d802      	bhi.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e16:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <prvAddNewTaskToReadyList+0xd0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <prvAddNewTaskToReadyList+0xd0>)
 8005e1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e20:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <prvAddNewTaskToReadyList+0xd0>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <prvAddNewTaskToReadyList+0xd4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d903      	bls.n	8005e3c <prvAddNewTaskToReadyList+0x74>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	4a18      	ldr	r2, [pc, #96]	; (8005e9c <prvAddNewTaskToReadyList+0xd4>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a15      	ldr	r2, [pc, #84]	; (8005ea0 <prvAddNewTaskToReadyList+0xd8>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7ff f92f 	bl	80050b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e58:	f001 fa06 	bl	8007268 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <prvAddNewTaskToReadyList+0xcc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e64:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d207      	bcs.n	8005e82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <prvAddNewTaskToReadyList+0xdc>)
 8005e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000c24 	.word	0x20000c24
 8005e90:	20000750 	.word	0x20000750
 8005e94:	20000c30 	.word	0x20000c30
 8005e98:	20000c40 	.word	0x20000c40
 8005e9c:	20000c2c 	.word	0x20000c2c
 8005ea0:	20000754 	.word	0x20000754
 8005ea4:	e000ed04 	.word	0xe000ed04

08005ea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005eba:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <vTaskDelay+0x60>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <vTaskDelay+0x2e>
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	e7fe      	b.n	8005ed4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005ed6:	f000 f87f 	bl	8005fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eda:	2100      	movs	r1, #0
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fcd7 	bl	8006890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ee2:	f000 f887 	bl	8005ff4 <xTaskResumeAll>
 8005ee6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d107      	bne.n	8005efe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <vTaskDelay+0x64>)
 8005ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000c4c 	.word	0x20000c4c
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f1e:	463a      	mov	r2, r7
 8005f20:	1d39      	adds	r1, r7, #4
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff f864 	bl	8004ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	9202      	str	r2, [sp, #8]
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	2300      	movs	r3, #0
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	460a      	mov	r2, r1
 8005f3e:	4920      	ldr	r1, [pc, #128]	; (8005fc0 <vTaskStartScheduler+0xb0>)
 8005f40:	4820      	ldr	r0, [pc, #128]	; (8005fc4 <vTaskStartScheduler+0xb4>)
 8005f42:	f7ff fe13 	bl	8005b6c <xTaskCreateStatic>
 8005f46:	4602      	mov	r2, r0
 8005f48:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <vTaskStartScheduler+0xb8>)
 8005f4a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <vTaskStartScheduler+0xb8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e001      	b.n	8005f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d102      	bne.n	8005f6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f64:	f000 fce8 	bl	8006938 <xTimerCreateTimerTask>
 8005f68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d115      	bne.n	8005f9c <vTaskStartScheduler+0x8c>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f82:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <vTaskStartScheduler+0xbc>)
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f8a:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <vTaskStartScheduler+0xc0>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f90:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <vTaskStartScheduler+0xc4>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f96:	f001 f89b 	bl	80070d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f9a:	e00d      	b.n	8005fb8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d109      	bne.n	8005fb8 <vTaskStartScheduler+0xa8>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e7fe      	b.n	8005fb6 <vTaskStartScheduler+0xa6>
}
 8005fb8:	bf00      	nop
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	080080bc 	.word	0x080080bc
 8005fc4:	080065d9 	.word	0x080065d9
 8005fc8:	20000c48 	.word	0x20000c48
 8005fcc:	20000c44 	.word	0x20000c44
 8005fd0:	20000c30 	.word	0x20000c30
 8005fd4:	20000c28 	.word	0x20000c28

08005fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fdc:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <vTaskSuspendAll+0x18>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	4a03      	ldr	r2, [pc, #12]	; (8005ff0 <vTaskSuspendAll+0x18>)
 8005fe4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005fe6:	bf00      	nop
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000c4c 	.word	0x20000c4c

08005ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006002:	4b41      	ldr	r3, [pc, #260]	; (8006108 <xTaskResumeAll+0x114>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <xTaskResumeAll+0x2a>
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	e7fe      	b.n	800601c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800601e:	f001 f8f5 	bl	800720c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006022:	4b39      	ldr	r3, [pc, #228]	; (8006108 <xTaskResumeAll+0x114>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3b01      	subs	r3, #1
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <xTaskResumeAll+0x114>)
 800602a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800602c:	4b36      	ldr	r3, [pc, #216]	; (8006108 <xTaskResumeAll+0x114>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d162      	bne.n	80060fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006034:	4b35      	ldr	r3, [pc, #212]	; (800610c <xTaskResumeAll+0x118>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d05e      	beq.n	80060fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800603c:	e02f      	b.n	800609e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800603e:	4b34      	ldr	r3, [pc, #208]	; (8006110 <xTaskResumeAll+0x11c>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3318      	adds	r3, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff f890 	bl	8005170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3304      	adds	r3, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f88b 	bl	8005170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4b2d      	ldr	r3, [pc, #180]	; (8006114 <xTaskResumeAll+0x120>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d903      	bls.n	800606e <xTaskResumeAll+0x7a>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <xTaskResumeAll+0x120>)
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4a27      	ldr	r2, [pc, #156]	; (8006118 <xTaskResumeAll+0x124>)
 800607c:	441a      	add	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7ff f816 	bl	80050b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4b23      	ldr	r3, [pc, #140]	; (800611c <xTaskResumeAll+0x128>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006098:	4b21      	ldr	r3, [pc, #132]	; (8006120 <xTaskResumeAll+0x12c>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800609e:	4b1c      	ldr	r3, [pc, #112]	; (8006110 <xTaskResumeAll+0x11c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1cb      	bne.n	800603e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060ac:	f000 fb46 	bl	800673c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060b0:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <xTaskResumeAll+0x130>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060bc:	f000 f846 	bl	800614c <xTaskIncrementTick>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060c6:	4b16      	ldr	r3, [pc, #88]	; (8006120 <xTaskResumeAll+0x12c>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f1      	bne.n	80060bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80060d8:	4b12      	ldr	r3, [pc, #72]	; (8006124 <xTaskResumeAll+0x130>)
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <xTaskResumeAll+0x12c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060ea:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <xTaskResumeAll+0x134>)
 80060ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060fa:	f001 f8b5 	bl	8007268 <vPortExitCritical>

	return xAlreadyYielded;
 80060fe:	68bb      	ldr	r3, [r7, #8]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20000c4c 	.word	0x20000c4c
 800610c:	20000c24 	.word	0x20000c24
 8006110:	20000be4 	.word	0x20000be4
 8006114:	20000c2c 	.word	0x20000c2c
 8006118:	20000754 	.word	0x20000754
 800611c:	20000750 	.word	0x20000750
 8006120:	20000c38 	.word	0x20000c38
 8006124:	20000c34 	.word	0x20000c34
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <xTaskGetTickCount+0x1c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006138:	687b      	ldr	r3, [r7, #4]
}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000c28 	.word	0x20000c28

0800614c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006156:	4b4e      	ldr	r3, [pc, #312]	; (8006290 <xTaskIncrementTick+0x144>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f040 8088 	bne.w	8006270 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006160:	4b4c      	ldr	r3, [pc, #304]	; (8006294 <xTaskIncrementTick+0x148>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006168:	4a4a      	ldr	r2, [pc, #296]	; (8006294 <xTaskIncrementTick+0x148>)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d11f      	bne.n	80061b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006174:	4b48      	ldr	r3, [pc, #288]	; (8006298 <xTaskIncrementTick+0x14c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <xTaskIncrementTick+0x46>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	e7fe      	b.n	8006190 <xTaskIncrementTick+0x44>
 8006192:	4b41      	ldr	r3, [pc, #260]	; (8006298 <xTaskIncrementTick+0x14c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	4b40      	ldr	r3, [pc, #256]	; (800629c <xTaskIncrementTick+0x150>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3e      	ldr	r2, [pc, #248]	; (8006298 <xTaskIncrementTick+0x14c>)
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	4a3e      	ldr	r2, [pc, #248]	; (800629c <xTaskIncrementTick+0x150>)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4b3e      	ldr	r3, [pc, #248]	; (80062a0 <xTaskIncrementTick+0x154>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3301      	adds	r3, #1
 80061ac:	4a3c      	ldr	r2, [pc, #240]	; (80062a0 <xTaskIncrementTick+0x154>)
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	f000 fac4 	bl	800673c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061b4:	4b3b      	ldr	r3, [pc, #236]	; (80062a4 <xTaskIncrementTick+0x158>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d349      	bcc.n	8006252 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061be:	4b36      	ldr	r3, [pc, #216]	; (8006298 <xTaskIncrementTick+0x14c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c8:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <xTaskIncrementTick+0x158>)
 80061ca:	f04f 32ff 	mov.w	r2, #4294967295
 80061ce:	601a      	str	r2, [r3, #0]
					break;
 80061d0:	e03f      	b.n	8006252 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d2:	4b31      	ldr	r3, [pc, #196]	; (8006298 <xTaskIncrementTick+0x14c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d203      	bcs.n	80061f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061ea:	4a2e      	ldr	r2, [pc, #184]	; (80062a4 <xTaskIncrementTick+0x158>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061f0:	e02f      	b.n	8006252 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe ffba 	bl	8005170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	3318      	adds	r3, #24
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe ffb1 	bl	8005170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006212:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <xTaskIncrementTick+0x15c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d903      	bls.n	8006222 <xTaskIncrementTick+0xd6>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	4a22      	ldr	r2, [pc, #136]	; (80062a8 <xTaskIncrementTick+0x15c>)
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4a1f      	ldr	r2, [pc, #124]	; (80062ac <xTaskIncrementTick+0x160>)
 8006230:	441a      	add	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f7fe ff3c 	bl	80050b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <xTaskIncrementTick+0x164>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	429a      	cmp	r2, r3
 800624a:	d3b8      	bcc.n	80061be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006250:	e7b5      	b.n	80061be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <xTaskIncrementTick+0x164>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006258:	4914      	ldr	r1, [pc, #80]	; (80062ac <xTaskIncrementTick+0x160>)
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d907      	bls.n	800627a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800626a:	2301      	movs	r3, #1
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e004      	b.n	800627a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006270:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <xTaskIncrementTick+0x168>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a0f      	ldr	r2, [pc, #60]	; (80062b4 <xTaskIncrementTick+0x168>)
 8006278:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800627a:	4b0f      	ldr	r3, [pc, #60]	; (80062b8 <xTaskIncrementTick+0x16c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006286:	697b      	ldr	r3, [r7, #20]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000c4c 	.word	0x20000c4c
 8006294:	20000c28 	.word	0x20000c28
 8006298:	20000bdc 	.word	0x20000bdc
 800629c:	20000be0 	.word	0x20000be0
 80062a0:	20000c3c 	.word	0x20000c3c
 80062a4:	20000c44 	.word	0x20000c44
 80062a8:	20000c2c 	.word	0x20000c2c
 80062ac:	20000754 	.word	0x20000754
 80062b0:	20000750 	.word	0x20000750
 80062b4:	20000c34 	.word	0x20000c34
 80062b8:	20000c38 	.word	0x20000c38

080062bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062c2:	4b27      	ldr	r3, [pc, #156]	; (8006360 <vTaskSwitchContext+0xa4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ca:	4b26      	ldr	r3, [pc, #152]	; (8006364 <vTaskSwitchContext+0xa8>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062d0:	e040      	b.n	8006354 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80062d2:	4b24      	ldr	r3, [pc, #144]	; (8006364 <vTaskSwitchContext+0xa8>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d8:	4b23      	ldr	r3, [pc, #140]	; (8006368 <vTaskSwitchContext+0xac>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	e00f      	b.n	8006300 <vTaskSwitchContext+0x44>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <vTaskSwitchContext+0x3e>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	607b      	str	r3, [r7, #4]
 80062f8:	e7fe      	b.n	80062f8 <vTaskSwitchContext+0x3c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	491a      	ldr	r1, [pc, #104]	; (800636c <vTaskSwitchContext+0xb0>)
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0e5      	beq.n	80062e0 <vTaskSwitchContext+0x24>
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <vTaskSwitchContext+0xb0>)
 8006320:	4413      	add	r3, r2
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	3308      	adds	r3, #8
 8006336:	429a      	cmp	r2, r3
 8006338:	d104      	bne.n	8006344 <vTaskSwitchContext+0x88>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	605a      	str	r2, [r3, #4]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <vTaskSwitchContext+0xb4>)
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4a06      	ldr	r2, [pc, #24]	; (8006368 <vTaskSwitchContext+0xac>)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	20000c4c 	.word	0x20000c4c
 8006364:	20000c38 	.word	0x20000c38
 8006368:	20000c2c 	.word	0x20000c2c
 800636c:	20000754 	.word	0x20000754
 8006370:	20000750 	.word	0x20000750

08006374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <vTaskPlaceOnEventList+0x24>
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e7fe      	b.n	8006396 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <vTaskPlaceOnEventList+0x44>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3318      	adds	r3, #24
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fe feac 	bl	80050fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063a6:	2101      	movs	r1, #1
 80063a8:	6838      	ldr	r0, [r7, #0]
 80063aa:	f000 fa71 	bl	8006890 <prvAddCurrentTaskToDelayedList>
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000750 	.word	0x20000750

080063bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <vTaskPlaceOnEventListRestricted+0x26>
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e7fe      	b.n	80063e0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063e2:	4b0a      	ldr	r3, [pc, #40]	; (800640c <vTaskPlaceOnEventListRestricted+0x50>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3318      	adds	r3, #24
 80063e8:	4619      	mov	r1, r3
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7fe fe63 	bl	80050b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f000 fa46 	bl	8006890 <prvAddCurrentTaskToDelayedList>
	}
 8006404:	bf00      	nop
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000750 	.word	0x20000750

08006410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <xTaskRemoveFromEventList+0x2a>
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e7fe      	b.n	8006438 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3318      	adds	r3, #24
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fe96 	bl	8005170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006444:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <xTaskRemoveFromEventList+0xac>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d11d      	bne.n	8006488 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	3304      	adds	r3, #4
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fe8d 	bl	8005170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	4b19      	ldr	r3, [pc, #100]	; (80064c0 <xTaskRemoveFromEventList+0xb0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d903      	bls.n	800646a <xTaskRemoveFromEventList+0x5a>
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4a16      	ldr	r2, [pc, #88]	; (80064c0 <xTaskRemoveFromEventList+0xb0>)
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <xTaskRemoveFromEventList+0xb4>)
 8006478:	441a      	add	r2, r3
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f7fe fe18 	bl	80050b6 <vListInsertEnd>
 8006486:	e005      	b.n	8006494 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3318      	adds	r3, #24
 800648c:	4619      	mov	r1, r3
 800648e:	480e      	ldr	r0, [pc, #56]	; (80064c8 <xTaskRemoveFromEventList+0xb8>)
 8006490:	f7fe fe11 	bl	80050b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <xTaskRemoveFromEventList+0xbc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d905      	bls.n	80064ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <xTaskRemoveFromEventList+0xc0>)
 80064a8:	2201      	movs	r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e001      	b.n	80064b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064b2:	697b      	ldr	r3, [r7, #20]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000c4c 	.word	0x20000c4c
 80064c0:	20000c2c 	.word	0x20000c2c
 80064c4:	20000754 	.word	0x20000754
 80064c8:	20000be4 	.word	0x20000be4
 80064cc:	20000750 	.word	0x20000750
 80064d0:	20000c38 	.word	0x20000c38

080064d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <vTaskInternalSetTimeOutState+0x24>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <vTaskInternalSetTimeOutState+0x28>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	605a      	str	r2, [r3, #4]
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	20000c3c 	.word	0x20000c3c
 80064fc:	20000c28 	.word	0x20000c28

08006500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <xTaskCheckForTimeOut+0x24>
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	e7fe      	b.n	8006522 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <xTaskCheckForTimeOut+0x3e>
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e7fe      	b.n	800653c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800653e:	f000 fe65 	bl	800720c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <xTaskCheckForTimeOut+0xb8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d102      	bne.n	8006562 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	e023      	b.n	80065aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b15      	ldr	r3, [pc, #84]	; (80065bc <xTaskCheckForTimeOut+0xbc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d007      	beq.n	800657e <xTaskCheckForTimeOut+0x7e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	429a      	cmp	r2, r3
 8006576:	d302      	bcc.n	800657e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006578:	2301      	movs	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e015      	b.n	80065aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	429a      	cmp	r2, r3
 8006586:	d20b      	bcs.n	80065a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	1ad2      	subs	r2, r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ff9d 	bl	80064d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e004      	b.n	80065aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065a6:	2301      	movs	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065aa:	f000 fe5d 	bl	8007268 <vPortExitCritical>

	return xReturn;
 80065ae:	69fb      	ldr	r3, [r7, #28]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000c28 	.word	0x20000c28
 80065bc:	20000c3c 	.word	0x20000c3c

080065c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065c4:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <vTaskMissedYield+0x14>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
}
 80065ca:	bf00      	nop
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	20000c38 	.word	0x20000c38

080065d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065e0:	f000 f852 	bl	8006688 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <prvIdleTask+0x28>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d9f9      	bls.n	80065e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <prvIdleTask+0x2c>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065fc:	e7f0      	b.n	80065e0 <prvIdleTask+0x8>
 80065fe:	bf00      	nop
 8006600:	20000754 	.word	0x20000754
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800660e:	2300      	movs	r3, #0
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	e00c      	b.n	800662e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4a12      	ldr	r2, [pc, #72]	; (8006668 <prvInitialiseTaskLists+0x60>)
 8006620:	4413      	add	r3, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fd1a 	bl	800505c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3301      	adds	r3, #1
 800662c:	607b      	str	r3, [r7, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b37      	cmp	r3, #55	; 0x37
 8006632:	d9ef      	bls.n	8006614 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006634:	480d      	ldr	r0, [pc, #52]	; (800666c <prvInitialiseTaskLists+0x64>)
 8006636:	f7fe fd11 	bl	800505c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800663a:	480d      	ldr	r0, [pc, #52]	; (8006670 <prvInitialiseTaskLists+0x68>)
 800663c:	f7fe fd0e 	bl	800505c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006640:	480c      	ldr	r0, [pc, #48]	; (8006674 <prvInitialiseTaskLists+0x6c>)
 8006642:	f7fe fd0b 	bl	800505c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006646:	480c      	ldr	r0, [pc, #48]	; (8006678 <prvInitialiseTaskLists+0x70>)
 8006648:	f7fe fd08 	bl	800505c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800664c:	480b      	ldr	r0, [pc, #44]	; (800667c <prvInitialiseTaskLists+0x74>)
 800664e:	f7fe fd05 	bl	800505c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006652:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <prvInitialiseTaskLists+0x78>)
 8006654:	4a05      	ldr	r2, [pc, #20]	; (800666c <prvInitialiseTaskLists+0x64>)
 8006656:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <prvInitialiseTaskLists+0x7c>)
 800665a:	4a05      	ldr	r2, [pc, #20]	; (8006670 <prvInitialiseTaskLists+0x68>)
 800665c:	601a      	str	r2, [r3, #0]
}
 800665e:	bf00      	nop
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000754 	.word	0x20000754
 800666c:	20000bb4 	.word	0x20000bb4
 8006670:	20000bc8 	.word	0x20000bc8
 8006674:	20000be4 	.word	0x20000be4
 8006678:	20000bf8 	.word	0x20000bf8
 800667c:	20000c10 	.word	0x20000c10
 8006680:	20000bdc 	.word	0x20000bdc
 8006684:	20000be0 	.word	0x20000be0

08006688 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800668e:	e019      	b.n	80066c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006690:	f000 fdbc 	bl	800720c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006694:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <prvCheckTasksWaitingTermination+0x4c>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe fd65 	bl	8005170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <prvCheckTasksWaitingTermination+0x50>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <prvCheckTasksWaitingTermination+0x50>)
 80066ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <prvCheckTasksWaitingTermination+0x54>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	4a09      	ldr	r2, [pc, #36]	; (80066dc <prvCheckTasksWaitingTermination+0x54>)
 80066b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ba:	f000 fdd5 	bl	8007268 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f80e 	bl	80066e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <prvCheckTasksWaitingTermination+0x54>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e1      	bne.n	8006690 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000bf8 	.word	0x20000bf8
 80066d8:	20000c24 	.word	0x20000c24
 80066dc:	20000c0c 	.word	0x20000c0c

080066e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d108      	bne.n	8006704 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 ff64 	bl	80075c4 <vPortFree>
				vPortFree( pxTCB );
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 ff61 	bl	80075c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006702:	e017      	b.n	8006734 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800670a:	2b01      	cmp	r3, #1
 800670c:	d103      	bne.n	8006716 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 ff58 	bl	80075c4 <vPortFree>
	}
 8006714:	e00e      	b.n	8006734 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800671c:	2b02      	cmp	r3, #2
 800671e:	d009      	beq.n	8006734 <prvDeleteTCB+0x54>
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	e7fe      	b.n	8006732 <prvDeleteTCB+0x52>
	}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006742:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <prvResetNextTaskUnblockTime+0x38>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <prvResetNextTaskUnblockTime+0x3c>)
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006754:	e008      	b.n	8006768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <prvResetNextTaskUnblockTime+0x38>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4a04      	ldr	r2, [pc, #16]	; (8006778 <prvResetNextTaskUnblockTime+0x3c>)
 8006766:	6013      	str	r3, [r2, #0]
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	20000bdc 	.word	0x20000bdc
 8006778:	20000c44 	.word	0x20000c44

0800677c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <xTaskGetSchedulerState+0x34>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800678a:	2301      	movs	r3, #1
 800678c:	607b      	str	r3, [r7, #4]
 800678e:	e008      	b.n	80067a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <xTaskGetSchedulerState+0x38>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d102      	bne.n	800679e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006798:	2302      	movs	r3, #2
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	e001      	b.n	80067a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067a2:	687b      	ldr	r3, [r7, #4]
	}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	20000c30 	.word	0x20000c30
 80067b4:	20000c4c 	.word	0x20000c4c

080067b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d054      	beq.n	8006878 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067ce:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <xTaskPriorityDisinherit+0xcc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d009      	beq.n	80067ec <xTaskPriorityDisinherit+0x34>
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e7fe      	b.n	80067ea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <xTaskPriorityDisinherit+0x50>
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60bb      	str	r3, [r7, #8]
 8006806:	e7fe      	b.n	8006806 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	1e5a      	subs	r2, r3, #1
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681a:	429a      	cmp	r2, r3
 800681c:	d02c      	beq.n	8006878 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006822:	2b00      	cmp	r3, #0
 8006824:	d128      	bne.n	8006878 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3304      	adds	r3, #4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fca0 	bl	8005170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <xTaskPriorityDisinherit+0xd0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d903      	bls.n	8006858 <xTaskPriorityDisinherit+0xa0>
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <xTaskPriorityDisinherit+0xd0>)
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4a09      	ldr	r2, [pc, #36]	; (800688c <xTaskPriorityDisinherit+0xd4>)
 8006866:	441a      	add	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fe fc21 	bl	80050b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006878:	697b      	ldr	r3, [r7, #20]
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000750 	.word	0x20000750
 8006888:	20000c2c 	.word	0x20000c2c
 800688c:	20000754 	.word	0x20000754

08006890 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <prvAddCurrentTaskToDelayedList+0x90>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068a0:	4b20      	ldr	r3, [pc, #128]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fc62 	bl	8005170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	d10a      	bne.n	80068ca <prvAddCurrentTaskToDelayedList+0x3a>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ba:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4819      	ldr	r0, [pc, #100]	; (8006928 <prvAddCurrentTaskToDelayedList+0x98>)
 80068c4:	f7fe fbf7 	bl	80050b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068c8:	e026      	b.n	8006918 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d209      	bcs.n	80068f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <prvAddCurrentTaskToDelayedList+0x9c>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f7fe fc05 	bl	80050fe <vListInsert>
}
 80068f4:	e010      	b.n	8006918 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <prvAddCurrentTaskToDelayedList+0x94>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7fe fbfb 	bl	80050fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	d202      	bcs.n	8006918 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006912:	4a08      	ldr	r2, [pc, #32]	; (8006934 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000c28 	.word	0x20000c28
 8006924:	20000750 	.word	0x20000750
 8006928:	20000c10 	.word	0x20000c10
 800692c:	20000be0 	.word	0x20000be0
 8006930:	20000bdc 	.word	0x20000bdc
 8006934:	20000c44 	.word	0x20000c44

08006938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006942:	f000 faff 	bl	8006f44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006946:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <xTimerCreateTimerTask+0x80>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d021      	beq.n	8006992 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006956:	1d3a      	adds	r2, r7, #4
 8006958:	f107 0108 	add.w	r1, r7, #8
 800695c:	f107 030c 	add.w	r3, r7, #12
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fb61 	bl	8005028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	9202      	str	r2, [sp, #8]
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	2302      	movs	r3, #2
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	460a      	mov	r2, r1
 8006978:	4910      	ldr	r1, [pc, #64]	; (80069bc <xTimerCreateTimerTask+0x84>)
 800697a:	4811      	ldr	r0, [pc, #68]	; (80069c0 <xTimerCreateTimerTask+0x88>)
 800697c:	f7ff f8f6 	bl	8005b6c <xTaskCreateStatic>
 8006980:	4602      	mov	r2, r0
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <xTimerCreateTimerTask+0x8c>)
 8006984:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006986:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <xTimerCreateTimerTask+0x8c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800698e:	2301      	movs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <xTimerCreateTimerTask+0x74>
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	e7fe      	b.n	80069aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80069ac:	697b      	ldr	r3, [r7, #20]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000c80 	.word	0x20000c80
 80069bc:	080080c4 	.word	0x080080c4
 80069c0:	08006af9 	.word	0x08006af9
 80069c4:	20000c84 	.word	0x20000c84

080069c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <xTimerGenericCommand+0x2c>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	623b      	str	r3, [r7, #32]
 80069f2:	e7fe      	b.n	80069f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069f4:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <xTimerGenericCommand+0x94>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d02a      	beq.n	8006a52 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	dc18      	bgt.n	8006a40 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a0e:	f7ff feb5 	bl	800677c <xTaskGetSchedulerState>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d109      	bne.n	8006a2c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a18:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <xTimerGenericCommand+0x94>)
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	f107 0110 	add.w	r1, r7, #16
 8006a20:	2300      	movs	r3, #0
 8006a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a24:	f7fe fccc 	bl	80053c0 <xQueueGenericSend>
 8006a28:	6278      	str	r0, [r7, #36]	; 0x24
 8006a2a:	e012      	b.n	8006a52 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <xTimerGenericCommand+0x94>)
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	f107 0110 	add.w	r1, r7, #16
 8006a34:	2300      	movs	r3, #0
 8006a36:	2200      	movs	r2, #0
 8006a38:	f7fe fcc2 	bl	80053c0 <xQueueGenericSend>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24
 8006a3e:	e008      	b.n	8006a52 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a40:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <xTimerGenericCommand+0x94>)
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	f107 0110 	add.w	r1, r7, #16
 8006a48:	2300      	movs	r3, #0
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	f7fe fdb2 	bl	80055b4 <xQueueGenericSendFromISR>
 8006a50:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3728      	adds	r7, #40	; 0x28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000c80 	.word	0x20000c80

08006a60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6a:	4b22      	ldr	r3, [pc, #136]	; (8006af4 <prvProcessExpiredTimer+0x94>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe fb79 	bl	8005170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d021      	beq.n	8006ad0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	699a      	ldr	r2, [r3, #24]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	18d1      	adds	r1, r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	6978      	ldr	r0, [r7, #20]
 8006a9a:	f000 f8d1 	bl	8006c40 <prvInsertTimerInActiveList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01e      	beq.n	8006ae2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	2100      	movs	r1, #0
 8006aae:	6978      	ldr	r0, [r7, #20]
 8006ab0:	f7ff ff8a 	bl	80069c8 <xTimerGenericCommand>
 8006ab4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d112      	bne.n	8006ae2 <prvProcessExpiredTimer+0x82>
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	e7fe      	b.n	8006ace <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	6978      	ldr	r0, [r7, #20]
 8006ae8:	4798      	blx	r3
}
 8006aea:	bf00      	nop
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000c78 	.word	0x20000c78

08006af8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b00:	f107 0308 	add.w	r3, r7, #8
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f857 	bl	8006bb8 <prvGetNextExpireTime>
 8006b0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f803 	bl	8006b1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b16:	f000 f8d5 	bl	8006cc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b1a:	e7f1      	b.n	8006b00 <prvTimerTask+0x8>

08006b1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b26:	f7ff fa57 	bl	8005fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b2a:	f107 0308 	add.w	r3, r7, #8
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f866 	bl	8006c00 <prvSampleTimeNow>
 8006b34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d130      	bne.n	8006b9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <prvProcessTimerOrBlockTask+0x3c>
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d806      	bhi.n	8006b58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b4a:	f7ff fa53 	bl	8005ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff85 	bl	8006a60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b56:	e024      	b.n	8006ba2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <prvProcessTimerOrBlockTask+0x90>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <prvProcessTimerOrBlockTask+0x50>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <prvProcessTimerOrBlockTask+0x52>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b70:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <prvProcessTimerOrBlockTask+0x94>)
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f7fe ffc1 	bl	8005b04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b82:	f7ff fa37 	bl	8005ff4 <xTaskResumeAll>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b8c:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <prvProcessTimerOrBlockTask+0x98>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	f3bf 8f6f 	isb	sy
}
 8006b9c:	e001      	b.n	8006ba2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b9e:	f7ff fa29 	bl	8005ff4 <xTaskResumeAll>
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000c7c 	.word	0x20000c7c
 8006bb0:	20000c80 	.word	0x20000c80
 8006bb4:	e000ed04 	.word	0xe000ed04

08006bb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <prvGetNextExpireTime+0x44>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <prvGetNextExpireTime+0x16>
 8006bca:	2201      	movs	r2, #1
 8006bcc:	e000      	b.n	8006bd0 <prvGetNextExpireTime+0x18>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d105      	bne.n	8006be8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bdc:	4b07      	ldr	r3, [pc, #28]	; (8006bfc <prvGetNextExpireTime+0x44>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e001      	b.n	8006bec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bec:	68fb      	ldr	r3, [r7, #12]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	20000c78 	.word	0x20000c78

08006c00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c08:	f7ff fa90 	bl	800612c <xTaskGetTickCount>
 8006c0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <prvSampleTimeNow+0x3c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d205      	bcs.n	8006c24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c18:	f000 f930 	bl	8006e7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c2a:	4a04      	ldr	r2, [pc, #16]	; (8006c3c <prvSampleTimeNow+0x3c>)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000c88 	.word	0x20000c88

08006c40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d812      	bhi.n	8006c8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	1ad2      	subs	r2, r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d302      	bcc.n	8006c7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e01b      	b.n	8006cb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c7a:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <prvInsertTimerInActiveList+0x7c>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fe fa3a 	bl	80050fe <vListInsert>
 8006c8a:	e012      	b.n	8006cb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d206      	bcs.n	8006ca2 <prvInsertTimerInActiveList+0x62>
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d302      	bcc.n	8006ca2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e007      	b.n	8006cb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ca2:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <prvInsertTimerInActiveList+0x80>)
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f7fe fa26 	bl	80050fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cb2:	697b      	ldr	r3, [r7, #20]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000c7c 	.word	0x20000c7c
 8006cc0:	20000c78 	.word	0x20000c78

08006cc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08e      	sub	sp, #56	; 0x38
 8006cc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cca:	e0c6      	b.n	8006e5a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	da17      	bge.n	8006d02 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <prvProcessReceivedCommands+0x2e>
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e7fe      	b.n	8006cf0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf8:	6850      	ldr	r0, [r2, #4]
 8006cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfc:	6892      	ldr	r2, [r2, #8]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f2c0 80a7 	blt.w	8006e58 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fa28 	bl	8005170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d20:	463b      	mov	r3, r7
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff ff6c 	bl	8006c00 <prvSampleTimeNow>
 8006d28:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	f200 8094 	bhi.w	8006e5a <prvProcessReceivedCommands+0x196>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <prvProcessReceivedCommands+0x74>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d61 	.word	0x08006d61
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006dd3 	.word	0x08006dd3
 8006d48:	08006de7 	.word	0x08006de7
 8006d4c:	08006e2f 	.word	0x08006e2f
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d61 	.word	0x08006d61
 8006d58:	08006dd3 	.word	0x08006dd3
 8006d5c:	08006de7 	.word	0x08006de7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	18d1      	adds	r1, r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d80:	f7ff ff5e 	bl	8006c40 <prvInsertTimerInActiveList>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d067      	beq.n	8006e5a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d05c      	beq.n	8006e5a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	441a      	add	r2, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	2300      	movs	r3, #0
 8006dae:	2100      	movs	r1, #0
 8006db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db2:	f7ff fe09 	bl	80069c8 <xTimerGenericCommand>
 8006db6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d14d      	bne.n	8006e5a <prvProcessReceivedCommands+0x196>
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	e7fe      	b.n	8006dd0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006de4:	e039      	b.n	8006e5a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <prvProcessReceivedCommands+0x156>
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e7fe      	b.n	8006e18 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	18d1      	adds	r1, r2, r3
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e28:	f7ff ff0a 	bl	8006c40 <prvInsertTimerInActiveList>
					break;
 8006e2c:	e015      	b.n	8006e5a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e3e:	f000 fbc1 	bl	80075c4 <vPortFree>
 8006e42:	e00a      	b.n	8006e5a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e56:	e000      	b.n	8006e5a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <prvProcessReceivedCommands+0x1b4>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1d39      	adds	r1, r7, #4
 8006e60:	2200      	movs	r2, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fc3a 	bl	80056dc <xQueueReceive>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f47f af2e 	bne.w	8006ccc <prvProcessReceivedCommands+0x8>
	}
}
 8006e70:	bf00      	nop
 8006e72:	3730      	adds	r7, #48	; 0x30
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000c80 	.word	0x20000c80

08006e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e82:	e047      	b.n	8006f14 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <prvSwitchTimerLists+0xc0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e8e:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <prvSwitchTimerLists+0xc0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe f967 	bl	8005170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02d      	beq.n	8006f14 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d90e      	bls.n	8006ee8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ed6:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <prvSwitchTimerLists+0xc0>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7fe f90c 	bl	80050fe <vListInsert>
 8006ee6:	e015      	b.n	8006f14 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	2300      	movs	r3, #0
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fd68 	bl	80069c8 <xTimerGenericCommand>
 8006ef8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <prvSwitchTimerLists+0x98>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	e7fe      	b.n	8006f12 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <prvSwitchTimerLists+0xc0>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1b2      	bne.n	8006e84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f1e:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <prvSwitchTimerLists+0xc0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <prvSwitchTimerLists+0xc4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a04      	ldr	r2, [pc, #16]	; (8006f3c <prvSwitchTimerLists+0xc0>)
 8006f2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f2c:	4a04      	ldr	r2, [pc, #16]	; (8006f40 <prvSwitchTimerLists+0xc4>)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	6013      	str	r3, [r2, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000c78 	.word	0x20000c78
 8006f40:	20000c7c 	.word	0x20000c7c

08006f44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f4a:	f000 f95f 	bl	800720c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f4e:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <prvCheckForValidListAndQueue+0x60>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d120      	bne.n	8006f98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f56:	4814      	ldr	r0, [pc, #80]	; (8006fa8 <prvCheckForValidListAndQueue+0x64>)
 8006f58:	f7fe f880 	bl	800505c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f5c:	4813      	ldr	r0, [pc, #76]	; (8006fac <prvCheckForValidListAndQueue+0x68>)
 8006f5e:	f7fe f87d 	bl	800505c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <prvCheckForValidListAndQueue+0x6c>)
 8006f64:	4a10      	ldr	r2, [pc, #64]	; (8006fa8 <prvCheckForValidListAndQueue+0x64>)
 8006f66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f68:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <prvCheckForValidListAndQueue+0x70>)
 8006f6a:	4a10      	ldr	r2, [pc, #64]	; (8006fac <prvCheckForValidListAndQueue+0x68>)
 8006f6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <prvCheckForValidListAndQueue+0x74>)
 8006f74:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <prvCheckForValidListAndQueue+0x78>)
 8006f76:	2110      	movs	r1, #16
 8006f78:	200a      	movs	r0, #10
 8006f7a:	f7fe f98b 	bl	8005294 <xQueueGenericCreateStatic>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <prvCheckForValidListAndQueue+0x60>)
 8006f82:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f84:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <prvCheckForValidListAndQueue+0x60>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <prvCheckForValidListAndQueue+0x60>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	490b      	ldr	r1, [pc, #44]	; (8006fc0 <prvCheckForValidListAndQueue+0x7c>)
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fd8e 	bl	8005ab4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f98:	f000 f966 	bl	8007268 <vPortExitCritical>
}
 8006f9c:	bf00      	nop
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000c80 	.word	0x20000c80
 8006fa8:	20000c50 	.word	0x20000c50
 8006fac:	20000c64 	.word	0x20000c64
 8006fb0:	20000c78 	.word	0x20000c78
 8006fb4:	20000c7c 	.word	0x20000c7c
 8006fb8:	20000d2c 	.word	0x20000d2c
 8006fbc:	20000c8c 	.word	0x20000c8c
 8006fc0:	080080cc 	.word	0x080080cc

08006fc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3b04      	subs	r3, #4
 8006fd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f023 0201 	bic.w	r2, r3, #1
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ff4:	4a0c      	ldr	r2, [pc, #48]	; (8007028 <pxPortInitialiseStack+0x64>)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3b14      	subs	r3, #20
 8006ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3b04      	subs	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f06f 0202 	mvn.w	r2, #2
 8007012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3b20      	subs	r3, #32
 8007018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	0800702d 	.word	0x0800702d

0800702c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007036:	4b11      	ldr	r3, [pc, #68]	; (800707c <prvTaskExitError+0x50>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703e:	d009      	beq.n	8007054 <prvTaskExitError+0x28>
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e7fe      	b.n	8007052 <prvTaskExitError+0x26>
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007066:	bf00      	nop
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0fc      	beq.n	8007068 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	2000000c 	.word	0x2000000c

08007080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <pxCurrentTCBConst2>)
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708a:	f380 8809 	msr	PSP, r0
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8811 	msr	BASEPRI, r0
 800709a:	4770      	bx	lr
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst2>:
 80070a0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070a8:	4808      	ldr	r0, [pc, #32]	; (80070cc <prvPortStartFirstTask+0x24>)
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	6800      	ldr	r0, [r0, #0]
 80070ae:	f380 8808 	msr	MSP, r0
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8814 	msr	CONTROL, r0
 80070ba:	b662      	cpsie	i
 80070bc:	b661      	cpsie	f
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	df00      	svc	0
 80070c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ca:	bf00      	nop
 80070cc:	e000ed08 	.word	0xe000ed08

080070d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070d6:	4b44      	ldr	r3, [pc, #272]	; (80071e8 <xPortStartScheduler+0x118>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a44      	ldr	r2, [pc, #272]	; (80071ec <xPortStartScheduler+0x11c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d109      	bne.n	80070f4 <xPortStartScheduler+0x24>
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e7fe      	b.n	80070f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070f4:	4b3c      	ldr	r3, [pc, #240]	; (80071e8 <xPortStartScheduler+0x118>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3d      	ldr	r2, [pc, #244]	; (80071f0 <xPortStartScheduler+0x120>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d109      	bne.n	8007112 <xPortStartScheduler+0x42>
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e7fe      	b.n	8007110 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007112:	4b38      	ldr	r3, [pc, #224]	; (80071f4 <xPortStartScheduler+0x124>)
 8007114:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	22ff      	movs	r2, #255	; 0xff
 8007122:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007134:	b2da      	uxtb	r2, r3
 8007136:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <xPortStartScheduler+0x128>)
 8007138:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800713a:	4b30      	ldr	r3, [pc, #192]	; (80071fc <xPortStartScheduler+0x12c>)
 800713c:	2207      	movs	r2, #7
 800713e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007140:	e009      	b.n	8007156 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007142:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <xPortStartScheduler+0x12c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3b01      	subs	r3, #1
 8007148:	4a2c      	ldr	r2, [pc, #176]	; (80071fc <xPortStartScheduler+0x12c>)
 800714a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d0ef      	beq.n	8007142 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007162:	4b26      	ldr	r3, [pc, #152]	; (80071fc <xPortStartScheduler+0x12c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1c3 0307 	rsb	r3, r3, #7
 800716a:	2b04      	cmp	r3, #4
 800716c:	d009      	beq.n	8007182 <xPortStartScheduler+0xb2>
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	60bb      	str	r3, [r7, #8]
 8007180:	e7fe      	b.n	8007180 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007182:	4b1e      	ldr	r3, [pc, #120]	; (80071fc <xPortStartScheduler+0x12c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	4a1c      	ldr	r2, [pc, #112]	; (80071fc <xPortStartScheduler+0x12c>)
 800718a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800718c:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <xPortStartScheduler+0x12c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007194:	4a19      	ldr	r2, [pc, #100]	; (80071fc <xPortStartScheduler+0x12c>)
 8007196:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <xPortStartScheduler+0x130>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a16      	ldr	r2, [pc, #88]	; (8007200 <xPortStartScheduler+0x130>)
 80071a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071ac:	4b14      	ldr	r3, [pc, #80]	; (8007200 <xPortStartScheduler+0x130>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a13      	ldr	r2, [pc, #76]	; (8007200 <xPortStartScheduler+0x130>)
 80071b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071b8:	f000 f8d6 	bl	8007368 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <xPortStartScheduler+0x134>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071c2:	f000 f8f5 	bl	80073b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <xPortStartScheduler+0x138>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a0f      	ldr	r2, [pc, #60]	; (8007208 <xPortStartScheduler+0x138>)
 80071cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071d2:	f7ff ff69 	bl	80070a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071d6:	f7ff f871 	bl	80062bc <vTaskSwitchContext>
	prvTaskExitError();
 80071da:	f7ff ff27 	bl	800702c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	e000ed00 	.word	0xe000ed00
 80071ec:	410fc271 	.word	0x410fc271
 80071f0:	410fc270 	.word	0x410fc270
 80071f4:	e000e400 	.word	0xe000e400
 80071f8:	20000d7c 	.word	0x20000d7c
 80071fc:	20000d80 	.word	0x20000d80
 8007200:	e000ed20 	.word	0xe000ed20
 8007204:	2000000c 	.word	0x2000000c
 8007208:	e000ef34 	.word	0xe000ef34

0800720c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <vPortEnterCritical+0x54>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3301      	adds	r3, #1
 800722a:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <vPortEnterCritical+0x54>)
 800722c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800722e:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <vPortEnterCritical+0x54>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10e      	bne.n	8007254 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007236:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <vPortEnterCritical+0x58>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <vPortEnterCritical+0x48>
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	603b      	str	r3, [r7, #0]
 8007252:	e7fe      	b.n	8007252 <vPortEnterCritical+0x46>
	}
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	2000000c 	.word	0x2000000c
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800726e:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <vPortExitCritical+0x4c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <vPortExitCritical+0x22>
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	607b      	str	r3, [r7, #4]
 8007288:	e7fe      	b.n	8007288 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <vPortExitCritical+0x4c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3b01      	subs	r3, #1
 8007290:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <vPortExitCritical+0x4c>)
 8007292:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <vPortExitCritical+0x4c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <vPortExitCritical+0x3e>
 800729c:	2300      	movs	r3, #0
 800729e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c
	...

080072c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072c0:	f3ef 8009 	mrs	r0, PSP
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <pxCurrentTCBConst>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	f01e 0f10 	tst.w	lr, #16
 80072d0:	bf08      	it	eq
 80072d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072da:	6010      	str	r0, [r2, #0]
 80072dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072e4:	f380 8811 	msr	BASEPRI, r0
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f7fe ffe4 	bl	80062bc <vTaskSwitchContext>
 80072f4:	f04f 0000 	mov.w	r0, #0
 80072f8:	f380 8811 	msr	BASEPRI, r0
 80072fc:	bc09      	pop	{r0, r3}
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	6808      	ldr	r0, [r1, #0]
 8007302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007306:	f01e 0f10 	tst.w	lr, #16
 800730a:	bf08      	it	eq
 800730c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007310:	f380 8809 	msr	PSP, r0
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w

08007320 <pxCurrentTCBConst>:
 8007320:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007340:	f7fe ff04 	bl	800614c <xTaskIncrementTick>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800734a:	4b06      	ldr	r3, [pc, #24]	; (8007364 <SysTick_Handler+0x3c>)
 800734c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	2300      	movs	r3, #0
 8007354:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <vPortSetupTimerInterrupt+0x34>)
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007372:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <vPortSetupTimerInterrupt+0x38>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <vPortSetupTimerInterrupt+0x3c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a0a      	ldr	r2, [pc, #40]	; (80073a8 <vPortSetupTimerInterrupt+0x40>)
 800737e:	fba2 2303 	umull	r2, r3, r2, r3
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	4a09      	ldr	r2, [pc, #36]	; (80073ac <vPortSetupTimerInterrupt+0x44>)
 8007386:	3b01      	subs	r3, #1
 8007388:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800738a:	4b04      	ldr	r3, [pc, #16]	; (800739c <vPortSetupTimerInterrupt+0x34>)
 800738c:	2207      	movs	r2, #7
 800738e:	601a      	str	r2, [r3, #0]
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	e000e010 	.word	0xe000e010
 80073a0:	e000e018 	.word	0xe000e018
 80073a4:	20000000 	.word	0x20000000
 80073a8:	10624dd3 	.word	0x10624dd3
 80073ac:	e000e014 	.word	0xe000e014

080073b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073c0 <vPortEnableVFP+0x10>
 80073b4:	6801      	ldr	r1, [r0, #0]
 80073b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ba:	6001      	str	r1, [r0, #0]
 80073bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073be:	bf00      	nop
 80073c0:	e000ed88 	.word	0xe000ed88

080073c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073ca:	f3ef 8305 	mrs	r3, IPSR
 80073ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b0f      	cmp	r3, #15
 80073d4:	d913      	bls.n	80073fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073d6:	4a16      	ldr	r2, [pc, #88]	; (8007430 <vPortValidateInterruptPriority+0x6c>)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073e0:	4b14      	ldr	r3, [pc, #80]	; (8007434 <vPortValidateInterruptPriority+0x70>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	7afa      	ldrb	r2, [r7, #11]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d209      	bcs.n	80073fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	e7fe      	b.n	80073fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073fe:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <vPortValidateInterruptPriority+0x74>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <vPortValidateInterruptPriority+0x78>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d909      	bls.n	8007422 <vPortValidateInterruptPriority+0x5e>
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	e7fe      	b.n	8007420 <vPortValidateInterruptPriority+0x5c>
	}
 8007422:	bf00      	nop
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	e000e3f0 	.word	0xe000e3f0
 8007434:	20000d7c 	.word	0x20000d7c
 8007438:	e000ed0c 	.word	0xe000ed0c
 800743c:	20000d80 	.word	0x20000d80

08007440 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800744c:	f7fe fdc4 	bl	8005fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007450:	4b57      	ldr	r3, [pc, #348]	; (80075b0 <pvPortMalloc+0x170>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007458:	f000 f90c 	bl	8007674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800745c:	4b55      	ldr	r3, [pc, #340]	; (80075b4 <pvPortMalloc+0x174>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4013      	ands	r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 808c 	bne.w	8007582 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01c      	beq.n	80074aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007470:	2208      	movs	r2, #8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b00      	cmp	r3, #0
 8007480:	d013      	beq.n	80074aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f023 0307 	bic.w	r3, r3, #7
 8007488:	3308      	adds	r3, #8
 800748a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <pvPortMalloc+0x6a>
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e7fe      	b.n	80074a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d068      	beq.n	8007582 <pvPortMalloc+0x142>
 80074b0:	4b41      	ldr	r3, [pc, #260]	; (80075b8 <pvPortMalloc+0x178>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d863      	bhi.n	8007582 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074ba:	4b40      	ldr	r3, [pc, #256]	; (80075bc <pvPortMalloc+0x17c>)
 80074bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074be:	4b3f      	ldr	r3, [pc, #252]	; (80075bc <pvPortMalloc+0x17c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074c4:	e004      	b.n	80074d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d903      	bls.n	80074e2 <pvPortMalloc+0xa2>
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f1      	bne.n	80074c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074e2:	4b33      	ldr	r3, [pc, #204]	; (80075b0 <pvPortMalloc+0x170>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d04a      	beq.n	8007582 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2208      	movs	r2, #8
 80074f2:	4413      	add	r3, r2
 80074f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	2308      	movs	r3, #8
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	429a      	cmp	r2, r3
 800750c:	d91e      	bls.n	800754c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800750e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4413      	add	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <pvPortMalloc+0xf4>
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	e7fe      	b.n	8007532 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007546:	69b8      	ldr	r0, [r7, #24]
 8007548:	f000 f8f6 	bl	8007738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800754c:	4b1a      	ldr	r3, [pc, #104]	; (80075b8 <pvPortMalloc+0x178>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <pvPortMalloc+0x178>)
 8007558:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800755a:	4b17      	ldr	r3, [pc, #92]	; (80075b8 <pvPortMalloc+0x178>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <pvPortMalloc+0x180>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d203      	bcs.n	800756e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <pvPortMalloc+0x178>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <pvPortMalloc+0x180>)
 800756c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <pvPortMalloc+0x174>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	431a      	orrs	r2, r3
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007582:	f7fe fd37 	bl	8005ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <pvPortMalloc+0x164>
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e7fe      	b.n	80075a2 <pvPortMalloc+0x162>
	return pvReturn;
 80075a4:	69fb      	ldr	r3, [r7, #28]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3728      	adds	r7, #40	; 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20001944 	.word	0x20001944
 80075b4:	20001950 	.word	0x20001950
 80075b8:	20001948 	.word	0x20001948
 80075bc:	2000193c 	.word	0x2000193c
 80075c0:	2000194c 	.word	0x2000194c

080075c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d046      	beq.n	8007664 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075d6:	2308      	movs	r3, #8
 80075d8:	425b      	negs	r3, r3
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4413      	add	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	4b20      	ldr	r3, [pc, #128]	; (800766c <vPortFree+0xa8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4013      	ands	r3, r2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <vPortFree+0x42>
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e7fe      	b.n	8007604 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <vPortFree+0x5e>
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	e7fe      	b.n	8007620 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	4b11      	ldr	r3, [pc, #68]	; (800766c <vPortFree+0xa8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4013      	ands	r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d019      	beq.n	8007664 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d115      	bne.n	8007664 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	4b0b      	ldr	r3, [pc, #44]	; (800766c <vPortFree+0xa8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	43db      	mvns	r3, r3
 8007642:	401a      	ands	r2, r3
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007648:	f7fe fcc6 	bl	8005fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <vPortFree+0xac>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4413      	add	r3, r2
 8007656:	4a06      	ldr	r2, [pc, #24]	; (8007670 <vPortFree+0xac>)
 8007658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800765a:	6938      	ldr	r0, [r7, #16]
 800765c:	f000 f86c 	bl	8007738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007660:	f7fe fcc8 	bl	8005ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007664:	bf00      	nop
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20001950 	.word	0x20001950
 8007670:	20001948 	.word	0x20001948

08007674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800767a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800767e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007680:	4b27      	ldr	r3, [pc, #156]	; (8007720 <prvHeapInit+0xac>)
 8007682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00c      	beq.n	80076a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3307      	adds	r3, #7
 8007692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	4a1f      	ldr	r2, [pc, #124]	; (8007720 <prvHeapInit+0xac>)
 80076a4:	4413      	add	r3, r2
 80076a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <prvHeapInit+0xb0>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076b2:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <prvHeapInit+0xb0>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076c0:	2208      	movs	r2, #8
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1a9b      	subs	r3, r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0307 	bic.w	r3, r3, #7
 80076ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <prvHeapInit+0xb4>)
 80076d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076d6:	4b14      	ldr	r3, [pc, #80]	; (8007728 <prvHeapInit+0xb4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076de:	4b12      	ldr	r3, [pc, #72]	; (8007728 <prvHeapInit+0xb4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076f4:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvHeapInit+0xb4>)
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	4a0a      	ldr	r2, [pc, #40]	; (800772c <prvHeapInit+0xb8>)
 8007702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	4a09      	ldr	r2, [pc, #36]	; (8007730 <prvHeapInit+0xbc>)
 800770a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800770c:	4b09      	ldr	r3, [pc, #36]	; (8007734 <prvHeapInit+0xc0>)
 800770e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	20000d84 	.word	0x20000d84
 8007724:	2000193c 	.word	0x2000193c
 8007728:	20001944 	.word	0x20001944
 800772c:	2000194c 	.word	0x2000194c
 8007730:	20001948 	.word	0x20001948
 8007734:	20001950 	.word	0x20001950

08007738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007740:	4b28      	ldr	r3, [pc, #160]	; (80077e4 <prvInsertBlockIntoFreeList+0xac>)
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e002      	b.n	800774c <prvInsertBlockIntoFreeList+0x14>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d8f7      	bhi.n	8007746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	4413      	add	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	429a      	cmp	r2, r3
 8007766:	d108      	bne.n	800777a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	441a      	add	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	441a      	add	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d118      	bne.n	80077c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d00d      	beq.n	80077b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	441a      	add	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	e008      	b.n	80077c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <prvInsertBlockIntoFreeList+0xb0>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e003      	b.n	80077c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d002      	beq.n	80077d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	2000193c 	.word	0x2000193c
 80077e8:	20001944 	.word	0x20001944

080077ec <__errno>:
 80077ec:	4b01      	ldr	r3, [pc, #4]	; (80077f4 <__errno+0x8>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000010 	.word	0x20000010

080077f8 <__libc_init_array>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4e0d      	ldr	r6, [pc, #52]	; (8007830 <__libc_init_array+0x38>)
 80077fc:	4c0d      	ldr	r4, [pc, #52]	; (8007834 <__libc_init_array+0x3c>)
 80077fe:	1ba4      	subs	r4, r4, r6
 8007800:	10a4      	asrs	r4, r4, #2
 8007802:	2500      	movs	r5, #0
 8007804:	42a5      	cmp	r5, r4
 8007806:	d109      	bne.n	800781c <__libc_init_array+0x24>
 8007808:	4e0b      	ldr	r6, [pc, #44]	; (8007838 <__libc_init_array+0x40>)
 800780a:	4c0c      	ldr	r4, [pc, #48]	; (800783c <__libc_init_array+0x44>)
 800780c:	f000 fc28 	bl	8008060 <_init>
 8007810:	1ba4      	subs	r4, r4, r6
 8007812:	10a4      	asrs	r4, r4, #2
 8007814:	2500      	movs	r5, #0
 8007816:	42a5      	cmp	r5, r4
 8007818:	d105      	bne.n	8007826 <__libc_init_array+0x2e>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007820:	4798      	blx	r3
 8007822:	3501      	adds	r5, #1
 8007824:	e7ee      	b.n	8007804 <__libc_init_array+0xc>
 8007826:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800782a:	4798      	blx	r3
 800782c:	3501      	adds	r5, #1
 800782e:	e7f2      	b.n	8007816 <__libc_init_array+0x1e>
 8007830:	080081e8 	.word	0x080081e8
 8007834:	080081e8 	.word	0x080081e8
 8007838:	080081e8 	.word	0x080081e8
 800783c:	080081ec 	.word	0x080081ec

08007840 <memcpy>:
 8007840:	b510      	push	{r4, lr}
 8007842:	1e43      	subs	r3, r0, #1
 8007844:	440a      	add	r2, r1
 8007846:	4291      	cmp	r1, r2
 8007848:	d100      	bne.n	800784c <memcpy+0xc>
 800784a:	bd10      	pop	{r4, pc}
 800784c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007854:	e7f7      	b.n	8007846 <memcpy+0x6>

08007856 <memset>:
 8007856:	4402      	add	r2, r0
 8007858:	4603      	mov	r3, r0
 800785a:	4293      	cmp	r3, r2
 800785c:	d100      	bne.n	8007860 <memset+0xa>
 800785e:	4770      	bx	lr
 8007860:	f803 1b01 	strb.w	r1, [r3], #1
 8007864:	e7f9      	b.n	800785a <memset+0x4>
	...

08007868 <siprintf>:
 8007868:	b40e      	push	{r1, r2, r3}
 800786a:	b500      	push	{lr}
 800786c:	b09c      	sub	sp, #112	; 0x70
 800786e:	ab1d      	add	r3, sp, #116	; 0x74
 8007870:	9002      	str	r0, [sp, #8]
 8007872:	9006      	str	r0, [sp, #24]
 8007874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007878:	4809      	ldr	r0, [pc, #36]	; (80078a0 <siprintf+0x38>)
 800787a:	9107      	str	r1, [sp, #28]
 800787c:	9104      	str	r1, [sp, #16]
 800787e:	4909      	ldr	r1, [pc, #36]	; (80078a4 <siprintf+0x3c>)
 8007880:	f853 2b04 	ldr.w	r2, [r3], #4
 8007884:	9105      	str	r1, [sp, #20]
 8007886:	6800      	ldr	r0, [r0, #0]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	a902      	add	r1, sp, #8
 800788c:	f000 f866 	bl	800795c <_svfiprintf_r>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	b01c      	add	sp, #112	; 0x70
 8007898:	f85d eb04 	ldr.w	lr, [sp], #4
 800789c:	b003      	add	sp, #12
 800789e:	4770      	bx	lr
 80078a0:	20000010 	.word	0x20000010
 80078a4:	ffff0208 	.word	0xffff0208

080078a8 <__ssputs_r>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	688e      	ldr	r6, [r1, #8]
 80078ae:	429e      	cmp	r6, r3
 80078b0:	4682      	mov	sl, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	4699      	mov	r9, r3
 80078b8:	d837      	bhi.n	800792a <__ssputs_r+0x82>
 80078ba:	898a      	ldrh	r2, [r1, #12]
 80078bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c0:	d031      	beq.n	8007926 <__ssputs_r+0x7e>
 80078c2:	6825      	ldr	r5, [r4, #0]
 80078c4:	6909      	ldr	r1, [r1, #16]
 80078c6:	1a6f      	subs	r7, r5, r1
 80078c8:	6965      	ldr	r5, [r4, #20]
 80078ca:	2302      	movs	r3, #2
 80078cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80078d4:	f109 0301 	add.w	r3, r9, #1
 80078d8:	443b      	add	r3, r7
 80078da:	429d      	cmp	r5, r3
 80078dc:	bf38      	it	cc
 80078de:	461d      	movcc	r5, r3
 80078e0:	0553      	lsls	r3, r2, #21
 80078e2:	d530      	bpl.n	8007946 <__ssputs_r+0x9e>
 80078e4:	4629      	mov	r1, r5
 80078e6:	f000 fb21 	bl	8007f2c <_malloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	b950      	cbnz	r0, 8007904 <__ssputs_r+0x5c>
 80078ee:	230c      	movs	r3, #12
 80078f0:	f8ca 3000 	str.w	r3, [sl]
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	463a      	mov	r2, r7
 8007906:	6921      	ldr	r1, [r4, #16]
 8007908:	f7ff ff9a 	bl	8007840 <memcpy>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	6126      	str	r6, [r4, #16]
 800791a:	6165      	str	r5, [r4, #20]
 800791c:	443e      	add	r6, r7
 800791e:	1bed      	subs	r5, r5, r7
 8007920:	6026      	str	r6, [r4, #0]
 8007922:	60a5      	str	r5, [r4, #8]
 8007924:	464e      	mov	r6, r9
 8007926:	454e      	cmp	r6, r9
 8007928:	d900      	bls.n	800792c <__ssputs_r+0x84>
 800792a:	464e      	mov	r6, r9
 800792c:	4632      	mov	r2, r6
 800792e:	4641      	mov	r1, r8
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	f000 fa93 	bl	8007e5c <memmove>
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	1b9b      	subs	r3, r3, r6
 800793a:	60a3      	str	r3, [r4, #8]
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	441e      	add	r6, r3
 8007940:	6026      	str	r6, [r4, #0]
 8007942:	2000      	movs	r0, #0
 8007944:	e7dc      	b.n	8007900 <__ssputs_r+0x58>
 8007946:	462a      	mov	r2, r5
 8007948:	f000 fb4a 	bl	8007fe0 <_realloc_r>
 800794c:	4606      	mov	r6, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	d1e2      	bne.n	8007918 <__ssputs_r+0x70>
 8007952:	6921      	ldr	r1, [r4, #16]
 8007954:	4650      	mov	r0, sl
 8007956:	f000 fa9b 	bl	8007e90 <_free_r>
 800795a:	e7c8      	b.n	80078ee <__ssputs_r+0x46>

0800795c <_svfiprintf_r>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	461d      	mov	r5, r3
 8007962:	898b      	ldrh	r3, [r1, #12]
 8007964:	061f      	lsls	r7, r3, #24
 8007966:	b09d      	sub	sp, #116	; 0x74
 8007968:	4680      	mov	r8, r0
 800796a:	460c      	mov	r4, r1
 800796c:	4616      	mov	r6, r2
 800796e:	d50f      	bpl.n	8007990 <_svfiprintf_r+0x34>
 8007970:	690b      	ldr	r3, [r1, #16]
 8007972:	b96b      	cbnz	r3, 8007990 <_svfiprintf_r+0x34>
 8007974:	2140      	movs	r1, #64	; 0x40
 8007976:	f000 fad9 	bl	8007f2c <_malloc_r>
 800797a:	6020      	str	r0, [r4, #0]
 800797c:	6120      	str	r0, [r4, #16]
 800797e:	b928      	cbnz	r0, 800798c <_svfiprintf_r+0x30>
 8007980:	230c      	movs	r3, #12
 8007982:	f8c8 3000 	str.w	r3, [r8]
 8007986:	f04f 30ff 	mov.w	r0, #4294967295
 800798a:	e0c8      	b.n	8007b1e <_svfiprintf_r+0x1c2>
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	6163      	str	r3, [r4, #20]
 8007990:	2300      	movs	r3, #0
 8007992:	9309      	str	r3, [sp, #36]	; 0x24
 8007994:	2320      	movs	r3, #32
 8007996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a0:	9503      	str	r5, [sp, #12]
 80079a2:	f04f 0b01 	mov.w	fp, #1
 80079a6:	4637      	mov	r7, r6
 80079a8:	463d      	mov	r5, r7
 80079aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079ae:	b10b      	cbz	r3, 80079b4 <_svfiprintf_r+0x58>
 80079b0:	2b25      	cmp	r3, #37	; 0x25
 80079b2:	d13e      	bne.n	8007a32 <_svfiprintf_r+0xd6>
 80079b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x76>
 80079ba:	4653      	mov	r3, sl
 80079bc:	4632      	mov	r2, r6
 80079be:	4621      	mov	r1, r4
 80079c0:	4640      	mov	r0, r8
 80079c2:	f7ff ff71 	bl	80078a8 <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80a4 	beq.w	8007b14 <_svfiprintf_r+0x1b8>
 80079cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ce:	4453      	add	r3, sl
 80079d0:	9309      	str	r3, [sp, #36]	; 0x24
 80079d2:	783b      	ldrb	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 809d 	beq.w	8007b14 <_svfiprintf_r+0x1b8>
 80079da:	2300      	movs	r3, #0
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ec:	931a      	str	r3, [sp, #104]	; 0x68
 80079ee:	462f      	mov	r7, r5
 80079f0:	2205      	movs	r2, #5
 80079f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079f6:	4850      	ldr	r0, [pc, #320]	; (8007b38 <_svfiprintf_r+0x1dc>)
 80079f8:	f7f8 fbf2 	bl	80001e0 <memchr>
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	b9d0      	cbnz	r0, 8007a36 <_svfiprintf_r+0xda>
 8007a00:	06d9      	lsls	r1, r3, #27
 8007a02:	bf44      	itt	mi
 8007a04:	2220      	movmi	r2, #32
 8007a06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a0a:	071a      	lsls	r2, r3, #28
 8007a0c:	bf44      	itt	mi
 8007a0e:	222b      	movmi	r2, #43	; 0x2b
 8007a10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a14:	782a      	ldrb	r2, [r5, #0]
 8007a16:	2a2a      	cmp	r2, #42	; 0x2a
 8007a18:	d015      	beq.n	8007a46 <_svfiprintf_r+0xea>
 8007a1a:	9a07      	ldr	r2, [sp, #28]
 8007a1c:	462f      	mov	r7, r5
 8007a1e:	2000      	movs	r0, #0
 8007a20:	250a      	movs	r5, #10
 8007a22:	4639      	mov	r1, r7
 8007a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a28:	3b30      	subs	r3, #48	; 0x30
 8007a2a:	2b09      	cmp	r3, #9
 8007a2c:	d94d      	bls.n	8007aca <_svfiprintf_r+0x16e>
 8007a2e:	b1b8      	cbz	r0, 8007a60 <_svfiprintf_r+0x104>
 8007a30:	e00f      	b.n	8007a52 <_svfiprintf_r+0xf6>
 8007a32:	462f      	mov	r7, r5
 8007a34:	e7b8      	b.n	80079a8 <_svfiprintf_r+0x4c>
 8007a36:	4a40      	ldr	r2, [pc, #256]	; (8007b38 <_svfiprintf_r+0x1dc>)
 8007a38:	1a80      	subs	r0, r0, r2
 8007a3a:	fa0b f000 	lsl.w	r0, fp, r0
 8007a3e:	4318      	orrs	r0, r3
 8007a40:	9004      	str	r0, [sp, #16]
 8007a42:	463d      	mov	r5, r7
 8007a44:	e7d3      	b.n	80079ee <_svfiprintf_r+0x92>
 8007a46:	9a03      	ldr	r2, [sp, #12]
 8007a48:	1d11      	adds	r1, r2, #4
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	9103      	str	r1, [sp, #12]
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	db01      	blt.n	8007a56 <_svfiprintf_r+0xfa>
 8007a52:	9207      	str	r2, [sp, #28]
 8007a54:	e004      	b.n	8007a60 <_svfiprintf_r+0x104>
 8007a56:	4252      	negs	r2, r2
 8007a58:	f043 0302 	orr.w	r3, r3, #2
 8007a5c:	9207      	str	r2, [sp, #28]
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	783b      	ldrb	r3, [r7, #0]
 8007a62:	2b2e      	cmp	r3, #46	; 0x2e
 8007a64:	d10c      	bne.n	8007a80 <_svfiprintf_r+0x124>
 8007a66:	787b      	ldrb	r3, [r7, #1]
 8007a68:	2b2a      	cmp	r3, #42	; 0x2a
 8007a6a:	d133      	bne.n	8007ad4 <_svfiprintf_r+0x178>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	1d1a      	adds	r2, r3, #4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	9203      	str	r2, [sp, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bfb8      	it	lt
 8007a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a7c:	3702      	adds	r7, #2
 8007a7e:	9305      	str	r3, [sp, #20]
 8007a80:	4d2e      	ldr	r5, [pc, #184]	; (8007b3c <_svfiprintf_r+0x1e0>)
 8007a82:	7839      	ldrb	r1, [r7, #0]
 8007a84:	2203      	movs	r2, #3
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7f8 fbaa 	bl	80001e0 <memchr>
 8007a8c:	b138      	cbz	r0, 8007a9e <_svfiprintf_r+0x142>
 8007a8e:	2340      	movs	r3, #64	; 0x40
 8007a90:	1b40      	subs	r0, r0, r5
 8007a92:	fa03 f000 	lsl.w	r0, r3, r0
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	4303      	orrs	r3, r0
 8007a9a:	3701      	adds	r7, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	7839      	ldrb	r1, [r7, #0]
 8007aa0:	4827      	ldr	r0, [pc, #156]	; (8007b40 <_svfiprintf_r+0x1e4>)
 8007aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aa6:	2206      	movs	r2, #6
 8007aa8:	1c7e      	adds	r6, r7, #1
 8007aaa:	f7f8 fb99 	bl	80001e0 <memchr>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d038      	beq.n	8007b24 <_svfiprintf_r+0x1c8>
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <_svfiprintf_r+0x1e8>)
 8007ab4:	bb13      	cbnz	r3, 8007afc <_svfiprintf_r+0x1a0>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	3308      	adds	r3, #8
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac4:	444b      	add	r3, r9
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	e76d      	b.n	80079a6 <_svfiprintf_r+0x4a>
 8007aca:	fb05 3202 	mla	r2, r5, r2, r3
 8007ace:	2001      	movs	r0, #1
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	e7a6      	b.n	8007a22 <_svfiprintf_r+0xc6>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	3701      	adds	r7, #1
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	4619      	mov	r1, r3
 8007adc:	250a      	movs	r5, #10
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae4:	3a30      	subs	r2, #48	; 0x30
 8007ae6:	2a09      	cmp	r2, #9
 8007ae8:	d903      	bls.n	8007af2 <_svfiprintf_r+0x196>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0c8      	beq.n	8007a80 <_svfiprintf_r+0x124>
 8007aee:	9105      	str	r1, [sp, #20]
 8007af0:	e7c6      	b.n	8007a80 <_svfiprintf_r+0x124>
 8007af2:	fb05 2101 	mla	r1, r5, r1, r2
 8007af6:	2301      	movs	r3, #1
 8007af8:	4607      	mov	r7, r0
 8007afa:	e7f0      	b.n	8007ade <_svfiprintf_r+0x182>
 8007afc:	ab03      	add	r3, sp, #12
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	4622      	mov	r2, r4
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007b04:	a904      	add	r1, sp, #16
 8007b06:	4640      	mov	r0, r8
 8007b08:	f3af 8000 	nop.w
 8007b0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b10:	4681      	mov	r9, r0
 8007b12:	d1d6      	bne.n	8007ac2 <_svfiprintf_r+0x166>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	065b      	lsls	r3, r3, #25
 8007b18:	f53f af35 	bmi.w	8007986 <_svfiprintf_r+0x2a>
 8007b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b1e:	b01d      	add	sp, #116	; 0x74
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007b2c:	a904      	add	r1, sp, #16
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f000 f882 	bl	8007c38 <_printf_i>
 8007b34:	e7ea      	b.n	8007b0c <_svfiprintf_r+0x1b0>
 8007b36:	bf00      	nop
 8007b38:	080081ac 	.word	0x080081ac
 8007b3c:	080081b2 	.word	0x080081b2
 8007b40:	080081b6 	.word	0x080081b6
 8007b44:	00000000 	.word	0x00000000
 8007b48:	080078a9 	.word	0x080078a9

08007b4c <_printf_common>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	4691      	mov	r9, r2
 8007b52:	461f      	mov	r7, r3
 8007b54:	688a      	ldr	r2, [r1, #8]
 8007b56:	690b      	ldr	r3, [r1, #16]
 8007b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bfb8      	it	lt
 8007b60:	4613      	movlt	r3, r2
 8007b62:	f8c9 3000 	str.w	r3, [r9]
 8007b66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b112      	cbz	r2, 8007b76 <_printf_common+0x2a>
 8007b70:	3301      	adds	r3, #1
 8007b72:	f8c9 3000 	str.w	r3, [r9]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	0699      	lsls	r1, r3, #26
 8007b7a:	bf42      	ittt	mi
 8007b7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b80:	3302      	addmi	r3, #2
 8007b82:	f8c9 3000 	strmi.w	r3, [r9]
 8007b86:	6825      	ldr	r5, [r4, #0]
 8007b88:	f015 0506 	ands.w	r5, r5, #6
 8007b8c:	d107      	bne.n	8007b9e <_printf_common+0x52>
 8007b8e:	f104 0a19 	add.w	sl, r4, #25
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	f8d9 2000 	ldr.w	r2, [r9]
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	42ab      	cmp	r3, r5
 8007b9c:	dc28      	bgt.n	8007bf0 <_printf_common+0xa4>
 8007b9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	3300      	adds	r3, #0
 8007ba6:	bf18      	it	ne
 8007ba8:	2301      	movne	r3, #1
 8007baa:	0692      	lsls	r2, r2, #26
 8007bac:	d42d      	bmi.n	8007c0a <_printf_common+0xbe>
 8007bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	47c0      	blx	r8
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d020      	beq.n	8007bfe <_printf_common+0xb2>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	68e5      	ldr	r5, [r4, #12]
 8007bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc4:	f003 0306 	and.w	r3, r3, #6
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	bf08      	it	eq
 8007bcc:	1aad      	subeq	r5, r5, r2
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	bf0c      	ite	eq
 8007bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd8:	2500      	movne	r5, #0
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	bfc4      	itt	gt
 8007bde:	1a9b      	subgt	r3, r3, r2
 8007be0:	18ed      	addgt	r5, r5, r3
 8007be2:	f04f 0900 	mov.w	r9, #0
 8007be6:	341a      	adds	r4, #26
 8007be8:	454d      	cmp	r5, r9
 8007bea:	d11a      	bne.n	8007c22 <_printf_common+0xd6>
 8007bec:	2000      	movs	r0, #0
 8007bee:	e008      	b.n	8007c02 <_printf_common+0xb6>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	47c0      	blx	r8
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d103      	bne.n	8007c06 <_printf_common+0xba>
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c06:	3501      	adds	r5, #1
 8007c08:	e7c3      	b.n	8007b92 <_printf_common+0x46>
 8007c0a:	18e1      	adds	r1, r4, r3
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	2030      	movs	r0, #48	; 0x30
 8007c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c14:	4422      	add	r2, r4
 8007c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c1e:	3302      	adds	r3, #2
 8007c20:	e7c5      	b.n	8007bae <_printf_common+0x62>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4622      	mov	r2, r4
 8007c26:	4639      	mov	r1, r7
 8007c28:	4630      	mov	r0, r6
 8007c2a:	47c0      	blx	r8
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d0e6      	beq.n	8007bfe <_printf_common+0xb2>
 8007c30:	f109 0901 	add.w	r9, r9, #1
 8007c34:	e7d8      	b.n	8007be8 <_printf_common+0x9c>
	...

08007c38 <_printf_i>:
 8007c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c40:	460c      	mov	r4, r1
 8007c42:	7e09      	ldrb	r1, [r1, #24]
 8007c44:	b085      	sub	sp, #20
 8007c46:	296e      	cmp	r1, #110	; 0x6e
 8007c48:	4617      	mov	r7, r2
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	4698      	mov	r8, r3
 8007c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c50:	f000 80b3 	beq.w	8007dba <_printf_i+0x182>
 8007c54:	d822      	bhi.n	8007c9c <_printf_i+0x64>
 8007c56:	2963      	cmp	r1, #99	; 0x63
 8007c58:	d036      	beq.n	8007cc8 <_printf_i+0x90>
 8007c5a:	d80a      	bhi.n	8007c72 <_printf_i+0x3a>
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	f000 80b9 	beq.w	8007dd4 <_printf_i+0x19c>
 8007c62:	2958      	cmp	r1, #88	; 0x58
 8007c64:	f000 8083 	beq.w	8007d6e <_printf_i+0x136>
 8007c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c70:	e032      	b.n	8007cd8 <_printf_i+0xa0>
 8007c72:	2964      	cmp	r1, #100	; 0x64
 8007c74:	d001      	beq.n	8007c7a <_printf_i+0x42>
 8007c76:	2969      	cmp	r1, #105	; 0x69
 8007c78:	d1f6      	bne.n	8007c68 <_printf_i+0x30>
 8007c7a:	6820      	ldr	r0, [r4, #0]
 8007c7c:	6813      	ldr	r3, [r2, #0]
 8007c7e:	0605      	lsls	r5, r0, #24
 8007c80:	f103 0104 	add.w	r1, r3, #4
 8007c84:	d52a      	bpl.n	8007cdc <_printf_i+0xa4>
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da03      	bge.n	8007c96 <_printf_i+0x5e>
 8007c8e:	222d      	movs	r2, #45	; 0x2d
 8007c90:	425b      	negs	r3, r3
 8007c92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c96:	486f      	ldr	r0, [pc, #444]	; (8007e54 <_printf_i+0x21c>)
 8007c98:	220a      	movs	r2, #10
 8007c9a:	e039      	b.n	8007d10 <_printf_i+0xd8>
 8007c9c:	2973      	cmp	r1, #115	; 0x73
 8007c9e:	f000 809d 	beq.w	8007ddc <_printf_i+0x1a4>
 8007ca2:	d808      	bhi.n	8007cb6 <_printf_i+0x7e>
 8007ca4:	296f      	cmp	r1, #111	; 0x6f
 8007ca6:	d020      	beq.n	8007cea <_printf_i+0xb2>
 8007ca8:	2970      	cmp	r1, #112	; 0x70
 8007caa:	d1dd      	bne.n	8007c68 <_printf_i+0x30>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	f043 0320 	orr.w	r3, r3, #32
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	e003      	b.n	8007cbe <_printf_i+0x86>
 8007cb6:	2975      	cmp	r1, #117	; 0x75
 8007cb8:	d017      	beq.n	8007cea <_printf_i+0xb2>
 8007cba:	2978      	cmp	r1, #120	; 0x78
 8007cbc:	d1d4      	bne.n	8007c68 <_printf_i+0x30>
 8007cbe:	2378      	movs	r3, #120	; 0x78
 8007cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cc4:	4864      	ldr	r0, [pc, #400]	; (8007e58 <_printf_i+0x220>)
 8007cc6:	e055      	b.n	8007d74 <_printf_i+0x13c>
 8007cc8:	6813      	ldr	r3, [r2, #0]
 8007cca:	1d19      	adds	r1, r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6011      	str	r1, [r2, #0]
 8007cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e08c      	b.n	8007df6 <_printf_i+0x1be>
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6011      	str	r1, [r2, #0]
 8007ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ce4:	bf18      	it	ne
 8007ce6:	b21b      	sxthne	r3, r3
 8007ce8:	e7cf      	b.n	8007c8a <_printf_i+0x52>
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	6825      	ldr	r5, [r4, #0]
 8007cee:	1d18      	adds	r0, r3, #4
 8007cf0:	6010      	str	r0, [r2, #0]
 8007cf2:	0628      	lsls	r0, r5, #24
 8007cf4:	d501      	bpl.n	8007cfa <_printf_i+0xc2>
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	e002      	b.n	8007d00 <_printf_i+0xc8>
 8007cfa:	0668      	lsls	r0, r5, #25
 8007cfc:	d5fb      	bpl.n	8007cf6 <_printf_i+0xbe>
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	4854      	ldr	r0, [pc, #336]	; (8007e54 <_printf_i+0x21c>)
 8007d02:	296f      	cmp	r1, #111	; 0x6f
 8007d04:	bf14      	ite	ne
 8007d06:	220a      	movne	r2, #10
 8007d08:	2208      	moveq	r2, #8
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d10:	6865      	ldr	r5, [r4, #4]
 8007d12:	60a5      	str	r5, [r4, #8]
 8007d14:	2d00      	cmp	r5, #0
 8007d16:	f2c0 8095 	blt.w	8007e44 <_printf_i+0x20c>
 8007d1a:	6821      	ldr	r1, [r4, #0]
 8007d1c:	f021 0104 	bic.w	r1, r1, #4
 8007d20:	6021      	str	r1, [r4, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d13d      	bne.n	8007da2 <_printf_i+0x16a>
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	f040 808e 	bne.w	8007e48 <_printf_i+0x210>
 8007d2c:	4665      	mov	r5, ip
 8007d2e:	2a08      	cmp	r2, #8
 8007d30:	d10b      	bne.n	8007d4a <_printf_i+0x112>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	07db      	lsls	r3, r3, #31
 8007d36:	d508      	bpl.n	8007d4a <_printf_i+0x112>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	6862      	ldr	r2, [r4, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	bfde      	ittt	le
 8007d40:	2330      	movle	r3, #48	; 0x30
 8007d42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d4a:	ebac 0305 	sub.w	r3, ip, r5
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	f8cd 8000 	str.w	r8, [sp]
 8007d54:	463b      	mov	r3, r7
 8007d56:	aa03      	add	r2, sp, #12
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff fef6 	bl	8007b4c <_printf_common>
 8007d60:	3001      	adds	r0, #1
 8007d62:	d14d      	bne.n	8007e00 <_printf_i+0x1c8>
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	b005      	add	sp, #20
 8007d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d6e:	4839      	ldr	r0, [pc, #228]	; (8007e54 <_printf_i+0x21c>)
 8007d70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d74:	6813      	ldr	r3, [r2, #0]
 8007d76:	6821      	ldr	r1, [r4, #0]
 8007d78:	1d1d      	adds	r5, r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6015      	str	r5, [r2, #0]
 8007d7e:	060a      	lsls	r2, r1, #24
 8007d80:	d50b      	bpl.n	8007d9a <_printf_i+0x162>
 8007d82:	07ca      	lsls	r2, r1, #31
 8007d84:	bf44      	itt	mi
 8007d86:	f041 0120 	orrmi.w	r1, r1, #32
 8007d8a:	6021      	strmi	r1, [r4, #0]
 8007d8c:	b91b      	cbnz	r3, 8007d96 <_printf_i+0x15e>
 8007d8e:	6822      	ldr	r2, [r4, #0]
 8007d90:	f022 0220 	bic.w	r2, r2, #32
 8007d94:	6022      	str	r2, [r4, #0]
 8007d96:	2210      	movs	r2, #16
 8007d98:	e7b7      	b.n	8007d0a <_printf_i+0xd2>
 8007d9a:	064d      	lsls	r5, r1, #25
 8007d9c:	bf48      	it	mi
 8007d9e:	b29b      	uxthmi	r3, r3
 8007da0:	e7ef      	b.n	8007d82 <_printf_i+0x14a>
 8007da2:	4665      	mov	r5, ip
 8007da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da8:	fb02 3311 	mls	r3, r2, r1, r3
 8007dac:	5cc3      	ldrb	r3, [r0, r3]
 8007dae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007db2:	460b      	mov	r3, r1
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d1f5      	bne.n	8007da4 <_printf_i+0x16c>
 8007db8:	e7b9      	b.n	8007d2e <_printf_i+0xf6>
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	6825      	ldr	r5, [r4, #0]
 8007dbe:	6961      	ldr	r1, [r4, #20]
 8007dc0:	1d18      	adds	r0, r3, #4
 8007dc2:	6010      	str	r0, [r2, #0]
 8007dc4:	0628      	lsls	r0, r5, #24
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	d501      	bpl.n	8007dce <_printf_i+0x196>
 8007dca:	6019      	str	r1, [r3, #0]
 8007dcc:	e002      	b.n	8007dd4 <_printf_i+0x19c>
 8007dce:	066a      	lsls	r2, r5, #25
 8007dd0:	d5fb      	bpl.n	8007dca <_printf_i+0x192>
 8007dd2:	8019      	strh	r1, [r3, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	4665      	mov	r5, ip
 8007dda:	e7b9      	b.n	8007d50 <_printf_i+0x118>
 8007ddc:	6813      	ldr	r3, [r2, #0]
 8007dde:	1d19      	adds	r1, r3, #4
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	681d      	ldr	r5, [r3, #0]
 8007de4:	6862      	ldr	r2, [r4, #4]
 8007de6:	2100      	movs	r1, #0
 8007de8:	4628      	mov	r0, r5
 8007dea:	f7f8 f9f9 	bl	80001e0 <memchr>
 8007dee:	b108      	cbz	r0, 8007df4 <_printf_i+0x1bc>
 8007df0:	1b40      	subs	r0, r0, r5
 8007df2:	6060      	str	r0, [r4, #4]
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfe:	e7a7      	b.n	8007d50 <_printf_i+0x118>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	462a      	mov	r2, r5
 8007e04:	4639      	mov	r1, r7
 8007e06:	4630      	mov	r0, r6
 8007e08:	47c0      	blx	r8
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d0aa      	beq.n	8007d64 <_printf_i+0x12c>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	079b      	lsls	r3, r3, #30
 8007e12:	d413      	bmi.n	8007e3c <_printf_i+0x204>
 8007e14:	68e0      	ldr	r0, [r4, #12]
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	4298      	cmp	r0, r3
 8007e1a:	bfb8      	it	lt
 8007e1c:	4618      	movlt	r0, r3
 8007e1e:	e7a3      	b.n	8007d68 <_printf_i+0x130>
 8007e20:	2301      	movs	r3, #1
 8007e22:	464a      	mov	r2, r9
 8007e24:	4639      	mov	r1, r7
 8007e26:	4630      	mov	r0, r6
 8007e28:	47c0      	blx	r8
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d09a      	beq.n	8007d64 <_printf_i+0x12c>
 8007e2e:	3501      	adds	r5, #1
 8007e30:	68e3      	ldr	r3, [r4, #12]
 8007e32:	9a03      	ldr	r2, [sp, #12]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	42ab      	cmp	r3, r5
 8007e38:	dcf2      	bgt.n	8007e20 <_printf_i+0x1e8>
 8007e3a:	e7eb      	b.n	8007e14 <_printf_i+0x1dc>
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	f104 0919 	add.w	r9, r4, #25
 8007e42:	e7f5      	b.n	8007e30 <_printf_i+0x1f8>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1ac      	bne.n	8007da2 <_printf_i+0x16a>
 8007e48:	7803      	ldrb	r3, [r0, #0]
 8007e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e52:	e76c      	b.n	8007d2e <_printf_i+0xf6>
 8007e54:	080081bd 	.word	0x080081bd
 8007e58:	080081ce 	.word	0x080081ce

08007e5c <memmove>:
 8007e5c:	4288      	cmp	r0, r1
 8007e5e:	b510      	push	{r4, lr}
 8007e60:	eb01 0302 	add.w	r3, r1, r2
 8007e64:	d807      	bhi.n	8007e76 <memmove+0x1a>
 8007e66:	1e42      	subs	r2, r0, #1
 8007e68:	4299      	cmp	r1, r3
 8007e6a:	d00a      	beq.n	8007e82 <memmove+0x26>
 8007e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e74:	e7f8      	b.n	8007e68 <memmove+0xc>
 8007e76:	4283      	cmp	r3, r0
 8007e78:	d9f5      	bls.n	8007e66 <memmove+0xa>
 8007e7a:	1881      	adds	r1, r0, r2
 8007e7c:	1ad2      	subs	r2, r2, r3
 8007e7e:	42d3      	cmn	r3, r2
 8007e80:	d100      	bne.n	8007e84 <memmove+0x28>
 8007e82:	bd10      	pop	{r4, pc}
 8007e84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e8c:	e7f7      	b.n	8007e7e <memmove+0x22>
	...

08007e90 <_free_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4605      	mov	r5, r0
 8007e94:	2900      	cmp	r1, #0
 8007e96:	d045      	beq.n	8007f24 <_free_r+0x94>
 8007e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e9c:	1f0c      	subs	r4, r1, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfb8      	it	lt
 8007ea2:	18e4      	addlt	r4, r4, r3
 8007ea4:	f000 f8d2 	bl	800804c <__malloc_lock>
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <_free_r+0x98>)
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	4610      	mov	r0, r2
 8007eae:	b933      	cbnz	r3, 8007ebe <_free_r+0x2e>
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6014      	str	r4, [r2, #0]
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eba:	f000 b8c8 	b.w	800804e <__malloc_unlock>
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	d90c      	bls.n	8007edc <_free_r+0x4c>
 8007ec2:	6821      	ldr	r1, [r4, #0]
 8007ec4:	1862      	adds	r2, r4, r1
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bf04      	itt	eq
 8007eca:	681a      	ldreq	r2, [r3, #0]
 8007ecc:	685b      	ldreq	r3, [r3, #4]
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	bf04      	itt	eq
 8007ed2:	1852      	addeq	r2, r2, r1
 8007ed4:	6022      	streq	r2, [r4, #0]
 8007ed6:	6004      	str	r4, [r0, #0]
 8007ed8:	e7ec      	b.n	8007eb4 <_free_r+0x24>
 8007eda:	4613      	mov	r3, r2
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	b10a      	cbz	r2, 8007ee4 <_free_r+0x54>
 8007ee0:	42a2      	cmp	r2, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x4a>
 8007ee4:	6819      	ldr	r1, [r3, #0]
 8007ee6:	1858      	adds	r0, r3, r1
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x74>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	4401      	add	r1, r0
 8007ef0:	1858      	adds	r0, r3, r1
 8007ef2:	4282      	cmp	r2, r0
 8007ef4:	6019      	str	r1, [r3, #0]
 8007ef6:	d1dd      	bne.n	8007eb4 <_free_r+0x24>
 8007ef8:	6810      	ldr	r0, [r2, #0]
 8007efa:	6852      	ldr	r2, [r2, #4]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	4401      	add	r1, r0
 8007f00:	6019      	str	r1, [r3, #0]
 8007f02:	e7d7      	b.n	8007eb4 <_free_r+0x24>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x7c>
 8007f06:	230c      	movs	r3, #12
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	e7d3      	b.n	8007eb4 <_free_r+0x24>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428a      	cmp	r2, r1
 8007f12:	bf04      	itt	eq
 8007f14:	6811      	ldreq	r1, [r2, #0]
 8007f16:	6852      	ldreq	r2, [r2, #4]
 8007f18:	6062      	str	r2, [r4, #4]
 8007f1a:	bf04      	itt	eq
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	605c      	str	r4, [r3, #4]
 8007f22:	e7c7      	b.n	8007eb4 <_free_r+0x24>
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	20001954 	.word	0x20001954

08007f2c <_malloc_r>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	1ccd      	adds	r5, r1, #3
 8007f30:	f025 0503 	bic.w	r5, r5, #3
 8007f34:	3508      	adds	r5, #8
 8007f36:	2d0c      	cmp	r5, #12
 8007f38:	bf38      	it	cc
 8007f3a:	250c      	movcc	r5, #12
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	4606      	mov	r6, r0
 8007f40:	db01      	blt.n	8007f46 <_malloc_r+0x1a>
 8007f42:	42a9      	cmp	r1, r5
 8007f44:	d903      	bls.n	8007f4e <_malloc_r+0x22>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	bd70      	pop	{r4, r5, r6, pc}
 8007f4e:	f000 f87d 	bl	800804c <__malloc_lock>
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <_malloc_r+0xac>)
 8007f54:	6814      	ldr	r4, [r2, #0]
 8007f56:	4621      	mov	r1, r4
 8007f58:	b991      	cbnz	r1, 8007f80 <_malloc_r+0x54>
 8007f5a:	4c20      	ldr	r4, [pc, #128]	; (8007fdc <_malloc_r+0xb0>)
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	b91b      	cbnz	r3, 8007f68 <_malloc_r+0x3c>
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 f863 	bl	800802c <_sbrk_r>
 8007f66:	6020      	str	r0, [r4, #0]
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f000 f85e 	bl	800802c <_sbrk_r>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d124      	bne.n	8007fbe <_malloc_r+0x92>
 8007f74:	230c      	movs	r3, #12
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f868 	bl	800804e <__malloc_unlock>
 8007f7e:	e7e4      	b.n	8007f4a <_malloc_r+0x1e>
 8007f80:	680b      	ldr	r3, [r1, #0]
 8007f82:	1b5b      	subs	r3, r3, r5
 8007f84:	d418      	bmi.n	8007fb8 <_malloc_r+0x8c>
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d90f      	bls.n	8007faa <_malloc_r+0x7e>
 8007f8a:	600b      	str	r3, [r1, #0]
 8007f8c:	50cd      	str	r5, [r1, r3]
 8007f8e:	18cc      	adds	r4, r1, r3
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f85c 	bl	800804e <__malloc_unlock>
 8007f96:	f104 000b 	add.w	r0, r4, #11
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	f020 0007 	bic.w	r0, r0, #7
 8007fa0:	1ac3      	subs	r3, r0, r3
 8007fa2:	d0d3      	beq.n	8007f4c <_malloc_r+0x20>
 8007fa4:	425a      	negs	r2, r3
 8007fa6:	50e2      	str	r2, [r4, r3]
 8007fa8:	e7d0      	b.n	8007f4c <_malloc_r+0x20>
 8007faa:	428c      	cmp	r4, r1
 8007fac:	684b      	ldr	r3, [r1, #4]
 8007fae:	bf16      	itet	ne
 8007fb0:	6063      	strne	r3, [r4, #4]
 8007fb2:	6013      	streq	r3, [r2, #0]
 8007fb4:	460c      	movne	r4, r1
 8007fb6:	e7eb      	b.n	8007f90 <_malloc_r+0x64>
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6849      	ldr	r1, [r1, #4]
 8007fbc:	e7cc      	b.n	8007f58 <_malloc_r+0x2c>
 8007fbe:	1cc4      	adds	r4, r0, #3
 8007fc0:	f024 0403 	bic.w	r4, r4, #3
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d005      	beq.n	8007fd4 <_malloc_r+0xa8>
 8007fc8:	1a21      	subs	r1, r4, r0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f82e 	bl	800802c <_sbrk_r>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d0cf      	beq.n	8007f74 <_malloc_r+0x48>
 8007fd4:	6025      	str	r5, [r4, #0]
 8007fd6:	e7db      	b.n	8007f90 <_malloc_r+0x64>
 8007fd8:	20001954 	.word	0x20001954
 8007fdc:	20001958 	.word	0x20001958

08007fe0 <_realloc_r>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	b921      	cbnz	r1, 8007ff4 <_realloc_r+0x14>
 8007fea:	4611      	mov	r1, r2
 8007fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ff0:	f7ff bf9c 	b.w	8007f2c <_malloc_r>
 8007ff4:	b922      	cbnz	r2, 8008000 <_realloc_r+0x20>
 8007ff6:	f7ff ff4b 	bl	8007e90 <_free_r>
 8007ffa:	4625      	mov	r5, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008000:	f000 f826 	bl	8008050 <_malloc_usable_size_r>
 8008004:	42a0      	cmp	r0, r4
 8008006:	d20f      	bcs.n	8008028 <_realloc_r+0x48>
 8008008:	4621      	mov	r1, r4
 800800a:	4638      	mov	r0, r7
 800800c:	f7ff ff8e 	bl	8007f2c <_malloc_r>
 8008010:	4605      	mov	r5, r0
 8008012:	2800      	cmp	r0, #0
 8008014:	d0f2      	beq.n	8007ffc <_realloc_r+0x1c>
 8008016:	4631      	mov	r1, r6
 8008018:	4622      	mov	r2, r4
 800801a:	f7ff fc11 	bl	8007840 <memcpy>
 800801e:	4631      	mov	r1, r6
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff ff35 	bl	8007e90 <_free_r>
 8008026:	e7e9      	b.n	8007ffc <_realloc_r+0x1c>
 8008028:	4635      	mov	r5, r6
 800802a:	e7e7      	b.n	8007ffc <_realloc_r+0x1c>

0800802c <_sbrk_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4c06      	ldr	r4, [pc, #24]	; (8008048 <_sbrk_r+0x1c>)
 8008030:	2300      	movs	r3, #0
 8008032:	4605      	mov	r5, r0
 8008034:	4608      	mov	r0, r1
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	f7f8 fe28 	bl	8000c8c <_sbrk>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_sbrk_r+0x1a>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	b103      	cbz	r3, 8008046 <_sbrk_r+0x1a>
 8008044:	602b      	str	r3, [r5, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	20001af0 	.word	0x20001af0

0800804c <__malloc_lock>:
 800804c:	4770      	bx	lr

0800804e <__malloc_unlock>:
 800804e:	4770      	bx	lr

08008050 <_malloc_usable_size_r>:
 8008050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008054:	1f18      	subs	r0, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfbc      	itt	lt
 800805a:	580b      	ldrlt	r3, [r1, r0]
 800805c:	18c0      	addlt	r0, r0, r3
 800805e:	4770      	bx	lr

08008060 <_init>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr

0800806c <_fini>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	bf00      	nop
 8008070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008072:	bc08      	pop	{r3}
 8008074:	469e      	mov	lr, r3
 8008076:	4770      	bx	lr
