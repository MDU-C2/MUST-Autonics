
NucleoL476RG-freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f30  08008f30  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f38  08008f38  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000078  08008fb8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b54  08008fb8  00021b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022102  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003920  00000000  00000000  000421aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b00  00000000  00000000  00045ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001968  00000000  00000000  000475d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004825  00000000  00000000  00048f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000156fc  00000000  00000000  0004d75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00113dab  00000000  00000000  00062e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176c04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076d8  00000000  00000000  00176c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d80 	.word	0x08008d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008d80 	.word	0x08008d80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fd30 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f846 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f9dc 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f9aa 	bl	80008e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f8c8 	bl	8000728 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000598:	f000 f93c 	bl	8000814 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f005 fa78 	bl	8005a90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a0:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <main+0x68>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <main+0x6c>)
 80005a6:	f005 fadd 	bl	8005b64 <osThreadNew>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <main+0x70>)
 80005ae:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask01 */
  blinkyTask01Handle = osThreadNew(StartBlinkyTask01, NULL, &blinkyTask01_attributes);
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <main+0x74>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4810      	ldr	r0, [pc, #64]	; (80005f8 <main+0x78>)
 80005b6:	f005 fad5 	bl	8005b64 <osThreadNew>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0x7c>)
 80005be:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask02 */
  blinkyTask02Handle = osThreadNew(StartBlinkyTask02, NULL, &blinkyTask02_attributes);
 80005c0:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <main+0x80>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <main+0x84>)
 80005c6:	f005 facd 	bl	8005b64 <osThreadNew>
 80005ca:	4602      	mov	r2, r0
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <main+0x88>)
 80005ce:	601a      	str	r2, [r3, #0]

  /* creation of ReadAndPrintTas */
  ReadAndPrintTasHandle = osThreadNew(StartTaskReadAndPrint01, NULL, &ReadAndPrintTas_attributes);
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <main+0x8c>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <main+0x90>)
 80005d6:	f005 fac5 	bl	8005b64 <osThreadNew>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <main+0x94>)
 80005de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f005 fa8a 	bl	8005af8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x64>
 80005e6:	bf00      	nop
 80005e8:	08008e24 	.word	0x08008e24
 80005ec:	08000add 	.word	0x08000add
 80005f0:	20001960 	.word	0x20001960
 80005f4:	08008e48 	.word	0x08008e48
 80005f8:	08000aed 	.word	0x08000aed
 80005fc:	20001964 	.word	0x20001964
 8000600:	08008e6c 	.word	0x08008e6c
 8000604:	08000b09 	.word	0x08000b09
 8000608:	20001aa0 	.word	0x20001aa0
 800060c:	08008e90 	.word	0x08008e90
 8000610:	08000b25 	.word	0x08000b25
 8000614:	200019dc 	.word	0x200019dc

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 ffa5 	bl	8008576 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2288      	movs	r2, #136	; 0x88
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 ff97 	bl	8008576 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066e:	230a      	movs	r3, #10
 8000670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800068a:	4618      	mov	r0, r3
 800068c:	f002 ff8c 	bl	80035a8 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000696:	f000 fa8f 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fb58 	bl	8003d74 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ca:	f000 fa75 	bl	8000bb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80006ce:	f244 0302 	movw	r3, #16386	; 0x4002
 80006d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006dc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006e6:	2308      	movs	r3, #8
 80006e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006fa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fd6e 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800070a:	f000 fa55 	bl	8000bb8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000712:	f002 fef3 	bl	80034fc <HAL_PWREx_ControlVoltageScaling>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800071c:	f000 fa4c 	bl	8000bb8 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	37e0      	adds	r7, #224	; 0xe0
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_ADC1_Init+0xe0>)
 800074c:	4a2f      	ldr	r2, [pc, #188]	; (800080c <MX_ADC1_Init+0xe4>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_ADC1_Init+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_ADC1_Init+0xe0>)
 800076a:	2204      	movs	r2, #4
 800076c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000770:	2200      	movs	r2, #0
 8000772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_ADC1_Init+0xe0>)
 800077c:	2201      	movs	r2, #1
 800077e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_ADC1_Init+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_ADC1_Init+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_ADC1_Init+0xe0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_ADC1_Init+0xe0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4817      	ldr	r0, [pc, #92]	; (8000808 <MX_ADC1_Init+0xe0>)
 80007ac:	f000 fe62 	bl	8001474 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007b6:	f000 f9ff 	bl	8000bb8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4810      	ldr	r0, [pc, #64]	; (8000808 <MX_ADC1_Init+0xe0>)
 80007c6:	f001 fdaf 	bl	8002328 <HAL_ADCEx_MultiModeConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d0:	f000 f9f2 	bl	8000bb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_ADC1_Init+0xe8>)
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d8:	2306      	movs	r3, #6
 80007da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e0:	237f      	movs	r3, #127	; 0x7f
 80007e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e4:	2304      	movs	r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_ADC1_Init+0xe0>)
 80007f2:	f001 f92b 	bl	8001a4c <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007fc:	f000 f9dc 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20001974 	.word	0x20001974
 800080c:	50040000 	.word	0x50040000
 8000810:	14f00020 	.word	0x14f00020

08000814 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <MX_CAN1_Init+0xcc>)
 800081c:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <MX_CAN1_Init+0xd0>)
 800081e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000822:	2210      	movs	r2, #16
 8000824:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_CAN1_Init+0xcc>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000834:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000838:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_CAN1_Init+0xcc>)
 800083c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000840:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_CAN1_Init+0xcc>)
 800084a:	2200      	movs	r2, #0
 800084c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000850:	2200      	movs	r2, #0
 8000852:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000856:	2200      	movs	r2, #0
 8000858:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_CAN1_Init+0xcc>)
 800085c:	2200      	movs	r2, #0
 800085e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000862:	2200      	movs	r2, #0
 8000864:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000866:	481e      	ldr	r0, [pc, #120]	; (80008e0 <MX_CAN1_Init+0xcc>)
 8000868:	f001 fe0a 	bl	8002480 <HAL_CAN_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000872:	f000 f9a1 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sf;
  sf.FilterBank = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  sf.FilterMode = CAN_FILTERMODE_IDMASK;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  sf.FilterScale = CAN_FILTERSCALE_16BIT;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  sf.FilterIdLow = 0xffff;
 8000882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000886:	607b      	str	r3, [r7, #4]
  sf.FilterIdHigh = 0x1fff;
 8000888:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800088c:	603b      	str	r3, [r7, #0]
  sf.FilterMaskIdLow = 0x0000;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  sf.FilterMaskIdHigh = 0x0000;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  sf.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  sf.SlaveStartFilterBank = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  sf.FilterActivation = ENABLE;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_CAN1_Init+0xcc>)
 80008a8:	f001 fee5 	bl	8002676 <HAL_CAN_ConfigFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_CAN1_Init+0xa2>
      Error_Handler();
 80008b2:	f000 f981 	bl	8000bb8 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <MX_CAN1_Init+0xcc>)
 80008b8:	f001 ffa7 	bl	800280a <HAL_CAN_Start>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_CAN1_Init+0xb2>
      Error_Handler();
 80008c2:	f000 f979 	bl	8000bb8 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80008c6:	2102      	movs	r1, #2
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_CAN1_Init+0xcc>)
 80008ca:	f002 f8f4 	bl	8002ab6 <HAL_CAN_ActivateNotification>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_CAN1_Init+0xc4>
      Error_Handler();
 80008d4:	f000 f970 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20001a60 	.word	0x20001a60
 80008e4:	40006400 	.word	0x40006400

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800092c:	f004 fbda 	bl	80050e4 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f93f 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200019e0 	.word	0x200019e0
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b35      	ldr	r3, [pc, #212]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a34      	ldr	r2, [pc, #208]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <MX_GPIO_Init+0xec>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <MX_GPIO_Init+0xec>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_GPIO_Init+0xec>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_GPIO_Init+0xec>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <MX_GPIO_Init+0xec>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_GPIO_Init+0xec>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2101      	movs	r1, #1
 80009c2:	481d      	ldr	r0, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xf0>)
 80009c4:	f002 fd5a 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f002 fd53 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_GPIO_Init+0xf4>)
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <MX_GPIO_Init+0xf0>)
 80009ec:	f002 fb9e 	bl	800312c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_GPIO_Init+0xf0>)
 8000a08:	f002 fb90 	bl	800312c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000a0c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f002 fb80 	bl	800312c <HAL_GPIO_Init>

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800
 8000a3c:	10210000 	.word	0x10210000

08000a40 <serialMsg>:

/* USER CODE BEGIN 4 */

void serialMsg(char msg[]){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fbc1 	bl	80001d0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <serialMsg+0x28>)
 8000a5a:	f004 fb91 	bl	8005180 <HAL_UART_Transmit>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200019e0 	.word	0x200019e0

08000a6c <CAN_Rx>:
		//serialMsg("Message transmitted!\n\r");
	}
	else return;
}

void CAN_Rx(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <CAN_Rx+0x5c>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <CAN_Rx+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <CAN_Rx+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <CAN_Rx+0x60>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <CAN_Rx+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]


	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <CAN_Rx+0x5c>)
 8000a92:	2100      	movs	r1, #0
 8000a94:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <CAN_Rx+0x64>)
 8000a96:	f001 fefc 	bl	8002892 <HAL_CAN_GetRxMessage>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <CAN_Rx+0x3a>
		Error_Handler();
 8000aa0:	f000 f88a 	bl	8000bb8 <Error_Handler>
 8000aa4:	e00c      	b.n	8000ac0 <CAN_Rx+0x54>
		return;
	}
	HAL_Delay(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fade 	bl	8001068 <HAL_Delay>
	serialMsg("Received message: ");
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <CAN_Rx+0x68>)
 8000aae:	f7ff ffc7 	bl	8000a40 <serialMsg>
	serialMsg((char*)crx);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffc3 	bl	8000a40 <serialMsg>
	serialMsg("\n\r");
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <CAN_Rx+0x6c>)
 8000abc:	f7ff ffc0 	bl	8000a40 <serialMsg>

}
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20001aa4 	.word	0x20001aa4
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20001a60 	.word	0x20001a60
 8000ad4:	08008df0 	.word	0x08008df0
 8000ad8:	08008e04 	.word	0x08008e04

08000adc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f005 f8e3 	bl	8005cb0 <osDelay>
 8000aea:	e7fb      	b.n	8000ae4 <StartDefaultTask+0x8>

08000aec <StartBlinkyTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask01 */
void StartBlinkyTask01(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000af4:	2120      	movs	r1, #32
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f002 fcd7 	bl	80034ac <HAL_GPIO_TogglePin>
    osDelay(500);
 8000afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b02:	f005 f8d5 	bl	8005cb0 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b06:	e7f5      	b.n	8000af4 <StartBlinkyTask01+0x8>

08000b08 <StartBlinkyTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask02 */
void StartBlinkyTask02(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b10:	2120      	movs	r1, #32
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f002 fcc9 	bl	80034ac <HAL_GPIO_TogglePin>
	  osDelay(600);
 8000b1a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000b1e:	f005 f8c7 	bl	8005cb0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b22:	e7f5      	b.n	8000b10 <StartBlinkyTask02+0x8>

08000b24 <StartTaskReadAndPrint01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadAndPrint01 */
void StartTaskReadAndPrint01(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskReadAndPrint01 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f002 fca1 	bl	800347c <HAL_GPIO_WritePin>

	  HAL_ADC_Start(&hadc1);
 8000b3a:	4812      	ldr	r0, [pc, #72]	; (8000b84 <StartTaskReadAndPrint01+0x60>)
 8000b3c:	f000 fdee 	bl	800171c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	480f      	ldr	r0, [pc, #60]	; (8000b84 <StartTaskReadAndPrint01+0x60>)
 8000b46:	f000 fea3 	bl	8001890 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <StartTaskReadAndPrint01+0x60>)
 8000b4c:	f000 ff70 	bl	8001a30 <HAL_ADC_GetValue>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <StartTaskReadAndPrint01+0x64>)
 8000b56:	801a      	strh	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,  GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f002 fc8b 	bl	800347c <HAL_GPIO_WritePin>

	  sprintf(message, "%hu", raw);
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <StartTaskReadAndPrint01+0x64>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <StartTaskReadAndPrint01+0x68>)
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <StartTaskReadAndPrint01+0x6c>)
 8000b70:	f007 fd0a 	bl	8008588 <siprintf>
	  //CAN_Tx(message);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);


	  HAL_Delay(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 fa77 	bl	8001068 <HAL_Delay>
	  osDelay(100);
 8000b7a:	2064      	movs	r0, #100	; 0x64
 8000b7c:	f005 f898 	bl	8005cb0 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b80:	e7d4      	b.n	8000b2c <StartTaskReadAndPrint01+0x8>
 8000b82:	bf00      	nop
 8000b84:	20001974 	.word	0x20001974
 8000b88:	200019d8 	.word	0x200019d8
 8000b8c:	08008e08 	.word	0x08008e08
 8000b90:	20001968 	.word	0x20001968

08000b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba6:	f000 fa3f 	bl	8001028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40001000 	.word	0x40001000

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	f06f 0001 	mvn.w	r0, #1
 8000c06:	f002 fa67 	bl	80030d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <HAL_ADC_MspInit+0x74>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d124      	bne.n	8000c84 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_ADC_MspInit+0x78>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_ADC_MspInit+0x78>)
 8000c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_ADC_MspInit+0x78>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_ADC_MspInit+0x78>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_ADC_MspInit+0x78>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_ADC_MspInit+0x78>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f002 fa54 	bl	800312c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	50040000 	.word	0x50040000
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <HAL_CAN_MspInit+0x90>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d131      	bne.n	8000d1a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_CAN_MspInit+0x94>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_CAN_MspInit+0x94>)
 8000cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_CAN_MspInit+0x94>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_CAN_MspInit+0x94>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_CAN_MspInit+0x94>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_CAN_MspInit+0x94>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ce6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cf8:	2309      	movs	r3, #9
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f002 fa11 	bl	800312c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	2014      	movs	r0, #20
 8000d10:	f002 f9e2 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d14:	2014      	movs	r0, #20
 8000d16:	f002 f9fb 	bl	8003110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40006400 	.word	0x40006400
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x7c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d128      	bne.n	8000da0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f002 f9c6 	bl	800312c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2036      	movs	r0, #54	; 0x36
 8000dc6:	f002 f987 	bl	80030d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dca:	2036      	movs	r0, #54	; 0x36
 8000dcc:	f002 f9a0 	bl	8003110 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <HAL_InitTick+0x9c>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd4:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_InitTick+0x9c>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6593      	str	r3, [r2, #88]	; 0x58
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_InitTick+0x9c>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de8:	f107 0210 	add.w	r2, r7, #16
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 f962 	bl	80040bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000df8:	f003 f934 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8000dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_InitTick+0xa0>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	0c9b      	lsrs	r3, r3, #18
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e2e:	f003 fe87 	bl	8004b40 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d104      	bne.n	8000e42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e3a:	f003 fee3 	bl	8004c04 <HAL_TIM_Base_Start_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	20001ac0 	.word	0x20001ac0
 8000e58:	40001000 	.word	0x40001000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <CAN1_RX0_IRQHandler+0x14>)
 8000e96:	f001 fe34 	bl	8002b02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 8000e9a:	f7ff fde7 	bl	8000a6c <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20001a60 	.word	0x20001a60

08000ea8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM6_DAC_IRQHandler+0x10>)
 8000eae:	f003 ff19 	bl	8004ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20001ac0 	.word	0x20001ac0

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f007 fb0e 	bl	800850c <__errno>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20018000 	.word	0x20018000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000094 	.word	0x20000094
 8000f24:	20001b58 	.word	0x20001b58

08000f28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <SystemInit+0x64>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <SystemInit+0x64>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <SystemInit+0x68>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <SystemInit+0x68>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <SystemInit+0x68>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <SystemInit+0x68>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <SystemInit+0x68>)
 8000f54:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f58:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <SystemInit+0x68>)
 8000f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <SystemInit+0x68>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <SystemInit+0x68>)
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <SystemInit+0x68>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SystemInit+0x64>)
 8000f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	40021000 	.word	0x40021000

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff ffc6 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <LoopForever+0x16>)
	cmp	r2, r3
 8000fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f007 faa9 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff fadb 	bl	8000580 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fd0:	08008f40 	.word	0x08008f40
	ldr	r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fd8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000fdc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8000fe0:	20001b54 	.word	0x20001b54

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_Init+0x3c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x3c>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f002 f85f 	bl	80030c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fed3 	bl	8000db0 <HAL_InitTick>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e001      	b.n	800101a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001016:	f7ff fdd7 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20001b0c 	.word	0x20001b0c

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20001b0c 	.word	0x20001b0c

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_Delay+0x40>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000000c 	.word	0x2000000c

080010ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3360      	adds	r3, #96	; 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <LL_ADC_SetOffset+0x44>)
 8001136:	4013      	ands	r3, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	4313      	orrs	r3, r2
 8001144:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	03fff000 	.word	0x03fff000

0800115c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3360      	adds	r3, #96	; 0x60
 800116a:	461a      	mov	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3360      	adds	r3, #96	; 0x60
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3330      	adds	r3, #48	; 0x30
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	4413      	add	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	211f      	movs	r1, #31
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0e9b      	lsrs	r3, r3, #26
 800121c:	f003 011f 	and.w	r1, r3, #31
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	431a      	orrs	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3314      	adds	r3, #20
 800124c:	461a      	mov	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	0e5b      	lsrs	r3, r3, #25
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	0d1b      	lsrs	r3, r3, #20
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	2107      	movs	r1, #7
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	401a      	ands	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	0d1b      	lsrs	r3, r3, #20
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	431a      	orrs	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001286:	bf00      	nop
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0318 	and.w	r3, r3, #24
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012b8:	40d9      	lsrs	r1, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	400b      	ands	r3, r1
 80012be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c2:	431a      	orrs	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	0007ffff 	.word	0x0007ffff

080012dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 031f 	and.w	r3, r3, #31
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6093      	str	r3, [r2, #8]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800134c:	d101      	bne.n	8001352 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001374:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800139c:	d101      	bne.n	80013a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <LL_ADC_IsEnabled+0x18>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <LL_ADC_IsEnabled+0x1a>
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800140e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001412:	f043 0204 	orr.w	r2, r3, #4
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	2b04      	cmp	r3, #4
 8001438:	d101      	bne.n	800143e <LL_ADC_REG_IsConversionOngoing+0x18>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b08      	cmp	r3, #8
 800145e:	d101      	bne.n	8001464 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e134      	b.n	80016f8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fbbb 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff3f 	bl	8001338 <LL_ADC_IsDeepPowerDownEnabled>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff25 	bl	8001314 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff5a 	bl	8001388 <LL_ADC_IsInternalRegulatorEnabled>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d113      	bne.n	8001502 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff3e 	bl	8001360 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014e4:	4b86      	ldr	r3, [pc, #536]	; (8001700 <HAL_ADC_Init+0x28c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	4a86      	ldr	r2, [pc, #536]	; (8001704 <HAL_ADC_Init+0x290>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014f4:	e002      	b.n	80014fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f9      	bne.n	80014f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff3e 	bl	8001388 <LL_ADC_IsInternalRegulatorEnabled>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10d      	bne.n	800152e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff77 	bl	8001426 <LL_ADC_REG_IsConversionOngoing>
 8001538:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80cf 	bne.w	80016e6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 80cb 	bne.w	80016e6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001558:	f043 0202 	orr.w	r2, r3, #2
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff37 	bl	80013d8 <LL_ADC_IsEnabled>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d115      	bne.n	800159c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001570:	4865      	ldr	r0, [pc, #404]	; (8001708 <HAL_ADC_Init+0x294>)
 8001572:	f7ff ff31 	bl	80013d8 <LL_ADC_IsEnabled>
 8001576:	4604      	mov	r4, r0
 8001578:	4864      	ldr	r0, [pc, #400]	; (800170c <HAL_ADC_Init+0x298>)
 800157a:	f7ff ff2d 	bl	80013d8 <LL_ADC_IsEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	431c      	orrs	r4, r3
 8001582:	4863      	ldr	r0, [pc, #396]	; (8001710 <HAL_ADC_Init+0x29c>)
 8001584:	f7ff ff28 	bl	80013d8 <LL_ADC_IsEnabled>
 8001588:	4603      	mov	r3, r0
 800158a:	4323      	orrs	r3, r4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4619      	mov	r1, r3
 8001596:	485f      	ldr	r0, [pc, #380]	; (8001714 <HAL_ADC_Init+0x2a0>)
 8001598:	f7ff fd88 	bl	80010ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e5b      	ldrb	r3, [r3, #25]
 80015a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d106      	bne.n	80015d8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	3b01      	subs	r3, #1
 80015d0:	045b      	lsls	r3, r3, #17
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_ADC_Init+0x2a4>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff0a 	bl	8001426 <LL_ADC_REG_IsConversionOngoing>
 8001612:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff17 	bl	800144c <LL_ADC_INJ_IsConversionOngoing>
 800161e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d13d      	bne.n	80016a2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d13a      	bne.n	80016a2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001630:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001638:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	69b9      	ldr	r1, [r7, #24]
 8001652:	430b      	orrs	r3, r1
 8001654:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800165c:	2b01      	cmp	r3, #1
 800165e:	d118      	bne.n	8001692 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800166a:	f023 0304 	bic.w	r3, r3, #4
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800167c:	4311      	orrs	r1, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001682:	430a      	orrs	r2, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	e007      	b.n	80016a2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10c      	bne.n	80016c4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f023 010f 	bic.w	r1, r3, #15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020f 	bic.w	r2, r2, #15
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f023 0303 	bic.w	r3, r3, #3
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
 80016e4:	e007      	b.n	80016f6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3724      	adds	r7, #36	; 0x24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	20000004 	.word	0x20000004
 8001704:	053e2d63 	.word	0x053e2d63
 8001708:	50040000 	.word	0x50040000
 800170c:	50040100 	.word	0x50040100
 8001710:	50040200 	.word	0x50040200
 8001714:	50040300 	.word	0x50040300
 8001718:	fff0c007 	.word	0xfff0c007

0800171c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001724:	4857      	ldr	r0, [pc, #348]	; (8001884 <HAL_ADC_Start+0x168>)
 8001726:	f7ff fdd9 	bl	80012dc <LL_ADC_GetMultimode>
 800172a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe78 	bl	8001426 <LL_ADC_REG_IsConversionOngoing>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 809c 	bne.w	8001876 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_ADC_Start+0x30>
 8001748:	2302      	movs	r3, #2
 800174a:	e097      	b.n	800187c <HAL_ADC_Start+0x160>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fd67 	bl	8002228 <ADC_Enable>
 800175a:	4603      	mov	r3, r0
 800175c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 8083 	bne.w	800186c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a42      	ldr	r2, [pc, #264]	; (8001888 <HAL_ADC_Start+0x16c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d002      	beq.n	800178a <HAL_ADC_Start+0x6e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	e000      	b.n	800178c <HAL_ADC_Start+0x70>
 800178a:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_ADC_Start+0x170>)
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	4293      	cmp	r3, r2
 8001792:	d002      	beq.n	800179a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b2:	d106      	bne.n	80017c2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	f023 0206 	bic.w	r2, r3, #6
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	659a      	str	r2, [r3, #88]	; 0x58
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	221c      	movs	r2, #28
 80017ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_ADC_Start+0x16c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d002      	beq.n	80017e8 <HAL_ADC_Start+0xcc>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	e000      	b.n	80017ea <HAL_ADC_Start+0xce>
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_ADC_Start+0x170>)
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d008      	beq.n	8001804 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d002      	beq.n	8001804 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	2b09      	cmp	r3, #9
 8001802:	d114      	bne.n	800182e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800181a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fde9 	bl	80013fe <LL_ADC_REG_StartConversion>
 800182c:	e025      	b.n	800187a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_ADC_Start+0x16c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d002      	beq.n	800184a <HAL_ADC_Start+0x12e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	e000      	b.n	800184c <HAL_ADC_Start+0x130>
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_ADC_Start+0x170>)
 800184c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00f      	beq.n	800187a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001862:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
 800186a:	e006      	b.n	800187a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001874:	e001      	b.n	800187a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001876:	2302      	movs	r3, #2
 8001878:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	50040300 	.word	0x50040300
 8001888:	50040100 	.word	0x50040100
 800188c:	50040000 	.word	0x50040000

08001890 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800189a:	4862      	ldr	r0, [pc, #392]	; (8001a24 <HAL_ADC_PollForConversion+0x194>)
 800189c:	f7ff fd1e 	bl	80012dc <LL_ADC_GetMultimode>
 80018a0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d102      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80018aa:	2308      	movs	r3, #8
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e02a      	b.n	8001906 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d002      	beq.n	80018c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b09      	cmp	r3, #9
 80018c0:	d111      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e09d      	b.n	8001a1c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80018e0:	2304      	movs	r3, #4
 80018e2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018e4:	e00f      	b.n	8001906 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80018e6:	484f      	ldr	r0, [pc, #316]	; (8001a24 <HAL_ADC_PollForConversion+0x194>)
 80018e8:	f7ff fd06 	bl	80012f8 <LL_ADC_GetMultiDMATransfer>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e08c      	b.n	8001a1c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001902:	2304      	movs	r3, #4
 8001904:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001906:	f7ff fba3 	bl	8001050 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800190c:	e01a      	b.n	8001944 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d016      	beq.n	8001944 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001916:	f7ff fb9b 	bl	8001050 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d302      	bcc.n	800192c <HAL_ADC_PollForConversion+0x9c>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10b      	bne.n	8001944 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f043 0204 	orr.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e06b      	b.n	8001a1c <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0dd      	beq.n	800190e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001956:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fc2b 	bl	80011be <LL_ADC_REG_IsTriggerSourceSWStart>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01c      	beq.n	80019a8 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7e5b      	ldrb	r3, [r3, #25]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b08      	cmp	r3, #8
 8001982:	d111      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_ADC_PollForConversion+0x198>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d002      	beq.n	80019b8 <HAL_ADC_PollForConversion+0x128>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e000      	b.n	80019ba <HAL_ADC_PollForConversion+0x12a>
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_ADC_PollForConversion+0x19c>)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4293      	cmp	r3, r2
 80019c0:	d008      	beq.n	80019d4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d002      	beq.n	80019d4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d104      	bne.n	80019de <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	e00c      	b.n	80019f8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_ADC_PollForConversion+0x198>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d002      	beq.n	80019ee <HAL_ADC_PollForConversion+0x15e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_PollForConversion+0x160>
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_ADC_PollForConversion+0x19c>)
 80019f0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d104      	bne.n	8001a08 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2208      	movs	r2, #8
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	50040300 	.word	0x50040300
 8001a28:	50040100 	.word	0x50040100
 8001a2c:	50040000 	.word	0x50040000

08001a30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0b6      	sub	sp, #216	; 0xd8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x22>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e3c6      	b.n	80021fc <HAL_ADC_ConfigChannel+0x7b0>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fcd3 	bl	8001426 <LL_ADC_REG_IsConversionOngoing>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 83a7 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d824      	bhi.n	8001ada <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	3b02      	subs	r3, #2
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d81b      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x86>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_ADC_ConfigChannel+0x54>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001ab9 	.word	0x08001ab9
 8001aa8:	08001ac1 	.word	0x08001ac1
 8001aac:	08001ac9 	.word	0x08001ac9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	605a      	str	r2, [r3, #4]
          break;
 8001ab6:	e011      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2212      	movs	r2, #18
 8001abc:	605a      	str	r2, [r3, #4]
          break;
 8001abe:	e00d      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2218      	movs	r2, #24
 8001ac4:	605a      	str	r2, [r3, #4]
          break;
 8001ac6:	e009      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ace:	605a      	str	r2, [r3, #4]
          break;
 8001ad0:	e004      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2206      	movs	r2, #6
 8001ad6:	605a      	str	r2, [r3, #4]
          break;
 8001ad8:	e000      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ada:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f7ff fb7b 	bl	80011e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fc97 	bl	8001426 <LL_ADC_REG_IsConversionOngoing>
 8001af8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fca3 	bl	800144c <LL_ADC_INJ_IsConversionOngoing>
 8001b06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 81a6 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 81a1 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f7ff fb86 	bl	800123c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d00a      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b62:	f7ff fad7 	bl	8001114 <LL_ADC_SetOffset>
 8001b66:	e17b      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff faf4 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x148>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fae9 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	e01e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x186>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fade 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x19e>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	e018      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1d0>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e004      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff faad 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2101      	movs	r1, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fa91 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fa86 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x24c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fa7b 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e004      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x264>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	e018      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x296>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fa4a 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fa2e 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x2d4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2102      	movs	r1, #2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fa23 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 021f 	and.w	r2, r3, #31
 8001d1e:	e01e      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x312>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fa18 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e004      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x32a>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	e016      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x358>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e004      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f9e9 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2103      	movs	r1, #3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f9cd 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x396>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f9c2 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	e017      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x3c6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2103      	movs	r1, #3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f9b7 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dfc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x3de>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	e011      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x402>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e42:	2320      	movs	r3, #32
 8001e44:	e003      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f994 	bl	8001188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fab7 	bl	80013d8 <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 813f 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f7ff fa08 	bl	8001294 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a8e      	ldr	r2, [pc, #568]	; (80020c4 <HAL_ADC_ConfigChannel+0x678>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	f040 8130 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x46c>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e019      	b.n	8001eec <HAL_ADC_ConfigChannel+0x4a0>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	bf94      	ite	ls
 8001ee6:	2301      	movls	r3, #1
 8001ee8:	2300      	movhi	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d079      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x4c0>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	069b      	lsls	r3, r3, #26
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0a:	e015      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x4ec>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x50c>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	e017      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x53c>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x562>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	051b      	lsls	r3, r3, #20
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x594>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	e080      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x5b4>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	069b      	lsls	r3, r3, #26
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffe:	e015      	b.n	800202c <HAL_ADC_ConfigChannel+0x5e0>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_ConfigChannel+0x600>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	e017      	b.n	800207c <HAL_ADC_ConfigChannel+0x630>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	61fb      	str	r3, [r7, #28]
  return result;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	ea42 0103 	orr.w	r1, r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x65c>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	3301      	adds	r3, #1
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	051b      	lsls	r3, r3, #20
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a6:	e01d      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x698>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	613b      	str	r3, [r7, #16]
  return result;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e005      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x684>
 80020c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 021f 	and.w	r2, r3, #31
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	3b1e      	subs	r3, #30
 80020de:	051b      	lsls	r3, r3, #20
 80020e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e4:	430b      	orrs	r3, r1
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	6892      	ldr	r2, [r2, #8]
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7ff f8a6 	bl	800123c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_ADC_ConfigChannel+0x7b8>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d079      	beq.n	80021f0 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020fc:	4842      	ldr	r0, [pc, #264]	; (8002208 <HAL_ADC_ConfigChannel+0x7bc>)
 80020fe:	f7fe fffb 	bl	80010f8 <LL_ADC_GetCommonPathInternalCh>
 8002102:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a40      	ldr	r2, [pc, #256]	; (800220c <HAL_ADC_ConfigChannel+0x7c0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d12b      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d125      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3b      	ldr	r2, [pc, #236]	; (8002210 <HAL_ADC_ConfigChannel+0x7c4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_ADC_ConfigChannel+0x6e4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_ADC_ConfigChannel+0x7c8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d15c      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002138:	4619      	mov	r1, r3
 800213a:	4833      	ldr	r0, [pc, #204]	; (8002208 <HAL_ADC_ConfigChannel+0x7bc>)
 800213c:	f7fe ffc9 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_ADC_ConfigChannel+0x7cc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	4a35      	ldr	r2, [pc, #212]	; (800221c <HAL_ADC_ConfigChannel+0x7d0>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099a      	lsrs	r2, r3, #6
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002158:	e002      	b.n	8002160 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3b01      	subs	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002166:	e040      	b.n	80021ea <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <HAL_ADC_ConfigChannel+0x7d4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d118      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x758>
 8002172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d112      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a23      	ldr	r2, [pc, #140]	; (8002210 <HAL_ADC_ConfigChannel+0x7c4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x746>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <HAL_ADC_ConfigChannel+0x7c8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d12d      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	4619      	mov	r1, r3
 800219c:	481a      	ldr	r0, [pc, #104]	; (8002208 <HAL_ADC_ConfigChannel+0x7bc>)
 800219e:	f7fe ff98 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021a2:	e024      	b.n	80021ee <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_ADC_ConfigChannel+0x7d8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d120      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11a      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <HAL_ADC_ConfigChannel+0x7c4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d115      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021cc:	4619      	mov	r1, r3
 80021ce:	480e      	ldr	r0, [pc, #56]	; (8002208 <HAL_ADC_ConfigChannel+0x7bc>)
 80021d0:	f7fe ff7f 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
 80021d4:	e00c      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ea:	bf00      	nop
 80021ec:	e000      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021ee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	37d8      	adds	r7, #216	; 0xd8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	80080000 	.word	0x80080000
 8002208:	50040300 	.word	0x50040300
 800220c:	c7520000 	.word	0xc7520000
 8002210:	50040000 	.word	0x50040000
 8002214:	50040200 	.word	0x50040200
 8002218:	20000004 	.word	0x20000004
 800221c:	053e2d63 	.word	0x053e2d63
 8002220:	cb840000 	.word	0xcb840000
 8002224:	80000001 	.word	0x80000001

08002228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f8cf 	bl	80013d8 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d146      	bne.n	80022ce <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <ADC_Enable+0xb0>)
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00d      	beq.n	800226a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f043 0210 	orr.w	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e032      	b.n	80022d0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f89e 	bl	80013b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002274:	f7fe feec 	bl	8001050 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227a:	e021      	b.n	80022c0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f8a9 	bl	80013d8 <LL_ADC_IsEnabled>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d104      	bne.n	8002296 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f88d 	bl	80013b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002296:	f7fe fedb 	bl	8001050 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d90d      	bls.n	80022c0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f043 0210 	orr.w	r2, r3, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f043 0201 	orr.w	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d1d6      	bne.n	800227c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	8000003f 	.word	0x8000003f

080022dc <LL_ADC_IsEnabled>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_IsEnabled+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_IsEnabled+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_REG_IsConversionOngoing>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d101      	bne.n	800231a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b09f      	sub	sp, #124	; 0x7c
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e08f      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a47      	ldr	r2, [pc, #284]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002358:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	e001      	b.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e072      	b.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffbd 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 8002388:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ffb7 	bl	8002302 <LL_ADC_REG_IsConversionOngoing>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d154      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800239a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239c:	2b00      	cmp	r3, #0
 800239e:	d151      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023a0:	4b35      	ldr	r3, [pc, #212]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02c      	beq.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023be:	035b      	lsls	r3, r3, #13
 80023c0:	430b      	orrs	r3, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c8:	4829      	ldr	r0, [pc, #164]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80023ca:	f7ff ff87 	bl	80022dc <LL_ADC_IsEnabled>
 80023ce:	4604      	mov	r4, r0
 80023d0:	4828      	ldr	r0, [pc, #160]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80023d2:	f7ff ff83 	bl	80022dc <LL_ADC_IsEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	431c      	orrs	r4, r3
 80023da:	4828      	ldr	r0, [pc, #160]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023dc:	f7ff ff7e 	bl	80022dc <LL_ADC_IsEnabled>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4323      	orrs	r3, r4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d137      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023f0:	f023 030f 	bic.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	431a      	orrs	r2, r3
 8002400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002402:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002404:	e028      	b.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002410:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002412:	4817      	ldr	r0, [pc, #92]	; (8002470 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002414:	f7ff ff62 	bl	80022dc <LL_ADC_IsEnabled>
 8002418:	4604      	mov	r4, r0
 800241a:	4816      	ldr	r0, [pc, #88]	; (8002474 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800241c:	f7ff ff5e 	bl	80022dc <LL_ADC_IsEnabled>
 8002420:	4603      	mov	r3, r0
 8002422:	431c      	orrs	r4, r3
 8002424:	4815      	ldr	r0, [pc, #84]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002426:	f7ff ff59 	bl	80022dc <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	4323      	orrs	r3, r4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d112      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800243a:	f023 030f 	bic.w	r3, r3, #15
 800243e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002440:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002442:	e009      	b.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002456:	e000      	b.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002458:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002462:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002466:	4618      	mov	r0, r3
 8002468:	377c      	adds	r7, #124	; 0x7c
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	50040000 	.word	0x50040000
 8002474:	50040100 	.word	0x50040100
 8002478:	50040300 	.word	0x50040300
 800247c:	50040200 	.word	0x50040200

08002480 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0ed      	b.n	800266e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fbf8 	bl	8000c94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0202 	bic.w	r2, r2, #2
 80024b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b4:	f7fe fdcc 	bl	8001050 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ba:	e012      	b.n	80024e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024bc:	f7fe fdc8 	bl	8001050 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b0a      	cmp	r3, #10
 80024c8:	d90b      	bls.n	80024e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2205      	movs	r2, #5
 80024da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0c5      	b.n	800266e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e5      	bne.n	80024bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002500:	f7fe fda6 	bl	8001050 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002506:	e012      	b.n	800252e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002508:	f7fe fda2 	bl	8001050 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b0a      	cmp	r3, #10
 8002514:	d90b      	bls.n	800252e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2205      	movs	r2, #5
 8002526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e09f      	b.n	800266e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0e5      	beq.n	8002508 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7e1b      	ldrb	r3, [r3, #24]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d108      	bne.n	8002556 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e007      	b.n	8002566 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7e5b      	ldrb	r3, [r3, #25]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d108      	bne.n	8002580 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e007      	b.n	8002590 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7e9b      	ldrb	r3, [r3, #26]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d108      	bne.n	80025aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e007      	b.n	80025ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0220 	bic.w	r2, r2, #32
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7edb      	ldrb	r3, [r3, #27]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d108      	bne.n	80025d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0210 	bic.w	r2, r2, #16
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e007      	b.n	80025e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0210 	orr.w	r2, r2, #16
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7f1b      	ldrb	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d108      	bne.n	80025fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0208 	orr.w	r2, r2, #8
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e007      	b.n	800260e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7f5b      	ldrb	r3, [r3, #29]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0204 	orr.w	r2, r2, #4
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0204 	bic.w	r2, r2, #4
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	ea42 0103 	orr.w	r1, r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002676:	b480      	push	{r7}
 8002678:	b087      	sub	sp, #28
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d003      	beq.n	800269c <HAL_CAN_ConfigFilter+0x26>
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b02      	cmp	r3, #2
 8002698:	f040 80aa 	bne.w	80027f0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2201      	movs	r2, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d123      	bne.n	800271e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	401a      	ands	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3248      	adds	r2, #72	; 0x48
 80026fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002712:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002714:	6979      	ldr	r1, [r7, #20]
 8002716:	3348      	adds	r3, #72	; 0x48
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d122      	bne.n	800276c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002746:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3248      	adds	r2, #72	; 0x48
 800274c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002760:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002762:	6979      	ldr	r1, [r7, #20]
 8002764:	3348      	adds	r3, #72	; 0x48
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002786:	e007      	b.n	8002798 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	431a      	orrs	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027b2:	e007      	b.n	80027c4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	431a      	orrs	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027e2:	f023 0201 	bic.w	r2, r3, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e006      	b.n	80027fe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d12e      	bne.n	800287c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002836:	f7fe fc0b 	bl	8001050 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800283c:	e012      	b.n	8002864 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800283e:	f7fe fc07 	bl	8001050 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b0a      	cmp	r3, #10
 800284a:	d90b      	bls.n	8002864 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2205      	movs	r2, #5
 800285c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e012      	b.n	800288a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e5      	bne.n	800283e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e006      	b.n	800288a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002892:	b480      	push	{r7}
 8002894:	b087      	sub	sp, #28
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d003      	beq.n	80028b6 <HAL_CAN_GetRxMessage+0x24>
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f040 80f3 	bne.w	8002a9c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10e      	bne.n	80028da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0e7      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d107      	bne.n	80028f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d8      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	331b      	adds	r3, #27
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	4413      	add	r3, r2
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0204 	and.w	r2, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	331b      	adds	r3, #27
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	4413      	add	r3, r2
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0d5b      	lsrs	r3, r3, #21
 8002926:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e00b      	b.n	8002948 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	331b      	adds	r3, #27
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	4413      	add	r3, r2
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	331b      	adds	r3, #27
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4413      	add	r3, r2
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0202 	and.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	331b      	adds	r3, #27
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	331b      	adds	r3, #27
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	331b      	adds	r3, #27
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0a1a      	lsrs	r2, r3, #8
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0c1a      	lsrs	r2, r3, #16
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3302      	adds	r3, #2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e1a      	lsrs	r2, r3, #24
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3303      	adds	r3, #3
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0a1a      	lsrs	r2, r3, #8
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	3305      	adds	r3, #5
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0c1a      	lsrs	r2, r3, #16
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3306      	adds	r3, #6
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e1a      	lsrs	r2, r3, #24
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e007      	b.n	8002a98 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e006      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d002      	beq.n	8002ad4 <HAL_CAN_ActivateNotification+0x1e>
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d109      	bne.n	8002ae8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6959      	ldr	r1, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e006      	b.n	8002af6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b08a      	sub	sp, #40	; 0x28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d07c      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d023      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2201      	movs	r2, #1
 8002b58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f97d 	bl	8002e64 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b6a:	e016      	b.n	8002b9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	e00c      	b.n	8002b9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
 8002b92:	e002      	b.n	8002b9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f983 	bl	8002ea0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d024      	beq.n	8002bee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f95d 	bl	8002e78 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bbe:	e016      	b.n	8002bee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e00c      	b.n	8002bee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e002      	b.n	8002bee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f963 	bl	8002eb4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d024      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f93d 	bl	8002e8c <HAL_CAN_TxMailbox2CompleteCallback>
 8002c12:	e016      	b.n	8002c42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e00c      	b.n	8002c42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e002      	b.n	8002c42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f943 	bl	8002ec8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2208      	movs	r2, #8
 8002c80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f934 	bl	8002ef0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f91b 	bl	8002edc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f916 	bl	8002f18 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8fd 	bl	8002f04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2210      	movs	r2, #16
 8002d24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f900 	bl	8002f2c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2208      	movs	r2, #8
 8002d46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8f9 	bl	8002f40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d075      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d06c      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d03d      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d038      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d017      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x302>
 8002dd4:	2b30      	cmp	r3, #48	; 0x30
 8002dd6:	d804      	bhi.n	8002de2 <HAL_CAN_IRQHandler+0x2e0>
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d009      	beq.n	8002df0 <HAL_CAN_IRQHandler+0x2ee>
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d00c      	beq.n	8002dfa <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002de0:	e024      	b.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002de2:	2b50      	cmp	r3, #80	; 0x50
 8002de4:	d018      	beq.n	8002e18 <HAL_CAN_IRQHandler+0x316>
 8002de6:	2b60      	cmp	r3, #96	; 0x60
 8002de8:	d01b      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x320>
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d00f      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x30c>
            break;
 8002dee:	e01d      	b.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002df8:	e018      	b.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	f043 0310 	orr.w	r3, r3, #16
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e02:	e013      	b.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	f043 0320 	orr.w	r3, r3, #32
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e0c:	e00e      	b.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e16:	e009      	b.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e20:	e004      	b.n	8002e2c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e2a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e3a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2204      	movs	r2, #4
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f87c 	bl	8002f54 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f84:	4013      	ands	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9a:	4a04      	ldr	r2, [pc, #16]	; (8002fac <__NVIC_SetPriorityGrouping+0x44>)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	60d3      	str	r3, [r2, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 0307 	and.w	r3, r3, #7
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	db0b      	blt.n	8002ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4907      	ldr	r1, [pc, #28]	; (8003004 <__NVIC_EnableIRQ+0x38>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2001      	movs	r0, #1
 8002fee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000e100 	.word	0xe000e100

08003008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0a      	blt.n	8003032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	490c      	ldr	r1, [pc, #48]	; (8003054 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003030:	e00a      	b.n	8003048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4908      	ldr	r1, [pc, #32]	; (8003058 <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	440b      	add	r3, r1
 8003046:	761a      	strb	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f1c3 0307 	rsb	r3, r3, #7
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf28      	it	cs
 800307a:	2304      	movcs	r3, #4
 800307c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3304      	adds	r3, #4
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <NVIC_EncodePriority+0x30>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b03      	subs	r3, #3
 800308a:	e000      	b.n	800308e <NVIC_EncodePriority+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43d9      	mvns	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ff4c 	bl	8002f68 <__NVIC_SetPriorityGrouping>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030ea:	f7ff ff61 	bl	8002fb0 <__NVIC_GetPriorityGrouping>
 80030ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	6978      	ldr	r0, [r7, #20]
 80030f6:	f7ff ffb1 	bl	800305c <NVIC_EncodePriority>
 80030fa:	4602      	mov	r2, r0
 80030fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff ff80 	bl	8003008 <__NVIC_SetPriority>
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff54 	bl	8002fcc <__NVIC_EnableIRQ>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313a:	e17f      	b.n	800343c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2101      	movs	r1, #1
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	4013      	ands	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8171 	beq.w	8003436 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d00b      	beq.n	8003174 <HAL_GPIO_Init+0x48>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d007      	beq.n	8003174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003168:	2b11      	cmp	r3, #17
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b12      	cmp	r3, #18
 8003172:	d130      	bne.n	80031d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031aa:	2201      	movs	r2, #1
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0201 	and.w	r2, r3, #1
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d118      	bne.n	8003214 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	08db      	lsrs	r3, r3, #3
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x128>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b12      	cmp	r3, #18
 8003252:	d123      	bne.n	800329c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	08da      	lsrs	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3208      	adds	r2, #8
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	6939      	ldr	r1, [r7, #16]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80ac 	beq.w	8003436 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <HAL_GPIO_Init+0x32c>)
 80032e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e2:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_GPIO_Init+0x32c>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6613      	str	r3, [r2, #96]	; 0x60
 80032ea:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <HAL_GPIO_Init+0x32c>)
 80032ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032f6:	4a59      	ldr	r2, [pc, #356]	; (800345c <HAL_GPIO_Init+0x330>)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003320:	d025      	beq.n	800336e <HAL_GPIO_Init+0x242>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4e      	ldr	r2, [pc, #312]	; (8003460 <HAL_GPIO_Init+0x334>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01f      	beq.n	800336a <HAL_GPIO_Init+0x23e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4d      	ldr	r2, [pc, #308]	; (8003464 <HAL_GPIO_Init+0x338>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_Init+0x23a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4c      	ldr	r2, [pc, #304]	; (8003468 <HAL_GPIO_Init+0x33c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_Init+0x236>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4b      	ldr	r2, [pc, #300]	; (800346c <HAL_GPIO_Init+0x340>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_Init+0x232>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <HAL_GPIO_Init+0x344>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x22e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a49      	ldr	r2, [pc, #292]	; (8003474 <HAL_GPIO_Init+0x348>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_Init+0x22a>
 8003352:	2306      	movs	r3, #6
 8003354:	e00c      	b.n	8003370 <HAL_GPIO_Init+0x244>
 8003356:	2307      	movs	r3, #7
 8003358:	e00a      	b.n	8003370 <HAL_GPIO_Init+0x244>
 800335a:	2305      	movs	r3, #5
 800335c:	e008      	b.n	8003370 <HAL_GPIO_Init+0x244>
 800335e:	2304      	movs	r3, #4
 8003360:	e006      	b.n	8003370 <HAL_GPIO_Init+0x244>
 8003362:	2303      	movs	r3, #3
 8003364:	e004      	b.n	8003370 <HAL_GPIO_Init+0x244>
 8003366:	2302      	movs	r3, #2
 8003368:	e002      	b.n	8003370 <HAL_GPIO_Init+0x244>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_GPIO_Init+0x244>
 800336e:	2300      	movs	r3, #0
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	f002 0203 	and.w	r2, r2, #3
 8003376:	0092      	lsls	r2, r2, #2
 8003378:	4093      	lsls	r3, r2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003380:	4936      	ldr	r1, [pc, #216]	; (800345c <HAL_GPIO_Init+0x330>)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_GPIO_Init+0x34c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033b2:	4a31      	ldr	r2, [pc, #196]	; (8003478 <HAL_GPIO_Init+0x34c>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033b8:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_GPIO_Init+0x34c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <HAL_GPIO_Init+0x34c>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_GPIO_Init+0x34c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_GPIO_Init+0x34c>)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_GPIO_Init+0x34c>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003430:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_GPIO_Init+0x34c>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	f47f ae78 	bne.w	800313c <HAL_GPIO_Init+0x10>
  }
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40021000 	.word	0x40021000
 800345c:	40010000 	.word	0x40010000
 8003460:	48000400 	.word	0x48000400
 8003464:	48000800 	.word	0x48000800
 8003468:	48000c00 	.word	0x48000c00
 800346c:	48001000 	.word	0x48001000
 8003470:	48001400 	.word	0x48001400
 8003474:	48001800 	.word	0x48001800
 8003478:	40010400 	.word	0x40010400

0800347c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
 8003488:	4613      	mov	r3, r2
 800348a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800348c:	787b      	ldrb	r3, [r7, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4013      	ands	r3, r2
 80034c4:	041a      	lsls	r2, r3, #16
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	43d9      	mvns	r1, r3
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	400b      	ands	r3, r1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40007000 	.word	0x40007000

080034fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350a:	d130      	bne.n	800356e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003518:	d038      	beq.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2232      	movs	r2, #50	; 0x32
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0c9b      	lsrs	r3, r3, #18
 800353c:	3301      	adds	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003540:	e002      	b.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3b01      	subs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003554:	d102      	bne.n	800355c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f2      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d110      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d007      	beq.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003584:	4a05      	ldr	r2, [pc, #20]	; (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000
 80035a0:	20000004 	.word	0x20000004
 80035a4:	431bde83 	.word	0x431bde83

080035a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e3d4      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ba:	4ba1      	ldr	r3, [pc, #644]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c4:	4b9e      	ldr	r3, [pc, #632]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80e4 	beq.w	80037a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_RCC_OscConfig+0x4a>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	f040 808b 	bne.w	8003700 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 8087 	bne.w	8003700 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035f2:	4b93      	ldr	r3, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x62>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e3ac      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_RCC_OscConfig+0x7c>
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003622:	e005      	b.n	8003630 <HAL_RCC_OscConfig+0x88>
 8003624:	4b86      	ldr	r3, [pc, #536]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003630:	4293      	cmp	r3, r2
 8003632:	d223      	bcs.n	800367c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd71 	bl	8004120 <RCC_SetFlashLatencyFromMSIRange>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e38d      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003648:	4b7d      	ldr	r3, [pc, #500]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800364e:	f043 0308 	orr.w	r3, r3, #8
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b7a      	ldr	r3, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4977      	ldr	r1, [pc, #476]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	4972      	ldr	r1, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
 800367a:	e025      	b.n	80036c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800367c:	4b70      	ldr	r3, [pc, #448]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003682:	f043 0308 	orr.w	r3, r3, #8
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	496a      	ldr	r1, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800369a:	4b69      	ldr	r3, [pc, #420]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	4965      	ldr	r1, [pc, #404]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fd31 	bl	8004120 <RCC_SetFlashLatencyFromMSIRange>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e34d      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c8:	f000 fc36 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 80036cc:	4601      	mov	r1, r0
 80036ce:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	4a5a      	ldr	r2, [pc, #360]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80036da:	5cd3      	ldrb	r3, [r2, r3]
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	fa21 f303 	lsr.w	r3, r1, r3
 80036e4:	4a58      	ldr	r2, [pc, #352]	; (8003848 <HAL_RCC_OscConfig+0x2a0>)
 80036e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036e8:	4b58      	ldr	r3, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x2a4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fb5f 	bl	8000db0 <HAL_InitTick>
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d052      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	e331      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d032      	beq.n	800376e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a4c      	ldr	r2, [pc, #304]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003714:	f7fd fc9c 	bl	8001050 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800371c:	f7fd fc98 	bl	8001050 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e31a      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a40      	ldr	r2, [pc, #256]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003740:	f043 0308 	orr.w	r3, r3, #8
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	493b      	ldr	r1, [pc, #236]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
 800376c:	e01a      	b.n	80037a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a33      	ldr	r2, [pc, #204]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800377a:	f7fd fc69 	bl	8001050 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003782:	f7fd fc65 	bl	8001050 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e2e7      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x1da>
 80037a0:	e000      	b.n	80037a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d074      	beq.n	800389a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x21a>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d10e      	bne.n	80037da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d10b      	bne.n	80037da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d064      	beq.n	8003898 <HAL_RCC_OscConfig+0x2f0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d160      	bne.n	8003898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e2c4      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x24a>
 80037e4:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80037ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e01d      	b.n	800382e <HAL_RCC_OscConfig+0x286>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fa:	d10c      	bne.n	8003816 <HAL_RCC_OscConfig+0x26e>
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0c      	ldr	r2, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e00b      	b.n	800382e <HAL_RCC_OscConfig+0x286>
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 800381c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b07      	ldr	r3, [pc, #28]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a06      	ldr	r2, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x298>)
 8003828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01c      	beq.n	8003870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fd fc0b 	bl	8001050 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383c:	e011      	b.n	8003862 <HAL_RCC_OscConfig+0x2ba>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	08008eb4 	.word	0x08008eb4
 8003848:	20000004 	.word	0x20000004
 800384c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd fbfe 	bl	8001050 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e280      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003862:	4baf      	ldr	r3, [pc, #700]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x2a8>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fbee 	bl	8001050 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fd fbea 	bl	8001050 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e26c      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388a:	4ba5      	ldr	r3, [pc, #660]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x2d0>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d060      	beq.n	8003968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_OscConfig+0x310>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	d119      	bne.n	80038e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d116      	bne.n	80038e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b8:	4b99      	ldr	r3, [pc, #612]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x328>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e249      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b93      	ldr	r3, [pc, #588]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	4990      	ldr	r1, [pc, #576]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e4:	e040      	b.n	8003968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d023      	beq.n	8003936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ee:	4b8c      	ldr	r3, [pc, #560]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a8b      	ldr	r2, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fd fba9 	bl	8001050 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003902:	f7fd fba5 	bl	8001050 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e227      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003914:	4b82      	ldr	r3, [pc, #520]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b7f      	ldr	r3, [pc, #508]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	497c      	ldr	r1, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
 8003934:	e018      	b.n	8003968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003936:	4b7a      	ldr	r3, [pc, #488]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a79      	ldr	r2, [pc, #484]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 800393c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fd fb85 	bl	8001050 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394a:	f7fd fb81 	bl	8001050 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e203      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800395c:	4b70      	ldr	r3, [pc, #448]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03c      	beq.n	80039ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397c:	4b68      	ldr	r3, [pc, #416]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 800397e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003982:	4a67      	ldr	r2, [pc, #412]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fb60 	bl	8001050 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7fd fb5c 	bl	8001050 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1de      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039a6:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <HAL_RCC_OscConfig+0x3ec>
 80039b4:	e01b      	b.n	80039ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b6:	4b5a      	ldr	r3, [pc, #360]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039bc:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd fb43 	bl	8001050 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ce:	f7fd fb3f 	bl	8001050 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e1c1      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e0:	4b4f      	ldr	r3, [pc, #316]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80a6 	beq.w	8003b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a00:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
 8003a18:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a28:	4b3e      	ldr	r3, [pc, #248]	; (8003b24 <HAL_RCC_OscConfig+0x57c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d118      	bne.n	8003a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a34:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <HAL_RCC_OscConfig+0x57c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3a      	ldr	r2, [pc, #232]	; (8003b24 <HAL_RCC_OscConfig+0x57c>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a40:	f7fd fb06 	bl	8001050 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fd fb02 	bl	8001050 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e184      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5a:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_RCC_OscConfig+0x57c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d108      	bne.n	8003a80 <HAL_RCC_OscConfig+0x4d8>
 8003a6e:	4b2c      	ldr	r3, [pc, #176]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	4a2a      	ldr	r2, [pc, #168]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7e:	e024      	b.n	8003aca <HAL_RCC_OscConfig+0x522>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d110      	bne.n	8003aaa <HAL_RCC_OscConfig+0x502>
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	4a24      	ldr	r2, [pc, #144]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a90:	f043 0304 	orr.w	r3, r3, #4
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa8:	e00f      	b.n	8003aca <HAL_RCC_OscConfig+0x522>
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003ac2:	f023 0304 	bic.w	r3, r3, #4
 8003ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fd fabd 	bl	8001050 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fd fab9 	bl	8001050 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e139      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_OscConfig+0x578>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ed      	beq.n	8003ada <HAL_RCC_OscConfig+0x532>
 8003afe:	e01a      	b.n	8003b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd faa6 	bl	8001050 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b06:	e00f      	b.n	8003b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fd faa2 	bl	8001050 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d906      	bls.n	8003b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e122      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b28:	4b90      	ldr	r3, [pc, #576]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e8      	bne.n	8003b08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b36:	7ffb      	ldrb	r3, [r7, #31]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3c:	4b8b      	ldr	r3, [pc, #556]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	4a8a      	ldr	r2, [pc, #552]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8108 	beq.w	8003d62 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	f040 80d0 	bne.w	8003cfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b5c:	4b83      	ldr	r3, [pc, #524]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d130      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d127      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d11f      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b9c:	2a07      	cmp	r2, #7
 8003b9e:	bf14      	ite	ne
 8003ba0:	2201      	movne	r2, #1
 8003ba2:	2200      	moveq	r2, #0
 8003ba4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d113      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d06e      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	d069      	beq.n	8003cac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bd8:	4b64      	ldr	r3, [pc, #400]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003be4:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0b7      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bf4:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5c      	ldr	r2, [pc, #368]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c00:	f7fd fa26 	bl	8001050 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd fa22 	bl	8001050 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0a4      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1a:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c26:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <HAL_RCC_OscConfig+0x7c8>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c36:	3a01      	subs	r2, #1
 8003c38:	0112      	lsls	r2, r2, #4
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c40:	0212      	lsls	r2, r2, #8
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c48:	0852      	lsrs	r2, r2, #1
 8003c4a:	3a01      	subs	r2, #1
 8003c4c:	0552      	lsls	r2, r2, #21
 8003c4e:	4311      	orrs	r1, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c54:	0852      	lsrs	r2, r2, #1
 8003c56:	3a01      	subs	r2, #1
 8003c58:	0652      	lsls	r2, r2, #25
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c60:	0912      	lsrs	r2, r2, #4
 8003c62:	0452      	lsls	r2, r2, #17
 8003c64:	430a      	orrs	r2, r1
 8003c66:	4941      	ldr	r1, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3e      	ldr	r2, [pc, #248]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c78:	4b3c      	ldr	r3, [pc, #240]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c84:	f7fd f9e4 	bl	8001050 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd f9e0 	bl	8001050 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e062      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003caa:	e05a      	b.n	8003d62 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e059      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d152      	bne.n	8003d62 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc8:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd4:	f7fd f9bc 	bl	8001050 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd f9b8 	bl	8001050 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e03a      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x734>
 8003cfa:	e032      	b.n	8003d62 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d02d      	beq.n	8003d5e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d20:	f023 0303 	bic.w	r3, r3, #3
 8003d24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fd f98b 	bl	8001050 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd f987 	bl	8001050 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e009      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_OscConfig+0x7c4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x796>
 8003d5c:	e001      	b.n	8003d62 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	f99d808c 	.word	0xf99d808c

08003d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0c8      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4b66      	ldr	r3, [pc, #408]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d910      	bls.n	8003db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b63      	ldr	r3, [pc, #396]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 0207 	bic.w	r2, r3, #7
 8003d9e:	4961      	ldr	r1, [pc, #388]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b5f      	ldr	r3, [pc, #380]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0b0      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04c      	beq.n	8003e5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dcc:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d121      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e09e      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de4:	4b50      	ldr	r3, [pc, #320]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d115      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e092      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfc:	4b4a      	ldr	r3, [pc, #296]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e086      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0c:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e07e      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e1c:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 0203 	bic.w	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	493f      	ldr	r1, [pc, #252]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2e:	f7fd f90f 	bl	8001050 <HAL_GetTick>
 8003e32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e36:	f7fd f90b 	bl	8001050 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e066      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4c:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 020c 	and.w	r2, r3, #12
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d1eb      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6a:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	492c      	ldr	r1, [pc, #176]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d210      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4924      	ldr	r1, [pc, #144]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCC_ClockConfig+0x1b0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e036      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4918      	ldr	r1, [pc, #96]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4910      	ldr	r1, [pc, #64]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eea:	f000 f825 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003eee:	4601      	mov	r1, r0
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <HAL_RCC_ClockConfig+0x1b4>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	fa21 f303 	lsr.w	r3, r1, r3
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc ff4e 	bl	8000db0 <HAL_InitTick>
 8003f14:	4603      	mov	r3, r0
 8003f16:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f18:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40022000 	.word	0x40022000
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08008eb4 	.word	0x08008eb4
 8003f30:	20000004 	.word	0x20000004
 8003f34:	20000008 	.word	0x20000008

08003f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f50:	4b3a      	ldr	r3, [pc, #232]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x34>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d121      	bne.n	8003faa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d11e      	bne.n	8003faa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f6c:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f78:	4b30      	ldr	r3, [pc, #192]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e005      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fb0:	4b24      	ldr	r3, [pc, #144]	; (8004044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e004      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d133      	bne.n	800402e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0xa4>
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0xaa>
 8003fda:	e005      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fde:	617b      	str	r3, [r7, #20]
      break;
 8003fe0:	e005      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fe4:	617b      	str	r3, [r7, #20]
      break;
 8003fe6:	e002      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	617b      	str	r3, [r7, #20]
      break;
 8003fec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	fb02 f203 	mul.w	r2, r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCC_GetSysClockFreq+0x104>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0e5b      	lsrs	r3, r3, #25
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800402e:	69bb      	ldr	r3, [r7, #24]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3724      	adds	r7, #36	; 0x24
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40021000 	.word	0x40021000
 8004040:	08008ecc 	.word	0x08008ecc
 8004044:	00f42400 	.word	0x00f42400
 8004048:	007a1200 	.word	0x007a1200

0800404c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_RCC_GetHCLKFreq+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000004 	.word	0x20000004

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004068:	f7ff fff0 	bl	800404c <HAL_RCC_GetHCLKFreq>
 800406c:	4601      	mov	r1, r0
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <HAL_RCC_GetPCLK1Freq+0x28>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	08008ec4 	.word	0x08008ec4

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004094:	f7ff ffda 	bl	800404c <HAL_RCC_GetHCLKFreq>
 8004098:	4601      	mov	r1, r0
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0adb      	lsrs	r3, r3, #11
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000
 80040b8:	08008ec4 	.word	0x08008ec4

080040bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	220f      	movs	r2, #15
 80040ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0203 	and.w	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_GetClockConfig+0x5c>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_RCC_GetClockConfig+0x60>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0207 	and.w	r2, r3, #7
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	40022000 	.word	0x40022000

08004120 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004138:	f7ff f9d2 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 800413c:	6178      	str	r0, [r7, #20]
 800413e:	e014      	b.n	800416a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	4a24      	ldr	r2, [pc, #144]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414a:	6593      	str	r3, [r2, #88]	; 0x58
 800414c:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004158:	f7ff f9c2 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 800415c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004170:	d10b      	bne.n	800418a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b80      	cmp	r3, #128	; 0x80
 8004176:	d919      	bls.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2ba0      	cmp	r3, #160	; 0xa0
 800417c:	d902      	bls.n	8004184 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800417e:	2302      	movs	r3, #2
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e013      	b.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004184:	2301      	movs	r3, #1
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e010      	b.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d902      	bls.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004190:	2303      	movs	r3, #3
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e00a      	b.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b80      	cmp	r3, #128	; 0x80
 800419a:	d102      	bne.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800419c:	2302      	movs	r3, #2
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e004      	b.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b70      	cmp	r3, #112	; 0x70
 80041a6:	d101      	bne.n	80041ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041a8:	2301      	movs	r3, #1
 80041aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 0207 	bic.w	r2, r3, #7
 80041b4:	4909      	ldr	r1, [pc, #36]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d001      	beq.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40022000 	.word	0x40022000

080041e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041e8:	2300      	movs	r3, #0
 80041ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041ec:	2300      	movs	r3, #0
 80041ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d03f      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004204:	d01c      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420a:	d802      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004210:	e01f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800421c:	d01c      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800421e:	e018      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004220:	4b85      	ldr	r3, [pc, #532]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a84      	ldr	r2, [pc, #528]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800422c:	e015      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fab9 	bl	80047ac <RCCEx_PLLSAI1_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800423e:	e00c      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3320      	adds	r3, #32
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fba0 	bl	800498c <RCCEx_PLLSAI2_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004250:	e003      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	74fb      	strb	r3, [r7, #19]
      break;
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10b      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004260:	4b75      	ldr	r3, [pc, #468]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426e:	4972      	ldr	r1, [pc, #456]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004276:	e001      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d03f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004290:	d01c      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004296:	d802      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xda>
 800429c:	e01f      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800429e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a2:	d003      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80042a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042a8:	d01c      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80042aa:	e018      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042ac:	4b62      	ldr	r3, [pc, #392]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a61      	ldr	r2, [pc, #388]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042b8:	e015      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fa73 	bl	80047ac <RCCEx_PLLSAI1_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042ca:	e00c      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3320      	adds	r3, #32
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fb5a 	bl	800498c <RCCEx_PLLSAI2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	74fb      	strb	r3, [r7, #19]
      break;
 80042e2:	e000      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80042e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042ec:	4b52      	ldr	r3, [pc, #328]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fa:	494f      	ldr	r1, [pc, #316]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004302:	e001      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a0 	beq.w	8004456 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b41      	ldr	r3, [pc, #260]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	4a40      	ldr	r2, [pc, #256]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	; 0x58
 800433c:	4b3e      	ldr	r3, [pc, #248]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004348:	2301      	movs	r3, #1
 800434a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434c:	4b3b      	ldr	r3, [pc, #236]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a3a      	ldr	r2, [pc, #232]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004358:	f7fc fe7a 	bl	8001050 <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800435e:	e009      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004360:	f7fc fe76 	bl	8001050 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d902      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	74fb      	strb	r3, [r7, #19]
        break;
 8004372:	e005      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004374:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ef      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d15c      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004386:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004390:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d019      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	4a20      	ldr	r2, [pc, #128]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043c0:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043d0:	4a19      	ldr	r2, [pc, #100]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fc fe35 	bl	8001050 <HAL_GetTick>
 80043e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e8:	e00b      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fc fe31 	bl	8001050 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d902      	bls.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004402:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ec      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10c      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004426:	4904      	ldr	r1, [pc, #16]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800442e:	e009      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
 8004434:	e006      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004444:	7c7b      	ldrb	r3, [r7, #17]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4b9e      	ldr	r3, [pc, #632]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	4a9d      	ldr	r2, [pc, #628]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004454:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004462:	4b98      	ldr	r3, [pc, #608]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f023 0203 	bic.w	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	4994      	ldr	r1, [pc, #592]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004484:	4b8f      	ldr	r3, [pc, #572]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	f023 020c 	bic.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	498c      	ldr	r1, [pc, #560]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044a6:	4b87      	ldr	r3, [pc, #540]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	4983      	ldr	r1, [pc, #524]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044c8:	4b7e      	ldr	r3, [pc, #504]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	497b      	ldr	r1, [pc, #492]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044ea:	4b76      	ldr	r3, [pc, #472]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f8:	4972      	ldr	r1, [pc, #456]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800450c:	4b6d      	ldr	r3, [pc, #436]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451a:	496a      	ldr	r1, [pc, #424]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800452e:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	4961      	ldr	r1, [pc, #388]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004550:	4b5c      	ldr	r3, [pc, #368]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	4959      	ldr	r1, [pc, #356]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004572:	4b54      	ldr	r3, [pc, #336]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004580:	4950      	ldr	r1, [pc, #320]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004594:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	4948      	ldr	r1, [pc, #288]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045b6:	4b43      	ldr	r3, [pc, #268]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	493f      	ldr	r1, [pc, #252]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d028      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045d8:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	4937      	ldr	r1, [pc, #220]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f6:	d106      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a31      	ldr	r2, [pc, #196]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004602:	60d3      	str	r3, [r2, #12]
 8004604:	e011      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800460e:	d10c      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	2101      	movs	r1, #1
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f8c8 	bl	80047ac <RCCEx_PLLSAI1_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004626:	7cfb      	ldrb	r3, [r7, #19]
 8004628:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d028      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	491f      	ldr	r1, [pc, #124]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004654:	d106      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004660:	60d3      	str	r3, [r2, #12]
 8004662:	e011      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800466c:	d10c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	2101      	movs	r1, #1
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f899 	bl	80047ac <RCCEx_PLLSAI1_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d02b      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a2:	4908      	ldr	r1, [pc, #32]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b2:	d109      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a02      	ldr	r2, [pc, #8]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046be:	60d3      	str	r3, [r2, #12]
 80046c0:	e014      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d0:	d10c      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	2101      	movs	r1, #1
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f867 	bl	80047ac <RCCEx_PLLSAI1_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d02f      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046f8:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004706:	4928      	ldr	r1, [pc, #160]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004716:	d10d      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f844 	bl	80047ac <RCCEx_PLLSAI1_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d014      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	74bb      	strb	r3, [r7, #18]
 8004732:	e011      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800473c:	d10c      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3320      	adds	r3, #32
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f921 	bl	800498c <RCCEx_PLLSAI2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004772:	490d      	ldr	r1, [pc, #52]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004796:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800479e:	7cbb      	ldrb	r3, [r7, #18]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000

080047ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ba:	4b73      	ldr	r3, [pc, #460]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d018      	beq.n	80047f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047c6:	4b70      	ldr	r3, [pc, #448]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d10d      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
       ||
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047de:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
       ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d044      	beq.n	800487c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	e041      	b.n	800487c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d00c      	beq.n	800481a <RCCEx_PLLSAI1_Config+0x6e>
 8004800:	2b03      	cmp	r3, #3
 8004802:	d013      	beq.n	800482c <RCCEx_PLLSAI1_Config+0x80>
 8004804:	2b01      	cmp	r3, #1
 8004806:	d120      	bne.n	800484a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004808:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11d      	bne.n	8004850 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004818:	e01a      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482a:	e013      	b.n	8004854 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800482c:	4b56      	ldr	r3, [pc, #344]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10f      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004838:	4b53      	ldr	r3, [pc, #332]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004848:	e006      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
      break;
 800484e:	e004      	b.n	800485a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004850:	bf00      	nop
 8004852:	e002      	b.n	800485a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004854:	bf00      	nop
 8004856:	e000      	b.n	800485a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004858:	bf00      	nop
    }

    if(status == HAL_OK)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10d      	bne.n	800487c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	430b      	orrs	r3, r1
 8004876:	4944      	ldr	r1, [pc, #272]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d17d      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004882:	4b41      	ldr	r3, [pc, #260]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a40      	ldr	r2, [pc, #256]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004888:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800488c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488e:	f7fc fbdf 	bl	8001050 <HAL_GetTick>
 8004892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004894:	e009      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004896:	f7fc fbdb 	bl	8001050 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d902      	bls.n	80048aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	73fb      	strb	r3, [r7, #15]
        break;
 80048a8:	e005      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048aa:	4b37      	ldr	r3, [pc, #220]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ef      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d160      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d111      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	0211      	lsls	r1, r2, #8
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68d2      	ldr	r2, [r2, #12]
 80048d8:	0912      	lsrs	r2, r2, #4
 80048da:	0452      	lsls	r2, r2, #17
 80048dc:	430a      	orrs	r2, r1
 80048de:	492a      	ldr	r1, [pc, #168]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]
 80048e4:	e027      	b.n	8004936 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d112      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ec:	4b26      	ldr	r3, [pc, #152]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	0211      	lsls	r1, r2, #8
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6912      	ldr	r2, [r2, #16]
 8004902:	0852      	lsrs	r2, r2, #1
 8004904:	3a01      	subs	r2, #1
 8004906:	0552      	lsls	r2, r2, #21
 8004908:	430a      	orrs	r2, r1
 800490a:	491f      	ldr	r1, [pc, #124]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
 8004910:	e011      	b.n	8004936 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004912:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800491a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6892      	ldr	r2, [r2, #8]
 8004922:	0211      	lsls	r1, r2, #8
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6952      	ldr	r2, [r2, #20]
 8004928:	0852      	lsrs	r2, r2, #1
 800492a:	3a01      	subs	r2, #1
 800492c:	0652      	lsls	r2, r2, #25
 800492e:	430a      	orrs	r2, r1
 8004930:	4915      	ldr	r1, [pc, #84]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004936:	4b14      	ldr	r3, [pc, #80]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800493c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004940:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004942:	f7fc fb85 	bl	8001050 <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004948:	e009      	b.n	800495e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800494a:	f7fc fb81 	bl	8001050 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d902      	bls.n	800495e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	73fb      	strb	r3, [r7, #15]
          break;
 800495c:	e005      	b.n	800496a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0ef      	beq.n	800494a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	4903      	ldr	r1, [pc, #12]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000

0800498c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800499a:	4b68      	ldr	r3, [pc, #416]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049a6:	4b65      	ldr	r3, [pc, #404]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0203 	and.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d10d      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049be:	4b5f      	ldr	r3, [pc, #380]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
       ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d044      	beq.n	8004a5c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	e041      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d00c      	beq.n	80049fa <RCCEx_PLLSAI2_Config+0x6e>
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d013      	beq.n	8004a0c <RCCEx_PLLSAI2_Config+0x80>
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d120      	bne.n	8004a2a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049e8:	4b54      	ldr	r3, [pc, #336]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11d      	bne.n	8004a30 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f8:	e01a      	b.n	8004a30 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049fa:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0a:	e013      	b.n	8004a34 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10f      	bne.n	8004a38 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a18:	4b48      	ldr	r3, [pc, #288]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a28:	e006      	b.n	8004a38 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a2e:	e004      	b.n	8004a3a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004a30:	bf00      	nop
 8004a32:	e002      	b.n	8004a3a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004a34:	bf00      	nop
 8004a36:	e000      	b.n	8004a3a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004a38:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10d      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a40:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	430b      	orrs	r3, r1
 8004a56:	4939      	ldr	r1, [pc, #228]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d167      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a35      	ldr	r2, [pc, #212]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6e:	f7fc faef 	bl	8001050 <HAL_GetTick>
 8004a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a74:	e009      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a76:	f7fc faeb 	bl	8001050 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d902      	bls.n	8004a8a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	73fb      	strb	r3, [r7, #15]
        break;
 8004a88:	e005      	b.n	8004a96 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ef      	bne.n	8004a76 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d14a      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d111      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6892      	ldr	r2, [r2, #8]
 8004ab2:	0211      	lsls	r1, r2, #8
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68d2      	ldr	r2, [r2, #12]
 8004ab8:	0912      	lsrs	r2, r2, #4
 8004aba:	0452      	lsls	r2, r2, #17
 8004abc:	430a      	orrs	r2, r1
 8004abe:	491f      	ldr	r1, [pc, #124]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	614b      	str	r3, [r1, #20]
 8004ac4:	e011      	b.n	8004aea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ace:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6892      	ldr	r2, [r2, #8]
 8004ad6:	0211      	lsls	r1, r2, #8
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6912      	ldr	r2, [r2, #16]
 8004adc:	0852      	lsrs	r2, r2, #1
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	0652      	lsls	r2, r2, #25
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	4915      	ldr	r1, [pc, #84]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004aea:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af6:	f7fc faab 	bl	8001050 <HAL_GetTick>
 8004afa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004afc:	e009      	b.n	8004b12 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004afe:	f7fc faa7 	bl	8001050 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d902      	bls.n	8004b12 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8004b10:	e005      	b.n	8004b1e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ef      	beq.n	8004afe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000

08004b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e049      	b.n	8004be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f841 	bl	8004bee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f000 f9f8 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d001      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e04f      	b.n	8004cbc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x76>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d018      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x76>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_TIM_Base_Start_IT+0xc8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x76>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x76>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x76>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x76>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_TIM_Base_Start_IT+0xd8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d115      	bne.n	8004ca6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d015      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0xb4>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c92:	d011      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	e008      	b.n	8004cb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e000      	b.n	8004cba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	00010007 	.word	0x00010007

08004ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0202 	mvn.w	r2, #2
 8004d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f905 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8f7 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f908 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0204 	mvn.w	r2, #4
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8db 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8cd 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f8de 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0208 	mvn.w	r2, #8
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8b1 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f8a3 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8b4 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0210 	mvn.w	r2, #16
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2208      	movs	r2, #8
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f887 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f879 	bl	8004f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f88a 	bl	8004f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10e      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0201 	mvn.w	r2, #1
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fb fe96 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d10e      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d107      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f914 	bl	80050bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b80      	cmp	r3, #128	; 0x80
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f907 	bl	80050d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d10e      	bne.n	8004eee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d107      	bne.n	8004eee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f838 	bl	8004f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d10e      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d107      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f06f 0220 	mvn.w	r2, #32
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8c7 	bl	80050a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a40      	ldr	r2, [pc, #256]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3d      	ldr	r2, [pc, #244]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01f      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d01b      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d017      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00f      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00b      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <TIM_Base_SetConfig+0x128>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_Base_SetConfig+0x9a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a10      	ldr	r2, [pc, #64]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00b      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <TIM_Base_SetConfig+0x128>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0f      	ldr	r2, [pc, #60]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	615a      	str	r2, [r3, #20]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40013400 	.word	0x40013400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e040      	b.n	8005178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fb fe10 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2224      	movs	r2, #36	; 0x24
 8005110:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8c0 	bl	80052a8 <UART_SetConfig>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e022      	b.n	8005178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fb3e 	bl	80057bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800514e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800515e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fbc5 	bl	8005900 <UART_CheckIdleState>
 8005176:	4603      	mov	r3, r0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08a      	sub	sp, #40	; 0x28
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005194:	2b20      	cmp	r3, #32
 8005196:	f040 8081 	bne.w	800529c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_UART_Transmit+0x26>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e079      	b.n	800529e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UART_Transmit+0x38>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e072      	b.n	800529e <HAL_UART_Transmit+0x11e>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2221      	movs	r2, #33	; 0x21
 80051ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80051cc:	f7fb ff40 	bl	8001050 <HAL_GetTick>
 80051d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ea:	d108      	bne.n	80051fe <HAL_UART_Transmit+0x7e>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e003      	b.n	8005206 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800520e:	e02d      	b.n	800526c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2200      	movs	r2, #0
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fbb5 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e039      	b.n	800529e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	881a      	ldrh	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800523c:	b292      	uxth	r2, r2
 800523e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	3302      	adds	r3, #2
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e008      	b.n	800525a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	781a      	ldrb	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	b292      	uxth	r2, r2
 8005252:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	3301      	adds	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1cb      	bne.n	8005210 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2200      	movs	r2, #0
 8005280:	2140      	movs	r1, #64	; 0x40
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fb81 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e005      	b.n	800529e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	e000      	b.n	800529e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800529c:	2302      	movs	r3, #2
  }
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052ac:	b088      	sub	sp, #32
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4bac      	ldr	r3, [pc, #688]	; (8005588 <UART_SetConfig+0x2e0>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	430b      	orrs	r3, r1
 80052e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4aa2      	ldr	r2, [pc, #648]	; (800558c <UART_SetConfig+0x2e4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	4313      	orrs	r3, r2
 8005310:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a99      	ldr	r2, [pc, #612]	; (8005590 <UART_SetConfig+0x2e8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d121      	bne.n	8005374 <UART_SetConfig+0xcc>
 8005330:	4b98      	ldr	r3, [pc, #608]	; (8005594 <UART_SetConfig+0x2ec>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b03      	cmp	r3, #3
 800533c:	d816      	bhi.n	800536c <UART_SetConfig+0xc4>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x9c>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005355 	.word	0x08005355
 8005348:	08005361 	.word	0x08005361
 800534c:	0800535b 	.word	0x0800535b
 8005350:	08005367 	.word	0x08005367
 8005354:	2301      	movs	r3, #1
 8005356:	76fb      	strb	r3, [r7, #27]
 8005358:	e0e8      	b.n	800552c <UART_SetConfig+0x284>
 800535a:	2302      	movs	r3, #2
 800535c:	76fb      	strb	r3, [r7, #27]
 800535e:	e0e5      	b.n	800552c <UART_SetConfig+0x284>
 8005360:	2304      	movs	r3, #4
 8005362:	76fb      	strb	r3, [r7, #27]
 8005364:	e0e2      	b.n	800552c <UART_SetConfig+0x284>
 8005366:	2308      	movs	r3, #8
 8005368:	76fb      	strb	r3, [r7, #27]
 800536a:	e0df      	b.n	800552c <UART_SetConfig+0x284>
 800536c:	2310      	movs	r3, #16
 800536e:	76fb      	strb	r3, [r7, #27]
 8005370:	bf00      	nop
 8005372:	e0db      	b.n	800552c <UART_SetConfig+0x284>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a87      	ldr	r2, [pc, #540]	; (8005598 <UART_SetConfig+0x2f0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d134      	bne.n	80053e8 <UART_SetConfig+0x140>
 800537e:	4b85      	ldr	r3, [pc, #532]	; (8005594 <UART_SetConfig+0x2ec>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b0c      	cmp	r3, #12
 800538a:	d829      	bhi.n	80053e0 <UART_SetConfig+0x138>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0xec>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080053e1 	.word	0x080053e1
 800539c:	080053e1 	.word	0x080053e1
 80053a0:	080053e1 	.word	0x080053e1
 80053a4:	080053d5 	.word	0x080053d5
 80053a8:	080053e1 	.word	0x080053e1
 80053ac:	080053e1 	.word	0x080053e1
 80053b0:	080053e1 	.word	0x080053e1
 80053b4:	080053cf 	.word	0x080053cf
 80053b8:	080053e1 	.word	0x080053e1
 80053bc:	080053e1 	.word	0x080053e1
 80053c0:	080053e1 	.word	0x080053e1
 80053c4:	080053db 	.word	0x080053db
 80053c8:	2300      	movs	r3, #0
 80053ca:	76fb      	strb	r3, [r7, #27]
 80053cc:	e0ae      	b.n	800552c <UART_SetConfig+0x284>
 80053ce:	2302      	movs	r3, #2
 80053d0:	76fb      	strb	r3, [r7, #27]
 80053d2:	e0ab      	b.n	800552c <UART_SetConfig+0x284>
 80053d4:	2304      	movs	r3, #4
 80053d6:	76fb      	strb	r3, [r7, #27]
 80053d8:	e0a8      	b.n	800552c <UART_SetConfig+0x284>
 80053da:	2308      	movs	r3, #8
 80053dc:	76fb      	strb	r3, [r7, #27]
 80053de:	e0a5      	b.n	800552c <UART_SetConfig+0x284>
 80053e0:	2310      	movs	r3, #16
 80053e2:	76fb      	strb	r3, [r7, #27]
 80053e4:	bf00      	nop
 80053e6:	e0a1      	b.n	800552c <UART_SetConfig+0x284>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6b      	ldr	r2, [pc, #428]	; (800559c <UART_SetConfig+0x2f4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d120      	bne.n	8005434 <UART_SetConfig+0x18c>
 80053f2:	4b68      	ldr	r3, [pc, #416]	; (8005594 <UART_SetConfig+0x2ec>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d00f      	beq.n	8005420 <UART_SetConfig+0x178>
 8005400:	2b10      	cmp	r3, #16
 8005402:	d802      	bhi.n	800540a <UART_SetConfig+0x162>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <UART_SetConfig+0x16c>
 8005408:	e010      	b.n	800542c <UART_SetConfig+0x184>
 800540a:	2b20      	cmp	r3, #32
 800540c:	d005      	beq.n	800541a <UART_SetConfig+0x172>
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d009      	beq.n	8005426 <UART_SetConfig+0x17e>
 8005412:	e00b      	b.n	800542c <UART_SetConfig+0x184>
 8005414:	2300      	movs	r3, #0
 8005416:	76fb      	strb	r3, [r7, #27]
 8005418:	e088      	b.n	800552c <UART_SetConfig+0x284>
 800541a:	2302      	movs	r3, #2
 800541c:	76fb      	strb	r3, [r7, #27]
 800541e:	e085      	b.n	800552c <UART_SetConfig+0x284>
 8005420:	2304      	movs	r3, #4
 8005422:	76fb      	strb	r3, [r7, #27]
 8005424:	e082      	b.n	800552c <UART_SetConfig+0x284>
 8005426:	2308      	movs	r3, #8
 8005428:	76fb      	strb	r3, [r7, #27]
 800542a:	e07f      	b.n	800552c <UART_SetConfig+0x284>
 800542c:	2310      	movs	r3, #16
 800542e:	76fb      	strb	r3, [r7, #27]
 8005430:	bf00      	nop
 8005432:	e07b      	b.n	800552c <UART_SetConfig+0x284>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a59      	ldr	r2, [pc, #356]	; (80055a0 <UART_SetConfig+0x2f8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d120      	bne.n	8005480 <UART_SetConfig+0x1d8>
 800543e:	4b55      	ldr	r3, [pc, #340]	; (8005594 <UART_SetConfig+0x2ec>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d00f      	beq.n	800546c <UART_SetConfig+0x1c4>
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d802      	bhi.n	8005456 <UART_SetConfig+0x1ae>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <UART_SetConfig+0x1b8>
 8005454:	e010      	b.n	8005478 <UART_SetConfig+0x1d0>
 8005456:	2b80      	cmp	r3, #128	; 0x80
 8005458:	d005      	beq.n	8005466 <UART_SetConfig+0x1be>
 800545a:	2bc0      	cmp	r3, #192	; 0xc0
 800545c:	d009      	beq.n	8005472 <UART_SetConfig+0x1ca>
 800545e:	e00b      	b.n	8005478 <UART_SetConfig+0x1d0>
 8005460:	2300      	movs	r3, #0
 8005462:	76fb      	strb	r3, [r7, #27]
 8005464:	e062      	b.n	800552c <UART_SetConfig+0x284>
 8005466:	2302      	movs	r3, #2
 8005468:	76fb      	strb	r3, [r7, #27]
 800546a:	e05f      	b.n	800552c <UART_SetConfig+0x284>
 800546c:	2304      	movs	r3, #4
 800546e:	76fb      	strb	r3, [r7, #27]
 8005470:	e05c      	b.n	800552c <UART_SetConfig+0x284>
 8005472:	2308      	movs	r3, #8
 8005474:	76fb      	strb	r3, [r7, #27]
 8005476:	e059      	b.n	800552c <UART_SetConfig+0x284>
 8005478:	2310      	movs	r3, #16
 800547a:	76fb      	strb	r3, [r7, #27]
 800547c:	bf00      	nop
 800547e:	e055      	b.n	800552c <UART_SetConfig+0x284>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a47      	ldr	r2, [pc, #284]	; (80055a4 <UART_SetConfig+0x2fc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d124      	bne.n	80054d4 <UART_SetConfig+0x22c>
 800548a:	4b42      	ldr	r3, [pc, #264]	; (8005594 <UART_SetConfig+0x2ec>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d012      	beq.n	80054c0 <UART_SetConfig+0x218>
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d802      	bhi.n	80054a6 <UART_SetConfig+0x1fe>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <UART_SetConfig+0x20c>
 80054a4:	e012      	b.n	80054cc <UART_SetConfig+0x224>
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054aa:	d006      	beq.n	80054ba <UART_SetConfig+0x212>
 80054ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b0:	d009      	beq.n	80054c6 <UART_SetConfig+0x21e>
 80054b2:	e00b      	b.n	80054cc <UART_SetConfig+0x224>
 80054b4:	2300      	movs	r3, #0
 80054b6:	76fb      	strb	r3, [r7, #27]
 80054b8:	e038      	b.n	800552c <UART_SetConfig+0x284>
 80054ba:	2302      	movs	r3, #2
 80054bc:	76fb      	strb	r3, [r7, #27]
 80054be:	e035      	b.n	800552c <UART_SetConfig+0x284>
 80054c0:	2304      	movs	r3, #4
 80054c2:	76fb      	strb	r3, [r7, #27]
 80054c4:	e032      	b.n	800552c <UART_SetConfig+0x284>
 80054c6:	2308      	movs	r3, #8
 80054c8:	76fb      	strb	r3, [r7, #27]
 80054ca:	e02f      	b.n	800552c <UART_SetConfig+0x284>
 80054cc:	2310      	movs	r3, #16
 80054ce:	76fb      	strb	r3, [r7, #27]
 80054d0:	bf00      	nop
 80054d2:	e02b      	b.n	800552c <UART_SetConfig+0x284>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2c      	ldr	r2, [pc, #176]	; (800558c <UART_SetConfig+0x2e4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d124      	bne.n	8005528 <UART_SetConfig+0x280>
 80054de:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <UART_SetConfig+0x2ec>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d012      	beq.n	8005514 <UART_SetConfig+0x26c>
 80054ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f2:	d802      	bhi.n	80054fa <UART_SetConfig+0x252>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <UART_SetConfig+0x260>
 80054f8:	e012      	b.n	8005520 <UART_SetConfig+0x278>
 80054fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fe:	d006      	beq.n	800550e <UART_SetConfig+0x266>
 8005500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005504:	d009      	beq.n	800551a <UART_SetConfig+0x272>
 8005506:	e00b      	b.n	8005520 <UART_SetConfig+0x278>
 8005508:	2300      	movs	r3, #0
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e00e      	b.n	800552c <UART_SetConfig+0x284>
 800550e:	2302      	movs	r3, #2
 8005510:	76fb      	strb	r3, [r7, #27]
 8005512:	e00b      	b.n	800552c <UART_SetConfig+0x284>
 8005514:	2304      	movs	r3, #4
 8005516:	76fb      	strb	r3, [r7, #27]
 8005518:	e008      	b.n	800552c <UART_SetConfig+0x284>
 800551a:	2308      	movs	r3, #8
 800551c:	76fb      	strb	r3, [r7, #27]
 800551e:	e005      	b.n	800552c <UART_SetConfig+0x284>
 8005520:	2310      	movs	r3, #16
 8005522:	76fb      	strb	r3, [r7, #27]
 8005524:	bf00      	nop
 8005526:	e001      	b.n	800552c <UART_SetConfig+0x284>
 8005528:	2310      	movs	r3, #16
 800552a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a16      	ldr	r2, [pc, #88]	; (800558c <UART_SetConfig+0x2e4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	f040 8087 	bne.w	8005646 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005538:	7efb      	ldrb	r3, [r7, #27]
 800553a:	2b08      	cmp	r3, #8
 800553c:	d836      	bhi.n	80055ac <UART_SetConfig+0x304>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x29c>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	08005569 	.word	0x08005569
 8005548:	080055ad 	.word	0x080055ad
 800554c:	08005571 	.word	0x08005571
 8005550:	080055ad 	.word	0x080055ad
 8005554:	08005577 	.word	0x08005577
 8005558:	080055ad 	.word	0x080055ad
 800555c:	080055ad 	.word	0x080055ad
 8005560:	080055ad 	.word	0x080055ad
 8005564:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005568:	f7fe fd7c 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 800556c:	6178      	str	r0, [r7, #20]
        break;
 800556e:	e022      	b.n	80055b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <UART_SetConfig+0x300>)
 8005572:	617b      	str	r3, [r7, #20]
        break;
 8005574:	e01f      	b.n	80055b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7fe fcdf 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 800557a:	6178      	str	r0, [r7, #20]
        break;
 800557c:	e01b      	b.n	80055b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	617b      	str	r3, [r7, #20]
        break;
 8005584:	e017      	b.n	80055b6 <UART_SetConfig+0x30e>
 8005586:	bf00      	nop
 8005588:	efff69f3 	.word	0xefff69f3
 800558c:	40008000 	.word	0x40008000
 8005590:	40013800 	.word	0x40013800
 8005594:	40021000 	.word	0x40021000
 8005598:	40004400 	.word	0x40004400
 800559c:	40004800 	.word	0x40004800
 80055a0:	40004c00 	.word	0x40004c00
 80055a4:	40005000 	.word	0x40005000
 80055a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	76bb      	strb	r3, [r7, #26]
        break;
 80055b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80f1 	beq.w	80057a0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d305      	bcc.n	80055da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d902      	bls.n	80055e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	76bb      	strb	r3, [r7, #26]
 80055de:	e0df      	b.n	80057a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4619      	mov	r1, r3
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	f04f 0400 	mov.w	r4, #0
 80055f0:	0214      	lsls	r4, r2, #8
 80055f2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80055f6:	020b      	lsls	r3, r1, #8
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6852      	ldr	r2, [r2, #4]
 80055fc:	0852      	lsrs	r2, r2, #1
 80055fe:	4611      	mov	r1, r2
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	eb13 0b01 	adds.w	fp, r3, r1
 8005608:	eb44 0c02 	adc.w	ip, r4, r2
 800560c:	4658      	mov	r0, fp
 800560e:	4661      	mov	r1, ip
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f04f 0400 	mov.w	r4, #0
 8005618:	461a      	mov	r2, r3
 800561a:	4623      	mov	r3, r4
 800561c:	f7fa fe30 	bl	8000280 <__aeabi_uldivmod>
 8005620:	4603      	mov	r3, r0
 8005622:	460c      	mov	r4, r1
 8005624:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562c:	d308      	bcc.n	8005640 <UART_SetConfig+0x398>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005634:	d204      	bcs.n	8005640 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e0af      	b.n	80057a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	76bb      	strb	r3, [r7, #26]
 8005644:	e0ac      	b.n	80057a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d15b      	bne.n	8005708 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005650:	7efb      	ldrb	r3, [r7, #27]
 8005652:	2b08      	cmp	r3, #8
 8005654:	d827      	bhi.n	80056a6 <UART_SetConfig+0x3fe>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0x3b4>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005681 	.word	0x08005681
 8005660:	08005689 	.word	0x08005689
 8005664:	08005691 	.word	0x08005691
 8005668:	080056a7 	.word	0x080056a7
 800566c:	08005697 	.word	0x08005697
 8005670:	080056a7 	.word	0x080056a7
 8005674:	080056a7 	.word	0x080056a7
 8005678:	080056a7 	.word	0x080056a7
 800567c:	0800569f 	.word	0x0800569f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005680:	f7fe fcf0 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8005684:	6178      	str	r0, [r7, #20]
        break;
 8005686:	e013      	b.n	80056b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005688:	f7fe fd02 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 800568c:	6178      	str	r0, [r7, #20]
        break;
 800568e:	e00f      	b.n	80056b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005690:	4b49      	ldr	r3, [pc, #292]	; (80057b8 <UART_SetConfig+0x510>)
 8005692:	617b      	str	r3, [r7, #20]
        break;
 8005694:	e00c      	b.n	80056b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005696:	f7fe fc4f 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 800569a:	6178      	str	r0, [r7, #20]
        break;
 800569c:	e008      	b.n	80056b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a2:	617b      	str	r3, [r7, #20]
        break;
 80056a4:	e004      	b.n	80056b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	76bb      	strb	r3, [r7, #26]
        break;
 80056ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d074      	beq.n	80057a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	005a      	lsls	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	441a      	add	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b0f      	cmp	r3, #15
 80056d2:	d916      	bls.n	8005702 <UART_SetConfig+0x45a>
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056da:	d212      	bcs.n	8005702 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f023 030f 	bic.w	r3, r3, #15
 80056e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	89fb      	ldrh	r3, [r7, #14]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	89fa      	ldrh	r2, [r7, #14]
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	e04e      	b.n	80057a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	76bb      	strb	r3, [r7, #26]
 8005706:	e04b      	b.n	80057a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005708:	7efb      	ldrb	r3, [r7, #27]
 800570a:	2b08      	cmp	r3, #8
 800570c:	d827      	bhi.n	800575e <UART_SetConfig+0x4b6>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0x46c>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	0800575f 	.word	0x0800575f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fe fc94 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 800573c:	6178      	str	r0, [r7, #20]
        break;
 800573e:	e013      	b.n	8005768 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fe fca6 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8005744:	6178      	str	r0, [r7, #20]
        break;
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <UART_SetConfig+0x510>)
 800574a:	617b      	str	r3, [r7, #20]
        break;
 800574c:	e00c      	b.n	8005768 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fe fbf3 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8005752:	6178      	str	r0, [r7, #20]
        break;
 8005754:	e008      	b.n	8005768 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	617b      	str	r3, [r7, #20]
        break;
 800575c:	e004      	b.n	8005768 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	76bb      	strb	r3, [r7, #26]
        break;
 8005766:	bf00      	nop
    }

    if (pclk != 0U)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	085a      	lsrs	r2, r3, #1
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	441a      	add	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	b29b      	uxth	r3, r3
 8005782:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	d908      	bls.n	800579c <UART_SetConfig+0x4f4>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d204      	bcs.n	800579c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	e001      	b.n	80057a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80057ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80057b8:	00f42400 	.word	0x00f42400

080057bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ba:	d10a      	bne.n	80058d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800590e:	f7fb fb9f 	bl	8001050 <HAL_GetTick>
 8005912:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b08      	cmp	r3, #8
 8005920:	d10e      	bne.n	8005940 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005922:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f82a 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e020      	b.n	8005982 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d10e      	bne.n	800596c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f814 	bl	800598a <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e00a      	b.n	8005982 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	603b      	str	r3, [r7, #0]
 8005996:	4613      	mov	r3, r2
 8005998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599a:	e05d      	b.n	8005a58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d059      	beq.n	8005a58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a4:	f7fb fb54 	bl	8001050 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d302      	bcc.n	80059ba <UART_WaitOnFlagUntilTimeout+0x30>
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d11b      	bne.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e042      	b.n	8005a78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d02b      	beq.n	8005a58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0e:	d123      	bne.n	8005a58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e00f      	b.n	8005a78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4013      	ands	r3, r2
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d092      	beq.n	800599c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a96:	f3ef 8305 	mrs	r3, IPSR
 8005a9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10f      	bne.n	8005ac2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa6:	607b      	str	r3, [r7, #4]
  return(result);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d105      	bne.n	8005aba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005aae:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <osKernelInitialize+0x3a>
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <osKernelInitialize+0x64>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d103      	bne.n	8005aca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005ac2:	f06f 0305 	mvn.w	r3, #5
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e00c      	b.n	8005ae4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005aca:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <osKernelInitialize+0x64>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d105      	bne.n	8005ade <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <osKernelInitialize+0x64>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e002      	b.n	8005ae4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000098 	.word	0x20000098

08005af8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005afe:	f3ef 8305 	mrs	r3, IPSR
 8005b02:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10f      	bne.n	8005b2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b0e:	607b      	str	r3, [r7, #4]
  return(result);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d105      	bne.n	8005b22 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b16:	f3ef 8311 	mrs	r3, BASEPRI
 8005b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <osKernelStart+0x3a>
 8005b22:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <osKernelStart+0x68>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d103      	bne.n	8005b32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005b2a:	f06f 0305 	mvn.w	r3, #5
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e010      	b.n	8005b54 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <osKernelStart+0x68>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d109      	bne.n	8005b4e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b3a:	f7ff ffa1 	bl	8005a80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b3e:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <osKernelStart+0x68>)
 8005b40:	2202      	movs	r2, #2
 8005b42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b44:	f001 f870 	bl	8006c28 <vTaskStartScheduler>
      stat = osOK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	e002      	b.n	8005b54 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b54:	68fb      	ldr	r3, [r7, #12]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000098 	.word	0x20000098

08005b64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b090      	sub	sp, #64	; 0x40
 8005b68:	af04      	add	r7, sp, #16
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b74:	f3ef 8305 	mrs	r3, IPSR
 8005b78:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b7a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 808f 	bne.w	8005ca0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b82:	f3ef 8310 	mrs	r3, PRIMASK
 8005b86:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d105      	bne.n	8005b9a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b92:	617b      	str	r3, [r7, #20]
  return(result);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <osThreadNew+0x3e>
 8005b9a:	4b44      	ldr	r3, [pc, #272]	; (8005cac <osThreadNew+0x148>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d07e      	beq.n	8005ca0 <osThreadNew+0x13c>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d07b      	beq.n	8005ca0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005bac:	2318      	movs	r3, #24
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d045      	beq.n	8005c4c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <osThreadNew+0x6a>
        name = attr->name;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <osThreadNew+0x90>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	2b38      	cmp	r3, #56	; 0x38
 8005be6:	d805      	bhi.n	8005bf4 <osThreadNew+0x90>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <osThreadNew+0x94>
        return (NULL);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e054      	b.n	8005ca2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00e      	beq.n	8005c2e <osThreadNew+0xca>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b5b      	cmp	r3, #91	; 0x5b
 8005c16:	d90a      	bls.n	8005c2e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <osThreadNew+0xca>
        mem = 1;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	e010      	b.n	8005c50 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10c      	bne.n	8005c50 <osThreadNew+0xec>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d108      	bne.n	8005c50 <osThreadNew+0xec>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <osThreadNew+0xec>
          mem = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	e001      	b.n	8005c50 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d110      	bne.n	8005c78 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c5e:	9202      	str	r2, [sp, #8]
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fe09 	bl	8006884 <xTaskCreateStatic>
 8005c72:	4603      	mov	r3, r0
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	e013      	b.n	8005ca0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d110      	bne.n	8005ca0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	f107 0310 	add.w	r3, r7, #16
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fe51 	bl	8006938 <xTaskCreate>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d001      	beq.n	8005ca0 <osThreadNew+0x13c>
          hTask = NULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ca0:	693b      	ldr	r3, [r7, #16]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3730      	adds	r7, #48	; 0x30
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000098 	.word	0x20000098

08005cb0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb8:	f3ef 8305 	mrs	r3, IPSR
 8005cbc:	613b      	str	r3, [r7, #16]
  return(result);
 8005cbe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10f      	bne.n	8005ce4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <osDelay+0x3c>
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <osDelay+0x58>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d103      	bne.n	8005cec <osDelay+0x3c>
    stat = osErrorISR;
 8005ce4:	f06f 0305 	mvn.w	r3, #5
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e007      	b.n	8005cfc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <osDelay+0x4c>
      vTaskDelay(ticks);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 ff62 	bl	8006bc0 <vTaskDelay>
    }
  }

  return (stat);
 8005cfc:	697b      	ldr	r3, [r7, #20]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000098 	.word	0x20000098

08005d0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4a06      	ldr	r2, [pc, #24]	; (8005d3c <vApplicationGetIdleTaskMemory+0x30>)
 8005d22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	2000009c 	.word	0x2000009c
 8005d3c:	200000f8 	.word	0x200000f8

08005d40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4a07      	ldr	r2, [pc, #28]	; (8005d6c <vApplicationGetTimerTaskMemory+0x2c>)
 8005d50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4a06      	ldr	r2, [pc, #24]	; (8005d70 <vApplicationGetTimerTaskMemory+0x30>)
 8005d56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	200002f8 	.word	0x200002f8
 8005d70:	20000354 	.word	0x20000354

08005d74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f103 0208 	add.w	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f103 0208 	add.w	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f103 0208 	add.w	r2, r3, #8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d103      	bne.n	8005e36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e00c      	b.n	8005e50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e002      	b.n	8005e44 <vListInsert+0x2e>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d2f6      	bcs.n	8005e3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6892      	ldr	r2, [r2, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6852      	ldr	r2, [r2, #4]
 8005ea8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d103      	bne.n	8005ebc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	e7fe      	b.n	8005f02 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005f04:	f002 f812 	bl	8007f2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	3b01      	subs	r3, #1
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f3a:	fb01 f303 	mul.w	r3, r1, r3
 8005f3e:	441a      	add	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	22ff      	movs	r2, #255	; 0xff
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d114      	bne.n	8005f84 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01a      	beq.n	8005f98 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3310      	adds	r3, #16
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 f8de 	bl	8007128 <xTaskRemoveFromEventList>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d012      	beq.n	8005f98 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f72:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <xQueueGenericReset+0xcc>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	e009      	b.n	8005f98 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3310      	adds	r3, #16
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fef3 	bl	8005d74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3324      	adds	r3, #36	; 0x24
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff feee 	bl	8005d74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f98:	f001 fff6 	bl	8007f88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f9c:	2301      	movs	r3, #1
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	; 0x38
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d109      	bne.n	8005fd4 <xQueueGenericCreateStatic+0x28>
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd2:	e7fe      	b.n	8005fd2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <xQueueGenericCreateStatic+0x42>
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
 8005fec:	e7fe      	b.n	8005fec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <xQueueGenericCreateStatic+0x4e>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <xQueueGenericCreateStatic+0x52>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <xQueueGenericCreateStatic+0x54>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d109      	bne.n	8006018 <xQueueGenericCreateStatic+0x6c>
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	e7fe      	b.n	8006016 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <xQueueGenericCreateStatic+0x78>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <xQueueGenericCreateStatic+0x7c>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <xQueueGenericCreateStatic+0x7e>
 8006028:	2300      	movs	r3, #0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <xQueueGenericCreateStatic+0x96>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e7fe      	b.n	8006040 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006042:	2350      	movs	r3, #80	; 0x50
 8006044:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b50      	cmp	r3, #80	; 0x50
 800604a:	d009      	beq.n	8006060 <xQueueGenericCreateStatic+0xb4>
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	e7fe      	b.n	800605e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006060:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00d      	beq.n	8006088 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006074:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f805 	bl	8006092 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800608a:	4618      	mov	r0, r3
 800608c:	3730      	adds	r7, #48	; 0x30
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	e002      	b.n	80060b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060c0:	2101      	movs	r1, #1
 80060c2:	69b8      	ldr	r0, [r7, #24]
 80060c4:	f7ff ff0a 	bl	8005edc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	; 0x38
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060e6:	2300      	movs	r3, #0
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <xQueueGenericSend+0x30>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	62bb      	str	r3, [r7, #40]	; 0x28
 8006106:	e7fe      	b.n	8006106 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <xQueueGenericSend+0x3e>
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <xQueueGenericSend+0x42>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <xQueueGenericSend+0x44>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <xQueueGenericSend+0x5c>
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
 8006132:	e7fe      	b.n	8006132 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d103      	bne.n	8006142 <xQueueGenericSend+0x6a>
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <xQueueGenericSend+0x6e>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueGenericSend+0x70>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <xQueueGenericSend+0x88>
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	e7fe      	b.n	800615e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006160:	f001 f998 	bl	8007494 <xTaskGetSchedulerState>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <xQueueGenericSend+0x98>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <xQueueGenericSend+0x9c>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <xQueueGenericSend+0x9e>
 8006174:	2300      	movs	r3, #0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <xQueueGenericSend+0xb6>
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	e7fe      	b.n	800618c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800618e:	f001 fecd 	bl	8007f2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <xQueueGenericSend+0xcc>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d129      	bne.n	80061f8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061aa:	f000 f9ff 	bl	80065ac <prvCopyDataToQueue>
 80061ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d010      	beq.n	80061da <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	3324      	adds	r3, #36	; 0x24
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 ffb3 	bl	8007128 <xTaskRemoveFromEventList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061c8:	4b3f      	ldr	r3, [pc, #252]	; (80062c8 <xQueueGenericSend+0x1f0>)
 80061ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	e00a      	b.n	80061f0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061e0:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <xQueueGenericSend+0x1f0>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061f0:	f001 feca 	bl	8007f88 <vPortExitCritical>
				return pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e063      	b.n	80062c0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fe:	f001 fec3 	bl	8007f88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006202:	2300      	movs	r3, #0
 8006204:	e05c      	b.n	80062c0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	2b00      	cmp	r3, #0
 800620a:	d106      	bne.n	800621a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	4618      	mov	r0, r3
 8006212:	f000 ffeb 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800621a:	f001 feb5 	bl	8007f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621e:	f000 fd67 	bl	8006cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006222:	f001 fe83 	bl	8007f2c <vPortEnterCritical>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622c:	b25b      	sxtb	r3, r3
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d103      	bne.n	800623c <xQueueGenericSend+0x164>
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d103      	bne.n	8006252 <xQueueGenericSend+0x17a>
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006252:	f001 fe99 	bl	8007f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006256:	1d3a      	adds	r2, r7, #4
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f000 ffda 	bl	8007218 <xTaskCheckForTimeOut>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d124      	bne.n	80062b4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800626a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800626c:	f000 fa96 	bl	800679c <prvIsQueueFull>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	3310      	adds	r3, #16
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4611      	mov	r1, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f000 ff04 	bl	800708c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006286:	f000 fa21 	bl	80066cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800628a:	f000 fd3f 	bl	8006d0c <xTaskResumeAll>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f af7c 	bne.w	800618e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <xQueueGenericSend+0x1f0>)
 8006298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	e772      	b.n	800618e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062aa:	f000 fa0f 	bl	80066cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ae:	f000 fd2d 	bl	8006d0c <xTaskResumeAll>
 80062b2:	e76c      	b.n	800618e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b6:	f000 fa09 	bl	80066cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ba:	f000 fd27 	bl	8006d0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3738      	adds	r7, #56	; 0x38
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08e      	sub	sp, #56	; 0x38
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d109      	bne.n	80062f8 <xQueueGenericSendFromISR+0x2c>
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
 80062f6:	e7fe      	b.n	80062f6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <xQueueGenericSendFromISR+0x3a>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <xQueueGenericSendFromISR+0x3e>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <xQueueGenericSendFromISR+0x40>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <xQueueGenericSendFromISR+0x58>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	623b      	str	r3, [r7, #32]
 8006322:	e7fe      	b.n	8006322 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d103      	bne.n	8006332 <xQueueGenericSendFromISR+0x66>
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <xQueueGenericSendFromISR+0x6a>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericSendFromISR+0x6c>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <xQueueGenericSendFromISR+0x84>
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e7fe      	b.n	800634e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006350:	f001 fec8 	bl	80080e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006354:	f3ef 8211 	mrs	r2, BASEPRI
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	61ba      	str	r2, [r7, #24]
 800636a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800636c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006378:	429a      	cmp	r2, r3
 800637a:	d302      	bcc.n	8006382 <xQueueGenericSendFromISR+0xb6>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d12c      	bne.n	80063dc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006392:	f000 f90b 	bl	80065ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006396:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d112      	bne.n	80063c6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	3324      	adds	r3, #36	; 0x24
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 febb 	bl	8007128 <xTaskRemoveFromEventList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00e      	beq.n	80063d6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e007      	b.n	80063d6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ca:	3301      	adds	r3, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	b25a      	sxtb	r2, r3
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063d6:	2301      	movs	r3, #1
 80063d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80063da:	e001      	b.n	80063e0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	637b      	str	r3, [r7, #52]	; 0x34
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3738      	adds	r7, #56	; 0x38
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	; 0x30
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006400:	2300      	movs	r3, #0
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <xQueueReceive+0x2e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	623b      	str	r3, [r7, #32]
 8006420:	e7fe      	b.n	8006420 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <xQueueReceive+0x3c>
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <xQueueReceive+0x40>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <xQueueReceive+0x42>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <xQueueReceive+0x5a>
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e7fe      	b.n	800644c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800644e:	f001 f821 	bl	8007494 <xTaskGetSchedulerState>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <xQueueReceive+0x6a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <xQueueReceive+0x6e>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <xQueueReceive+0x70>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <xQueueReceive+0x88>
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	e7fe      	b.n	800647a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800647c:	f001 fd56 	bl	8007f2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01f      	beq.n	80064cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006490:	f000 f8f6 	bl	8006680 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00f      	beq.n	80064c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	3310      	adds	r3, #16
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fe3d 	bl	8007128 <xTaskRemoveFromEventList>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064b4:	4b3c      	ldr	r3, [pc, #240]	; (80065a8 <xQueueReceive+0x1b4>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064c4:	f001 fd60 	bl	8007f88 <vPortExitCritical>
				return pdPASS;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e069      	b.n	80065a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064d2:	f001 fd59 	bl	8007f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e062      	b.n	80065a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064e0:	f107 0310 	add.w	r3, r7, #16
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fe81 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ea:	2301      	movs	r3, #1
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ee:	f001 fd4b 	bl	8007f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064f2:	f000 fbfd 	bl	8006cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064f6:	f001 fd19 	bl	8007f2c <vPortEnterCritical>
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006500:	b25b      	sxtb	r3, r3
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d103      	bne.n	8006510 <xQueueReceive+0x11c>
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006516:	b25b      	sxtb	r3, r3
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d103      	bne.n	8006526 <xQueueReceive+0x132>
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006526:	f001 fd2f 	bl	8007f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800652a:	1d3a      	adds	r2, r7, #4
 800652c:	f107 0310 	add.w	r3, r7, #16
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fe70 	bl	8007218 <xTaskCheckForTimeOut>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d123      	bne.n	8006586 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800653e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006540:	f000 f916 	bl	8006770 <prvIsQueueEmpty>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d017      	beq.n	800657a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fd9a 	bl	800708c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655a:	f000 f8b7 	bl	80066cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800655e:	f000 fbd5 	bl	8006d0c <xTaskResumeAll>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d189      	bne.n	800647c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <xQueueReceive+0x1b4>)
 800656a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	e780      	b.n	800647c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800657a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800657c:	f000 f8a6 	bl	80066cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006580:	f000 fbc4 	bl	8006d0c <xTaskResumeAll>
 8006584:	e77a      	b.n	800647c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006588:	f000 f8a0 	bl	80066cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800658c:	f000 fbbe 	bl	8006d0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006592:	f000 f8ed 	bl	8006770 <prvIsQueueEmpty>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	f43f af6f 	beq.w	800647c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800659e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3730      	adds	r7, #48	; 0x30
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d14d      	bne.n	800666e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 ff7a 	bl	80074d0 <xTaskPriorityDisinherit>
 80065dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	609a      	str	r2, [r3, #8]
 80065e4:	e043      	b.n	800666e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d119      	bne.n	8006620 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6858      	ldr	r0, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	461a      	mov	r2, r3
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	f001 ffb2 	bl	8008560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	441a      	add	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	429a      	cmp	r2, r3
 8006614:	d32b      	bcc.n	800666e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	e026      	b.n	800666e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68d8      	ldr	r0, [r3, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	461a      	mov	r2, r3
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	f001 ff98 	bl	8008560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	425b      	negs	r3, r3
 800663a:	441a      	add	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d207      	bcs.n	800665c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	425b      	negs	r3, r3
 8006656:	441a      	add	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d105      	bne.n	800666e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	3b01      	subs	r3, #1
 800666c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006676:	697b      	ldr	r3, [r7, #20]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	441a      	add	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d303      	bcc.n	80066b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68d9      	ldr	r1, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	461a      	mov	r2, r3
 80066be:	6838      	ldr	r0, [r7, #0]
 80066c0:	f001 ff4e 	bl	8008560 <memcpy>
	}
}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066d4:	f001 fc2a 	bl	8007f2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e0:	e011      	b.n	8006706 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d012      	beq.n	8006710 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3324      	adds	r3, #36	; 0x24
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fd1a 	bl	8007128 <xTaskRemoveFromEventList>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066fa:	f000 fded 	bl	80072d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	3b01      	subs	r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800670a:	2b00      	cmp	r3, #0
 800670c:	dce9      	bgt.n	80066e2 <prvUnlockQueue+0x16>
 800670e:	e000      	b.n	8006712 <prvUnlockQueue+0x46>
					break;
 8006710:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800671a:	f001 fc35 	bl	8007f88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800671e:	f001 fc05 	bl	8007f2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006728:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800672a:	e011      	b.n	8006750 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d012      	beq.n	800675a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3310      	adds	r3, #16
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fcf5 	bl	8007128 <xTaskRemoveFromEventList>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006744:	f000 fdc8 	bl	80072d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	3b01      	subs	r3, #1
 800674c:	b2db      	uxtb	r3, r3
 800674e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006754:	2b00      	cmp	r3, #0
 8006756:	dce9      	bgt.n	800672c <prvUnlockQueue+0x60>
 8006758:	e000      	b.n	800675c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800675a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	22ff      	movs	r2, #255	; 0xff
 8006760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006764:	f001 fc10 	bl	8007f88 <vPortExitCritical>
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006778:	f001 fbd8 	bl	8007f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006784:	2301      	movs	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e001      	b.n	800678e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800678e:	f001 fbfb 	bl	8007f88 <vPortExitCritical>

	return xReturn;
 8006792:	68fb      	ldr	r3, [r7, #12]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067a4:	f001 fbc2 	bl	8007f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d102      	bne.n	80067ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067b4:	2301      	movs	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e001      	b.n	80067be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067be:	f001 fbe3 	bl	8007f88 <vPortExitCritical>

	return xReturn;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e014      	b.n	8006806 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067dc:	4a0e      	ldr	r2, [pc, #56]	; (8006818 <vQueueAddToRegistry+0x4c>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10b      	bne.n	8006800 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067e8:	490b      	ldr	r1, [pc, #44]	; (8006818 <vQueueAddToRegistry+0x4c>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <vQueueAddToRegistry+0x4c>)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4413      	add	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067fe:	e005      	b.n	800680c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b07      	cmp	r3, #7
 800680a:	d9e7      	bls.n	80067dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	20001b10 	.word	0x20001b10

0800681c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800682c:	f001 fb7e 	bl	8007f2c <vPortEnterCritical>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006836:	b25b      	sxtb	r3, r3
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d103      	bne.n	8006846 <vQueueWaitForMessageRestricted+0x2a>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800684c:	b25b      	sxtb	r3, r3
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d103      	bne.n	800685c <vQueueWaitForMessageRestricted+0x40>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800685c:	f001 fb94 	bl	8007f88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	3324      	adds	r3, #36	; 0x24
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fc2f 	bl	80070d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006876:	6978      	ldr	r0, [r7, #20]
 8006878:	f7ff ff28 	bl	80066cc <prvUnlockQueue>
	}
 800687c:	bf00      	nop
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08e      	sub	sp, #56	; 0x38
 8006888:	af04      	add	r7, sp, #16
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <xTaskCreateStatic+0x28>
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	623b      	str	r3, [r7, #32]
 80068aa:	e7fe      	b.n	80068aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <xTaskCreateStatic+0x42>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	e7fe      	b.n	80068c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068c6:	235c      	movs	r3, #92	; 0x5c
 80068c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b5c      	cmp	r3, #92	; 0x5c
 80068ce:	d009      	beq.n	80068e4 <xTaskCreateStatic+0x60>
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	e7fe      	b.n	80068e2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01e      	beq.n	800692a <xTaskCreateStatic+0xa6>
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01b      	beq.n	800692a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006904:	2300      	movs	r3, #0
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	9302      	str	r3, [sp, #8]
 800690c:	f107 0314 	add.w	r3, r7, #20
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f850 	bl	80069c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006924:	f000 f8dc 	bl	8006ae0 <prvAddNewTaskToReadyList>
 8006928:	e001      	b.n	800692e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800692e:	697b      	ldr	r3, [r7, #20]
	}
 8006930:	4618      	mov	r0, r3
 8006932:	3728      	adds	r7, #40	; 0x28
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	; 0x30
 800693c:	af04      	add	r7, sp, #16
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4618      	mov	r0, r3
 800694e:	f001 fc07 	bl	8008160 <pvPortMalloc>
 8006952:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800695a:	205c      	movs	r0, #92	; 0x5c
 800695c:	f001 fc00 	bl	8008160 <pvPortMalloc>
 8006960:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	631a      	str	r2, [r3, #48]	; 0x30
 800696e:	e005      	b.n	800697c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006970:	6978      	ldr	r0, [r7, #20]
 8006972:	f001 fcb7 	bl	80082e4 <vPortFree>
 8006976:	e001      	b.n	800697c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d017      	beq.n	80069b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	2300      	movs	r3, #0
 800698e:	9303      	str	r3, [sp, #12]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	9302      	str	r3, [sp, #8]
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f80e 	bl	80069c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069a6:	69f8      	ldr	r0, [r7, #28]
 80069a8:	f000 f89a 	bl	8006ae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069ac:	2301      	movs	r3, #1
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e002      	b.n	80069b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069b2:	f04f 33ff 	mov.w	r3, #4294967295
 80069b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069b8:	69bb      	ldr	r3, [r7, #24]
	}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b088      	sub	sp, #32
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
 80069ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	461a      	mov	r2, r3
 80069da:	21a5      	movs	r1, #165	; 0xa5
 80069dc:	f001 fdcb 	bl	8008576 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069ea:	3b01      	subs	r3, #1
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f023 0307 	bic.w	r3, r3, #7
 80069f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <prvInitialiseNewTask+0x56>
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e7fe      	b.n	8006a16 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01f      	beq.n	8006a5e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	e012      	b.n	8006a4a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	7819      	ldrb	r1, [r3, #0]
 8006a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	3334      	adds	r3, #52	; 0x34
 8006a34:	460a      	mov	r2, r1
 8006a36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d006      	beq.n	8006a52 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	3301      	adds	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	2b0f      	cmp	r3, #15
 8006a4e:	d9e9      	bls.n	8006a24 <prvInitialiseNewTask+0x62>
 8006a50:	e000      	b.n	8006a54 <prvInitialiseNewTask+0x92>
			{
				break;
 8006a52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a5c:	e003      	b.n	8006a66 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	2b37      	cmp	r3, #55	; 0x37
 8006a6a:	d901      	bls.n	8006a70 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a6c:	2337      	movs	r3, #55	; 0x37
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	2200      	movs	r2, #0
 8006a80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	3304      	adds	r3, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff f994 	bl	8005db4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	3318      	adds	r3, #24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff f98f 	bl	8005db4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2200      	movs	r2, #0
 8006ab0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	69b8      	ldr	r0, [r7, #24]
 8006ac0:	f001 f90c 	bl	8007cdc <pxPortInitialiseStack>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	3720      	adds	r7, #32
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ae8:	f001 fa20 	bl	8007f2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006aec:	4b2d      	ldr	r3, [pc, #180]	; (8006ba4 <prvAddNewTaskToReadyList+0xc4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a2c      	ldr	r2, [pc, #176]	; (8006ba4 <prvAddNewTaskToReadyList+0xc4>)
 8006af4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006af6:	4b2c      	ldr	r3, [pc, #176]	; (8006ba8 <prvAddNewTaskToReadyList+0xc8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006afe:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <prvAddNewTaskToReadyList+0xc8>)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <prvAddNewTaskToReadyList+0xc4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d110      	bne.n	8006b2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b0c:	f000 fc08 	bl	8007320 <prvInitialiseTaskLists>
 8006b10:	e00d      	b.n	8006b2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b12:	4b26      	ldr	r3, [pc, #152]	; (8006bac <prvAddNewTaskToReadyList+0xcc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b1a:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <prvAddNewTaskToReadyList+0xc8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d802      	bhi.n	8006b2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b28:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <prvAddNewTaskToReadyList+0xc8>)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b2e:	4b20      	ldr	r3, [pc, #128]	; (8006bb0 <prvAddNewTaskToReadyList+0xd0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a1e      	ldr	r2, [pc, #120]	; (8006bb0 <prvAddNewTaskToReadyList+0xd0>)
 8006b36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b38:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <prvAddNewTaskToReadyList+0xd0>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <prvAddNewTaskToReadyList+0xd4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d903      	bls.n	8006b54 <prvAddNewTaskToReadyList+0x74>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4a18      	ldr	r2, [pc, #96]	; (8006bb4 <prvAddNewTaskToReadyList+0xd4>)
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <prvAddNewTaskToReadyList+0xd8>)
 8006b62:	441a      	add	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f7ff f92f 	bl	8005dce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b70:	f001 fa0a 	bl	8007f88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b74:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <prvAddNewTaskToReadyList+0xcc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00e      	beq.n	8006b9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <prvAddNewTaskToReadyList+0xc8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d207      	bcs.n	8006b9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <prvAddNewTaskToReadyList+0xdc>)
 8006b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000c28 	.word	0x20000c28
 8006ba8:	20000754 	.word	0x20000754
 8006bac:	20000c34 	.word	0x20000c34
 8006bb0:	20000c44 	.word	0x20000c44
 8006bb4:	20000c30 	.word	0x20000c30
 8006bb8:	20000758 	.word	0x20000758
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bd2:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <vTaskDelay+0x60>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <vTaskDelay+0x2e>
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	e7fe      	b.n	8006bec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006bee:	f000 f87f 	bl	8006cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fcd7 	bl	80075a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bfa:	f000 f887 	bl	8006d0c <xTaskResumeAll>
 8006bfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d107      	bne.n	8006c16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006c06:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <vTaskDelay+0x64>)
 8006c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000c50 	.word	0x20000c50
 8006c24:	e000ed04 	.word	0xe000ed04

08006c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c36:	463a      	mov	r2, r7
 8006c38:	1d39      	adds	r1, r7, #4
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff f864 	bl	8005d0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	9202      	str	r2, [sp, #8]
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	2300      	movs	r3, #0
 8006c54:	460a      	mov	r2, r1
 8006c56:	4920      	ldr	r1, [pc, #128]	; (8006cd8 <vTaskStartScheduler+0xb0>)
 8006c58:	4820      	ldr	r0, [pc, #128]	; (8006cdc <vTaskStartScheduler+0xb4>)
 8006c5a:	f7ff fe13 	bl	8006884 <xTaskCreateStatic>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	4b1f      	ldr	r3, [pc, #124]	; (8006ce0 <vTaskStartScheduler+0xb8>)
 8006c62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c64:	4b1e      	ldr	r3, [pc, #120]	; (8006ce0 <vTaskStartScheduler+0xb8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e001      	b.n	8006c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d102      	bne.n	8006c82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c7c:	f000 fce8 	bl	8007650 <xTimerCreateTimerTask>
 8006c80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d115      	bne.n	8006cb4 <vTaskStartScheduler+0x8c>
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c9a:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <vTaskStartScheduler+0xbc>)
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <vTaskStartScheduler+0xc0>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <vTaskStartScheduler+0xc4>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cae:	f001 f89f 	bl	8007df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cb2:	e00d      	b.n	8006cd0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d109      	bne.n	8006cd0 <vTaskStartScheduler+0xa8>
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e7fe      	b.n	8006cce <vTaskStartScheduler+0xa6>
}
 8006cd0:	bf00      	nop
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08008e0c 	.word	0x08008e0c
 8006cdc:	080072f1 	.word	0x080072f1
 8006ce0:	20000c4c 	.word	0x20000c4c
 8006ce4:	20000c48 	.word	0x20000c48
 8006ce8:	20000c34 	.word	0x20000c34
 8006cec:	20000c2c 	.word	0x20000c2c

08006cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <vTaskSuspendAll+0x18>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	4a03      	ldr	r2, [pc, #12]	; (8006d08 <vTaskSuspendAll+0x18>)
 8006cfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006cfe:	bf00      	nop
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	20000c50 	.word	0x20000c50

08006d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d1a:	4b41      	ldr	r3, [pc, #260]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <xTaskResumeAll+0x2a>
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	e7fe      	b.n	8006d34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d36:	f001 f8f9 	bl	8007f2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d3a:	4b39      	ldr	r3, [pc, #228]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4a37      	ldr	r2, [pc, #220]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d44:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <xTaskResumeAll+0x114>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d162      	bne.n	8006e12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <xTaskResumeAll+0x118>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05e      	beq.n	8006e12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d54:	e02f      	b.n	8006db6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d56:	4b34      	ldr	r3, [pc, #208]	; (8006e28 <xTaskResumeAll+0x11c>)
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3318      	adds	r3, #24
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff f890 	bl	8005e88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff f88b 	bl	8005e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <xTaskResumeAll+0x120>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d903      	bls.n	8006d86 <xTaskResumeAll+0x7a>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4a2a      	ldr	r2, [pc, #168]	; (8006e2c <xTaskResumeAll+0x120>)
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <xTaskResumeAll+0x124>)
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f7ff f816 	bl	8005dce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	4b23      	ldr	r3, [pc, #140]	; (8006e34 <xTaskResumeAll+0x128>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d302      	bcc.n	8006db6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006db0:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006db6:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <xTaskResumeAll+0x11c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1cb      	bne.n	8006d56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dc4:	f000 fb46 	bl	8007454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dc8:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <xTaskResumeAll+0x130>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d010      	beq.n	8006df6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dd4:	f000 f846 	bl	8006e64 <xTaskIncrementTick>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006dde:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f1      	bne.n	8006dd4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <xTaskResumeAll+0x130>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <xTaskResumeAll+0x12c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <xTaskResumeAll+0x134>)
 8006e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e12:	f001 f8b9 	bl	8007f88 <vPortExitCritical>

	return xAlreadyYielded;
 8006e16:	68bb      	ldr	r3, [r7, #8]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20000c50 	.word	0x20000c50
 8006e24:	20000c28 	.word	0x20000c28
 8006e28:	20000be8 	.word	0x20000be8
 8006e2c:	20000c30 	.word	0x20000c30
 8006e30:	20000758 	.word	0x20000758
 8006e34:	20000754 	.word	0x20000754
 8006e38:	20000c3c 	.word	0x20000c3c
 8006e3c:	20000c38 	.word	0x20000c38
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <xTaskGetTickCount+0x1c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e50:	687b      	ldr	r3, [r7, #4]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000c2c 	.word	0x20000c2c

08006e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6e:	4b4e      	ldr	r3, [pc, #312]	; (8006fa8 <xTaskIncrementTick+0x144>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 8088 	bne.w	8006f88 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e78:	4b4c      	ldr	r3, [pc, #304]	; (8006fac <xTaskIncrementTick+0x148>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e80:	4a4a      	ldr	r2, [pc, #296]	; (8006fac <xTaskIncrementTick+0x148>)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11f      	bne.n	8006ecc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e8c:	4b48      	ldr	r3, [pc, #288]	; (8006fb0 <xTaskIncrementTick+0x14c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <xTaskIncrementTick+0x46>
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	e7fe      	b.n	8006ea8 <xTaskIncrementTick+0x44>
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <xTaskIncrementTick+0x14c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	4b40      	ldr	r3, [pc, #256]	; (8006fb4 <xTaskIncrementTick+0x150>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a3e      	ldr	r2, [pc, #248]	; (8006fb0 <xTaskIncrementTick+0x14c>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4a3e      	ldr	r2, [pc, #248]	; (8006fb4 <xTaskIncrementTick+0x150>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	4b3e      	ldr	r3, [pc, #248]	; (8006fb8 <xTaskIncrementTick+0x154>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	4a3c      	ldr	r2, [pc, #240]	; (8006fb8 <xTaskIncrementTick+0x154>)
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f000 fac4 	bl	8007454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ecc:	4b3b      	ldr	r3, [pc, #236]	; (8006fbc <xTaskIncrementTick+0x158>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d349      	bcc.n	8006f6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed6:	4b36      	ldr	r3, [pc, #216]	; (8006fb0 <xTaskIncrementTick+0x14c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee0:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <xTaskIncrementTick+0x158>)
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	601a      	str	r2, [r3, #0]
					break;
 8006ee8:	e03f      	b.n	8006f6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eea:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <xTaskIncrementTick+0x14c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d203      	bcs.n	8006f0a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f02:	4a2e      	ldr	r2, [pc, #184]	; (8006fbc <xTaskIncrementTick+0x158>)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f08:	e02f      	b.n	8006f6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe ffba 	bl	8005e88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	3318      	adds	r3, #24
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe ffb1 	bl	8005e88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2a:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <xTaskIncrementTick+0x15c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d903      	bls.n	8006f3a <xTaskIncrementTick+0xd6>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	4a22      	ldr	r2, [pc, #136]	; (8006fc0 <xTaskIncrementTick+0x15c>)
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4a1f      	ldr	r2, [pc, #124]	; (8006fc4 <xTaskIncrementTick+0x160>)
 8006f48:	441a      	add	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4610      	mov	r0, r2
 8006f52:	f7fe ff3c 	bl	8005dce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <xTaskIncrementTick+0x164>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d3b8      	bcc.n	8006ed6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f64:	2301      	movs	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f68:	e7b5      	b.n	8006ed6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f6a:	4b17      	ldr	r3, [pc, #92]	; (8006fc8 <xTaskIncrementTick+0x164>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4914      	ldr	r1, [pc, #80]	; (8006fc4 <xTaskIncrementTick+0x160>)
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d907      	bls.n	8006f92 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	e004      	b.n	8006f92 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f88:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <xTaskIncrementTick+0x168>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	4a0f      	ldr	r2, [pc, #60]	; (8006fcc <xTaskIncrementTick+0x168>)
 8006f90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f92:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <xTaskIncrementTick+0x16c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f9e:	697b      	ldr	r3, [r7, #20]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000c50 	.word	0x20000c50
 8006fac:	20000c2c 	.word	0x20000c2c
 8006fb0:	20000be0 	.word	0x20000be0
 8006fb4:	20000be4 	.word	0x20000be4
 8006fb8:	20000c40 	.word	0x20000c40
 8006fbc:	20000c48 	.word	0x20000c48
 8006fc0:	20000c30 	.word	0x20000c30
 8006fc4:	20000758 	.word	0x20000758
 8006fc8:	20000754 	.word	0x20000754
 8006fcc:	20000c38 	.word	0x20000c38
 8006fd0:	20000c3c 	.word	0x20000c3c

08006fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fda:	4b27      	ldr	r3, [pc, #156]	; (8007078 <vTaskSwitchContext+0xa4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <vTaskSwitchContext+0xa8>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fe8:	e040      	b.n	800706c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006fea:	4b24      	ldr	r3, [pc, #144]	; (800707c <vTaskSwitchContext+0xa8>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff0:	4b23      	ldr	r3, [pc, #140]	; (8007080 <vTaskSwitchContext+0xac>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e00f      	b.n	8007018 <vTaskSwitchContext+0x44>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <vTaskSwitchContext+0x3e>
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	e7fe      	b.n	8007010 <vTaskSwitchContext+0x3c>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3b01      	subs	r3, #1
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	491a      	ldr	r1, [pc, #104]	; (8007084 <vTaskSwitchContext+0xb0>)
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0e5      	beq.n	8006ff8 <vTaskSwitchContext+0x24>
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a13      	ldr	r2, [pc, #76]	; (8007084 <vTaskSwitchContext+0xb0>)
 8007038:	4413      	add	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	3308      	adds	r3, #8
 800704e:	429a      	cmp	r2, r3
 8007050:	d104      	bne.n	800705c <vTaskSwitchContext+0x88>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	605a      	str	r2, [r3, #4]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <vTaskSwitchContext+0xb4>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	4a06      	ldr	r2, [pc, #24]	; (8007080 <vTaskSwitchContext+0xac>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6013      	str	r3, [r2, #0]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	20000c50 	.word	0x20000c50
 800707c:	20000c3c 	.word	0x20000c3c
 8007080:	20000c30 	.word	0x20000c30
 8007084:	20000758 	.word	0x20000758
 8007088:	20000754 	.word	0x20000754

0800708c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <vTaskPlaceOnEventList+0x24>
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e7fe      	b.n	80070ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <vTaskPlaceOnEventList+0x44>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3318      	adds	r3, #24
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7fe feac 	bl	8005e16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070be:	2101      	movs	r1, #1
 80070c0:	6838      	ldr	r0, [r7, #0]
 80070c2:	f000 fa71 	bl	80075a8 <prvAddCurrentTaskToDelayedList>
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000754 	.word	0x20000754

080070d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d109      	bne.n	80070fa <vTaskPlaceOnEventListRestricted+0x26>
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	e7fe      	b.n	80070f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070fa:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <vTaskPlaceOnEventListRestricted+0x50>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3318      	adds	r3, #24
 8007100:	4619      	mov	r1, r3
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7fe fe63 	bl	8005dce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800710e:	f04f 33ff 	mov.w	r3, #4294967295
 8007112:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	68b8      	ldr	r0, [r7, #8]
 8007118:	f000 fa46 	bl	80075a8 <prvAddCurrentTaskToDelayedList>
	}
 800711c:	bf00      	nop
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000754 	.word	0x20000754

08007128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <xTaskRemoveFromEventList+0x2a>
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e7fe      	b.n	8007150 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3318      	adds	r3, #24
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fe96 	bl	8005e88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715c:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <xTaskRemoveFromEventList+0xac>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11d      	bne.n	80071a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3304      	adds	r3, #4
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fe8d 	bl	8005e88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4b19      	ldr	r3, [pc, #100]	; (80071d8 <xTaskRemoveFromEventList+0xb0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d903      	bls.n	8007182 <xTaskRemoveFromEventList+0x5a>
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <xTaskRemoveFromEventList+0xb0>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4a13      	ldr	r2, [pc, #76]	; (80071dc <xTaskRemoveFromEventList+0xb4>)
 8007190:	441a      	add	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3304      	adds	r3, #4
 8007196:	4619      	mov	r1, r3
 8007198:	4610      	mov	r0, r2
 800719a:	f7fe fe18 	bl	8005dce <vListInsertEnd>
 800719e:	e005      	b.n	80071ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3318      	adds	r3, #24
 80071a4:	4619      	mov	r1, r3
 80071a6:	480e      	ldr	r0, [pc, #56]	; (80071e0 <xTaskRemoveFromEventList+0xb8>)
 80071a8:	f7fe fe11 	bl	8005dce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <xTaskRemoveFromEventList+0xbc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d905      	bls.n	80071c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071be:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <xTaskRemoveFromEventList+0xc0>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e001      	b.n	80071ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071ca:	697b      	ldr	r3, [r7, #20]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000c50 	.word	0x20000c50
 80071d8:	20000c30 	.word	0x20000c30
 80071dc:	20000758 	.word	0x20000758
 80071e0:	20000be8 	.word	0x20000be8
 80071e4:	20000754 	.word	0x20000754
 80071e8:	20000c3c 	.word	0x20000c3c

080071ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <vTaskInternalSetTimeOutState+0x24>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <vTaskInternalSetTimeOutState+0x28>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20000c40 	.word	0x20000c40
 8007214:	20000c2c 	.word	0x20000c2c

08007218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <xTaskCheckForTimeOut+0x24>
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	e7fe      	b.n	800723a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <xTaskCheckForTimeOut+0x3e>
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e7fe      	b.n	8007254 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007256:	f000 fe69 	bl	8007f2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800725a:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <xTaskCheckForTimeOut+0xb8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007272:	d102      	bne.n	800727a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007274:	2300      	movs	r3, #0
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	e023      	b.n	80072c2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <xTaskCheckForTimeOut+0xbc>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d007      	beq.n	8007296 <xTaskCheckForTimeOut+0x7e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	429a      	cmp	r2, r3
 800728e:	d302      	bcc.n	8007296 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007290:	2301      	movs	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	e015      	b.n	80072c2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	429a      	cmp	r2, r3
 800729e:	d20b      	bcs.n	80072b8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff ff9d 	bl	80071ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	e004      	b.n	80072c2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072be:	2301      	movs	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072c2:	f000 fe61 	bl	8007f88 <vPortExitCritical>

	return xReturn;
 80072c6:	69fb      	ldr	r3, [r7, #28]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000c2c 	.word	0x20000c2c
 80072d4:	20000c40 	.word	0x20000c40

080072d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072dc:	4b03      	ldr	r3, [pc, #12]	; (80072ec <vTaskMissedYield+0x14>)
 80072de:	2201      	movs	r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
}
 80072e2:	bf00      	nop
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	20000c3c 	.word	0x20000c3c

080072f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072f8:	f000 f852 	bl	80073a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <prvIdleTask+0x28>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d9f9      	bls.n	80072f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <prvIdleTask+0x2c>)
 8007306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007314:	e7f0      	b.n	80072f8 <prvIdleTask+0x8>
 8007316:	bf00      	nop
 8007318:	20000758 	.word	0x20000758
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007326:	2300      	movs	r3, #0
 8007328:	607b      	str	r3, [r7, #4]
 800732a:	e00c      	b.n	8007346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4a12      	ldr	r2, [pc, #72]	; (8007380 <prvInitialiseTaskLists+0x60>)
 8007338:	4413      	add	r3, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fd1a 	bl	8005d74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3301      	adds	r3, #1
 8007344:	607b      	str	r3, [r7, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b37      	cmp	r3, #55	; 0x37
 800734a:	d9ef      	bls.n	800732c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800734c:	480d      	ldr	r0, [pc, #52]	; (8007384 <prvInitialiseTaskLists+0x64>)
 800734e:	f7fe fd11 	bl	8005d74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007352:	480d      	ldr	r0, [pc, #52]	; (8007388 <prvInitialiseTaskLists+0x68>)
 8007354:	f7fe fd0e 	bl	8005d74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007358:	480c      	ldr	r0, [pc, #48]	; (800738c <prvInitialiseTaskLists+0x6c>)
 800735a:	f7fe fd0b 	bl	8005d74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800735e:	480c      	ldr	r0, [pc, #48]	; (8007390 <prvInitialiseTaskLists+0x70>)
 8007360:	f7fe fd08 	bl	8005d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007364:	480b      	ldr	r0, [pc, #44]	; (8007394 <prvInitialiseTaskLists+0x74>)
 8007366:	f7fe fd05 	bl	8005d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800736a:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <prvInitialiseTaskLists+0x78>)
 800736c:	4a05      	ldr	r2, [pc, #20]	; (8007384 <prvInitialiseTaskLists+0x64>)
 800736e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007370:	4b0a      	ldr	r3, [pc, #40]	; (800739c <prvInitialiseTaskLists+0x7c>)
 8007372:	4a05      	ldr	r2, [pc, #20]	; (8007388 <prvInitialiseTaskLists+0x68>)
 8007374:	601a      	str	r2, [r3, #0]
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000758 	.word	0x20000758
 8007384:	20000bb8 	.word	0x20000bb8
 8007388:	20000bcc 	.word	0x20000bcc
 800738c:	20000be8 	.word	0x20000be8
 8007390:	20000bfc 	.word	0x20000bfc
 8007394:	20000c14 	.word	0x20000c14
 8007398:	20000be0 	.word	0x20000be0
 800739c:	20000be4 	.word	0x20000be4

080073a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073a6:	e019      	b.n	80073dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073a8:	f000 fdc0 	bl	8007f2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ac:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <prvCheckTasksWaitingTermination+0x4c>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fd65 	bl	8005e88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073be:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <prvCheckTasksWaitingTermination+0x50>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <prvCheckTasksWaitingTermination+0x50>)
 80073c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073c8:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <prvCheckTasksWaitingTermination+0x54>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <prvCheckTasksWaitingTermination+0x54>)
 80073d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073d2:	f000 fdd9 	bl	8007f88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f80e 	bl	80073f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <prvCheckTasksWaitingTermination+0x54>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e1      	bne.n	80073a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000bfc 	.word	0x20000bfc
 80073f0:	20000c28 	.word	0x20000c28
 80073f4:	20000c10 	.word	0x20000c10

080073f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007406:	2b00      	cmp	r3, #0
 8007408:	d108      	bne.n	800741c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	4618      	mov	r0, r3
 8007410:	f000 ff68 	bl	80082e4 <vPortFree>
				vPortFree( pxTCB );
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 ff65 	bl	80082e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800741a:	e017      	b.n	800744c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007422:	2b01      	cmp	r3, #1
 8007424:	d103      	bne.n	800742e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 ff5c 	bl	80082e4 <vPortFree>
	}
 800742c:	e00e      	b.n	800744c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007434:	2b02      	cmp	r3, #2
 8007436:	d009      	beq.n	800744c <prvDeleteTCB+0x54>
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	e7fe      	b.n	800744a <prvDeleteTCB+0x52>
	}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800745a:	4b0c      	ldr	r3, [pc, #48]	; (800748c <prvResetNextTaskUnblockTime+0x38>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <prvResetNextTaskUnblockTime+0x3c>)
 8007466:	f04f 32ff 	mov.w	r2, #4294967295
 800746a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800746c:	e008      	b.n	8007480 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <prvResetNextTaskUnblockTime+0x38>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	4a04      	ldr	r2, [pc, #16]	; (8007490 <prvResetNextTaskUnblockTime+0x3c>)
 800747e:	6013      	str	r3, [r2, #0]
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	20000be0 	.word	0x20000be0
 8007490:	20000c48 	.word	0x20000c48

08007494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800749a:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <xTaskGetSchedulerState+0x34>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074a2:	2301      	movs	r3, #1
 80074a4:	607b      	str	r3, [r7, #4]
 80074a6:	e008      	b.n	80074ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074a8:	4b08      	ldr	r3, [pc, #32]	; (80074cc <xTaskGetSchedulerState+0x38>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074b0:	2302      	movs	r3, #2
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	e001      	b.n	80074ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074b6:	2300      	movs	r3, #0
 80074b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ba:	687b      	ldr	r3, [r7, #4]
	}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000c34 	.word	0x20000c34
 80074cc:	20000c50 	.word	0x20000c50

080074d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d054      	beq.n	8007590 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074e6:	4b2d      	ldr	r3, [pc, #180]	; (800759c <xTaskPriorityDisinherit+0xcc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d009      	beq.n	8007504 <xTaskPriorityDisinherit+0x34>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	e7fe      	b.n	8007502 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <xTaskPriorityDisinherit+0x50>
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	e7fe      	b.n	800751e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	1e5a      	subs	r2, r3, #1
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007532:	429a      	cmp	r2, r3
 8007534:	d02c      	beq.n	8007590 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753a:	2b00      	cmp	r3, #0
 800753c:	d128      	bne.n	8007590 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3304      	adds	r3, #4
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fca0 	bl	8005e88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <xTaskPriorityDisinherit+0xd0>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d903      	bls.n	8007570 <xTaskPriorityDisinherit+0xa0>
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	4a0c      	ldr	r2, [pc, #48]	; (80075a0 <xTaskPriorityDisinherit+0xd0>)
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <xTaskPriorityDisinherit+0xd4>)
 800757e:	441a      	add	r2, r3
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f7fe fc21 	bl	8005dce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800758c:	2301      	movs	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007590:	697b      	ldr	r3, [r7, #20]
	}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20000754 	.word	0x20000754
 80075a0:	20000c30 	.word	0x20000c30
 80075a4:	20000758 	.word	0x20000758

080075a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075b2:	4b21      	ldr	r3, [pc, #132]	; (8007638 <prvAddCurrentTaskToDelayedList+0x90>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b8:	4b20      	ldr	r3, [pc, #128]	; (800763c <prvAddCurrentTaskToDelayedList+0x94>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3304      	adds	r3, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fc62 	bl	8005e88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ca:	d10a      	bne.n	80075e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d2:	4b1a      	ldr	r3, [pc, #104]	; (800763c <prvAddCurrentTaskToDelayedList+0x94>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3304      	adds	r3, #4
 80075d8:	4619      	mov	r1, r3
 80075da:	4819      	ldr	r0, [pc, #100]	; (8007640 <prvAddCurrentTaskToDelayedList+0x98>)
 80075dc:	f7fe fbf7 	bl	8005dce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075e0:	e026      	b.n	8007630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075ea:	4b14      	ldr	r3, [pc, #80]	; (800763c <prvAddCurrentTaskToDelayedList+0x94>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d209      	bcs.n	800760e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <prvAddCurrentTaskToDelayedList+0x9c>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b0f      	ldr	r3, [pc, #60]	; (800763c <prvAddCurrentTaskToDelayedList+0x94>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f7fe fc05 	bl	8005e16 <vListInsert>
}
 800760c:	e010      	b.n	8007630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800760e:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b0a      	ldr	r3, [pc, #40]	; (800763c <prvAddCurrentTaskToDelayedList+0x94>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3304      	adds	r3, #4
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f7fe fbfb 	bl	8005e16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	429a      	cmp	r2, r3
 8007628:	d202      	bcs.n	8007630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800762a:	4a08      	ldr	r2, [pc, #32]	; (800764c <prvAddCurrentTaskToDelayedList+0xa4>)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6013      	str	r3, [r2, #0]
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20000c2c 	.word	0x20000c2c
 800763c:	20000754 	.word	0x20000754
 8007640:	20000c14 	.word	0x20000c14
 8007644:	20000be4 	.word	0x20000be4
 8007648:	20000be0 	.word	0x20000be0
 800764c:	20000c48 	.word	0x20000c48

08007650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	; 0x28
 8007654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800765a:	f000 faff 	bl	8007c5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800765e:	4b1c      	ldr	r3, [pc, #112]	; (80076d0 <xTimerCreateTimerTask+0x80>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d021      	beq.n	80076aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800766e:	1d3a      	adds	r2, r7, #4
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fb61 	bl	8005d40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	9202      	str	r2, [sp, #8]
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	2302      	movs	r3, #2
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	2300      	movs	r3, #0
 800768e:	460a      	mov	r2, r1
 8007690:	4910      	ldr	r1, [pc, #64]	; (80076d4 <xTimerCreateTimerTask+0x84>)
 8007692:	4811      	ldr	r0, [pc, #68]	; (80076d8 <xTimerCreateTimerTask+0x88>)
 8007694:	f7ff f8f6 	bl	8006884 <xTaskCreateStatic>
 8007698:	4602      	mov	r2, r0
 800769a:	4b10      	ldr	r3, [pc, #64]	; (80076dc <xTimerCreateTimerTask+0x8c>)
 800769c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <xTimerCreateTimerTask+0x8c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076a6:	2301      	movs	r3, #1
 80076a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d109      	bne.n	80076c4 <xTimerCreateTimerTask+0x74>
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e7fe      	b.n	80076c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80076c4:	697b      	ldr	r3, [r7, #20]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000c84 	.word	0x20000c84
 80076d4:	08008e14 	.word	0x08008e14
 80076d8:	08007811 	.word	0x08007811
 80076dc:	20000c88 	.word	0x20000c88

080076e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d109      	bne.n	800770c <xTimerGenericCommand+0x2c>
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	623b      	str	r3, [r7, #32]
 800770a:	e7fe      	b.n	800770a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800770c:	4b19      	ldr	r3, [pc, #100]	; (8007774 <xTimerGenericCommand+0x94>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d02a      	beq.n	800776a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b05      	cmp	r3, #5
 8007724:	dc18      	bgt.n	8007758 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007726:	f7ff feb5 	bl	8007494 <xTaskGetSchedulerState>
 800772a:	4603      	mov	r3, r0
 800772c:	2b02      	cmp	r3, #2
 800772e:	d109      	bne.n	8007744 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <xTimerGenericCommand+0x94>)
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	f107 0110 	add.w	r1, r7, #16
 8007738:	2300      	movs	r3, #0
 800773a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773c:	f7fe fccc 	bl	80060d8 <xQueueGenericSend>
 8007740:	6278      	str	r0, [r7, #36]	; 0x24
 8007742:	e012      	b.n	800776a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007744:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <xTimerGenericCommand+0x94>)
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	f107 0110 	add.w	r1, r7, #16
 800774c:	2300      	movs	r3, #0
 800774e:	2200      	movs	r2, #0
 8007750:	f7fe fcc2 	bl	80060d8 <xQueueGenericSend>
 8007754:	6278      	str	r0, [r7, #36]	; 0x24
 8007756:	e008      	b.n	800776a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <xTimerGenericCommand+0x94>)
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	f107 0110 	add.w	r1, r7, #16
 8007760:	2300      	movs	r3, #0
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	f7fe fdb2 	bl	80062cc <xQueueGenericSendFromISR>
 8007768:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800776c:	4618      	mov	r0, r3
 800776e:	3728      	adds	r7, #40	; 0x28
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000c84 	.word	0x20000c84

08007778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af02      	add	r7, sp, #8
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007782:	4b22      	ldr	r3, [pc, #136]	; (800780c <prvProcessExpiredTimer+0x94>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	3304      	adds	r3, #4
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fb79 	bl	8005e88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d021      	beq.n	80077e8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	699a      	ldr	r2, [r3, #24]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	18d1      	adds	r1, r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	6978      	ldr	r0, [r7, #20]
 80077b2:	f000 f8d1 	bl	8007958 <prvInsertTimerInActiveList>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01e      	beq.n	80077fa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077bc:	2300      	movs	r3, #0
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	2300      	movs	r3, #0
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	2100      	movs	r1, #0
 80077c6:	6978      	ldr	r0, [r7, #20]
 80077c8:	f7ff ff8a 	bl	80076e0 <xTimerGenericCommand>
 80077cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d112      	bne.n	80077fa <prvProcessExpiredTimer+0x82>
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	e7fe      	b.n	80077e6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	6978      	ldr	r0, [r7, #20]
 8007800:	4798      	blx	r3
}
 8007802:	bf00      	nop
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000c7c 	.word	0x20000c7c

08007810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007818:	f107 0308 	add.w	r3, r7, #8
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f857 	bl	80078d0 <prvGetNextExpireTime>
 8007822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f803 	bl	8007834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800782e:	f000 f8d5 	bl	80079dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007832:	e7f1      	b.n	8007818 <prvTimerTask+0x8>

08007834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800783e:	f7ff fa57 	bl	8006cf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f866 	bl	8007918 <prvSampleTimeNow>
 800784c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d130      	bne.n	80078b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <prvProcessTimerOrBlockTask+0x3c>
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	429a      	cmp	r2, r3
 8007860:	d806      	bhi.n	8007870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007862:	f7ff fa53 	bl	8006d0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff85 	bl	8007778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800786e:	e024      	b.n	80078ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007876:	4b13      	ldr	r3, [pc, #76]	; (80078c4 <prvProcessTimerOrBlockTask+0x90>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <prvProcessTimerOrBlockTask+0x50>
 8007880:	2301      	movs	r3, #1
 8007882:	e000      	b.n	8007886 <prvProcessTimerOrBlockTask+0x52>
 8007884:	2300      	movs	r3, #0
 8007886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007888:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <prvProcessTimerOrBlockTask+0x94>)
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4619      	mov	r1, r3
 8007896:	f7fe ffc1 	bl	800681c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800789a:	f7ff fa37 	bl	8006d0c <xTaskResumeAll>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078a4:	4b09      	ldr	r3, [pc, #36]	; (80078cc <prvProcessTimerOrBlockTask+0x98>)
 80078a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
}
 80078b4:	e001      	b.n	80078ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078b6:	f7ff fa29 	bl	8006d0c <xTaskResumeAll>
}
 80078ba:	bf00      	nop
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000c80 	.word	0x20000c80
 80078c8:	20000c84 	.word	0x20000c84
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078d8:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <prvGetNextExpireTime+0x44>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <prvGetNextExpireTime+0x16>
 80078e2:	2201      	movs	r2, #1
 80078e4:	e000      	b.n	80078e8 <prvGetNextExpireTime+0x18>
 80078e6:	2200      	movs	r2, #0
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f4:	4b07      	ldr	r3, [pc, #28]	; (8007914 <prvGetNextExpireTime+0x44>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	e001      	b.n	8007904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007904:	68fb      	ldr	r3, [r7, #12]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000c7c 	.word	0x20000c7c

08007918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007920:	f7ff fa90 	bl	8006e44 <xTaskGetTickCount>
 8007924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <prvSampleTimeNow+0x3c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	429a      	cmp	r2, r3
 800792e:	d205      	bcs.n	800793c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007930:	f000 f930 	bl	8007b94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e002      	b.n	8007942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007942:	4a04      	ldr	r2, [pc, #16]	; (8007954 <prvSampleTimeNow+0x3c>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007948:	68fb      	ldr	r3, [r7, #12]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000c8c 	.word	0x20000c8c

08007958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d812      	bhi.n	80079a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	1ad2      	subs	r2, r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e01b      	b.n	80079ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007992:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <prvInsertTimerInActiveList+0x7c>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fe fa3a 	bl	8005e16 <vListInsert>
 80079a2:	e012      	b.n	80079ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d206      	bcs.n	80079ba <prvInsertTimerInActiveList+0x62>
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d302      	bcc.n	80079ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e007      	b.n	80079ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <prvInsertTimerInActiveList+0x80>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7fe fa26 	bl	8005e16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079ca:	697b      	ldr	r3, [r7, #20]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20000c80 	.word	0x20000c80
 80079d8:	20000c7c 	.word	0x20000c7c

080079dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08e      	sub	sp, #56	; 0x38
 80079e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079e2:	e0c6      	b.n	8007b72 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da17      	bge.n	8007a1a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079ea:	1d3b      	adds	r3, r7, #4
 80079ec:	3304      	adds	r3, #4
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <prvProcessReceivedCommands+0x2e>
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	e7fe      	b.n	8007a08 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a10:	6850      	ldr	r0, [r2, #4]
 8007a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a14:	6892      	ldr	r2, [r2, #8]
 8007a16:	4611      	mov	r1, r2
 8007a18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f2c0 80a7 	blt.w	8007b70 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d004      	beq.n	8007a38 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	3304      	adds	r3, #4
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fa28 	bl	8005e88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a38:	463b      	mov	r3, r7
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff ff6c 	bl	8007918 <prvSampleTimeNow>
 8007a40:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	f200 8094 	bhi.w	8007b72 <prvProcessReceivedCommands+0x196>
 8007a4a:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <prvProcessReceivedCommands+0x74>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a79 	.word	0x08007a79
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a79 	.word	0x08007a79
 8007a5c:	08007aeb 	.word	0x08007aeb
 8007a60:	08007aff 	.word	0x08007aff
 8007a64:	08007b47 	.word	0x08007b47
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a79 	.word	0x08007a79
 8007a70:	08007aeb 	.word	0x08007aeb
 8007a74:	08007aff 	.word	0x08007aff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	18d1      	adds	r1, r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a98:	f7ff ff5e 	bl	8007958 <prvInsertTimerInActiveList>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d067      	beq.n	8007b72 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d05c      	beq.n	8007b72 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	441a      	add	r2, r3
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aca:	f7ff fe09 	bl	80076e0 <xTimerGenericCommand>
 8007ace:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d14d      	bne.n	8007b72 <prvProcessReceivedCommands+0x196>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	61bb      	str	r3, [r7, #24]
 8007ae8:	e7fe      	b.n	8007ae8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007afc:	e039      	b.n	8007b72 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <prvProcessReceivedCommands+0x156>
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e7fe      	b.n	8007b30 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	18d1      	adds	r1, r2, r3
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b40:	f7ff ff0a 	bl	8007958 <prvInsertTimerInActiveList>
					break;
 8007b44:	e015      	b.n	8007b72 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b56:	f000 fbc5 	bl	80082e4 <vPortFree>
 8007b5a:	e00a      	b.n	8007b72 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b62:	f023 0301 	bic.w	r3, r3, #1
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b6e:	e000      	b.n	8007b72 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b72:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <prvProcessReceivedCommands+0x1b4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	1d39      	adds	r1, r7, #4
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fc3a 	bl	80063f4 <xQueueReceive>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f47f af2e 	bne.w	80079e4 <prvProcessReceivedCommands+0x8>
	}
}
 8007b88:	bf00      	nop
 8007b8a:	3730      	adds	r7, #48	; 0x30
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000c84 	.word	0x20000c84

08007b94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b9a:	e047      	b.n	8007c2c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b9c:	4b2d      	ldr	r3, [pc, #180]	; (8007c54 <prvSwitchTimerLists+0xc0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba6:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <prvSwitchTimerLists+0xc0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fe f967 	bl	8005e88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d02d      	beq.n	8007c2c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d90e      	bls.n	8007c00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bee:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <prvSwitchTimerLists+0xc0>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7fe f90c 	bl	8005e16 <vListInsert>
 8007bfe:	e015      	b.n	8007c2c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c00:	2300      	movs	r3, #0
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	2300      	movs	r3, #0
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	2100      	movs	r1, #0
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff fd68 	bl	80076e0 <xTimerGenericCommand>
 8007c10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <prvSwitchTimerLists+0x98>
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	e7fe      	b.n	8007c2a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <prvSwitchTimerLists+0xc0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1b2      	bne.n	8007b9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <prvSwitchTimerLists+0xc0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <prvSwitchTimerLists+0xc4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a04      	ldr	r2, [pc, #16]	; (8007c54 <prvSwitchTimerLists+0xc0>)
 8007c42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c44:	4a04      	ldr	r2, [pc, #16]	; (8007c58 <prvSwitchTimerLists+0xc4>)
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	6013      	str	r3, [r2, #0]
}
 8007c4a:	bf00      	nop
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000c7c 	.word	0x20000c7c
 8007c58:	20000c80 	.word	0x20000c80

08007c5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c62:	f000 f963 	bl	8007f2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c66:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <prvCheckForValidListAndQueue+0x60>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d120      	bne.n	8007cb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c6e:	4814      	ldr	r0, [pc, #80]	; (8007cc0 <prvCheckForValidListAndQueue+0x64>)
 8007c70:	f7fe f880 	bl	8005d74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c74:	4813      	ldr	r0, [pc, #76]	; (8007cc4 <prvCheckForValidListAndQueue+0x68>)
 8007c76:	f7fe f87d 	bl	8005d74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <prvCheckForValidListAndQueue+0x6c>)
 8007c7c:	4a10      	ldr	r2, [pc, #64]	; (8007cc0 <prvCheckForValidListAndQueue+0x64>)
 8007c7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <prvCheckForValidListAndQueue+0x70>)
 8007c82:	4a10      	ldr	r2, [pc, #64]	; (8007cc4 <prvCheckForValidListAndQueue+0x68>)
 8007c84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c86:	2300      	movs	r3, #0
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <prvCheckForValidListAndQueue+0x74>)
 8007c8c:	4a11      	ldr	r2, [pc, #68]	; (8007cd4 <prvCheckForValidListAndQueue+0x78>)
 8007c8e:	2110      	movs	r1, #16
 8007c90:	200a      	movs	r0, #10
 8007c92:	f7fe f98b 	bl	8005fac <xQueueGenericCreateStatic>
 8007c96:	4602      	mov	r2, r0
 8007c98:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <prvCheckForValidListAndQueue+0x60>)
 8007c9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c9c:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <prvCheckForValidListAndQueue+0x60>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <prvCheckForValidListAndQueue+0x60>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	490b      	ldr	r1, [pc, #44]	; (8007cd8 <prvCheckForValidListAndQueue+0x7c>)
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fd8e 	bl	80067cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cb0:	f000 f96a 	bl	8007f88 <vPortExitCritical>
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000c84 	.word	0x20000c84
 8007cc0:	20000c54 	.word	0x20000c54
 8007cc4:	20000c68 	.word	0x20000c68
 8007cc8:	20000c7c 	.word	0x20000c7c
 8007ccc:	20000c80 	.word	0x20000c80
 8007cd0:	20000d30 	.word	0x20000d30
 8007cd4:	20000c90 	.word	0x20000c90
 8007cd8:	08008e1c 	.word	0x08008e1c

08007cdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3b04      	subs	r3, #4
 8007cec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3b04      	subs	r3, #4
 8007d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d0c:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <pxPortInitialiseStack+0x64>)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b14      	subs	r3, #20
 8007d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3b04      	subs	r3, #4
 8007d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f06f 0202 	mvn.w	r2, #2
 8007d2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3b20      	subs	r3, #32
 8007d30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d32:	68fb      	ldr	r3, [r7, #12]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	08007d45 	.word	0x08007d45

08007d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d4e:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <prvTaskExitError+0x50>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d009      	beq.n	8007d6c <prvTaskExitError+0x28>
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e7fe      	b.n	8007d6a <prvTaskExitError+0x26>
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d7e:	bf00      	nop
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0fc      	beq.n	8007d80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000010 	.word	0x20000010
	...

08007da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <pxCurrentTCBConst2>)
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	f380 8809 	msr	PSP, r0
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8811 	msr	BASEPRI, r0
 8007dba:	4770      	bx	lr
 8007dbc:	f3af 8000 	nop.w

08007dc0 <pxCurrentTCBConst2>:
 8007dc0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007dc8:	4808      	ldr	r0, [pc, #32]	; (8007dec <prvPortStartFirstTask+0x24>)
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	6800      	ldr	r0, [r0, #0]
 8007dce:	f380 8808 	msr	MSP, r0
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8814 	msr	CONTROL, r0
 8007dda:	b662      	cpsie	i
 8007ddc:	b661      	cpsie	f
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	df00      	svc	0
 8007de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dea:	bf00      	nop
 8007dec:	e000ed08 	.word	0xe000ed08

08007df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007df6:	4b44      	ldr	r3, [pc, #272]	; (8007f08 <xPortStartScheduler+0x118>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a44      	ldr	r2, [pc, #272]	; (8007f0c <xPortStartScheduler+0x11c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d109      	bne.n	8007e14 <xPortStartScheduler+0x24>
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	e7fe      	b.n	8007e12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e14:	4b3c      	ldr	r3, [pc, #240]	; (8007f08 <xPortStartScheduler+0x118>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a3d      	ldr	r2, [pc, #244]	; (8007f10 <xPortStartScheduler+0x120>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d109      	bne.n	8007e32 <xPortStartScheduler+0x42>
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e7fe      	b.n	8007e30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e32:	4b38      	ldr	r3, [pc, #224]	; (8007f14 <xPortStartScheduler+0x124>)
 8007e34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	22ff      	movs	r2, #255	; 0xff
 8007e42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	4b30      	ldr	r3, [pc, #192]	; (8007f18 <xPortStartScheduler+0x128>)
 8007e58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e5a:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e5c:	2207      	movs	r2, #7
 8007e5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e60:	e009      	b.n	8007e76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007e62:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d0ef      	beq.n	8007e62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e82:	4b26      	ldr	r3, [pc, #152]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f1c3 0307 	rsb	r3, r3, #7
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d009      	beq.n	8007ea2 <xPortStartScheduler+0xb2>
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60bb      	str	r3, [r7, #8]
 8007ea0:	e7fe      	b.n	8007ea0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ea2:	4b1e      	ldr	r3, [pc, #120]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	4a1c      	ldr	r2, [pc, #112]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007eaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eac:	4b1b      	ldr	r3, [pc, #108]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eb4:	4a19      	ldr	r2, [pc, #100]	; (8007f1c <xPortStartScheduler+0x12c>)
 8007eb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ec0:	4b17      	ldr	r3, [pc, #92]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ec6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007eca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ecc:	4b14      	ldr	r3, [pc, #80]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <xPortStartScheduler+0x130>)
 8007ed2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ed6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ed8:	f000 f8d6 	bl	8008088 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007edc:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <xPortStartScheduler+0x134>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ee2:	f000 f8f5 	bl	80080d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ee6:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <xPortStartScheduler+0x138>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a0f      	ldr	r2, [pc, #60]	; (8007f28 <xPortStartScheduler+0x138>)
 8007eec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ef0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ef2:	f7ff ff69 	bl	8007dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ef6:	f7ff f86d 	bl	8006fd4 <vTaskSwitchContext>
	prvTaskExitError();
 8007efa:	f7ff ff23 	bl	8007d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed00 	.word	0xe000ed00
 8007f0c:	410fc271 	.word	0x410fc271
 8007f10:	410fc270 	.word	0x410fc270
 8007f14:	e000e400 	.word	0xe000e400
 8007f18:	20000d80 	.word	0x20000d80
 8007f1c:	20000d84 	.word	0x20000d84
 8007f20:	e000ed20 	.word	0xe000ed20
 8007f24:	20000010 	.word	0x20000010
 8007f28:	e000ef34 	.word	0xe000ef34

08007f2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f44:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <vPortEnterCritical+0x54>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a0d      	ldr	r2, [pc, #52]	; (8007f80 <vPortEnterCritical+0x54>)
 8007f4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	; (8007f80 <vPortEnterCritical+0x54>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d10e      	bne.n	8007f74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f56:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <vPortEnterCritical+0x58>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <vPortEnterCritical+0x48>
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	e7fe      	b.n	8007f72 <vPortEnterCritical+0x46>
	}
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20000010 	.word	0x20000010
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f8e:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <vPortExitCritical+0x22>
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	607b      	str	r3, [r7, #4]
 8007fa8:	e7fe      	b.n	8007fa8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007fb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <vPortExitCritical+0x4c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <vPortExitCritical+0x3e>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000010 	.word	0x20000010
	...

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7fe ffe0 	bl	8006fd4 <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008060:	f7fe ff00 	bl	8006e64 <xTaskIncrementTick>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <SysTick_Handler+0x3c>)
 800806c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800808c:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <vPortSetupTimerInterrupt+0x34>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortSetupTimerInterrupt+0x38>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <vPortSetupTimerInterrupt+0x3c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a0a      	ldr	r2, [pc, #40]	; (80080c8 <vPortSetupTimerInterrupt+0x40>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	099b      	lsrs	r3, r3, #6
 80080a4:	4a09      	ldr	r2, [pc, #36]	; (80080cc <vPortSetupTimerInterrupt+0x44>)
 80080a6:	3b01      	subs	r3, #1
 80080a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080aa:	4b04      	ldr	r3, [pc, #16]	; (80080bc <vPortSetupTimerInterrupt+0x34>)
 80080ac:	2207      	movs	r2, #7
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	e000e010 	.word	0xe000e010
 80080c0:	e000e018 	.word	0xe000e018
 80080c4:	20000004 	.word	0x20000004
 80080c8:	10624dd3 	.word	0x10624dd3
 80080cc:	e000e014 	.word	0xe000e014

080080d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e0 <vPortEnableVFP+0x10>
 80080d4:	6801      	ldr	r1, [r0, #0]
 80080d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080da:	6001      	str	r1, [r0, #0]
 80080dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080de:	bf00      	nop
 80080e0:	e000ed88 	.word	0xe000ed88

080080e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ea:	f3ef 8305 	mrs	r3, IPSR
 80080ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b0f      	cmp	r3, #15
 80080f4:	d913      	bls.n	800811e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080f6:	4a16      	ldr	r2, [pc, #88]	; (8008150 <vPortValidateInterruptPriority+0x6c>)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008100:	4b14      	ldr	r3, [pc, #80]	; (8008154 <vPortValidateInterruptPriority+0x70>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	7afa      	ldrb	r2, [r7, #11]
 8008106:	429a      	cmp	r2, r3
 8008108:	d209      	bcs.n	800811e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	607b      	str	r3, [r7, #4]
 800811c:	e7fe      	b.n	800811c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800811e:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <vPortValidateInterruptPriority+0x74>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008126:	4b0d      	ldr	r3, [pc, #52]	; (800815c <vPortValidateInterruptPriority+0x78>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d909      	bls.n	8008142 <vPortValidateInterruptPriority+0x5e>
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	e7fe      	b.n	8008140 <vPortValidateInterruptPriority+0x5c>
	}
 8008142:	bf00      	nop
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	e000e3f0 	.word	0xe000e3f0
 8008154:	20000d80 	.word	0x20000d80
 8008158:	e000ed0c 	.word	0xe000ed0c
 800815c:	20000d84 	.word	0x20000d84

08008160 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800816c:	f7fe fdc0 	bl	8006cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008170:	4b57      	ldr	r3, [pc, #348]	; (80082d0 <pvPortMalloc+0x170>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008178:	f000 f90c 	bl	8008394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800817c:	4b55      	ldr	r3, [pc, #340]	; (80082d4 <pvPortMalloc+0x174>)
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4013      	ands	r3, r2
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 808c 	bne.w	80082a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01c      	beq.n	80081ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008190:	2208      	movs	r2, #8
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d013      	beq.n	80081ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f023 0307 	bic.w	r3, r3, #7
 80081a8:	3308      	adds	r3, #8
 80081aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <pvPortMalloc+0x6a>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e7fe      	b.n	80081c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d068      	beq.n	80082a2 <pvPortMalloc+0x142>
 80081d0:	4b41      	ldr	r3, [pc, #260]	; (80082d8 <pvPortMalloc+0x178>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d863      	bhi.n	80082a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081da:	4b40      	ldr	r3, [pc, #256]	; (80082dc <pvPortMalloc+0x17c>)
 80081dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081de:	4b3f      	ldr	r3, [pc, #252]	; (80082dc <pvPortMalloc+0x17c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081e4:	e004      	b.n	80081f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d903      	bls.n	8008202 <pvPortMalloc+0xa2>
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f1      	bne.n	80081e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008202:	4b33      	ldr	r3, [pc, #204]	; (80082d0 <pvPortMalloc+0x170>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008208:	429a      	cmp	r2, r3
 800820a:	d04a      	beq.n	80082a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	4413      	add	r3, r2
 8008214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	1ad2      	subs	r2, r2, r3
 8008226:	2308      	movs	r3, #8
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	429a      	cmp	r2, r3
 800822c:	d91e      	bls.n	800826c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800822e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <pvPortMalloc+0xf4>
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	e7fe      	b.n	8008252 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	1ad2      	subs	r2, r2, r3
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008266:	69b8      	ldr	r0, [r7, #24]
 8008268:	f000 f8f6 	bl	8008458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800826c:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <pvPortMalloc+0x178>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <pvPortMalloc+0x178>)
 8008278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800827a:	4b17      	ldr	r3, [pc, #92]	; (80082d8 <pvPortMalloc+0x178>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <pvPortMalloc+0x180>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d203      	bcs.n	800828e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008286:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <pvPortMalloc+0x178>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <pvPortMalloc+0x180>)
 800828c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <pvPortMalloc+0x174>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	431a      	orrs	r2, r3
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082a2:	f7fe fd33 	bl	8006d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <pvPortMalloc+0x164>
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	e7fe      	b.n	80082c2 <pvPortMalloc+0x162>
	return pvReturn;
 80082c4:	69fb      	ldr	r3, [r7, #28]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3728      	adds	r7, #40	; 0x28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20001948 	.word	0x20001948
 80082d4:	20001954 	.word	0x20001954
 80082d8:	2000194c 	.word	0x2000194c
 80082dc:	20001940 	.word	0x20001940
 80082e0:	20001950 	.word	0x20001950

080082e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d046      	beq.n	8008384 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082f6:	2308      	movs	r3, #8
 80082f8:	425b      	negs	r3, r3
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4413      	add	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	4b20      	ldr	r3, [pc, #128]	; (800838c <vPortFree+0xa8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4013      	ands	r3, r2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <vPortFree+0x42>
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e7fe      	b.n	8008324 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <vPortFree+0x5e>
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	e7fe      	b.n	8008340 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	4b11      	ldr	r3, [pc, #68]	; (800838c <vPortFree+0xa8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d019      	beq.n	8008384 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d115      	bne.n	8008384 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	4b0b      	ldr	r3, [pc, #44]	; (800838c <vPortFree+0xa8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	43db      	mvns	r3, r3
 8008362:	401a      	ands	r2, r3
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008368:	f7fe fcc2 	bl	8006cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	4b07      	ldr	r3, [pc, #28]	; (8008390 <vPortFree+0xac>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4413      	add	r3, r2
 8008376:	4a06      	ldr	r2, [pc, #24]	; (8008390 <vPortFree+0xac>)
 8008378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800837a:	6938      	ldr	r0, [r7, #16]
 800837c:	f000 f86c 	bl	8008458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008380:	f7fe fcc4 	bl	8006d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008384:	bf00      	nop
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20001954 	.word	0x20001954
 8008390:	2000194c 	.word	0x2000194c

08008394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800839a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800839e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083a0:	4b27      	ldr	r3, [pc, #156]	; (8008440 <prvHeapInit+0xac>)
 80083a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00c      	beq.n	80083c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3307      	adds	r3, #7
 80083b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 0307 	bic.w	r3, r3, #7
 80083ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	4a1f      	ldr	r2, [pc, #124]	; (8008440 <prvHeapInit+0xac>)
 80083c4:	4413      	add	r3, r2
 80083c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083cc:	4a1d      	ldr	r2, [pc, #116]	; (8008444 <prvHeapInit+0xb0>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083d2:	4b1c      	ldr	r3, [pc, #112]	; (8008444 <prvHeapInit+0xb0>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4413      	add	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083e0:	2208      	movs	r2, #8
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0307 	bic.w	r3, r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a15      	ldr	r2, [pc, #84]	; (8008448 <prvHeapInit+0xb4>)
 80083f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <prvHeapInit+0xb4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2200      	movs	r2, #0
 80083fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <prvHeapInit+0xb4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <prvHeapInit+0xb4>)
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4a0a      	ldr	r2, [pc, #40]	; (800844c <prvHeapInit+0xb8>)
 8008422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4a09      	ldr	r2, [pc, #36]	; (8008450 <prvHeapInit+0xbc>)
 800842a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <prvHeapInit+0xc0>)
 800842e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008432:	601a      	str	r2, [r3, #0]
}
 8008434:	bf00      	nop
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	20000d88 	.word	0x20000d88
 8008444:	20001940 	.word	0x20001940
 8008448:	20001948 	.word	0x20001948
 800844c:	20001950 	.word	0x20001950
 8008450:	2000194c 	.word	0x2000194c
 8008454:	20001954 	.word	0x20001954

08008458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008460:	4b28      	ldr	r3, [pc, #160]	; (8008504 <prvInsertBlockIntoFreeList+0xac>)
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	e002      	b.n	800846c <prvInsertBlockIntoFreeList+0x14>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d8f7      	bhi.n	8008466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	4413      	add	r3, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	d108      	bne.n	800849a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	441a      	add	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	441a      	add	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d118      	bne.n	80084e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <prvInsertBlockIntoFreeList+0xb0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d00d      	beq.n	80084d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	441a      	add	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e008      	b.n	80084e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084d6:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <prvInsertBlockIntoFreeList+0xb0>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e003      	b.n	80084e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d002      	beq.n	80084f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	20001940 	.word	0x20001940
 8008508:	20001948 	.word	0x20001948

0800850c <__errno>:
 800850c:	4b01      	ldr	r3, [pc, #4]	; (8008514 <__errno+0x8>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000014 	.word	0x20000014

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4e0d      	ldr	r6, [pc, #52]	; (8008550 <__libc_init_array+0x38>)
 800851c:	4c0d      	ldr	r4, [pc, #52]	; (8008554 <__libc_init_array+0x3c>)
 800851e:	1ba4      	subs	r4, r4, r6
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	2500      	movs	r5, #0
 8008524:	42a5      	cmp	r5, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	4e0b      	ldr	r6, [pc, #44]	; (8008558 <__libc_init_array+0x40>)
 800852a:	4c0c      	ldr	r4, [pc, #48]	; (800855c <__libc_init_array+0x44>)
 800852c:	f000 fc28 	bl	8008d80 <_init>
 8008530:	1ba4      	subs	r4, r4, r6
 8008532:	10a4      	asrs	r4, r4, #2
 8008534:	2500      	movs	r5, #0
 8008536:	42a5      	cmp	r5, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008540:	4798      	blx	r3
 8008542:	3501      	adds	r5, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800854a:	4798      	blx	r3
 800854c:	3501      	adds	r5, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	08008f38 	.word	0x08008f38
 8008554:	08008f38 	.word	0x08008f38
 8008558:	08008f38 	.word	0x08008f38
 800855c:	08008f3c 	.word	0x08008f3c

08008560 <memcpy>:
 8008560:	b510      	push	{r4, lr}
 8008562:	1e43      	subs	r3, r0, #1
 8008564:	440a      	add	r2, r1
 8008566:	4291      	cmp	r1, r2
 8008568:	d100      	bne.n	800856c <memcpy+0xc>
 800856a:	bd10      	pop	{r4, pc}
 800856c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008574:	e7f7      	b.n	8008566 <memcpy+0x6>

08008576 <memset>:
 8008576:	4402      	add	r2, r0
 8008578:	4603      	mov	r3, r0
 800857a:	4293      	cmp	r3, r2
 800857c:	d100      	bne.n	8008580 <memset+0xa>
 800857e:	4770      	bx	lr
 8008580:	f803 1b01 	strb.w	r1, [r3], #1
 8008584:	e7f9      	b.n	800857a <memset+0x4>
	...

08008588 <siprintf>:
 8008588:	b40e      	push	{r1, r2, r3}
 800858a:	b500      	push	{lr}
 800858c:	b09c      	sub	sp, #112	; 0x70
 800858e:	ab1d      	add	r3, sp, #116	; 0x74
 8008590:	9002      	str	r0, [sp, #8]
 8008592:	9006      	str	r0, [sp, #24]
 8008594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008598:	4809      	ldr	r0, [pc, #36]	; (80085c0 <siprintf+0x38>)
 800859a:	9107      	str	r1, [sp, #28]
 800859c:	9104      	str	r1, [sp, #16]
 800859e:	4909      	ldr	r1, [pc, #36]	; (80085c4 <siprintf+0x3c>)
 80085a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a4:	9105      	str	r1, [sp, #20]
 80085a6:	6800      	ldr	r0, [r0, #0]
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	a902      	add	r1, sp, #8
 80085ac:	f000 f866 	bl	800867c <_svfiprintf_r>
 80085b0:	9b02      	ldr	r3, [sp, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	b01c      	add	sp, #112	; 0x70
 80085b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085bc:	b003      	add	sp, #12
 80085be:	4770      	bx	lr
 80085c0:	20000014 	.word	0x20000014
 80085c4:	ffff0208 	.word	0xffff0208

080085c8 <__ssputs_r>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	688e      	ldr	r6, [r1, #8]
 80085ce:	429e      	cmp	r6, r3
 80085d0:	4682      	mov	sl, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	4690      	mov	r8, r2
 80085d6:	4699      	mov	r9, r3
 80085d8:	d837      	bhi.n	800864a <__ssputs_r+0x82>
 80085da:	898a      	ldrh	r2, [r1, #12]
 80085dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085e0:	d031      	beq.n	8008646 <__ssputs_r+0x7e>
 80085e2:	6825      	ldr	r5, [r4, #0]
 80085e4:	6909      	ldr	r1, [r1, #16]
 80085e6:	1a6f      	subs	r7, r5, r1
 80085e8:	6965      	ldr	r5, [r4, #20]
 80085ea:	2302      	movs	r3, #2
 80085ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80085f4:	f109 0301 	add.w	r3, r9, #1
 80085f8:	443b      	add	r3, r7
 80085fa:	429d      	cmp	r5, r3
 80085fc:	bf38      	it	cc
 80085fe:	461d      	movcc	r5, r3
 8008600:	0553      	lsls	r3, r2, #21
 8008602:	d530      	bpl.n	8008666 <__ssputs_r+0x9e>
 8008604:	4629      	mov	r1, r5
 8008606:	f000 fb21 	bl	8008c4c <_malloc_r>
 800860a:	4606      	mov	r6, r0
 800860c:	b950      	cbnz	r0, 8008624 <__ssputs_r+0x5c>
 800860e:	230c      	movs	r3, #12
 8008610:	f8ca 3000 	str.w	r3, [sl]
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	463a      	mov	r2, r7
 8008626:	6921      	ldr	r1, [r4, #16]
 8008628:	f7ff ff9a 	bl	8008560 <memcpy>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	6126      	str	r6, [r4, #16]
 800863a:	6165      	str	r5, [r4, #20]
 800863c:	443e      	add	r6, r7
 800863e:	1bed      	subs	r5, r5, r7
 8008640:	6026      	str	r6, [r4, #0]
 8008642:	60a5      	str	r5, [r4, #8]
 8008644:	464e      	mov	r6, r9
 8008646:	454e      	cmp	r6, r9
 8008648:	d900      	bls.n	800864c <__ssputs_r+0x84>
 800864a:	464e      	mov	r6, r9
 800864c:	4632      	mov	r2, r6
 800864e:	4641      	mov	r1, r8
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	f000 fa93 	bl	8008b7c <memmove>
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	1b9b      	subs	r3, r3, r6
 800865a:	60a3      	str	r3, [r4, #8]
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	441e      	add	r6, r3
 8008660:	6026      	str	r6, [r4, #0]
 8008662:	2000      	movs	r0, #0
 8008664:	e7dc      	b.n	8008620 <__ssputs_r+0x58>
 8008666:	462a      	mov	r2, r5
 8008668:	f000 fb4a 	bl	8008d00 <_realloc_r>
 800866c:	4606      	mov	r6, r0
 800866e:	2800      	cmp	r0, #0
 8008670:	d1e2      	bne.n	8008638 <__ssputs_r+0x70>
 8008672:	6921      	ldr	r1, [r4, #16]
 8008674:	4650      	mov	r0, sl
 8008676:	f000 fa9b 	bl	8008bb0 <_free_r>
 800867a:	e7c8      	b.n	800860e <__ssputs_r+0x46>

0800867c <_svfiprintf_r>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	461d      	mov	r5, r3
 8008682:	898b      	ldrh	r3, [r1, #12]
 8008684:	061f      	lsls	r7, r3, #24
 8008686:	b09d      	sub	sp, #116	; 0x74
 8008688:	4680      	mov	r8, r0
 800868a:	460c      	mov	r4, r1
 800868c:	4616      	mov	r6, r2
 800868e:	d50f      	bpl.n	80086b0 <_svfiprintf_r+0x34>
 8008690:	690b      	ldr	r3, [r1, #16]
 8008692:	b96b      	cbnz	r3, 80086b0 <_svfiprintf_r+0x34>
 8008694:	2140      	movs	r1, #64	; 0x40
 8008696:	f000 fad9 	bl	8008c4c <_malloc_r>
 800869a:	6020      	str	r0, [r4, #0]
 800869c:	6120      	str	r0, [r4, #16]
 800869e:	b928      	cbnz	r0, 80086ac <_svfiprintf_r+0x30>
 80086a0:	230c      	movs	r3, #12
 80086a2:	f8c8 3000 	str.w	r3, [r8]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	e0c8      	b.n	800883e <_svfiprintf_r+0x1c2>
 80086ac:	2340      	movs	r3, #64	; 0x40
 80086ae:	6163      	str	r3, [r4, #20]
 80086b0:	2300      	movs	r3, #0
 80086b2:	9309      	str	r3, [sp, #36]	; 0x24
 80086b4:	2320      	movs	r3, #32
 80086b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ba:	2330      	movs	r3, #48	; 0x30
 80086bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086c0:	9503      	str	r5, [sp, #12]
 80086c2:	f04f 0b01 	mov.w	fp, #1
 80086c6:	4637      	mov	r7, r6
 80086c8:	463d      	mov	r5, r7
 80086ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086ce:	b10b      	cbz	r3, 80086d4 <_svfiprintf_r+0x58>
 80086d0:	2b25      	cmp	r3, #37	; 0x25
 80086d2:	d13e      	bne.n	8008752 <_svfiprintf_r+0xd6>
 80086d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80086d8:	d00b      	beq.n	80086f2 <_svfiprintf_r+0x76>
 80086da:	4653      	mov	r3, sl
 80086dc:	4632      	mov	r2, r6
 80086de:	4621      	mov	r1, r4
 80086e0:	4640      	mov	r0, r8
 80086e2:	f7ff ff71 	bl	80085c8 <__ssputs_r>
 80086e6:	3001      	adds	r0, #1
 80086e8:	f000 80a4 	beq.w	8008834 <_svfiprintf_r+0x1b8>
 80086ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ee:	4453      	add	r3, sl
 80086f0:	9309      	str	r3, [sp, #36]	; 0x24
 80086f2:	783b      	ldrb	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 809d 	beq.w	8008834 <_svfiprintf_r+0x1b8>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	9307      	str	r3, [sp, #28]
 8008708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800870c:	931a      	str	r3, [sp, #104]	; 0x68
 800870e:	462f      	mov	r7, r5
 8008710:	2205      	movs	r2, #5
 8008712:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008716:	4850      	ldr	r0, [pc, #320]	; (8008858 <_svfiprintf_r+0x1dc>)
 8008718:	f7f7 fd62 	bl	80001e0 <memchr>
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	b9d0      	cbnz	r0, 8008756 <_svfiprintf_r+0xda>
 8008720:	06d9      	lsls	r1, r3, #27
 8008722:	bf44      	itt	mi
 8008724:	2220      	movmi	r2, #32
 8008726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800872a:	071a      	lsls	r2, r3, #28
 800872c:	bf44      	itt	mi
 800872e:	222b      	movmi	r2, #43	; 0x2b
 8008730:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008734:	782a      	ldrb	r2, [r5, #0]
 8008736:	2a2a      	cmp	r2, #42	; 0x2a
 8008738:	d015      	beq.n	8008766 <_svfiprintf_r+0xea>
 800873a:	9a07      	ldr	r2, [sp, #28]
 800873c:	462f      	mov	r7, r5
 800873e:	2000      	movs	r0, #0
 8008740:	250a      	movs	r5, #10
 8008742:	4639      	mov	r1, r7
 8008744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008748:	3b30      	subs	r3, #48	; 0x30
 800874a:	2b09      	cmp	r3, #9
 800874c:	d94d      	bls.n	80087ea <_svfiprintf_r+0x16e>
 800874e:	b1b8      	cbz	r0, 8008780 <_svfiprintf_r+0x104>
 8008750:	e00f      	b.n	8008772 <_svfiprintf_r+0xf6>
 8008752:	462f      	mov	r7, r5
 8008754:	e7b8      	b.n	80086c8 <_svfiprintf_r+0x4c>
 8008756:	4a40      	ldr	r2, [pc, #256]	; (8008858 <_svfiprintf_r+0x1dc>)
 8008758:	1a80      	subs	r0, r0, r2
 800875a:	fa0b f000 	lsl.w	r0, fp, r0
 800875e:	4318      	orrs	r0, r3
 8008760:	9004      	str	r0, [sp, #16]
 8008762:	463d      	mov	r5, r7
 8008764:	e7d3      	b.n	800870e <_svfiprintf_r+0x92>
 8008766:	9a03      	ldr	r2, [sp, #12]
 8008768:	1d11      	adds	r1, r2, #4
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	9103      	str	r1, [sp, #12]
 800876e:	2a00      	cmp	r2, #0
 8008770:	db01      	blt.n	8008776 <_svfiprintf_r+0xfa>
 8008772:	9207      	str	r2, [sp, #28]
 8008774:	e004      	b.n	8008780 <_svfiprintf_r+0x104>
 8008776:	4252      	negs	r2, r2
 8008778:	f043 0302 	orr.w	r3, r3, #2
 800877c:	9207      	str	r2, [sp, #28]
 800877e:	9304      	str	r3, [sp, #16]
 8008780:	783b      	ldrb	r3, [r7, #0]
 8008782:	2b2e      	cmp	r3, #46	; 0x2e
 8008784:	d10c      	bne.n	80087a0 <_svfiprintf_r+0x124>
 8008786:	787b      	ldrb	r3, [r7, #1]
 8008788:	2b2a      	cmp	r3, #42	; 0x2a
 800878a:	d133      	bne.n	80087f4 <_svfiprintf_r+0x178>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	1d1a      	adds	r2, r3, #4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	9203      	str	r2, [sp, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfb8      	it	lt
 8008798:	f04f 33ff 	movlt.w	r3, #4294967295
 800879c:	3702      	adds	r7, #2
 800879e:	9305      	str	r3, [sp, #20]
 80087a0:	4d2e      	ldr	r5, [pc, #184]	; (800885c <_svfiprintf_r+0x1e0>)
 80087a2:	7839      	ldrb	r1, [r7, #0]
 80087a4:	2203      	movs	r2, #3
 80087a6:	4628      	mov	r0, r5
 80087a8:	f7f7 fd1a 	bl	80001e0 <memchr>
 80087ac:	b138      	cbz	r0, 80087be <_svfiprintf_r+0x142>
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	1b40      	subs	r0, r0, r5
 80087b2:	fa03 f000 	lsl.w	r0, r3, r0
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	4303      	orrs	r3, r0
 80087ba:	3701      	adds	r7, #1
 80087bc:	9304      	str	r3, [sp, #16]
 80087be:	7839      	ldrb	r1, [r7, #0]
 80087c0:	4827      	ldr	r0, [pc, #156]	; (8008860 <_svfiprintf_r+0x1e4>)
 80087c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c6:	2206      	movs	r2, #6
 80087c8:	1c7e      	adds	r6, r7, #1
 80087ca:	f7f7 fd09 	bl	80001e0 <memchr>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d038      	beq.n	8008844 <_svfiprintf_r+0x1c8>
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <_svfiprintf_r+0x1e8>)
 80087d4:	bb13      	cbnz	r3, 800881c <_svfiprintf_r+0x1a0>
 80087d6:	9b03      	ldr	r3, [sp, #12]
 80087d8:	3307      	adds	r3, #7
 80087da:	f023 0307 	bic.w	r3, r3, #7
 80087de:	3308      	adds	r3, #8
 80087e0:	9303      	str	r3, [sp, #12]
 80087e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e4:	444b      	add	r3, r9
 80087e6:	9309      	str	r3, [sp, #36]	; 0x24
 80087e8:	e76d      	b.n	80086c6 <_svfiprintf_r+0x4a>
 80087ea:	fb05 3202 	mla	r2, r5, r2, r3
 80087ee:	2001      	movs	r0, #1
 80087f0:	460f      	mov	r7, r1
 80087f2:	e7a6      	b.n	8008742 <_svfiprintf_r+0xc6>
 80087f4:	2300      	movs	r3, #0
 80087f6:	3701      	adds	r7, #1
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	4619      	mov	r1, r3
 80087fc:	250a      	movs	r5, #10
 80087fe:	4638      	mov	r0, r7
 8008800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008804:	3a30      	subs	r2, #48	; 0x30
 8008806:	2a09      	cmp	r2, #9
 8008808:	d903      	bls.n	8008812 <_svfiprintf_r+0x196>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0c8      	beq.n	80087a0 <_svfiprintf_r+0x124>
 800880e:	9105      	str	r1, [sp, #20]
 8008810:	e7c6      	b.n	80087a0 <_svfiprintf_r+0x124>
 8008812:	fb05 2101 	mla	r1, r5, r1, r2
 8008816:	2301      	movs	r3, #1
 8008818:	4607      	mov	r7, r0
 800881a:	e7f0      	b.n	80087fe <_svfiprintf_r+0x182>
 800881c:	ab03      	add	r3, sp, #12
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4622      	mov	r2, r4
 8008822:	4b11      	ldr	r3, [pc, #68]	; (8008868 <_svfiprintf_r+0x1ec>)
 8008824:	a904      	add	r1, sp, #16
 8008826:	4640      	mov	r0, r8
 8008828:	f3af 8000 	nop.w
 800882c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008830:	4681      	mov	r9, r0
 8008832:	d1d6      	bne.n	80087e2 <_svfiprintf_r+0x166>
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	065b      	lsls	r3, r3, #25
 8008838:	f53f af35 	bmi.w	80086a6 <_svfiprintf_r+0x2a>
 800883c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883e:	b01d      	add	sp, #116	; 0x74
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	ab03      	add	r3, sp, #12
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4622      	mov	r2, r4
 800884a:	4b07      	ldr	r3, [pc, #28]	; (8008868 <_svfiprintf_r+0x1ec>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	4640      	mov	r0, r8
 8008850:	f000 f882 	bl	8008958 <_printf_i>
 8008854:	e7ea      	b.n	800882c <_svfiprintf_r+0x1b0>
 8008856:	bf00      	nop
 8008858:	08008efc 	.word	0x08008efc
 800885c:	08008f02 	.word	0x08008f02
 8008860:	08008f06 	.word	0x08008f06
 8008864:	00000000 	.word	0x00000000
 8008868:	080085c9 	.word	0x080085c9

0800886c <_printf_common>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	4691      	mov	r9, r2
 8008872:	461f      	mov	r7, r3
 8008874:	688a      	ldr	r2, [r1, #8]
 8008876:	690b      	ldr	r3, [r1, #16]
 8008878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800887c:	4293      	cmp	r3, r2
 800887e:	bfb8      	it	lt
 8008880:	4613      	movlt	r3, r2
 8008882:	f8c9 3000 	str.w	r3, [r9]
 8008886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800888a:	4606      	mov	r6, r0
 800888c:	460c      	mov	r4, r1
 800888e:	b112      	cbz	r2, 8008896 <_printf_common+0x2a>
 8008890:	3301      	adds	r3, #1
 8008892:	f8c9 3000 	str.w	r3, [r9]
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	0699      	lsls	r1, r3, #26
 800889a:	bf42      	ittt	mi
 800889c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80088a0:	3302      	addmi	r3, #2
 80088a2:	f8c9 3000 	strmi.w	r3, [r9]
 80088a6:	6825      	ldr	r5, [r4, #0]
 80088a8:	f015 0506 	ands.w	r5, r5, #6
 80088ac:	d107      	bne.n	80088be <_printf_common+0x52>
 80088ae:	f104 0a19 	add.w	sl, r4, #25
 80088b2:	68e3      	ldr	r3, [r4, #12]
 80088b4:	f8d9 2000 	ldr.w	r2, [r9]
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	42ab      	cmp	r3, r5
 80088bc:	dc28      	bgt.n	8008910 <_printf_common+0xa4>
 80088be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	3300      	adds	r3, #0
 80088c6:	bf18      	it	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	0692      	lsls	r2, r2, #26
 80088cc:	d42d      	bmi.n	800892a <_printf_common+0xbe>
 80088ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088d2:	4639      	mov	r1, r7
 80088d4:	4630      	mov	r0, r6
 80088d6:	47c0      	blx	r8
 80088d8:	3001      	adds	r0, #1
 80088da:	d020      	beq.n	800891e <_printf_common+0xb2>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	68e5      	ldr	r5, [r4, #12]
 80088e0:	f8d9 2000 	ldr.w	r2, [r9]
 80088e4:	f003 0306 	and.w	r3, r3, #6
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	bf08      	it	eq
 80088ec:	1aad      	subeq	r5, r5, r2
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	bf0c      	ite	eq
 80088f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f8:	2500      	movne	r5, #0
 80088fa:	4293      	cmp	r3, r2
 80088fc:	bfc4      	itt	gt
 80088fe:	1a9b      	subgt	r3, r3, r2
 8008900:	18ed      	addgt	r5, r5, r3
 8008902:	f04f 0900 	mov.w	r9, #0
 8008906:	341a      	adds	r4, #26
 8008908:	454d      	cmp	r5, r9
 800890a:	d11a      	bne.n	8008942 <_printf_common+0xd6>
 800890c:	2000      	movs	r0, #0
 800890e:	e008      	b.n	8008922 <_printf_common+0xb6>
 8008910:	2301      	movs	r3, #1
 8008912:	4652      	mov	r2, sl
 8008914:	4639      	mov	r1, r7
 8008916:	4630      	mov	r0, r6
 8008918:	47c0      	blx	r8
 800891a:	3001      	adds	r0, #1
 800891c:	d103      	bne.n	8008926 <_printf_common+0xba>
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008926:	3501      	adds	r5, #1
 8008928:	e7c3      	b.n	80088b2 <_printf_common+0x46>
 800892a:	18e1      	adds	r1, r4, r3
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	2030      	movs	r0, #48	; 0x30
 8008930:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008934:	4422      	add	r2, r4
 8008936:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800893a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800893e:	3302      	adds	r3, #2
 8008940:	e7c5      	b.n	80088ce <_printf_common+0x62>
 8008942:	2301      	movs	r3, #1
 8008944:	4622      	mov	r2, r4
 8008946:	4639      	mov	r1, r7
 8008948:	4630      	mov	r0, r6
 800894a:	47c0      	blx	r8
 800894c:	3001      	adds	r0, #1
 800894e:	d0e6      	beq.n	800891e <_printf_common+0xb2>
 8008950:	f109 0901 	add.w	r9, r9, #1
 8008954:	e7d8      	b.n	8008908 <_printf_common+0x9c>
	...

08008958 <_printf_i>:
 8008958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800895c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008960:	460c      	mov	r4, r1
 8008962:	7e09      	ldrb	r1, [r1, #24]
 8008964:	b085      	sub	sp, #20
 8008966:	296e      	cmp	r1, #110	; 0x6e
 8008968:	4617      	mov	r7, r2
 800896a:	4606      	mov	r6, r0
 800896c:	4698      	mov	r8, r3
 800896e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008970:	f000 80b3 	beq.w	8008ada <_printf_i+0x182>
 8008974:	d822      	bhi.n	80089bc <_printf_i+0x64>
 8008976:	2963      	cmp	r1, #99	; 0x63
 8008978:	d036      	beq.n	80089e8 <_printf_i+0x90>
 800897a:	d80a      	bhi.n	8008992 <_printf_i+0x3a>
 800897c:	2900      	cmp	r1, #0
 800897e:	f000 80b9 	beq.w	8008af4 <_printf_i+0x19c>
 8008982:	2958      	cmp	r1, #88	; 0x58
 8008984:	f000 8083 	beq.w	8008a8e <_printf_i+0x136>
 8008988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800898c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008990:	e032      	b.n	80089f8 <_printf_i+0xa0>
 8008992:	2964      	cmp	r1, #100	; 0x64
 8008994:	d001      	beq.n	800899a <_printf_i+0x42>
 8008996:	2969      	cmp	r1, #105	; 0x69
 8008998:	d1f6      	bne.n	8008988 <_printf_i+0x30>
 800899a:	6820      	ldr	r0, [r4, #0]
 800899c:	6813      	ldr	r3, [r2, #0]
 800899e:	0605      	lsls	r5, r0, #24
 80089a0:	f103 0104 	add.w	r1, r3, #4
 80089a4:	d52a      	bpl.n	80089fc <_printf_i+0xa4>
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6011      	str	r1, [r2, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da03      	bge.n	80089b6 <_printf_i+0x5e>
 80089ae:	222d      	movs	r2, #45	; 0x2d
 80089b0:	425b      	negs	r3, r3
 80089b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80089b6:	486f      	ldr	r0, [pc, #444]	; (8008b74 <_printf_i+0x21c>)
 80089b8:	220a      	movs	r2, #10
 80089ba:	e039      	b.n	8008a30 <_printf_i+0xd8>
 80089bc:	2973      	cmp	r1, #115	; 0x73
 80089be:	f000 809d 	beq.w	8008afc <_printf_i+0x1a4>
 80089c2:	d808      	bhi.n	80089d6 <_printf_i+0x7e>
 80089c4:	296f      	cmp	r1, #111	; 0x6f
 80089c6:	d020      	beq.n	8008a0a <_printf_i+0xb2>
 80089c8:	2970      	cmp	r1, #112	; 0x70
 80089ca:	d1dd      	bne.n	8008988 <_printf_i+0x30>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	e003      	b.n	80089de <_printf_i+0x86>
 80089d6:	2975      	cmp	r1, #117	; 0x75
 80089d8:	d017      	beq.n	8008a0a <_printf_i+0xb2>
 80089da:	2978      	cmp	r1, #120	; 0x78
 80089dc:	d1d4      	bne.n	8008988 <_printf_i+0x30>
 80089de:	2378      	movs	r3, #120	; 0x78
 80089e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089e4:	4864      	ldr	r0, [pc, #400]	; (8008b78 <_printf_i+0x220>)
 80089e6:	e055      	b.n	8008a94 <_printf_i+0x13c>
 80089e8:	6813      	ldr	r3, [r2, #0]
 80089ea:	1d19      	adds	r1, r3, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6011      	str	r1, [r2, #0]
 80089f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089f8:	2301      	movs	r3, #1
 80089fa:	e08c      	b.n	8008b16 <_printf_i+0x1be>
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6011      	str	r1, [r2, #0]
 8008a00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a04:	bf18      	it	ne
 8008a06:	b21b      	sxthne	r3, r3
 8008a08:	e7cf      	b.n	80089aa <_printf_i+0x52>
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	6825      	ldr	r5, [r4, #0]
 8008a0e:	1d18      	adds	r0, r3, #4
 8008a10:	6010      	str	r0, [r2, #0]
 8008a12:	0628      	lsls	r0, r5, #24
 8008a14:	d501      	bpl.n	8008a1a <_printf_i+0xc2>
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	e002      	b.n	8008a20 <_printf_i+0xc8>
 8008a1a:	0668      	lsls	r0, r5, #25
 8008a1c:	d5fb      	bpl.n	8008a16 <_printf_i+0xbe>
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	4854      	ldr	r0, [pc, #336]	; (8008b74 <_printf_i+0x21c>)
 8008a22:	296f      	cmp	r1, #111	; 0x6f
 8008a24:	bf14      	ite	ne
 8008a26:	220a      	movne	r2, #10
 8008a28:	2208      	moveq	r2, #8
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a30:	6865      	ldr	r5, [r4, #4]
 8008a32:	60a5      	str	r5, [r4, #8]
 8008a34:	2d00      	cmp	r5, #0
 8008a36:	f2c0 8095 	blt.w	8008b64 <_printf_i+0x20c>
 8008a3a:	6821      	ldr	r1, [r4, #0]
 8008a3c:	f021 0104 	bic.w	r1, r1, #4
 8008a40:	6021      	str	r1, [r4, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d13d      	bne.n	8008ac2 <_printf_i+0x16a>
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	f040 808e 	bne.w	8008b68 <_printf_i+0x210>
 8008a4c:	4665      	mov	r5, ip
 8008a4e:	2a08      	cmp	r2, #8
 8008a50:	d10b      	bne.n	8008a6a <_printf_i+0x112>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	07db      	lsls	r3, r3, #31
 8008a56:	d508      	bpl.n	8008a6a <_printf_i+0x112>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	6862      	ldr	r2, [r4, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	bfde      	ittt	le
 8008a60:	2330      	movle	r3, #48	; 0x30
 8008a62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a6a:	ebac 0305 	sub.w	r3, ip, r5
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	f8cd 8000 	str.w	r8, [sp]
 8008a74:	463b      	mov	r3, r7
 8008a76:	aa03      	add	r2, sp, #12
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff fef6 	bl	800886c <_printf_common>
 8008a80:	3001      	adds	r0, #1
 8008a82:	d14d      	bne.n	8008b20 <_printf_i+0x1c8>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	b005      	add	sp, #20
 8008a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	4839      	ldr	r0, [pc, #228]	; (8008b74 <_printf_i+0x21c>)
 8008a90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a94:	6813      	ldr	r3, [r2, #0]
 8008a96:	6821      	ldr	r1, [r4, #0]
 8008a98:	1d1d      	adds	r5, r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6015      	str	r5, [r2, #0]
 8008a9e:	060a      	lsls	r2, r1, #24
 8008aa0:	d50b      	bpl.n	8008aba <_printf_i+0x162>
 8008aa2:	07ca      	lsls	r2, r1, #31
 8008aa4:	bf44      	itt	mi
 8008aa6:	f041 0120 	orrmi.w	r1, r1, #32
 8008aaa:	6021      	strmi	r1, [r4, #0]
 8008aac:	b91b      	cbnz	r3, 8008ab6 <_printf_i+0x15e>
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	f022 0220 	bic.w	r2, r2, #32
 8008ab4:	6022      	str	r2, [r4, #0]
 8008ab6:	2210      	movs	r2, #16
 8008ab8:	e7b7      	b.n	8008a2a <_printf_i+0xd2>
 8008aba:	064d      	lsls	r5, r1, #25
 8008abc:	bf48      	it	mi
 8008abe:	b29b      	uxthmi	r3, r3
 8008ac0:	e7ef      	b.n	8008aa2 <_printf_i+0x14a>
 8008ac2:	4665      	mov	r5, ip
 8008ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ac8:	fb02 3311 	mls	r3, r2, r1, r3
 8008acc:	5cc3      	ldrb	r3, [r0, r3]
 8008ace:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	d1f5      	bne.n	8008ac4 <_printf_i+0x16c>
 8008ad8:	e7b9      	b.n	8008a4e <_printf_i+0xf6>
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	6825      	ldr	r5, [r4, #0]
 8008ade:	6961      	ldr	r1, [r4, #20]
 8008ae0:	1d18      	adds	r0, r3, #4
 8008ae2:	6010      	str	r0, [r2, #0]
 8008ae4:	0628      	lsls	r0, r5, #24
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	d501      	bpl.n	8008aee <_printf_i+0x196>
 8008aea:	6019      	str	r1, [r3, #0]
 8008aec:	e002      	b.n	8008af4 <_printf_i+0x19c>
 8008aee:	066a      	lsls	r2, r5, #25
 8008af0:	d5fb      	bpl.n	8008aea <_printf_i+0x192>
 8008af2:	8019      	strh	r1, [r3, #0]
 8008af4:	2300      	movs	r3, #0
 8008af6:	6123      	str	r3, [r4, #16]
 8008af8:	4665      	mov	r5, ip
 8008afa:	e7b9      	b.n	8008a70 <_printf_i+0x118>
 8008afc:	6813      	ldr	r3, [r2, #0]
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	6011      	str	r1, [r2, #0]
 8008b02:	681d      	ldr	r5, [r3, #0]
 8008b04:	6862      	ldr	r2, [r4, #4]
 8008b06:	2100      	movs	r1, #0
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f7f7 fb69 	bl	80001e0 <memchr>
 8008b0e:	b108      	cbz	r0, 8008b14 <_printf_i+0x1bc>
 8008b10:	1b40      	subs	r0, r0, r5
 8008b12:	6060      	str	r0, [r4, #4]
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b1e:	e7a7      	b.n	8008a70 <_printf_i+0x118>
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	462a      	mov	r2, r5
 8008b24:	4639      	mov	r1, r7
 8008b26:	4630      	mov	r0, r6
 8008b28:	47c0      	blx	r8
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d0aa      	beq.n	8008a84 <_printf_i+0x12c>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	079b      	lsls	r3, r3, #30
 8008b32:	d413      	bmi.n	8008b5c <_printf_i+0x204>
 8008b34:	68e0      	ldr	r0, [r4, #12]
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	4298      	cmp	r0, r3
 8008b3a:	bfb8      	it	lt
 8008b3c:	4618      	movlt	r0, r3
 8008b3e:	e7a3      	b.n	8008a88 <_printf_i+0x130>
 8008b40:	2301      	movs	r3, #1
 8008b42:	464a      	mov	r2, r9
 8008b44:	4639      	mov	r1, r7
 8008b46:	4630      	mov	r0, r6
 8008b48:	47c0      	blx	r8
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d09a      	beq.n	8008a84 <_printf_i+0x12c>
 8008b4e:	3501      	adds	r5, #1
 8008b50:	68e3      	ldr	r3, [r4, #12]
 8008b52:	9a03      	ldr	r2, [sp, #12]
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	42ab      	cmp	r3, r5
 8008b58:	dcf2      	bgt.n	8008b40 <_printf_i+0x1e8>
 8008b5a:	e7eb      	b.n	8008b34 <_printf_i+0x1dc>
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	f104 0919 	add.w	r9, r4, #25
 8008b62:	e7f5      	b.n	8008b50 <_printf_i+0x1f8>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1ac      	bne.n	8008ac2 <_printf_i+0x16a>
 8008b68:	7803      	ldrb	r3, [r0, #0]
 8008b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b72:	e76c      	b.n	8008a4e <_printf_i+0xf6>
 8008b74:	08008f0d 	.word	0x08008f0d
 8008b78:	08008f1e 	.word	0x08008f1e

08008b7c <memmove>:
 8008b7c:	4288      	cmp	r0, r1
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	eb01 0302 	add.w	r3, r1, r2
 8008b84:	d807      	bhi.n	8008b96 <memmove+0x1a>
 8008b86:	1e42      	subs	r2, r0, #1
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d00a      	beq.n	8008ba2 <memmove+0x26>
 8008b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b94:	e7f8      	b.n	8008b88 <memmove+0xc>
 8008b96:	4283      	cmp	r3, r0
 8008b98:	d9f5      	bls.n	8008b86 <memmove+0xa>
 8008b9a:	1881      	adds	r1, r0, r2
 8008b9c:	1ad2      	subs	r2, r2, r3
 8008b9e:	42d3      	cmn	r3, r2
 8008ba0:	d100      	bne.n	8008ba4 <memmove+0x28>
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ba8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008bac:	e7f7      	b.n	8008b9e <memmove+0x22>
	...

08008bb0 <_free_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d045      	beq.n	8008c44 <_free_r+0x94>
 8008bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bbc:	1f0c      	subs	r4, r1, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bfb8      	it	lt
 8008bc2:	18e4      	addlt	r4, r4, r3
 8008bc4:	f000 f8d2 	bl	8008d6c <__malloc_lock>
 8008bc8:	4a1f      	ldr	r2, [pc, #124]	; (8008c48 <_free_r+0x98>)
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	4610      	mov	r0, r2
 8008bce:	b933      	cbnz	r3, 8008bde <_free_r+0x2e>
 8008bd0:	6063      	str	r3, [r4, #4]
 8008bd2:	6014      	str	r4, [r2, #0]
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bda:	f000 b8c8 	b.w	8008d6e <__malloc_unlock>
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	d90c      	bls.n	8008bfc <_free_r+0x4c>
 8008be2:	6821      	ldr	r1, [r4, #0]
 8008be4:	1862      	adds	r2, r4, r1
 8008be6:	4293      	cmp	r3, r2
 8008be8:	bf04      	itt	eq
 8008bea:	681a      	ldreq	r2, [r3, #0]
 8008bec:	685b      	ldreq	r3, [r3, #4]
 8008bee:	6063      	str	r3, [r4, #4]
 8008bf0:	bf04      	itt	eq
 8008bf2:	1852      	addeq	r2, r2, r1
 8008bf4:	6022      	streq	r2, [r4, #0]
 8008bf6:	6004      	str	r4, [r0, #0]
 8008bf8:	e7ec      	b.n	8008bd4 <_free_r+0x24>
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	b10a      	cbz	r2, 8008c04 <_free_r+0x54>
 8008c00:	42a2      	cmp	r2, r4
 8008c02:	d9fa      	bls.n	8008bfa <_free_r+0x4a>
 8008c04:	6819      	ldr	r1, [r3, #0]
 8008c06:	1858      	adds	r0, r3, r1
 8008c08:	42a0      	cmp	r0, r4
 8008c0a:	d10b      	bne.n	8008c24 <_free_r+0x74>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	4401      	add	r1, r0
 8008c10:	1858      	adds	r0, r3, r1
 8008c12:	4282      	cmp	r2, r0
 8008c14:	6019      	str	r1, [r3, #0]
 8008c16:	d1dd      	bne.n	8008bd4 <_free_r+0x24>
 8008c18:	6810      	ldr	r0, [r2, #0]
 8008c1a:	6852      	ldr	r2, [r2, #4]
 8008c1c:	605a      	str	r2, [r3, #4]
 8008c1e:	4401      	add	r1, r0
 8008c20:	6019      	str	r1, [r3, #0]
 8008c22:	e7d7      	b.n	8008bd4 <_free_r+0x24>
 8008c24:	d902      	bls.n	8008c2c <_free_r+0x7c>
 8008c26:	230c      	movs	r3, #12
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	e7d3      	b.n	8008bd4 <_free_r+0x24>
 8008c2c:	6820      	ldr	r0, [r4, #0]
 8008c2e:	1821      	adds	r1, r4, r0
 8008c30:	428a      	cmp	r2, r1
 8008c32:	bf04      	itt	eq
 8008c34:	6811      	ldreq	r1, [r2, #0]
 8008c36:	6852      	ldreq	r2, [r2, #4]
 8008c38:	6062      	str	r2, [r4, #4]
 8008c3a:	bf04      	itt	eq
 8008c3c:	1809      	addeq	r1, r1, r0
 8008c3e:	6021      	streq	r1, [r4, #0]
 8008c40:	605c      	str	r4, [r3, #4]
 8008c42:	e7c7      	b.n	8008bd4 <_free_r+0x24>
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	20001958 	.word	0x20001958

08008c4c <_malloc_r>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	1ccd      	adds	r5, r1, #3
 8008c50:	f025 0503 	bic.w	r5, r5, #3
 8008c54:	3508      	adds	r5, #8
 8008c56:	2d0c      	cmp	r5, #12
 8008c58:	bf38      	it	cc
 8008c5a:	250c      	movcc	r5, #12
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	4606      	mov	r6, r0
 8008c60:	db01      	blt.n	8008c66 <_malloc_r+0x1a>
 8008c62:	42a9      	cmp	r1, r5
 8008c64:	d903      	bls.n	8008c6e <_malloc_r+0x22>
 8008c66:	230c      	movs	r3, #12
 8008c68:	6033      	str	r3, [r6, #0]
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	f000 f87d 	bl	8008d6c <__malloc_lock>
 8008c72:	4a21      	ldr	r2, [pc, #132]	; (8008cf8 <_malloc_r+0xac>)
 8008c74:	6814      	ldr	r4, [r2, #0]
 8008c76:	4621      	mov	r1, r4
 8008c78:	b991      	cbnz	r1, 8008ca0 <_malloc_r+0x54>
 8008c7a:	4c20      	ldr	r4, [pc, #128]	; (8008cfc <_malloc_r+0xb0>)
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	b91b      	cbnz	r3, 8008c88 <_malloc_r+0x3c>
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f863 	bl	8008d4c <_sbrk_r>
 8008c86:	6020      	str	r0, [r4, #0]
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f85e 	bl	8008d4c <_sbrk_r>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d124      	bne.n	8008cde <_malloc_r+0x92>
 8008c94:	230c      	movs	r3, #12
 8008c96:	6033      	str	r3, [r6, #0]
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 f868 	bl	8008d6e <__malloc_unlock>
 8008c9e:	e7e4      	b.n	8008c6a <_malloc_r+0x1e>
 8008ca0:	680b      	ldr	r3, [r1, #0]
 8008ca2:	1b5b      	subs	r3, r3, r5
 8008ca4:	d418      	bmi.n	8008cd8 <_malloc_r+0x8c>
 8008ca6:	2b0b      	cmp	r3, #11
 8008ca8:	d90f      	bls.n	8008cca <_malloc_r+0x7e>
 8008caa:	600b      	str	r3, [r1, #0]
 8008cac:	50cd      	str	r5, [r1, r3]
 8008cae:	18cc      	adds	r4, r1, r3
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 f85c 	bl	8008d6e <__malloc_unlock>
 8008cb6:	f104 000b 	add.w	r0, r4, #11
 8008cba:	1d23      	adds	r3, r4, #4
 8008cbc:	f020 0007 	bic.w	r0, r0, #7
 8008cc0:	1ac3      	subs	r3, r0, r3
 8008cc2:	d0d3      	beq.n	8008c6c <_malloc_r+0x20>
 8008cc4:	425a      	negs	r2, r3
 8008cc6:	50e2      	str	r2, [r4, r3]
 8008cc8:	e7d0      	b.n	8008c6c <_malloc_r+0x20>
 8008cca:	428c      	cmp	r4, r1
 8008ccc:	684b      	ldr	r3, [r1, #4]
 8008cce:	bf16      	itet	ne
 8008cd0:	6063      	strne	r3, [r4, #4]
 8008cd2:	6013      	streq	r3, [r2, #0]
 8008cd4:	460c      	movne	r4, r1
 8008cd6:	e7eb      	b.n	8008cb0 <_malloc_r+0x64>
 8008cd8:	460c      	mov	r4, r1
 8008cda:	6849      	ldr	r1, [r1, #4]
 8008cdc:	e7cc      	b.n	8008c78 <_malloc_r+0x2c>
 8008cde:	1cc4      	adds	r4, r0, #3
 8008ce0:	f024 0403 	bic.w	r4, r4, #3
 8008ce4:	42a0      	cmp	r0, r4
 8008ce6:	d005      	beq.n	8008cf4 <_malloc_r+0xa8>
 8008ce8:	1a21      	subs	r1, r4, r0
 8008cea:	4630      	mov	r0, r6
 8008cec:	f000 f82e 	bl	8008d4c <_sbrk_r>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d0cf      	beq.n	8008c94 <_malloc_r+0x48>
 8008cf4:	6025      	str	r5, [r4, #0]
 8008cf6:	e7db      	b.n	8008cb0 <_malloc_r+0x64>
 8008cf8:	20001958 	.word	0x20001958
 8008cfc:	2000195c 	.word	0x2000195c

08008d00 <_realloc_r>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	4607      	mov	r7, r0
 8008d04:	4614      	mov	r4, r2
 8008d06:	460e      	mov	r6, r1
 8008d08:	b921      	cbnz	r1, 8008d14 <_realloc_r+0x14>
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d10:	f7ff bf9c 	b.w	8008c4c <_malloc_r>
 8008d14:	b922      	cbnz	r2, 8008d20 <_realloc_r+0x20>
 8008d16:	f7ff ff4b 	bl	8008bb0 <_free_r>
 8008d1a:	4625      	mov	r5, r4
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d20:	f000 f826 	bl	8008d70 <_malloc_usable_size_r>
 8008d24:	42a0      	cmp	r0, r4
 8008d26:	d20f      	bcs.n	8008d48 <_realloc_r+0x48>
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	f7ff ff8e 	bl	8008c4c <_malloc_r>
 8008d30:	4605      	mov	r5, r0
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d0f2      	beq.n	8008d1c <_realloc_r+0x1c>
 8008d36:	4631      	mov	r1, r6
 8008d38:	4622      	mov	r2, r4
 8008d3a:	f7ff fc11 	bl	8008560 <memcpy>
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff ff35 	bl	8008bb0 <_free_r>
 8008d46:	e7e9      	b.n	8008d1c <_realloc_r+0x1c>
 8008d48:	4635      	mov	r5, r6
 8008d4a:	e7e7      	b.n	8008d1c <_realloc_r+0x1c>

08008d4c <_sbrk_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4c06      	ldr	r4, [pc, #24]	; (8008d68 <_sbrk_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4605      	mov	r5, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	f7f8 f8b0 	bl	8000ebc <_sbrk>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_sbrk_r+0x1a>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_sbrk_r+0x1a>
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20001b50 	.word	0x20001b50

08008d6c <__malloc_lock>:
 8008d6c:	4770      	bx	lr

08008d6e <__malloc_unlock>:
 8008d6e:	4770      	bx	lr

08008d70 <_malloc_usable_size_r>:
 8008d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d74:	1f18      	subs	r0, r3, #4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bfbc      	itt	lt
 8008d7a:	580b      	ldrlt	r3, [r1, r0]
 8008d7c:	18c0      	addlt	r0, r0, r3
 8008d7e:	4770      	bx	lr

08008d80 <_init>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	bf00      	nop
 8008d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d86:	bc08      	pop	{r3}
 8008d88:	469e      	mov	lr, r3
 8008d8a:	4770      	bx	lr

08008d8c <_fini>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	bf00      	nop
 8008d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d92:	bc08      	pop	{r3}
 8008d94:	469e      	mov	lr, r3
 8008d96:	4770      	bx	lr
