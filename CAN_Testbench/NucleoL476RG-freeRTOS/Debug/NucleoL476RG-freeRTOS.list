
NucleoL476RG-freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089a4  080089a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089ac  080089ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089ac  080089ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089b0  080089b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080089b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000010  080089c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b2c  080089c4  00021b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025330  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d5e  00000000  00000000  00045370  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e18  00000000  00000000  000490d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c60  00000000  00000000  0004aee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004bf3  00000000  00000000  0004cb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017e11  00000000  00000000  0005173b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114b0f  00000000  00000000  0006954c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e05b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d4  00000000  00000000  0017e0d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800883c 	.word	0x0800883c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800883c 	.word	0x0800883c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f023 030f 	bic.w	r3, r3, #15
 80004e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	011b      	lsls	r3, r3, #4
 80004e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	f043 030c 	orr.w	r3, r3, #12
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	f043 0308 	orr.w	r3, r3, #8
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004fc:	7bbb      	ldrb	r3, [r7, #14]
 80004fe:	f043 030c 	orr.w	r3, r3, #12
 8000502:	b2db      	uxtb	r3, r3
 8000504:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	f043 0308 	orr.w	r3, r3, #8
 800050c:	b2db      	uxtb	r3, r3
 800050e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000510:	f107 0208 	add.w	r2, r7, #8
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2304      	movs	r3, #4
 800051a:	214e      	movs	r1, #78	; 0x4e
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <lcd_send_cmd+0x5c>)
 800051e:	f002 fecf 	bl	80032c0 <HAL_I2C_Master_Transmit>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200018f4 	.word	0x200018f4

08000530 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f023 030f 	bic.w	r3, r3, #15
 8000540:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f043 030d 	orr.w	r3, r3, #13
 800054e:	b2db      	uxtb	r3, r3
 8000550:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	f043 0309 	orr.w	r3, r3, #9
 8000558:	b2db      	uxtb	r3, r3
 800055a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	f043 030d 	orr.w	r3, r3, #13
 8000562:	b2db      	uxtb	r3, r3
 8000564:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	f043 0309 	orr.w	r3, r3, #9
 800056c:	b2db      	uxtb	r3, r3
 800056e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000570:	f107 0208 	add.w	r2, r7, #8
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2304      	movs	r3, #4
 800057a:	214e      	movs	r1, #78	; 0x4e
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <lcd_send_data+0x5c>)
 800057e:	f002 fe9f 	bl	80032c0 <HAL_I2C_Master_Transmit>
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200018f4 	.word	0x200018f4

08000590 <lcd_clear>:

void lcd_clear (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000596:	2080      	movs	r0, #128	; 0x80
 8000598:	f7ff ff9a 	bl	80004d0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e005      	b.n	80005ae <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80005a2:	2020      	movs	r0, #32
 80005a4:	f7ff ffc4 	bl	8000530 <lcd_send_data>
	for (int i=0; i<70; i++)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3301      	adds	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b45      	cmp	r3, #69	; 0x45
 80005b2:	ddf6      	ble.n	80005a2 <lcd_clear+0x12>
	}
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
    switch (row)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <lcd_put_cur+0x16>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d005      	beq.n	80005dc <lcd_put_cur+0x20>
 80005d0:	e009      	b.n	80005e6 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	603b      	str	r3, [r7, #0]
            break;
 80005da:	e004      	b.n	80005e6 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005e2:	603b      	str	r3, [r7, #0]
            break;
 80005e4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff70 	bl	80004d0 <lcd_send_cmd>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <lcd_init>:


void lcd_init (void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005fc:	2032      	movs	r0, #50	; 0x32
 80005fe:	f000 fddd 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000602:	2030      	movs	r0, #48	; 0x30
 8000604:	f7ff ff64 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000608:	2005      	movs	r0, #5
 800060a:	f000 fdd7 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x30);
 800060e:	2030      	movs	r0, #48	; 0x30
 8000610:	f7ff ff5e 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fdd1 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x30);
 800061a:	2030      	movs	r0, #48	; 0x30
 800061c:	f7ff ff58 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fdcb 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000626:	2020      	movs	r0, #32
 8000628:	f7ff ff52 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(10);
 800062c:	200a      	movs	r0, #10
 800062e:	f000 fdc5 	bl	80011bc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f7ff ff4c 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fdbf 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800063e:	2008      	movs	r0, #8
 8000640:	f7ff ff46 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fdb9 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ff40 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fdb3 	bl	80011bc <HAL_Delay>
	HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fdb0 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800065c:	2006      	movs	r0, #6
 800065e:	f7ff ff37 	bl	80004d0 <lcd_send_cmd>
	HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fdaa 	bl	80011bc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000668:	200c      	movs	r0, #12
 800066a:	f7ff ff31 	bl	80004d0 <lcd_send_cmd>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}

08000672 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800067a:	e006      	b.n	800068a <lcd_send_string+0x18>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff53 	bl	8000530 <lcd_send_data>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <lcd_send_string+0xa>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fd4c 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f854 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 fa2c 	bl	8000b04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 f9fa 	bl	8000aa4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006b0:	f000 f8d8 	bl	8000864 <MX_ADC1_Init>
  MX_CAN1_Init();
 80006b4:	f000 f94c 	bl	8000950 <MX_CAN1_Init>
  MX_I2C1_Init();
 80006b8:	f000 f9b4 	bl	8000a24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if(USING_LCD){
	  lcd_init();
 80006bc:	f7ff ff9c 	bl	80005f8 <lcd_init>

	  lcd_send_string("LCD Init");
 80006c0:	4816      	ldr	r0, [pc, #88]	; (800071c <main+0x80>)
 80006c2:	f7ff ffd6 	bl	8000672 <lcd_send_string>

	  HAL_Delay(3000);
 80006c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006ca:	f000 fd77 	bl	80011bc <HAL_Delay>

	  lcd_clear();
 80006ce:	f7ff ff5f 	bl	8000590 <lcd_clear>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d2:	f005 fb39 	bl	8005d48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <main+0x84>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4812      	ldr	r0, [pc, #72]	; (8000724 <main+0x88>)
 80006dc:	f005 fb9e 	bl	8005e1c <osThreadNew>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <main+0x8c>)
 80006e4:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask01 */
  blinkyTask01Handle = osThreadNew(StartBlinkyTask01, NULL, &blinkyTask01_attributes);
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <main+0x90>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <main+0x94>)
 80006ec:	f005 fb96 	bl	8005e1c <osThreadNew>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <main+0x98>)
 80006f4:	601a      	str	r2, [r3, #0]

  /* creation of ReadAndPrintTas */
  ReadAndPrintTasHandle = osThreadNew(StartTaskReadAndPrint01, NULL, &ReadAndPrintTas_attributes);
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <main+0x9c>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4810      	ldr	r0, [pc, #64]	; (800073c <main+0xa0>)
 80006fc:	f005 fb8e 	bl	8005e1c <osThreadNew>
 8000700:	4602      	mov	r2, r0
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0xa4>)
 8000704:	601a      	str	r2, [r3, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartTaskUpdateLCD, NULL, &updateLCD_attributes);
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <main+0xa8>)
 8000708:	2100      	movs	r1, #0
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <main+0xac>)
 800070c:	f005 fb86 	bl	8005e1c <osThreadNew>
 8000710:	4602      	mov	r2, r0
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <main+0xb0>)
 8000714:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000716:	f005 fb4b 	bl	8005db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	e7fe      	b.n	800071a <main+0x7e>
 800071c:	0800888c 	.word	0x0800888c
 8000720:	080088cc 	.word	0x080088cc
 8000724:	08000c5d 	.word	0x08000c5d
 8000728:	200018f0 	.word	0x200018f0
 800072c:	080088f0 	.word	0x080088f0
 8000730:	08000c6d 	.word	0x08000c6d
 8000734:	20001940 	.word	0x20001940
 8000738:	08008914 	.word	0x08008914
 800073c:	08000c89 	.word	0x08000c89
 8000740:	200019b8 	.word	0x200019b8
 8000744:	08008938 	.word	0x08008938
 8000748:	08000c99 	.word	0x08000c99
 800074c:	20001a3c 	.word	0x20001a3c

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0b8      	sub	sp, #224	; 0xe0
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800075a:	2244      	movs	r2, #68	; 0x44
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f008 f85b 	bl	800881a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2288      	movs	r2, #136	; 0x88
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f008 f84d 	bl	800881a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2310      	movs	r3, #16
 8000790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007a6:	230a      	movs	r3, #10
 80007a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 f8e0 	bl	8003988 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007ce:	f000 fa8f 	bl	8000cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2303      	movs	r3, #3
 80007da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007f4:	2104      	movs	r1, #4
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fcac 	bl	8004154 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000802:	f000 fa75 	bl	8000cf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000806:	f244 0342 	movw	r3, #16450	; 0x4042
 800080a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800080c:	2300      	movs	r3, #0
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000818:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800081a:	2302      	movs	r3, #2
 800081c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000822:	2308      	movs	r3, #8
 8000824:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000826:	2307      	movs	r3, #7
 8000828:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000836:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fec0 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000846:	f000 fa53 	bl	8000cf0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800084a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800084e:	f003 f845 	bl	80038dc <HAL_PWREx_ControlVoltageScaling>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000858:	f000 fa4a 	bl	8000cf0 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	37e0      	adds	r7, #224	; 0xe0
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <MX_ADC1_Init+0xe0>)
 8000888:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <MX_ADC1_Init+0xe4>)
 800088a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800088c:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_ADC1_Init+0xe0>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_ADC1_Init+0xe0>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000898:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_ADC1_Init+0xe0>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e6:	4817      	ldr	r0, [pc, #92]	; (8000944 <MX_ADC1_Init+0xe0>)
 80008e8:	f000 fe16 	bl	8001518 <HAL_ADC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008f2:	f000 f9fd 	bl	8000cf0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <MX_ADC1_Init+0xe0>)
 8000902:	f001 fb71 	bl	8001fe8 <HAL_ADCEx_MultiModeConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800090c:	f000 f9f0 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_ADC1_Init+0xe8>)
 8000912:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000914:	2306      	movs	r3, #6
 8000916:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091c:	237f      	movs	r3, #127	; 0x7f
 800091e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000920:	2304      	movs	r3, #4
 8000922:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_ADC1_Init+0xe0>)
 800092e:	f000 ff47 	bl	80017c0 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000938:	f000 f9da 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	; 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20001950 	.word	0x20001950
 8000948:	50040000 	.word	0x50040000
 800094c:	14f00020 	.word	0x14f00020

08000950 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000958:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <MX_CAN1_Init+0xd0>)
 800095a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_CAN1_Init+0xcc>)
 800095e:	2210      	movs	r2, #16
 8000960:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_CAN1_Init+0xcc>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800096e:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000970:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000974:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000978:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800097c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000980:	2200      	movs	r2, #0
 8000982:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000986:	2200      	movs	r2, #0
 8000988:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <MX_CAN1_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000992:	2200      	movs	r2, #0
 8000994:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000998:	2200      	movs	r2, #0
 800099a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_CAN1_Init+0xcc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009a2:	481e      	ldr	r0, [pc, #120]	; (8000a1c <MX_CAN1_Init+0xcc>)
 80009a4:	f001 fbcc 	bl	8002140 <HAL_CAN_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80009ae:	f000 f99f 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sf;
  sf.FilterBank = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  sf.FilterMode = CAN_FILTERMODE_IDMASK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  sf.FilterScale = CAN_FILTERSCALE_16BIT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  sf.FilterIdLow = 0xffff;
 80009be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c2:	607b      	str	r3, [r7, #4]
  sf.FilterIdHigh = 0x1fff;
 80009c4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009c8:	603b      	str	r3, [r7, #0]
  sf.FilterMaskIdLow = 0x0000;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  sf.FilterMaskIdHigh = 0x0000;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  sf.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  sf.SlaveStartFilterBank = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  sf.FilterActivation = ENABLE;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	480e      	ldr	r0, [pc, #56]	; (8000a1c <MX_CAN1_Init+0xcc>)
 80009e4:	f001 fca7 	bl	8002336 <HAL_CAN_ConfigFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_CAN1_Init+0xa2>
      Error_Handler();
 80009ee:	f000 f97f 	bl	8000cf0 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <MX_CAN1_Init+0xcc>)
 80009f4:	f001 fd69 	bl	80024ca <HAL_CAN_Start>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_CAN1_Init+0xb2>
      Error_Handler();
 80009fe:	f000 f977 	bl	8000cf0 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000a02:	2102      	movs	r1, #2
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_CAN1_Init+0xcc>)
 8000a06:	f001 feb6 	bl	8002776 <HAL_CAN_ActivateNotification>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_CAN1_Init+0xc4>
      Error_Handler();
 8000a10:	f000 f96e 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20001a40 	.word	0x20001a40
 8000a20:	40006400 	.word	0x40006400

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C1_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C1_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a60:	f002 fb9e 	bl	80031a0 <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 f941 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a72:	f002 fe8d 	bl	8003790 <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 f938 	bl	8000cf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a84:	f002 fecf 	bl	8003826 <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 f92f 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200018f4 	.word	0x200018f4
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	10909cec 	.word	0x10909cec

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART2_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae8:	f004 fcec 	bl	80054c4 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f8fd 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200019bc 	.word	0x200019bc
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a28      	ldr	r2, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <MX_GPIO_Init+0xec>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <MX_GPIO_Init+0xf0>)
 8000b80:	f002 fadc 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f002 fad5 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_GPIO_Init+0xf4>)
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <MX_GPIO_Init+0xf0>)
 8000ba8:	f002 f920 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <MX_GPIO_Init+0xf0>)
 8000bc4:	f002 f912 	bl	8002dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000bc8:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f002 f902 	bl	8002dec <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	10210000 	.word	0x10210000

08000bfc <CAN_Rx>:
		//serialMsg("Message transmitted!\n\r");
	}
	else return;
}

void CAN_Rx(void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <CAN_Rx+0x50>)
 8000c04:	2208      	movs	r2, #8
 8000c06:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <CAN_Rx+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <CAN_Rx+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <CAN_Rx+0x54>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <CAN_Rx+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]


	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <CAN_Rx+0x50>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <CAN_Rx+0x58>)
 8000c26:	f001 fc94 	bl	8002552 <HAL_CAN_GetRxMessage>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <CAN_Rx+0x3a>
		Error_Handler();
 8000c30:	f000 f85e 	bl	8000cf0 <Error_Handler>
 8000c34:	e007      	b.n	8000c46 <CAN_Rx+0x4a>
		return;
	}
	HAL_Delay(1);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f000 fac0 	bl	80011bc <HAL_Delay>
		serialMsg("Received message: ");
		serialMsg((char*)crx);
		serialMsg("\n\r");
	}
	if(USING_LCD)
			strcpy(message, crx);
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <CAN_Rx+0x5c>)
 8000c42:	f007 fdf2 	bl	800882a <strcpy>

}
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20001a80 	.word	0x20001a80
 8000c50:	2000002c 	.word	0x2000002c
 8000c54:	20001a40 	.word	0x20001a40
 8000c58:	20001944 	.word	0x20001944

08000c5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f005 f97f 	bl	8005f68 <osDelay>
 8000c6a:	e7fb      	b.n	8000c64 <StartDefaultTask+0x8>

08000c6c <StartBlinkyTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask01 */
void StartBlinkyTask01(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c74:	2120      	movs	r1, #32
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f002 fa77 	bl	800316c <HAL_GPIO_TogglePin>
    osDelay(500);
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f005 f971 	bl	8005f68 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c86:	e7f5      	b.n	8000c74 <StartBlinkyTask01+0x8>

08000c88 <StartTaskReadAndPrint01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadAndPrint01 */
void StartTaskReadAndPrint01(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
			  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);

		  HAL_Delay(1);
	  }

	  osDelay(100);
 8000c90:	2064      	movs	r0, #100	; 0x64
 8000c92:	f005 f969 	bl	8005f68 <osDelay>
	  if(ADC_READ){
 8000c96:	e7fb      	b.n	8000c90 <StartTaskReadAndPrint01+0x8>

08000c98 <StartTaskUpdateLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUpdateLCD */
void StartTaskUpdateLCD(void *argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUpdateLCD */
  /* Infinite loop */
  for(;;)
  {
	  if(USING_LCD){
		  lcd_clear();
 8000ca0:	f7ff fc76 	bl	8000590 <lcd_clear>
		  HAL_Delay(10);
 8000ca4:	200a      	movs	r0, #10
 8000ca6:	f000 fa89 	bl	80011bc <HAL_Delay>
		  lcd_put_cur(0, 0);
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fc85 	bl	80005bc <lcd_put_cur>
		  HAL_Delay(10);
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f000 fa82 	bl	80011bc <HAL_Delay>
		  lcd_send_string(message);
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <StartTaskUpdateLCD+0x30>)
 8000cba:	f7ff fcda 	bl	8000672 <lcd_send_string>
	  }
	  osDelay(1000);
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f005 f951 	bl	8005f68 <osDelay>
	  if(USING_LCD){
 8000cc6:	e7eb      	b.n	8000ca0 <StartTaskUpdateLCD+0x8>
 8000cc8:	20001944 	.word	0x20001944

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f000 fa4d 	bl	800117c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001000 	.word	0x40001000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	210f      	movs	r1, #15
 8000d3a:	f06f 0001 	mvn.w	r0, #1
 8000d3e:	f002 f82b 	bl	8002d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_ADC_MspInit+0x74>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d124      	bne.n	8000dbc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0x78>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000da6:	230b      	movs	r3, #11
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f002 f818 	bl	8002dec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	50040000 	.word	0x50040000
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HAL_CAN_MspInit+0x90>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d131      	bne.n	8000e52 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_CAN_MspInit+0x94>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_CAN_MspInit+0x94>)
 8000df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_CAN_MspInit+0x94>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_CAN_MspInit+0x94>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <HAL_CAN_MspInit+0x94>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_CAN_MspInit+0x94>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e30:	2309      	movs	r3, #9
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f001 ffd5 	bl	8002dec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2105      	movs	r1, #5
 8000e46:	2014      	movs	r0, #20
 8000e48:	f001 ffa6 	bl	8002d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e4c:	2014      	movs	r0, #20
 8000e4e:	f001 ffbf 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40006400 	.word	0x40006400
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_I2C_MspInit+0x7c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d128      	bne.n	8000ed8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <HAL_I2C_MspInit+0x84>)
 8000ebc:	f001 ff96 	bl	8002dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ec6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40005400 	.word	0x40005400
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000400 	.word	0x48000400

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d128      	bne.n	8000f60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x80>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_UART_MspInit+0x80>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_UART_MspInit+0x80>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x80>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_UART_MspInit+0x80>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_UART_MspInit+0x80>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f001 ff46 	bl	8002dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2036      	movs	r0, #54	; 0x36
 8000f86:	f001 ff07 	bl	8002d98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f8a:	2036      	movs	r0, #54	; 0x36
 8000f8c:	f001 ff20 	bl	8002dd0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_InitTick+0x9c>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_InitTick+0x9c>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_InitTick+0x9c>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa8:	f107 0210 	add.w	r2, r7, #16
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fa72 	bl	800449c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb8:	f003 fa44 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8000fbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <HAL_InitTick+0xa0>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	0c9b      	lsrs	r3, r3, #18
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_InitTick+0xa4>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_InitTick+0xa8>)
 8000fd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_InitTick+0xa4>)
 8000fd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_InitTick+0xa4>)
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_InitTick+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_InitTick+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_InitTick+0xa4>)
 8000fee:	f003 ff97 	bl	8004f20 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d104      	bne.n	8001002 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <HAL_InitTick+0xa4>)
 8000ffa:	f003 fff3 	bl	8004fe4 <HAL_TIM_Base_Start_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3730      	adds	r7, #48	; 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	431bde83 	.word	0x431bde83
 8001014:	20001a9c 	.word	0x20001a9c
 8001018:	40001000 	.word	0x40001000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <CAN1_RX0_IRQHandler+0x14>)
 8001056:	f001 fbb4 	bl	80027c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 800105a:	f7ff fdcf 	bl	8000bfc <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20001a40 	.word	0x20001a40

08001068 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM6_DAC_IRQHandler+0x10>)
 800106e:	f004 f829 	bl	80050c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20001a9c 	.word	0x20001a9c

0800107c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <SystemInit+0x64>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <SystemInit+0x64>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <SystemInit+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <SystemInit+0x68>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <SystemInit+0x68>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <SystemInit+0x68>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <SystemInit+0x68>)
 80010a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <SystemInit+0x68>)
 80010b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <SystemInit+0x68>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <SystemInit+0x68>)
 80010c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <SystemInit+0x68>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SystemInit+0x64>)
 80010ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010d2:	609a      	str	r2, [r3, #8]
#endif
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00
 80010e4:	40021000 	.word	0x40021000

080010e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ec:	f7ff ffc6 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010f2:	e003      	b.n	80010fc <LoopCopyDataInit>

080010f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010fa:	3104      	adds	r1, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010fc:	480a      	ldr	r0, [pc, #40]	; (8001128 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001100:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001102:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001104:	d3f6      	bcc.n	80010f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001108:	e002      	b.n	8001110 <LoopFillZerobss>

0800110a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800110a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800110c:	f842 3b04 	str.w	r3, [r2], #4

08001110 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <LoopForever+0x16>)
	cmp	r2, r3
 8001112:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001114:	d3f9      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001116:	f007 fb51 	bl	80087bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800111a:	f7ff fabf 	bl	800069c <main>

0800111e <LoopForever>:

LoopForever:
    b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001120:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001124:	080089b4 	.word	0x080089b4
	ldr	r0, =_sdata
 8001128:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800112c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001130:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001134:	20001b2c 	.word	0x20001b2c

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>
	...

0800113c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_Init+0x3c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_Init+0x3c>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	2003      	movs	r0, #3
 8001154:	f001 fe15 	bl	8002d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff ff09 	bl	8000f70 <HAL_InitTick>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	e001      	b.n	800116e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116a:	f7ff fdc9 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116e:	79fb      	ldrb	r3, [r7, #7]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	20001ae8 	.word	0x20001ae8

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20001ae8 	.word	0x20001ae8

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_Delay+0x40>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000008 	.word	0x20000008

08001200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	609a      	str	r2, [r3, #8]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3360      	adds	r3, #96	; 0x60
 800127a:	461a      	mov	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LL_ADC_SetOffset+0x44>)
 800128a:	4013      	ands	r3, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	4313      	orrs	r3, r2
 8001298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	03fff000 	.word	0x03fff000

080012b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3360      	adds	r3, #96	; 0x60
 80012be:	461a      	mov	r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3360      	adds	r3, #96	; 0x60
 80012ec:	461a      	mov	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001312:	b480      	push	{r7}
 8001314:	b087      	sub	sp, #28
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3330      	adds	r3, #48	; 0x30
 8001322:	461a      	mov	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	4413      	add	r3, r2
 8001330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	211f      	movs	r1, #31
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	401a      	ands	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0e9b      	lsrs	r3, r3, #26
 800134a:	f003 011f 	and.w	r1, r3, #31
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	431a      	orrs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800135e:	bf00      	nop
 8001360:	371c      	adds	r7, #28
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800136a:	b480      	push	{r7}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3314      	adds	r3, #20
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	0e5b      	lsrs	r3, r3, #25
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	0d1b      	lsrs	r3, r3, #20
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2107      	movs	r1, #7
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	0d1b      	lsrs	r3, r3, #20
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	431a      	orrs	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b4:	bf00      	nop
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0318 	and.w	r3, r3, #24
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e4:	40d9      	lsrs	r1, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	400b      	ands	r3, r1
 80013ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	0007ffff 	.word	0x0007ffff

08001408 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6093      	str	r3, [r2, #8]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800143c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001440:	d101      	bne.n	8001446 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001464:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001490:	d101      	bne.n	8001496 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <LL_ADC_IsEnabled+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_IsEnabled+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b08      	cmp	r3, #8
 8001502:	d101      	bne.n	8001508 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e134      	b.n	800179c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fc05 	bl	8000d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff67 	bl	800142c <LL_ADC_IsDeepPowerDownEnabled>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff4d 	bl	8001408 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff82 	bl	800147c <LL_ADC_IsInternalRegulatorEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d113      	bne.n	80015a6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff66 	bl	8001454 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001588:	4b86      	ldr	r3, [pc, #536]	; (80017a4 <HAL_ADC_Init+0x28c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	4a86      	ldr	r2, [pc, #536]	; (80017a8 <HAL_ADC_Init+0x290>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001598:	e002      	b.n	80015a0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3b01      	subs	r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff66 	bl	800147c <LL_ADC_IsInternalRegulatorEnabled>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10d      	bne.n	80015d2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff77 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 80015dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 80cf 	bne.w	800178a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 80cb 	bne.w	800178a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff4b 	bl	80014a4 <LL_ADC_IsEnabled>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d115      	bne.n	8001640 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001614:	4865      	ldr	r0, [pc, #404]	; (80017ac <HAL_ADC_Init+0x294>)
 8001616:	f7ff ff45 	bl	80014a4 <LL_ADC_IsEnabled>
 800161a:	4604      	mov	r4, r0
 800161c:	4864      	ldr	r0, [pc, #400]	; (80017b0 <HAL_ADC_Init+0x298>)
 800161e:	f7ff ff41 	bl	80014a4 <LL_ADC_IsEnabled>
 8001622:	4603      	mov	r3, r0
 8001624:	431c      	orrs	r4, r3
 8001626:	4863      	ldr	r0, [pc, #396]	; (80017b4 <HAL_ADC_Init+0x29c>)
 8001628:	f7ff ff3c 	bl	80014a4 <LL_ADC_IsEnabled>
 800162c:	4603      	mov	r3, r0
 800162e:	4323      	orrs	r3, r4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4619      	mov	r1, r3
 800163a:	485f      	ldr	r0, [pc, #380]	; (80017b8 <HAL_ADC_Init+0x2a0>)
 800163c:	f7ff fde0 	bl	8001200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7e5b      	ldrb	r3, [r3, #25]
 8001644:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001650:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001656:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	3b01      	subs	r3, #1
 8001674:	045b      	lsls	r3, r3, #17
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	2b00      	cmp	r3, #0
 8001682:	d009      	beq.n	8001698 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_ADC_Init+0x2a4>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff0a 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 80016b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff17 	bl	80014f0 <LL_ADC_INJ_IsConversionOngoing>
 80016c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d13d      	bne.n	8001746 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d13a      	bne.n	8001746 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016dc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ec:	f023 0302 	bic.w	r3, r3, #2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	69b9      	ldr	r1, [r7, #24]
 80016f6:	430b      	orrs	r3, r1
 80016f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001700:	2b01      	cmp	r3, #1
 8001702:	d118      	bne.n	8001736 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800171a:	4311      	orrs	r1, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001720:	4311      	orrs	r1, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001726:	430a      	orrs	r2, r1
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	e007      	b.n	8001746 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d10c      	bne.n	8001768 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f023 010f 	bic.w	r1, r3, #15
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
 8001766:	e007      	b.n	8001778 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 020f 	bic.w	r2, r2, #15
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	f023 0303 	bic.w	r3, r3, #3
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
 8001788:	e007      	b.n	800179a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	f043 0210 	orr.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800179a:	7ffb      	ldrb	r3, [r7, #31]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3724      	adds	r7, #36	; 0x24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	053e2d63 	.word	0x053e2d63
 80017ac:	50040000 	.word	0x50040000
 80017b0:	50040100 	.word	0x50040100
 80017b4:	50040200 	.word	0x50040200
 80017b8:	50040300 	.word	0x50040300
 80017bc:	fff0c007 	.word	0xfff0c007

080017c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0b6      	sub	sp, #216	; 0xd8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x22>
 80017de:	2302      	movs	r3, #2
 80017e0:	e3c6      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x7b0>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fe6b 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 83a7 	bne.w	8001f4a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d824      	bhi.n	800184e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	3b02      	subs	r3, #2
 800180a:	2b03      	cmp	r3, #3
 800180c:	d81b      	bhi.n	8001846 <HAL_ADC_ConfigChannel+0x86>
 800180e:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <HAL_ADC_ConfigChannel+0x54>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	08001825 	.word	0x08001825
 8001818:	0800182d 	.word	0x0800182d
 800181c:	08001835 	.word	0x08001835
 8001820:	0800183d 	.word	0x0800183d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	220c      	movs	r2, #12
 8001828:	605a      	str	r2, [r3, #4]
          break;
 800182a:	e011      	b.n	8001850 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2212      	movs	r2, #18
 8001830:	605a      	str	r2, [r3, #4]
          break;
 8001832:	e00d      	b.n	8001850 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2218      	movs	r2, #24
 8001838:	605a      	str	r2, [r3, #4]
          break;
 800183a:	e009      	b.n	8001850 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001842:	605a      	str	r2, [r3, #4]
          break;
 8001844:	e004      	b.n	8001850 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2206      	movs	r2, #6
 800184a:	605a      	str	r2, [r3, #4]
          break;
 800184c:	e000      	b.n	8001850 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800184e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	f7ff fd58 	bl	8001312 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fe2f 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 800186c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fe3b 	bl	80014f0 <LL_ADC_INJ_IsConversionOngoing>
 800187a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800187e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 81a6 	bne.w	8001bd4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800188c:	2b00      	cmp	r3, #0
 800188e:	f040 81a1 	bne.w	8001bd4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	461a      	mov	r2, r3
 80018a0:	f7ff fd63 	bl	800136a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d00a      	beq.n	80018dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018d6:	f7ff fcc7 	bl	8001268 <LL_ADC_SetOffset>
 80018da:	e17b      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fce4 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x148>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fcd9 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	f003 021f 	and.w	r2, r3, #31
 8001906:	e01e      	b.n	8001946 <HAL_ADC_ConfigChannel+0x186>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fcce 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800192a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800192e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001936:	2320      	movs	r3, #32
 8001938:	e004      	b.n	8001944 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800193a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_ADC_ConfigChannel+0x19e>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	e018      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1d0>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800197a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001982:	2320      	movs	r3, #32
 8001984:	e004      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001990:	429a      	cmp	r2, r3
 8001992:	d106      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fc9d 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fc81 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x20e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fc76 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	0e9b      	lsrs	r3, r3, #26
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	e01e      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x24c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fc6b 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80019fc:	2320      	movs	r3, #32
 80019fe:	e004      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x264>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	e018      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x296>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	e004      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d106      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fc3a 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc1e 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x2d4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2102      	movs	r1, #2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fc13 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	f003 021f 	and.w	r2, r3, #31
 8001a92:	e01e      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x312>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc08 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e004      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x32a>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0e9b      	lsrs	r3, r3, #26
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	e016      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x358>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	e004      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d106      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2102      	movs	r1, #2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fbd9 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2103      	movs	r1, #3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fbbd 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x396>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2103      	movs	r1, #3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fbb2 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	0e9b      	lsrs	r3, r3, #26
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	e017      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x3c6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2103      	movs	r1, #3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fba7 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	e003      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d105      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x3de>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0e9b      	lsrs	r3, r3, #26
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	e011      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x402>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d106      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2103      	movs	r1, #3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fb84 	bl	80012dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc63 	bl	80014a4 <LL_ADC_IsEnabled>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 813f 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff fbe4 	bl	80013c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a8e      	ldr	r2, [pc, #568]	; (8001e38 <HAL_ADC_ConfigChannel+0x678>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	f040 8130 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10b      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x46c>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0e9b      	lsrs	r3, r3, #26
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	bf94      	ite	ls
 8001c24:	2301      	movls	r3, #1
 8001c26:	2300      	movhi	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e019      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x4a0>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e003      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	bf94      	ite	ls
 8001c5a:	2301      	movls	r3, #1
 8001c5c:	2300      	movhi	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d079      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x4c0>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	069b      	lsls	r3, r3, #26
 8001c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c7e:	e015      	b.n	8001cac <HAL_ADC_ConfigChannel+0x4ec>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c90:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	069b      	lsls	r3, r3, #26
 8001ca8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x50c>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	e017      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x53c>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	e003      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	ea42 0103 	orr.w	r1, r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x562>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	051b      	lsls	r3, r3, #20
 8001d20:	e018      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x594>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	e003      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d54:	430b      	orrs	r3, r1
 8001d56:	e080      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x5b4>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	069b      	lsls	r3, r3, #26
 8001d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d72:	e015      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x5e0>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	e003      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	069b      	lsls	r3, r3, #26
 8001d9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x600>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0e9b      	lsrs	r3, r3, #26
 8001db2:	3301      	adds	r3, #1
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	e017      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x630>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	61fb      	str	r3, [r7, #28]
  return result;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001dd8:	2320      	movs	r3, #32
 8001dda:	e003      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	3301      	adds	r3, #1
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	ea42 0103 	orr.w	r1, r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x65c>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	3301      	adds	r3, #1
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	3b1e      	subs	r3, #30
 8001e14:	051b      	lsls	r3, r3, #20
 8001e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	e01d      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x698>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	613b      	str	r3, [r7, #16]
  return result;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d103      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e005      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x684>
 8001e38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f003 021f 	and.w	r2, r3, #31
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b1e      	subs	r3, #30
 8001e52:	051b      	lsls	r3, r3, #20
 8001e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	6892      	ldr	r2, [r2, #8]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7ff fa83 	bl	800136a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d079      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e70:	4842      	ldr	r0, [pc, #264]	; (8001f7c <HAL_ADC_ConfigChannel+0x7bc>)
 8001e72:	f7ff f9eb 	bl	800124c <LL_ADC_GetCommonPathInternalCh>
 8001e76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d12b      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d125      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3b      	ldr	r2, [pc, #236]	; (8001f84 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x6e4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a3a      	ldr	r2, [pc, #232]	; (8001f88 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d15c      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eac:	4619      	mov	r1, r3
 8001eae:	4833      	ldr	r0, [pc, #204]	; (8001f7c <HAL_ADC_ConfigChannel+0x7bc>)
 8001eb0:	f7ff f9b9 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001eb4:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_ADC_ConfigChannel+0x7cc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	4a35      	ldr	r2, [pc, #212]	; (8001f90 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	099a      	lsrs	r2, r3, #6
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ecc:	e002      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eda:	e040      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d118      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x758>
 8001ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d112      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x746>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12d      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481a      	ldr	r0, [pc, #104]	; (8001f7c <HAL_ADC_ConfigChannel+0x7bc>)
 8001f12:	f7ff f988 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f16:	e024      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d120      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11a      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d115      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f40:	4619      	mov	r1, r3
 8001f42:	480e      	ldr	r0, [pc, #56]	; (8001f7c <HAL_ADC_ConfigChannel+0x7bc>)
 8001f44:	f7ff f96f 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
 8001f48:	e00c      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f043 0220 	orr.w	r2, r3, #32
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f5e:	bf00      	nop
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f62:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f6c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	37d8      	adds	r7, #216	; 0xd8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	80080000 	.word	0x80080000
 8001f7c:	50040300 	.word	0x50040300
 8001f80:	c7520000 	.word	0xc7520000
 8001f84:	50040000 	.word	0x50040000
 8001f88:	50040200 	.word	0x50040200
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	053e2d63 	.word	0x053e2d63
 8001f94:	cb840000 	.word	0xcb840000
 8001f98:	80000001 	.word	0x80000001

08001f9c <LL_ADC_IsEnabled>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <LL_ADC_IsEnabled+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_ADC_IsEnabled+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b09f      	sub	sp, #124	; 0x7c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002002:	2302      	movs	r3, #2
 8002004:	e08f      	b.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a47      	ldr	r2, [pc, #284]	; (8002130 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d102      	bne.n	800201e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002018:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	e001      	b.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e072      	b.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffbd 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 8002048:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ffb7 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d154      	bne.n	8002104 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800205a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205c:	2b00      	cmp	r3, #0
 800205e:	d151      	bne.n	8002104 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002062:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02c      	beq.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800206c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800207e:	035b      	lsls	r3, r3, #13
 8002080:	430b      	orrs	r3, r1
 8002082:	431a      	orrs	r2, r3
 8002084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002086:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002088:	4829      	ldr	r0, [pc, #164]	; (8002130 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800208a:	f7ff ff87 	bl	8001f9c <LL_ADC_IsEnabled>
 800208e:	4604      	mov	r4, r0
 8002090:	4828      	ldr	r0, [pc, #160]	; (8002134 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002092:	f7ff ff83 	bl	8001f9c <LL_ADC_IsEnabled>
 8002096:	4603      	mov	r3, r0
 8002098:	431c      	orrs	r4, r3
 800209a:	4828      	ldr	r0, [pc, #160]	; (800213c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800209c:	f7ff ff7e 	bl	8001f9c <LL_ADC_IsEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4323      	orrs	r3, r4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d137      	bne.n	8002118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020b0:	f023 030f 	bic.w	r3, r3, #15
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	6811      	ldr	r1, [r2, #0]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	6892      	ldr	r2, [r2, #8]
 80020bc:	430a      	orrs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020c4:	e028      	b.n	8002118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d2:	4817      	ldr	r0, [pc, #92]	; (8002130 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80020d4:	f7ff ff62 	bl	8001f9c <LL_ADC_IsEnabled>
 80020d8:	4604      	mov	r4, r0
 80020da:	4816      	ldr	r0, [pc, #88]	; (8002134 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80020dc:	f7ff ff5e 	bl	8001f9c <LL_ADC_IsEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	431c      	orrs	r4, r3
 80020e4:	4815      	ldr	r0, [pc, #84]	; (800213c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020e6:	f7ff ff59 	bl	8001f9c <LL_ADC_IsEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4323      	orrs	r3, r4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d112      	bne.n	8002118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020fa:	f023 030f 	bic.w	r3, r3, #15
 80020fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002100:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002102:	e009      	b.n	8002118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002116:	e000      	b.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002118:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002122:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002126:	4618      	mov	r0, r3
 8002128:	377c      	adds	r7, #124	; 0x7c
 800212a:	46bd      	mov	sp, r7
 800212c:	bd90      	pop	{r4, r7, pc}
 800212e:	bf00      	nop
 8002130:	50040000 	.word	0x50040000
 8002134:	50040100 	.word	0x50040100
 8002138:	50040300 	.word	0x50040300
 800213c:	50040200 	.word	0x50040200

08002140 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0ed      	b.n	800232e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fe34 	bl	8000dcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0202 	bic.w	r2, r2, #2
 8002172:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002174:	f7ff f816 	bl	80011a4 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800217a:	e012      	b.n	80021a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800217c:	f7ff f812 	bl	80011a4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b0a      	cmp	r3, #10
 8002188:	d90b      	bls.n	80021a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0c5      	b.n	800232e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e5      	bne.n	800217c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c0:	f7fe fff0 	bl	80011a4 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021c6:	e012      	b.n	80021ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021c8:	f7fe ffec 	bl	80011a4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b0a      	cmp	r3, #10
 80021d4:	d90b      	bls.n	80021ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2205      	movs	r2, #5
 80021e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e09f      	b.n	800232e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0e5      	beq.n	80021c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d108      	bne.n	8002216 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e007      	b.n	8002226 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7e5b      	ldrb	r3, [r3, #25]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e007      	b.n	8002250 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7e9b      	ldrb	r3, [r3, #26]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d108      	bne.n	800226a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e007      	b.n	800227a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0220 	bic.w	r2, r2, #32
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7edb      	ldrb	r3, [r3, #27]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d108      	bne.n	8002294 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0210 	bic.w	r2, r2, #16
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e007      	b.n	80022a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0210 	orr.w	r2, r2, #16
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7f1b      	ldrb	r3, [r3, #28]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d108      	bne.n	80022be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0208 	orr.w	r2, r2, #8
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e007      	b.n	80022ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0208 	bic.w	r2, r2, #8
 80022cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7f5b      	ldrb	r3, [r3, #29]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d108      	bne.n	80022e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0204 	orr.w	r2, r2, #4
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e007      	b.n	80022f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0204 	bic.w	r2, r2, #4
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	ea42 0103 	orr.w	r1, r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002336:	b480      	push	{r7}
 8002338:	b087      	sub	sp, #28
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d003      	beq.n	800235c <HAL_CAN_ConfigFilter+0x26>
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b02      	cmp	r3, #2
 8002358:	f040 80aa 	bne.w	80024b0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2201      	movs	r2, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43db      	mvns	r3, r3
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d123      	bne.n	80023de <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	43db      	mvns	r3, r3
 80023a0:	401a      	ands	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3248      	adds	r2, #72	; 0x48
 80023be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023d4:	6979      	ldr	r1, [r7, #20]
 80023d6:	3348      	adds	r3, #72	; 0x48
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d122      	bne.n	800242c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002406:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3248      	adds	r2, #72	; 0x48
 800240c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002420:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002422:	6979      	ldr	r1, [r7, #20]
 8002424:	3348      	adds	r3, #72	; 0x48
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002446:	e007      	b.n	8002458 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002472:	e007      	b.n	8002484 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	431a      	orrs	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a2:	f023 0201 	bic.w	r2, r3, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e006      	b.n	80024be <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d12e      	bne.n	800253c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024f6:	f7fe fe55 	bl	80011a4 <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024fc:	e012      	b.n	8002524 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024fe:	f7fe fe51 	bl	80011a4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b0a      	cmp	r3, #10
 800250a:	d90b      	bls.n	8002524 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e012      	b.n	800254a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e5      	bne.n	80024fe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e006      	b.n	800254a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002566:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d003      	beq.n	8002576 <HAL_CAN_GetRxMessage+0x24>
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	2b02      	cmp	r3, #2
 8002572:	f040 80f3 	bne.w	800275c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10e      	bne.n	800259a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0e7      	b.n	800276a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d8      	b.n	800276a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	331b      	adds	r3, #27
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4413      	add	r3, r2
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0204 	and.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	331b      	adds	r3, #27
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0d5b      	lsrs	r3, r3, #21
 80025e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	331b      	adds	r3, #27
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	4413      	add	r3, r2
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	08db      	lsrs	r3, r3, #3
 8002600:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	331b      	adds	r3, #27
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0202 	and.w	r2, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	331b      	adds	r3, #27
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	3304      	adds	r3, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 020f 	and.w	r2, r3, #15
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	331b      	adds	r3, #27
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	4413      	add	r3, r2
 8002642:	3304      	adds	r3, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b2da      	uxtb	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	331b      	adds	r3, #27
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	b29a      	uxth	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	4413      	add	r3, r2
 8002670:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4413      	add	r3, r2
 8002686:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0a1a      	lsrs	r2, r3, #8
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0c1a      	lsrs	r2, r3, #16
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	3302      	adds	r3, #2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e1a      	lsrs	r2, r3, #24
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	3303      	adds	r3, #3
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	3304      	adds	r3, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0a1a      	lsrs	r2, r3, #8
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	3305      	adds	r3, #5
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	4413      	add	r3, r2
 8002706:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0c1a      	lsrs	r2, r3, #16
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	3306      	adds	r3, #6
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	4413      	add	r3, r2
 8002720:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e1a      	lsrs	r2, r3, #24
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	3307      	adds	r3, #7
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0220 	orr.w	r2, r2, #32
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	e007      	b.n	8002758 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0220 	orr.w	r2, r2, #32
 8002756:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e006      	b.n	800276a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002786:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d002      	beq.n	8002794 <HAL_CAN_ActivateNotification+0x1e>
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d109      	bne.n	80027a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6959      	ldr	r1, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e006      	b.n	80027b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b08a      	sub	sp, #40	; 0x28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d07c      	beq.n	8002902 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d023      	beq.n	800285a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f97d 	bl	8002b24 <HAL_CAN_TxMailbox0CompleteCallback>
 800282a:	e016      	b.n	800285a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e00c      	b.n	800285a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d004      	beq.n	8002854 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e002      	b.n	800285a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f983 	bl	8002b60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d024      	beq.n	80028ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f95d 	bl	8002b38 <HAL_CAN_TxMailbox1CompleteCallback>
 800287e:	e016      	b.n	80028ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	e00c      	b.n	80028ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	e002      	b.n	80028ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f963 	bl	8002b74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d024      	beq.n	8002902 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f93d 	bl	8002b4c <HAL_CAN_TxMailbox2CompleteCallback>
 80028d2:	e016      	b.n	8002902 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	e00c      	b.n	8002902 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	e002      	b.n	8002902 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f943 	bl	8002b88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2210      	movs	r2, #16
 8002924:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2208      	movs	r2, #8
 8002940:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f934 	bl	8002bb0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f91b 	bl	8002b9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00c      	beq.n	800298a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002980:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2210      	movs	r2, #16
 8002988:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2208      	movs	r2, #8
 80029a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f916 	bl	8002bd8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f8fd 	bl	8002bc4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2210      	movs	r2, #16
 80029e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f900 	bl	8002bec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2208      	movs	r2, #8
 8002a06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8f9 	bl	8002c00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d075      	beq.n	8002b04 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d06c      	beq.n	8002afc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03d      	beq.n	8002afc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d038      	beq.n	8002afc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a90:	2b30      	cmp	r3, #48	; 0x30
 8002a92:	d017      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x302>
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	d804      	bhi.n	8002aa2 <HAL_CAN_IRQHandler+0x2e0>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d009      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x2ee>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d00c      	beq.n	8002aba <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002aa0:	e024      	b.n	8002aec <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002aa2:	2b50      	cmp	r3, #80	; 0x50
 8002aa4:	d018      	beq.n	8002ad8 <HAL_CAN_IRQHandler+0x316>
 8002aa6:	2b60      	cmp	r3, #96	; 0x60
 8002aa8:	d01b      	beq.n	8002ae2 <HAL_CAN_IRQHandler+0x320>
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d00f      	beq.n	8002ace <HAL_CAN_IRQHandler+0x30c>
            break;
 8002aae:	e01d      	b.n	8002aec <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab8:	e018      	b.n	8002aec <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f043 0310 	orr.w	r3, r3, #16
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ac2:	e013      	b.n	8002aec <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	f043 0320 	orr.w	r3, r3, #32
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002acc:	e00e      	b.n	8002aec <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ad6:	e009      	b.n	8002aec <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ae0:	e004      	b.n	8002aec <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002afa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2204      	movs	r2, #4
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f87c 	bl	8002c14 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	; (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff4c 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002daa:	f7ff ff61 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002dae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	6978      	ldr	r0, [r7, #20]
 8002db6:	f7ff ffb1 	bl	8002d1c <NVIC_EncodePriority>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff80 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff54 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfa:	e17f      	b.n	80030fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8171 	beq.w	80030f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d00b      	beq.n	8002e34 <HAL_GPIO_Init+0x48>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d007      	beq.n	8002e34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e28:	2b11      	cmp	r3, #17
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b12      	cmp	r3, #18
 8002e32:	d130      	bne.n	8002e96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0201 	and.w	r2, r3, #1
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d118      	bne.n	8002ed4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	08db      	lsrs	r3, r3, #3
 8002ebe:	f003 0201 	and.w	r2, r3, #1
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x128>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b12      	cmp	r3, #18
 8002f12:	d123      	bne.n	8002f5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	6939      	ldr	r1, [r7, #16]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80ac 	beq.w	80030f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <HAL_GPIO_Init+0x32c>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_GPIO_Init+0x32c>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8002faa:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_GPIO_Init+0x32c>)
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fb6:	4a59      	ldr	r2, [pc, #356]	; (800311c <HAL_GPIO_Init+0x330>)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fe0:	d025      	beq.n	800302e <HAL_GPIO_Init+0x242>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4e      	ldr	r2, [pc, #312]	; (8003120 <HAL_GPIO_Init+0x334>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01f      	beq.n	800302a <HAL_GPIO_Init+0x23e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4d      	ldr	r2, [pc, #308]	; (8003124 <HAL_GPIO_Init+0x338>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d019      	beq.n	8003026 <HAL_GPIO_Init+0x23a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4c      	ldr	r2, [pc, #304]	; (8003128 <HAL_GPIO_Init+0x33c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_GPIO_Init+0x236>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_GPIO_Init+0x340>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00d      	beq.n	800301e <HAL_GPIO_Init+0x232>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4a      	ldr	r2, [pc, #296]	; (8003130 <HAL_GPIO_Init+0x344>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <HAL_GPIO_Init+0x22e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a49      	ldr	r2, [pc, #292]	; (8003134 <HAL_GPIO_Init+0x348>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_GPIO_Init+0x22a>
 8003012:	2306      	movs	r3, #6
 8003014:	e00c      	b.n	8003030 <HAL_GPIO_Init+0x244>
 8003016:	2307      	movs	r3, #7
 8003018:	e00a      	b.n	8003030 <HAL_GPIO_Init+0x244>
 800301a:	2305      	movs	r3, #5
 800301c:	e008      	b.n	8003030 <HAL_GPIO_Init+0x244>
 800301e:	2304      	movs	r3, #4
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x244>
 8003022:	2303      	movs	r3, #3
 8003024:	e004      	b.n	8003030 <HAL_GPIO_Init+0x244>
 8003026:	2302      	movs	r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x244>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x244>
 800302e:	2300      	movs	r3, #0
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	f002 0203 	and.w	r2, r2, #3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4093      	lsls	r3, r2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003040:	4936      	ldr	r1, [pc, #216]	; (800311c <HAL_GPIO_Init+0x330>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <HAL_GPIO_Init+0x34c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003072:	4a31      	ldr	r2, [pc, #196]	; (8003138 <HAL_GPIO_Init+0x34c>)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003078:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_GPIO_Init+0x34c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <HAL_GPIO_Init+0x34c>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_GPIO_Init+0x34c>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_GPIO_Init+0x34c>)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_GPIO_Init+0x34c>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_GPIO_Init+0x34c>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	f47f ae78 	bne.w	8002dfc <HAL_GPIO_Init+0x10>
  }
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40021000 	.word	0x40021000
 800311c:	40010000 	.word	0x40010000
 8003120:	48000400 	.word	0x48000400
 8003124:	48000800 	.word	0x48000800
 8003128:	48000c00 	.word	0x48000c00
 800312c:	48001000 	.word	0x48001000
 8003130:	48001400 	.word	0x48001400
 8003134:	48001800 	.word	0x48001800
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
 8003148:	4613      	mov	r3, r2
 800314a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800314c:	787b      	ldrb	r3, [r7, #1]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003158:	e002      	b.n	8003160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4013      	ands	r3, r2
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	43d9      	mvns	r1, r3
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	400b      	ands	r3, r1
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e081      	b.n	80032b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fe4c 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003200:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e006      	b.n	8003228 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003226:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d104      	bne.n	800323a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003238:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800325c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	ea42 0103 	orr.w	r1, r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	021a      	lsls	r2, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69d9      	ldr	r1, [r3, #28]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1a      	ldr	r2, [r3, #32]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	461a      	mov	r2, r3
 80032cc:	460b      	mov	r3, r1
 80032ce:	817b      	strh	r3, [r7, #10]
 80032d0:	4613      	mov	r3, r2
 80032d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	f040 80da 	bne.w	8003496 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_I2C_Master_Transmit+0x30>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e0d3      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032f8:	f7fd ff54 	bl	80011a4 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2319      	movs	r3, #25
 8003304:	2201      	movs	r2, #1
 8003306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8f0 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0be      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2221      	movs	r2, #33	; 0x21
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2210      	movs	r2, #16
 8003326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	893a      	ldrh	r2, [r7, #8]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2bff      	cmp	r3, #255	; 0xff
 800334a:	d90e      	bls.n	800336a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	22ff      	movs	r2, #255	; 0xff
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	b2da      	uxtb	r2, r3
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	4b51      	ldr	r3, [pc, #324]	; (80034a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f9e6 	bl	8003734 <I2C_TransferConfig>
 8003368:	e06c      	b.n	8003444 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f9d5 	bl	8003734 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800338a:	e05b      	b.n	8003444 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	6a39      	ldr	r1, [r7, #32]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f8ed 	bl	8003570 <I2C_WaitOnTXISFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e07b      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d034      	beq.n	8003444 <HAL_I2C_Master_Transmit+0x184>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d130      	bne.n	8003444 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f87f 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e04d      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2bff      	cmp	r3, #255	; 0xff
 8003404:	d90e      	bls.n	8003424 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	b2da      	uxtb	r2, r3
 8003412:	8979      	ldrh	r1, [r7, #10]
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f989 	bl	8003734 <I2C_TransferConfig>
 8003422:	e00f      	b.n	8003444 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003432:	b2da      	uxtb	r2, r3
 8003434:	8979      	ldrh	r1, [r7, #10]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f978 	bl	8003734 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d19e      	bne.n	800338c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6a39      	ldr	r1, [r7, #32]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8cc 	bl	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e01a      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2220      	movs	r2, #32
 8003468:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003476:	400b      	ands	r3, r1
 8003478:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	80002000 	.word	0x80002000
 80034a4:	fe00e800 	.word	0xfe00e800

080034a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d103      	bne.n	80034c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d007      	beq.n	80034e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	619a      	str	r2, [r3, #24]
  }
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	e022      	b.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d01e      	beq.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fd fe4b 	bl	80011a4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d113      	bne.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e00f      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	429a      	cmp	r2, r3
 8003564:	d0cd      	beq.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800357c:	e02c      	b.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f870 	bl	8003668 <I2C_IsAcknowledgeFailed>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e02a      	b.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d01e      	beq.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7fd fe03 	bl	80011a4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d113      	bne.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e007      	b.n	80035e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d1cb      	bne.n	800357e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035fc:	e028      	b.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f830 	bl	8003668 <I2C_IsAcknowledgeFailed>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e026      	b.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7fd fdc7 	bl	80011a4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d1cf      	bne.n	80035fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b10      	cmp	r3, #16
 8003680:	d151      	bne.n	8003726 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003682:	e022      	b.n	80036ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d01e      	beq.n	80036ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fd fd8a 	bl	80011a4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <I2C_IsAcknowledgeFailed+0x3a>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d113      	bne.n	80036ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e02e      	b.n	8003728 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d1d5      	bne.n	8003684 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2220      	movs	r2, #32
 80036e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff fedd 	bl	80034a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <I2C_IsAcknowledgeFailed+0xc8>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	fe00e800 	.word	0xfe00e800

08003734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	817b      	strh	r3, [r7, #10]
 8003742:	4613      	mov	r3, r2
 8003744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	0d5b      	lsrs	r3, r3, #21
 8003750:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <I2C_TransferConfig+0x58>)
 8003756:	430b      	orrs	r3, r1
 8003758:	43db      	mvns	r3, r3
 800375a:	ea02 0103 	and.w	r1, r2, r3
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003764:	7a7b      	ldrb	r3, [r7, #9]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	03ff63ff 	.word	0x03ff63ff

08003790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d138      	bne.n	8003818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e032      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	d139      	bne.n	80038b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003846:	2302      	movs	r3, #2
 8003848:	e033      	b.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2224      	movs	r2, #36	; 0x24
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40007000 	.word	0x40007000

080038dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ea:	d130      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ec:	4b23      	ldr	r3, [pc, #140]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f8:	d038      	beq.n	800396c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003902:	4a1e      	ldr	r2, [pc, #120]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003908:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2232      	movs	r2, #50	; 0x32
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	0c9b      	lsrs	r3, r3, #18
 800391c:	3301      	adds	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003920:	e002      	b.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3b01      	subs	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003934:	d102      	bne.n	800393c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f2      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003948:	d110      	bne.n	800396c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e00f      	b.n	800396e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d007      	beq.n	800396c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003964:	4a05      	ldr	r2, [pc, #20]	; (800397c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40007000 	.word	0x40007000
 8003980:	20000000 	.word	0x20000000
 8003984:	431bde83 	.word	0x431bde83

08003988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e3d4      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399a:	4ba1      	ldr	r3, [pc, #644]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a4:	4b9e      	ldr	r3, [pc, #632]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80e4 	beq.w	8003b84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_RCC_OscConfig+0x4a>
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	f040 808b 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 8087 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039d2:	4b93      	ldr	r3, [pc, #588]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e3ac      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <HAL_RCC_OscConfig+0x7c>
 80039fa:	4b89      	ldr	r3, [pc, #548]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a02:	e005      	b.n	8003a10 <HAL_RCC_OscConfig+0x88>
 8003a04:	4b86      	ldr	r3, [pc, #536]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d223      	bcs.n	8003a5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fd71 	bl	8004500 <RCC_SetFlashLatencyFromMSIRange>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e38d      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a28:	4b7d      	ldr	r3, [pc, #500]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a7c      	ldr	r2, [pc, #496]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a2e:	f043 0308 	orr.w	r3, r3, #8
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b7a      	ldr	r3, [pc, #488]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4977      	ldr	r1, [pc, #476]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a46:	4b76      	ldr	r3, [pc, #472]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	4972      	ldr	r1, [pc, #456]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
 8003a5a:	e025      	b.n	8003aa8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a5c:	4b70      	ldr	r3, [pc, #448]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6f      	ldr	r2, [pc, #444]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a62:	f043 0308 	orr.w	r3, r3, #8
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b6d      	ldr	r3, [pc, #436]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	496a      	ldr	r1, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a7a:	4b69      	ldr	r3, [pc, #420]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	4965      	ldr	r1, [pc, #404]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fd31 	bl	8004500 <RCC_SetFlashLatencyFromMSIRange>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e34d      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aa8:	f000 fc36 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8003aac:	4601      	mov	r1, r0
 8003aae:	4b5c      	ldr	r3, [pc, #368]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	4a5a      	ldr	r2, [pc, #360]	; (8003c24 <HAL_RCC_OscConfig+0x29c>)
 8003aba:	5cd3      	ldrb	r3, [r2, r3]
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8003ac4:	4a58      	ldr	r2, [pc, #352]	; (8003c28 <HAL_RCC_OscConfig+0x2a0>)
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ac8:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_RCC_OscConfig+0x2a4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fa4f 	bl	8000f70 <HAL_InitTick>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d052      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	e331      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d032      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ae8:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a4c      	ldr	r2, [pc, #304]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fb56 	bl	80011a4 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003afc:	f7fd fb52 	bl	80011a4 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e31a      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b0e:	4b44      	ldr	r3, [pc, #272]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a40      	ldr	r2, [pc, #256]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b20:	f043 0308 	orr.w	r3, r3, #8
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b3e      	ldr	r3, [pc, #248]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	493b      	ldr	r1, [pc, #236]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b38:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	4936      	ldr	r1, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
 8003b4c:	e01a      	b.n	8003b84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a33      	ldr	r2, [pc, #204]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fb23 	bl	80011a4 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b62:	f7fd fb1f 	bl	80011a4 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e2e7      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x1da>
 8003b80:	e000      	b.n	8003b84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d074      	beq.n	8003c7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d005      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x21a>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	d10e      	bne.n	8003bba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d10b      	bne.n	8003bba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d064      	beq.n	8003c78 <HAL_RCC_OscConfig+0x2f0>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d160      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e2c4      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x24a>
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e01d      	b.n	8003c0e <HAL_RCC_OscConfig+0x286>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x26e>
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCC_OscConfig+0x286>
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a06      	ldr	r2, [pc, #24]	; (8003c20 <HAL_RCC_OscConfig+0x298>)
 8003c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fd fac5 	bl	80011a4 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1c:	e011      	b.n	8003c42 <HAL_RCC_OscConfig+0x2ba>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	0800895c 	.word	0x0800895c
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fd fab8 	bl	80011a4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e280      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c42:	4baf      	ldr	r3, [pc, #700]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2a8>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd faa8 	bl	80011a4 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fd faa4 	bl	80011a4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e26c      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6a:	4ba5      	ldr	r3, [pc, #660]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2d0>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d060      	beq.n	8003d48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_OscConfig+0x310>
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d119      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d116      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c98:	4b99      	ldr	r3, [pc, #612]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x328>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e249      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb0:	4b93      	ldr	r3, [pc, #588]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	4990      	ldr	r1, [pc, #576]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc4:	e040      	b.n	8003d48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d023      	beq.n	8003d16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cce:	4b8c      	ldr	r3, [pc, #560]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a8b      	ldr	r2, [pc, #556]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7fd fa63 	bl	80011a4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce2:	f7fd fa5f 	bl	80011a4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e227      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf4:	4b82      	ldr	r3, [pc, #520]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d00:	4b7f      	ldr	r3, [pc, #508]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	497c      	ldr	r1, [pc, #496]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	e018      	b.n	8003d48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d16:	4b7a      	ldr	r3, [pc, #488]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a79      	ldr	r2, [pc, #484]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd fa3f 	bl	80011a4 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fd fa3b 	bl	80011a4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e203      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d3c:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d03c      	beq.n	8003dce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5c:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d62:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fa1a 	bl	80011a4 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fd fa16 	bl	80011a4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1de      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d86:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ef      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3ec>
 8003d94:	e01b      	b.n	8003dce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d96:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	4a58      	ldr	r2, [pc, #352]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fd f9fd 	bl	80011a4 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dae:	f7fd f9f9 	bl	80011a4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1c1      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc0:	4b4f      	ldr	r3, [pc, #316]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ef      	bne.n	8003dae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80a6 	beq.w	8003f28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10d      	bne.n	8003e08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	4b44      	ldr	r3, [pc, #272]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	4a43      	ldr	r2, [pc, #268]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6593      	str	r3, [r2, #88]	; 0x58
 8003df8:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e08:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d118      	bne.n	8003e46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a3a      	ldr	r2, [pc, #232]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e20:	f7fd f9c0 	bl	80011a4 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e28:	f7fd f9bc 	bl	80011a4 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e184      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3a:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <HAL_RCC_OscConfig+0x57c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d108      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4d8>
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5e:	e024      	b.n	8003eaa <HAL_RCC_OscConfig+0x522>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d110      	bne.n	8003e8a <HAL_RCC_OscConfig+0x502>
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	4a24      	ldr	r2, [pc, #144]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e88:	e00f      	b.n	8003eaa <HAL_RCC_OscConfig+0x522>
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ea2:	f023 0304 	bic.w	r3, r3, #4
 8003ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd f977 	bl	80011a4 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd f973 	bl	80011a4 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e139      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x578>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ed      	beq.n	8003eba <HAL_RCC_OscConfig+0x532>
 8003ede:	e01a      	b.n	8003f16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd f960 	bl	80011a4 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee6:	e00f      	b.n	8003f08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd f95c 	bl	80011a4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d906      	bls.n	8003f08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e122      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f08:	4b90      	ldr	r3, [pc, #576]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e8      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f16:	7ffb      	ldrb	r3, [r7, #31]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b8b      	ldr	r3, [pc, #556]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	4a8a      	ldr	r2, [pc, #552]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8108 	beq.w	8004142 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	f040 80d0 	bne.w	80040dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f3c:	4b83      	ldr	r3, [pc, #524]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d130      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d127      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d11f      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f7c:	2a07      	cmp	r2, #7
 8003f7e:	bf14      	ite	ne
 8003f80:	2201      	movne	r2, #1
 8003f82:	2200      	moveq	r2, #0
 8003f84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d113      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	3b01      	subs	r3, #1
 8003f98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	3b01      	subs	r3, #1
 8003fac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d06e      	beq.n	8004090 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d069      	beq.n	800408c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fb8:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fc4:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0b7      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fd4:	4b5d      	ldr	r3, [pc, #372]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5c      	ldr	r2, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe0:	f7fd f8e0 	bl	80011a4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd f8dc 	bl	80011a4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0a4      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffa:	4b54      	ldr	r3, [pc, #336]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004006:	4b51      	ldr	r3, [pc, #324]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	4b51      	ldr	r3, [pc, #324]	; (8004150 <HAL_RCC_OscConfig+0x7c8>)
 800400c:	4013      	ands	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004016:	3a01      	subs	r2, #1
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	4311      	orrs	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004020:	0212      	lsls	r2, r2, #8
 8004022:	4311      	orrs	r1, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004028:	0852      	lsrs	r2, r2, #1
 800402a:	3a01      	subs	r2, #1
 800402c:	0552      	lsls	r2, r2, #21
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004034:	0852      	lsrs	r2, r2, #1
 8004036:	3a01      	subs	r2, #1
 8004038:	0652      	lsls	r2, r2, #25
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004040:	0912      	lsrs	r2, r2, #4
 8004042:	0452      	lsls	r2, r2, #17
 8004044:	430a      	orrs	r2, r1
 8004046:	4941      	ldr	r1, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800404c:	4b3f      	ldr	r3, [pc, #252]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3e      	ldr	r2, [pc, #248]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004058:	4b3c      	ldr	r3, [pc, #240]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a3b      	ldr	r2, [pc, #236]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004062:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004064:	f7fd f89e 	bl	80011a4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd f89a 	bl	80011a4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e062      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407e:	4b33      	ldr	r3, [pc, #204]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408a:	e05a      	b.n	8004142 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e059      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004090:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d152      	bne.n	8004142 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a8:	4b28      	ldr	r3, [pc, #160]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a27      	ldr	r2, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b4:	f7fd f876 	bl	80011a4 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd f872 	bl	80011a4 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e03a      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x734>
 80040da:	e032      	b.n	8004142 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d02d      	beq.n	800413e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a19      	ldr	r2, [pc, #100]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a13      	ldr	r2, [pc, #76]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004100:	f023 0303 	bic.w	r3, r3, #3
 8004104:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	4a10      	ldr	r2, [pc, #64]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 800410c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004114:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fd f845 	bl	80011a4 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411e:	f7fd f841 	bl	80011a4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e009      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x7c4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f0      	bne.n	800411e <HAL_RCC_OscConfig+0x796>
 800413c:	e001      	b.n	8004142 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	f99d808c 	.word	0xf99d808c

08004154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0c8      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004168:	4b66      	ldr	r3, [pc, #408]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d910      	bls.n	8004198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004176:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 0207 	bic.w	r2, r3, #7
 800417e:	4961      	ldr	r1, [pc, #388]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0b0      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d04c      	beq.n	800423e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ac:	4b56      	ldr	r3, [pc, #344]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d121      	bne.n	80041fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e09e      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c4:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d115      	bne.n	80041fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e092      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041dc:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e086      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e07e      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041fc:	4b42      	ldr	r3, [pc, #264]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 0203 	bic.w	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	493f      	ldr	r1, [pc, #252]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420e:	f7fc ffc9 	bl	80011a4 <HAL_GetTick>
 8004212:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004214:	e00a      	b.n	800422c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004216:	f7fc ffc5 	bl	80011a4 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e066      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 020c 	and.w	r2, r3, #12
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	429a      	cmp	r2, r3
 800423c:	d1eb      	bne.n	8004216 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424a:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	492c      	ldr	r1, [pc, #176]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425c:	4b29      	ldr	r3, [pc, #164]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d210      	bcs.n	800428c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b26      	ldr	r3, [pc, #152]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 0207 	bic.w	r2, r3, #7
 8004272:	4924      	ldr	r1, [pc, #144]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_RCC_ClockConfig+0x1b0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e036      	b.n	80042fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4918      	ldr	r1, [pc, #96]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4910      	ldr	r1, [pc, #64]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ca:	f000 f825 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042ce:	4601      	mov	r1, r0
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCC_ClockConfig+0x1b4>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	fa21 f303 	lsr.w	r3, r1, r3
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x1c0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fc fe3e 	bl	8000f70 <HAL_InitTick>
 80042f4:	4603      	mov	r3, r0
 80042f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80042f8:	7afb      	ldrb	r3, [r7, #11]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40022000 	.word	0x40022000
 8004308:	40021000 	.word	0x40021000
 800430c:	0800895c 	.word	0x0800895c
 8004310:	20000000 	.word	0x20000000
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4b3d      	ldr	r3, [pc, #244]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004330:	4b3a      	ldr	r3, [pc, #232]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x34>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d121      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d11e      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800434c:	4b33      	ldr	r3, [pc, #204]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004358:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e005      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004374:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d102      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004390:	4b24      	ldr	r3, [pc, #144]	; (8004424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e004      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800439c:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 800439e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d133      	bne.n	800440e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d002      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0xa4>
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d003      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0xaa>
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043be:	617b      	str	r3, [r7, #20]
      break;
 80043c0:	e005      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043c2:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c4:	617b      	str	r3, [r7, #20]
      break;
 80043c6:	e002      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	617b      	str	r3, [r7, #20]
      break;
 80043cc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	3301      	adds	r3, #1
 80043da:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	fb02 f203 	mul.w	r2, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_GetSysClockFreq+0x104>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0e5b      	lsrs	r3, r3, #25
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	3301      	adds	r3, #1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800440e:	69bb      	ldr	r3, [r7, #24]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3724      	adds	r7, #36	; 0x24
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40021000 	.word	0x40021000
 8004420:	08008974 	.word	0x08008974
 8004424:	00f42400 	.word	0x00f42400
 8004428:	007a1200 	.word	0x007a1200

0800442c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCC_GetHCLKFreq+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000000 	.word	0x20000000

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004448:	f7ff fff0 	bl	800442c <HAL_RCC_GetHCLKFreq>
 800444c:	4601      	mov	r1, r0
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <HAL_RCC_GetPCLK1Freq+0x28>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	0800896c 	.word	0x0800896c

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004474:	f7ff ffda 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004478:	4601      	mov	r1, r0
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0adb      	lsrs	r3, r3, #11
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	0800896c 	.word	0x0800896c

0800449c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	220f      	movs	r2, #15
 80044aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0203 	and.w	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_RCC_GetClockConfig+0x5c>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	08db      	lsrs	r3, r3, #3
 80044d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <HAL_RCC_GetClockConfig+0x60>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0207 	and.w	r2, r3, #7
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	601a      	str	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40022000 	.word	0x40022000

08004500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004518:	f7ff f9d2 	bl	80038c0 <HAL_PWREx_GetVoltageRange>
 800451c:	6178      	str	r0, [r7, #20]
 800451e:	e014      	b.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	4a24      	ldr	r2, [pc, #144]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	6593      	str	r3, [r2, #88]	; 0x58
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004538:	f7ff f9c2 	bl	80038c0 <HAL_PWREx_GetVoltageRange>
 800453c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d10b      	bne.n	800456a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d919      	bls.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2ba0      	cmp	r3, #160	; 0xa0
 800455c:	d902      	bls.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800455e:	2302      	movs	r3, #2
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e013      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004564:	2301      	movs	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e010      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b80      	cmp	r3, #128	; 0x80
 800456e:	d902      	bls.n	8004576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004570:	2303      	movs	r3, #3
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e00a      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d102      	bne.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800457c:	2302      	movs	r3, #2
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e004      	b.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b70      	cmp	r3, #112	; 0x70
 8004586:	d101      	bne.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004588:	2301      	movs	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 0207 	bic.w	r2, r3, #7
 8004594:	4909      	ldr	r1, [pc, #36]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800459c:	4b07      	ldr	r3, [pc, #28]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d001      	beq.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40022000 	.word	0x40022000

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045c8:	2300      	movs	r3, #0
 80045ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045cc:	2300      	movs	r3, #0
 80045ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03f      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e4:	d01c      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80045e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ea:	d802      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80045f0:	e01f      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80045f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f6:	d003      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80045f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045fc:	d01c      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80045fe:	e018      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004600:	4b85      	ldr	r3, [pc, #532]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a84      	ldr	r2, [pc, #528]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800460c:	e015      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fab9 	bl	8004b8c <RCCEx_PLLSAI1_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800461e:	e00c      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3320      	adds	r3, #32
 8004624:	2100      	movs	r1, #0
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fba0 	bl	8004d6c <RCCEx_PLLSAI2_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	74fb      	strb	r3, [r7, #19]
      break;
 8004636:	e000      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004640:	4b75      	ldr	r3, [pc, #468]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800464e:	4972      	ldr	r1, [pc, #456]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004656:	e001      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d03f      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004670:	d01c      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004676:	d802      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800467c:	e01f      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800467e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004682:	d003      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004688:	d01c      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800468a:	e018      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800468c:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a61      	ldr	r2, [pc, #388]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004696:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004698:	e015      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fa73 	bl	8004b8c <RCCEx_PLLSAI1_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046aa:	e00c      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3320      	adds	r3, #32
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fb5a 	bl	8004d6c <RCCEx_PLLSAI2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046bc:	e003      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	74fb      	strb	r3, [r7, #19]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80046c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046cc:	4b52      	ldr	r3, [pc, #328]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046da:	494f      	ldr	r1, [pc, #316]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046e2:	e001      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a0 	beq.w	8004836 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	4a40      	ldr	r2, [pc, #256]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	; 0x58
 800471c:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004728:	2301      	movs	r3, #1
 800472a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3a      	ldr	r2, [pc, #232]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004738:	f7fc fd34 	bl	80011a4 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800473e:	e009      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004740:	f7fc fd30 	bl	80011a4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d902      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	74fb      	strb	r3, [r7, #19]
        break;
 8004752:	e005      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004754:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ef      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d15c      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004766:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004770:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01f      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d019      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047b0:	4a19      	ldr	r2, [pc, #100]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fc fcef 	bl	80011a4 <HAL_GetTick>
 80047c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c8:	e00b      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fc fceb 	bl	80011a4 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d902      	bls.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	74fb      	strb	r3, [r7, #19]
            break;
 80047e0:	e006      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ec      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004806:	4904      	ldr	r1, [pc, #16]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800480e:	e009      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004824:	7c7b      	ldrb	r3, [r7, #17]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482a:	4b9e      	ldr	r3, [pc, #632]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	4a9d      	ldr	r2, [pc, #628]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004834:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004842:	4b98      	ldr	r3, [pc, #608]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	f023 0203 	bic.w	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	4994      	ldr	r1, [pc, #592]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004864:	4b8f      	ldr	r3, [pc, #572]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f023 020c 	bic.w	r2, r3, #12
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	498c      	ldr	r1, [pc, #560]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004886:	4b87      	ldr	r3, [pc, #540]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4983      	ldr	r1, [pc, #524]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a8:	4b7e      	ldr	r3, [pc, #504]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	497b      	ldr	r1, [pc, #492]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ca:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	4972      	ldr	r1, [pc, #456]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ec:	4b6d      	ldr	r3, [pc, #436]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	496a      	ldr	r1, [pc, #424]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800490e:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	4961      	ldr	r1, [pc, #388]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004930:	4b5c      	ldr	r3, [pc, #368]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493e:	4959      	ldr	r1, [pc, #356]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004952:	4b54      	ldr	r3, [pc, #336]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004960:	4950      	ldr	r1, [pc, #320]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004974:	4b4b      	ldr	r3, [pc, #300]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	4948      	ldr	r1, [pc, #288]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004996:	4b43      	ldr	r3, [pc, #268]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	493f      	ldr	r1, [pc, #252]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d028      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b8:	4b3a      	ldr	r3, [pc, #232]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c6:	4937      	ldr	r1, [pc, #220]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d6:	d106      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d8:	4b32      	ldr	r3, [pc, #200]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a31      	ldr	r2, [pc, #196]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e2:	60d3      	str	r3, [r2, #12]
 80049e4:	e011      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ee:	d10c      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f8c8 	bl	8004b8c <RCCEx_PLLSAI1_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d028      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a16:	4b23      	ldr	r3, [pc, #140]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	491f      	ldr	r1, [pc, #124]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a34:	d106      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a36:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	4a1a      	ldr	r2, [pc, #104]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a40:	60d3      	str	r3, [r2, #12]
 8004a42:	e011      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3304      	adds	r3, #4
 8004a52:	2101      	movs	r1, #1
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f899 	bl	8004b8c <RCCEx_PLLSAI1_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02b      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	4908      	ldr	r1, [pc, #32]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a92:	d109      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a02      	ldr	r2, [pc, #8]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a9e:	60d3      	str	r3, [r2, #12]
 8004aa0:	e014      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f867 	bl	8004b8c <RCCEx_PLLSAI1_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02f      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ae6:	4928      	ldr	r1, [pc, #160]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af6:	d10d      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2102      	movs	r1, #2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f844 	bl	8004b8c <RCCEx_PLLSAI1_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d014      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	74bb      	strb	r3, [r7, #18]
 8004b12:	e011      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3320      	adds	r3, #32
 8004b22:	2102      	movs	r1, #2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f921 	bl	8004d6c <RCCEx_PLLSAI2_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b52:	490d      	ldr	r1, [pc, #52]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b66:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b76:	4904      	ldr	r1, [pc, #16]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000

08004b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b9a:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ba6:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0203 	and.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d10d      	bne.n	8004bd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d044      	beq.n	8004c5c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
 8004bd6:	e041      	b.n	8004c5c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d00c      	beq.n	8004bfa <RCCEx_PLLSAI1_Config+0x6e>
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d013      	beq.n	8004c0c <RCCEx_PLLSAI1_Config+0x80>
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d120      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004be8:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11d      	bne.n	8004c30 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf8:	e01a      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bfa:	4b5b      	ldr	r3, [pc, #364]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0a:	e013      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c0c:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10f      	bne.n	8004c38 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c18:	4b53      	ldr	r3, [pc, #332]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c28:	e006      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2e:	e004      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004c30:	bf00      	nop
 8004c32:	e002      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004c34:	bf00      	nop
 8004c36:	e000      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004c38:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10d      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c40:	4b49      	ldr	r3, [pc, #292]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	430b      	orrs	r3, r1
 8004c56:	4944      	ldr	r1, [pc, #272]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d17d      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c62:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a40      	ldr	r2, [pc, #256]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6e:	f7fc fa99 	bl	80011a4 <HAL_GetTick>
 8004c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c74:	e009      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c76:	f7fc fa95 	bl	80011a4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d902      	bls.n	8004c8a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	73fb      	strb	r3, [r7, #15]
        break;
 8004c88:	e005      	b.n	8004c96 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c8a:	4b37      	ldr	r3, [pc, #220]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ef      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d160      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d111      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca2:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	0211      	lsls	r1, r2, #8
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68d2      	ldr	r2, [r2, #12]
 8004cb8:	0912      	lsrs	r2, r2, #4
 8004cba:	0452      	lsls	r2, r2, #17
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	492a      	ldr	r1, [pc, #168]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	610b      	str	r3, [r1, #16]
 8004cc4:	e027      	b.n	8004d16 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d112      	bne.n	8004cf2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ccc:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	0211      	lsls	r1, r2, #8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6912      	ldr	r2, [r2, #16]
 8004ce2:	0852      	lsrs	r2, r2, #1
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	0552      	lsls	r2, r2, #21
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	491f      	ldr	r1, [pc, #124]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]
 8004cf0:	e011      	b.n	8004d16 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6892      	ldr	r2, [r2, #8]
 8004d02:	0211      	lsls	r1, r2, #8
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6952      	ldr	r2, [r2, #20]
 8004d08:	0852      	lsrs	r2, r2, #1
 8004d0a:	3a01      	subs	r2, #1
 8004d0c:	0652      	lsls	r2, r2, #25
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	4915      	ldr	r1, [pc, #84]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fc fa3f 	bl	80011a4 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d28:	e009      	b.n	8004d3e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d2a:	f7fc fa3b 	bl	80011a4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d902      	bls.n	8004d3e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	73fb      	strb	r3, [r7, #15]
          break;
 8004d3c:	e005      	b.n	8004d4a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ef      	beq.n	8004d2a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	4903      	ldr	r1, [pc, #12]	; (8004d68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000

08004d6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d7a:	4b68      	ldr	r3, [pc, #416]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d018      	beq.n	8004db8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d86:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0203 	and.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d10d      	bne.n	8004db2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
       ||
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d9e:	4b5f      	ldr	r3, [pc, #380]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
       ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d044      	beq.n	8004e3c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	e041      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d00c      	beq.n	8004dda <RCCEx_PLLSAI2_Config+0x6e>
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d013      	beq.n	8004dec <RCCEx_PLLSAI2_Config+0x80>
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d120      	bne.n	8004e0a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dc8:	4b54      	ldr	r3, [pc, #336]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11d      	bne.n	8004e10 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd8:	e01a      	b.n	8004e10 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dda:	4b50      	ldr	r3, [pc, #320]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d116      	bne.n	8004e14 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dea:	e013      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dec:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10f      	bne.n	8004e18 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004df8:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e08:	e006      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0e:	e004      	b.n	8004e1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004e10:	bf00      	nop
 8004e12:	e002      	b.n	8004e1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004e14:	bf00      	nop
 8004e16:	e000      	b.n	8004e1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004e18:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10d      	bne.n	8004e3c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e20:	4b3e      	ldr	r3, [pc, #248]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	430b      	orrs	r3, r1
 8004e36:	4939      	ldr	r1, [pc, #228]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d167      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e42:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a35      	ldr	r2, [pc, #212]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4e:	f7fc f9a9 	bl	80011a4 <HAL_GetTick>
 8004e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e54:	e009      	b.n	8004e6a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e56:	f7fc f9a5 	bl	80011a4 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d902      	bls.n	8004e6a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	73fb      	strb	r3, [r7, #15]
        break;
 8004e68:	e005      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e6a:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ef      	bne.n	8004e56 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d14a      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d111      	bne.n	8004ea6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6892      	ldr	r2, [r2, #8]
 8004e92:	0211      	lsls	r1, r2, #8
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68d2      	ldr	r2, [r2, #12]
 8004e98:	0912      	lsrs	r2, r2, #4
 8004e9a:	0452      	lsls	r2, r2, #17
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	491f      	ldr	r1, [pc, #124]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	614b      	str	r3, [r1, #20]
 8004ea4:	e011      	b.n	8004eca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6892      	ldr	r2, [r2, #8]
 8004eb6:	0211      	lsls	r1, r2, #8
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6912      	ldr	r2, [r2, #16]
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0652      	lsls	r2, r2, #25
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	4915      	ldr	r1, [pc, #84]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed6:	f7fc f965 	bl	80011a4 <HAL_GetTick>
 8004eda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004edc:	e009      	b.n	8004ef2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ede:	f7fc f961 	bl	80011a4 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d902      	bls.n	8004ef2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	73fb      	strb	r3, [r7, #15]
          break;
 8004ef0:	e005      	b.n	8004efe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0ef      	beq.n	8004ede <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4903      	ldr	r1, [pc, #12]	; (8004f1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40021000 	.word	0x40021000

08004f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e049      	b.n	8004fc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f841 	bl	8004fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 f9f8 	bl	8005354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d001      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e04f      	b.n	800509c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005026:	d018      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <HAL_TIM_Base_Start_IT+0xc8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1e      	ldr	r2, [pc, #120]	; (80050b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a19      	ldr	r2, [pc, #100]	; (80050bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d115      	bne.n	8005086 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005062:	4013      	ands	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d015      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005072:	d011      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	e008      	b.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e000      	b.n	800509a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	00010007 	.word	0x00010007

080050c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0202 	mvn.w	r2, #2
 80050f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f905 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8f7 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f908 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b04      	cmp	r3, #4
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0204 	mvn.w	r2, #4
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8db 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f8cd 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f8de 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b08      	cmp	r3, #8
 8005180:	d122      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b08      	cmp	r3, #8
 800518e:	d11b      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0208 	mvn.w	r2, #8
 8005198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8b1 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8a3 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f8b4 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0210 	mvn.w	r2, #16
 80051ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2208      	movs	r2, #8
 80051f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f887 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f879 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f88a 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10e      	bne.n	8005248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0201 	mvn.w	r2, #1
 8005240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fb fd42 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d10e      	bne.n	8005274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005260:	2b80      	cmp	r3, #128	; 0x80
 8005262:	d107      	bne.n	8005274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800526c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f914 	bl	800549c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005282:	d10e      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d107      	bne.n	80052a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f907 	bl	80054b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d10e      	bne.n	80052ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d107      	bne.n	80052ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f838 	bl	800533e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d10e      	bne.n	80052fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d107      	bne.n	80052fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f06f 0220 	mvn.w	r2, #32
 80052f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8c7 	bl	8005488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a40      	ldr	r2, [pc, #256]	; (8005468 <TIM_Base_SetConfig+0x114>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005372:	d00f      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3d      	ldr	r2, [pc, #244]	; (800546c <TIM_Base_SetConfig+0x118>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00b      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <TIM_Base_SetConfig+0x11c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3b      	ldr	r2, [pc, #236]	; (8005474 <TIM_Base_SetConfig+0x120>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3a      	ldr	r2, [pc, #232]	; (8005478 <TIM_Base_SetConfig+0x124>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d108      	bne.n	80053a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2f      	ldr	r2, [pc, #188]	; (8005468 <TIM_Base_SetConfig+0x114>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d01b      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	; (800546c <TIM_Base_SetConfig+0x118>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d017      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2b      	ldr	r2, [pc, #172]	; (8005470 <TIM_Base_SetConfig+0x11c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <TIM_Base_SetConfig+0x120>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00f      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <TIM_Base_SetConfig+0x124>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a28      	ldr	r2, [pc, #160]	; (800547c <TIM_Base_SetConfig+0x128>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a27      	ldr	r2, [pc, #156]	; (8005480 <TIM_Base_SetConfig+0x12c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0x9a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a26      	ldr	r2, [pc, #152]	; (8005484 <TIM_Base_SetConfig+0x130>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a10      	ldr	r2, [pc, #64]	; (8005468 <TIM_Base_SetConfig+0x114>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00f      	beq.n	800544c <TIM_Base_SetConfig+0xf8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a12      	ldr	r2, [pc, #72]	; (8005478 <TIM_Base_SetConfig+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_Base_SetConfig+0xf8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a11      	ldr	r2, [pc, #68]	; (800547c <TIM_Base_SetConfig+0x128>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_Base_SetConfig+0xf8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a10      	ldr	r2, [pc, #64]	; (8005480 <TIM_Base_SetConfig+0x12c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_Base_SetConfig+0xf8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0f      	ldr	r2, [pc, #60]	; (8005484 <TIM_Base_SetConfig+0x130>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d103      	bne.n	8005454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	615a      	str	r2, [r3, #20]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40013400 	.word	0x40013400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800

08005488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e040      	b.n	8005558 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb fd00 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2224      	movs	r2, #36	; 0x24
 80054f0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f82c 	bl	8005560 <UART_SetConfig>
 8005508:	4603      	mov	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e022      	b.n	8005558 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 faaa 	bl	8005a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800552e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800553e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb31 	bl	8005bb8 <UART_CheckIdleState>
 8005556:	4603      	mov	r3, r0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005564:	b088      	sub	sp, #32
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	4313      	orrs	r3, r2
 8005584:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4bac      	ldr	r3, [pc, #688]	; (8005840 <UART_SetConfig+0x2e0>)
 800558e:	4013      	ands	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	69f9      	ldr	r1, [r7, #28]
 8005596:	430b      	orrs	r3, r1
 8005598:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4aa2      	ldr	r2, [pc, #648]	; (8005844 <UART_SetConfig+0x2e4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	430a      	orrs	r2, r1
 80055dc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a99      	ldr	r2, [pc, #612]	; (8005848 <UART_SetConfig+0x2e8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d121      	bne.n	800562c <UART_SetConfig+0xcc>
 80055e8:	4b98      	ldr	r3, [pc, #608]	; (800584c <UART_SetConfig+0x2ec>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d816      	bhi.n	8005624 <UART_SetConfig+0xc4>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0x9c>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	08005619 	.word	0x08005619
 8005604:	08005613 	.word	0x08005613
 8005608:	0800561f 	.word	0x0800561f
 800560c:	2301      	movs	r3, #1
 800560e:	76fb      	strb	r3, [r7, #27]
 8005610:	e0e8      	b.n	80057e4 <UART_SetConfig+0x284>
 8005612:	2302      	movs	r3, #2
 8005614:	76fb      	strb	r3, [r7, #27]
 8005616:	e0e5      	b.n	80057e4 <UART_SetConfig+0x284>
 8005618:	2304      	movs	r3, #4
 800561a:	76fb      	strb	r3, [r7, #27]
 800561c:	e0e2      	b.n	80057e4 <UART_SetConfig+0x284>
 800561e:	2308      	movs	r3, #8
 8005620:	76fb      	strb	r3, [r7, #27]
 8005622:	e0df      	b.n	80057e4 <UART_SetConfig+0x284>
 8005624:	2310      	movs	r3, #16
 8005626:	76fb      	strb	r3, [r7, #27]
 8005628:	bf00      	nop
 800562a:	e0db      	b.n	80057e4 <UART_SetConfig+0x284>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a87      	ldr	r2, [pc, #540]	; (8005850 <UART_SetConfig+0x2f0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d134      	bne.n	80056a0 <UART_SetConfig+0x140>
 8005636:	4b85      	ldr	r3, [pc, #532]	; (800584c <UART_SetConfig+0x2ec>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f003 030c 	and.w	r3, r3, #12
 8005640:	2b0c      	cmp	r3, #12
 8005642:	d829      	bhi.n	8005698 <UART_SetConfig+0x138>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0xec>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	08005681 	.word	0x08005681
 8005650:	08005699 	.word	0x08005699
 8005654:	08005699 	.word	0x08005699
 8005658:	08005699 	.word	0x08005699
 800565c:	0800568d 	.word	0x0800568d
 8005660:	08005699 	.word	0x08005699
 8005664:	08005699 	.word	0x08005699
 8005668:	08005699 	.word	0x08005699
 800566c:	08005687 	.word	0x08005687
 8005670:	08005699 	.word	0x08005699
 8005674:	08005699 	.word	0x08005699
 8005678:	08005699 	.word	0x08005699
 800567c:	08005693 	.word	0x08005693
 8005680:	2300      	movs	r3, #0
 8005682:	76fb      	strb	r3, [r7, #27]
 8005684:	e0ae      	b.n	80057e4 <UART_SetConfig+0x284>
 8005686:	2302      	movs	r3, #2
 8005688:	76fb      	strb	r3, [r7, #27]
 800568a:	e0ab      	b.n	80057e4 <UART_SetConfig+0x284>
 800568c:	2304      	movs	r3, #4
 800568e:	76fb      	strb	r3, [r7, #27]
 8005690:	e0a8      	b.n	80057e4 <UART_SetConfig+0x284>
 8005692:	2308      	movs	r3, #8
 8005694:	76fb      	strb	r3, [r7, #27]
 8005696:	e0a5      	b.n	80057e4 <UART_SetConfig+0x284>
 8005698:	2310      	movs	r3, #16
 800569a:	76fb      	strb	r3, [r7, #27]
 800569c:	bf00      	nop
 800569e:	e0a1      	b.n	80057e4 <UART_SetConfig+0x284>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a6b      	ldr	r2, [pc, #428]	; (8005854 <UART_SetConfig+0x2f4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d120      	bne.n	80056ec <UART_SetConfig+0x18c>
 80056aa:	4b68      	ldr	r3, [pc, #416]	; (800584c <UART_SetConfig+0x2ec>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d00f      	beq.n	80056d8 <UART_SetConfig+0x178>
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d802      	bhi.n	80056c2 <UART_SetConfig+0x162>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <UART_SetConfig+0x16c>
 80056c0:	e010      	b.n	80056e4 <UART_SetConfig+0x184>
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d005      	beq.n	80056d2 <UART_SetConfig+0x172>
 80056c6:	2b30      	cmp	r3, #48	; 0x30
 80056c8:	d009      	beq.n	80056de <UART_SetConfig+0x17e>
 80056ca:	e00b      	b.n	80056e4 <UART_SetConfig+0x184>
 80056cc:	2300      	movs	r3, #0
 80056ce:	76fb      	strb	r3, [r7, #27]
 80056d0:	e088      	b.n	80057e4 <UART_SetConfig+0x284>
 80056d2:	2302      	movs	r3, #2
 80056d4:	76fb      	strb	r3, [r7, #27]
 80056d6:	e085      	b.n	80057e4 <UART_SetConfig+0x284>
 80056d8:	2304      	movs	r3, #4
 80056da:	76fb      	strb	r3, [r7, #27]
 80056dc:	e082      	b.n	80057e4 <UART_SetConfig+0x284>
 80056de:	2308      	movs	r3, #8
 80056e0:	76fb      	strb	r3, [r7, #27]
 80056e2:	e07f      	b.n	80057e4 <UART_SetConfig+0x284>
 80056e4:	2310      	movs	r3, #16
 80056e6:	76fb      	strb	r3, [r7, #27]
 80056e8:	bf00      	nop
 80056ea:	e07b      	b.n	80057e4 <UART_SetConfig+0x284>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a59      	ldr	r2, [pc, #356]	; (8005858 <UART_SetConfig+0x2f8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d120      	bne.n	8005738 <UART_SetConfig+0x1d8>
 80056f6:	4b55      	ldr	r3, [pc, #340]	; (800584c <UART_SetConfig+0x2ec>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d00f      	beq.n	8005724 <UART_SetConfig+0x1c4>
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d802      	bhi.n	800570e <UART_SetConfig+0x1ae>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <UART_SetConfig+0x1b8>
 800570c:	e010      	b.n	8005730 <UART_SetConfig+0x1d0>
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d005      	beq.n	800571e <UART_SetConfig+0x1be>
 8005712:	2bc0      	cmp	r3, #192	; 0xc0
 8005714:	d009      	beq.n	800572a <UART_SetConfig+0x1ca>
 8005716:	e00b      	b.n	8005730 <UART_SetConfig+0x1d0>
 8005718:	2300      	movs	r3, #0
 800571a:	76fb      	strb	r3, [r7, #27]
 800571c:	e062      	b.n	80057e4 <UART_SetConfig+0x284>
 800571e:	2302      	movs	r3, #2
 8005720:	76fb      	strb	r3, [r7, #27]
 8005722:	e05f      	b.n	80057e4 <UART_SetConfig+0x284>
 8005724:	2304      	movs	r3, #4
 8005726:	76fb      	strb	r3, [r7, #27]
 8005728:	e05c      	b.n	80057e4 <UART_SetConfig+0x284>
 800572a:	2308      	movs	r3, #8
 800572c:	76fb      	strb	r3, [r7, #27]
 800572e:	e059      	b.n	80057e4 <UART_SetConfig+0x284>
 8005730:	2310      	movs	r3, #16
 8005732:	76fb      	strb	r3, [r7, #27]
 8005734:	bf00      	nop
 8005736:	e055      	b.n	80057e4 <UART_SetConfig+0x284>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a47      	ldr	r2, [pc, #284]	; (800585c <UART_SetConfig+0x2fc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d124      	bne.n	800578c <UART_SetConfig+0x22c>
 8005742:	4b42      	ldr	r3, [pc, #264]	; (800584c <UART_SetConfig+0x2ec>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005750:	d012      	beq.n	8005778 <UART_SetConfig+0x218>
 8005752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005756:	d802      	bhi.n	800575e <UART_SetConfig+0x1fe>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <UART_SetConfig+0x20c>
 800575c:	e012      	b.n	8005784 <UART_SetConfig+0x224>
 800575e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005762:	d006      	beq.n	8005772 <UART_SetConfig+0x212>
 8005764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005768:	d009      	beq.n	800577e <UART_SetConfig+0x21e>
 800576a:	e00b      	b.n	8005784 <UART_SetConfig+0x224>
 800576c:	2300      	movs	r3, #0
 800576e:	76fb      	strb	r3, [r7, #27]
 8005770:	e038      	b.n	80057e4 <UART_SetConfig+0x284>
 8005772:	2302      	movs	r3, #2
 8005774:	76fb      	strb	r3, [r7, #27]
 8005776:	e035      	b.n	80057e4 <UART_SetConfig+0x284>
 8005778:	2304      	movs	r3, #4
 800577a:	76fb      	strb	r3, [r7, #27]
 800577c:	e032      	b.n	80057e4 <UART_SetConfig+0x284>
 800577e:	2308      	movs	r3, #8
 8005780:	76fb      	strb	r3, [r7, #27]
 8005782:	e02f      	b.n	80057e4 <UART_SetConfig+0x284>
 8005784:	2310      	movs	r3, #16
 8005786:	76fb      	strb	r3, [r7, #27]
 8005788:	bf00      	nop
 800578a:	e02b      	b.n	80057e4 <UART_SetConfig+0x284>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <UART_SetConfig+0x2e4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d124      	bne.n	80057e0 <UART_SetConfig+0x280>
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <UART_SetConfig+0x2ec>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d012      	beq.n	80057cc <UART_SetConfig+0x26c>
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057aa:	d802      	bhi.n	80057b2 <UART_SetConfig+0x252>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <UART_SetConfig+0x260>
 80057b0:	e012      	b.n	80057d8 <UART_SetConfig+0x278>
 80057b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b6:	d006      	beq.n	80057c6 <UART_SetConfig+0x266>
 80057b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057bc:	d009      	beq.n	80057d2 <UART_SetConfig+0x272>
 80057be:	e00b      	b.n	80057d8 <UART_SetConfig+0x278>
 80057c0:	2300      	movs	r3, #0
 80057c2:	76fb      	strb	r3, [r7, #27]
 80057c4:	e00e      	b.n	80057e4 <UART_SetConfig+0x284>
 80057c6:	2302      	movs	r3, #2
 80057c8:	76fb      	strb	r3, [r7, #27]
 80057ca:	e00b      	b.n	80057e4 <UART_SetConfig+0x284>
 80057cc:	2304      	movs	r3, #4
 80057ce:	76fb      	strb	r3, [r7, #27]
 80057d0:	e008      	b.n	80057e4 <UART_SetConfig+0x284>
 80057d2:	2308      	movs	r3, #8
 80057d4:	76fb      	strb	r3, [r7, #27]
 80057d6:	e005      	b.n	80057e4 <UART_SetConfig+0x284>
 80057d8:	2310      	movs	r3, #16
 80057da:	76fb      	strb	r3, [r7, #27]
 80057dc:	bf00      	nop
 80057de:	e001      	b.n	80057e4 <UART_SetConfig+0x284>
 80057e0:	2310      	movs	r3, #16
 80057e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <UART_SetConfig+0x2e4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f040 8087 	bne.w	80058fe <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f0:	7efb      	ldrb	r3, [r7, #27]
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d836      	bhi.n	8005864 <UART_SetConfig+0x304>
 80057f6:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0x29c>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005865 	.word	0x08005865
 8005804:	08005829 	.word	0x08005829
 8005808:	08005865 	.word	0x08005865
 800580c:	0800582f 	.word	0x0800582f
 8005810:	08005865 	.word	0x08005865
 8005814:	08005865 	.word	0x08005865
 8005818:	08005865 	.word	0x08005865
 800581c:	08005837 	.word	0x08005837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7fe fe10 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 8005824:	6178      	str	r0, [r7, #20]
        break;
 8005826:	e022      	b.n	800586e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <UART_SetConfig+0x300>)
 800582a:	617b      	str	r3, [r7, #20]
        break;
 800582c:	e01f      	b.n	800586e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7fe fd73 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005832:	6178      	str	r0, [r7, #20]
        break;
 8005834:	e01b      	b.n	800586e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583a:	617b      	str	r3, [r7, #20]
        break;
 800583c:	e017      	b.n	800586e <UART_SetConfig+0x30e>
 800583e:	bf00      	nop
 8005840:	efff69f3 	.word	0xefff69f3
 8005844:	40008000 	.word	0x40008000
 8005848:	40013800 	.word	0x40013800
 800584c:	40021000 	.word	0x40021000
 8005850:	40004400 	.word	0x40004400
 8005854:	40004800 	.word	0x40004800
 8005858:	40004c00 	.word	0x40004c00
 800585c:	40005000 	.word	0x40005000
 8005860:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	76bb      	strb	r3, [r7, #26]
        break;
 800586c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80f1 	beq.w	8005a58 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	429a      	cmp	r2, r3
 8005884:	d305      	bcc.n	8005892 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	429a      	cmp	r2, r3
 8005890:	d902      	bls.n	8005898 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	76bb      	strb	r3, [r7, #26]
 8005896:	e0df      	b.n	8005a58 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4619      	mov	r1, r3
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	f04f 0400 	mov.w	r4, #0
 80058a8:	0214      	lsls	r4, r2, #8
 80058aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058ae:	020b      	lsls	r3, r1, #8
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6852      	ldr	r2, [r2, #4]
 80058b4:	0852      	lsrs	r2, r2, #1
 80058b6:	4611      	mov	r1, r2
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	eb13 0b01 	adds.w	fp, r3, r1
 80058c0:	eb44 0c02 	adc.w	ip, r4, r2
 80058c4:	4658      	mov	r0, fp
 80058c6:	4661      	mov	r1, ip
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	461a      	mov	r2, r3
 80058d2:	4623      	mov	r3, r4
 80058d4:	f7fa fc7c 	bl	80001d0 <__aeabi_uldivmod>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e4:	d308      	bcc.n	80058f8 <UART_SetConfig+0x398>
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ec:	d204      	bcs.n	80058f8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	60da      	str	r2, [r3, #12]
 80058f6:	e0af      	b.n	8005a58 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	76bb      	strb	r3, [r7, #26]
 80058fc:	e0ac      	b.n	8005a58 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005906:	d15b      	bne.n	80059c0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005908:	7efb      	ldrb	r3, [r7, #27]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d827      	bhi.n	800595e <UART_SetConfig+0x3fe>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x3b4>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005939 	.word	0x08005939
 8005918:	08005941 	.word	0x08005941
 800591c:	08005949 	.word	0x08005949
 8005920:	0800595f 	.word	0x0800595f
 8005924:	0800594f 	.word	0x0800594f
 8005928:	0800595f 	.word	0x0800595f
 800592c:	0800595f 	.word	0x0800595f
 8005930:	0800595f 	.word	0x0800595f
 8005934:	08005957 	.word	0x08005957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005938:	f7fe fd84 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 800593c:	6178      	str	r0, [r7, #20]
        break;
 800593e:	e013      	b.n	8005968 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7fe fd96 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8005944:	6178      	str	r0, [r7, #20]
        break;
 8005946:	e00f      	b.n	8005968 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005948:	4b49      	ldr	r3, [pc, #292]	; (8005a70 <UART_SetConfig+0x510>)
 800594a:	617b      	str	r3, [r7, #20]
        break;
 800594c:	e00c      	b.n	8005968 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594e:	f7fe fce3 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005952:	6178      	str	r0, [r7, #20]
        break;
 8005954:	e008      	b.n	8005968 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595a:	617b      	str	r3, [r7, #20]
        break;
 800595c:	e004      	b.n	8005968 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	76bb      	strb	r3, [r7, #26]
        break;
 8005966:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d074      	beq.n	8005a58 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	005a      	lsls	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	441a      	add	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b0f      	cmp	r3, #15
 800598a:	d916      	bls.n	80059ba <UART_SetConfig+0x45a>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005992:	d212      	bcs.n	80059ba <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	b29b      	uxth	r3, r3
 8005998:	f023 030f 	bic.w	r3, r3, #15
 800599c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	085b      	lsrs	r3, r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	89fb      	ldrh	r3, [r7, #14]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	89fa      	ldrh	r2, [r7, #14]
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	e04e      	b.n	8005a58 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	76bb      	strb	r3, [r7, #26]
 80059be:	e04b      	b.n	8005a58 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059c0:	7efb      	ldrb	r3, [r7, #27]
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d827      	bhi.n	8005a16 <UART_SetConfig+0x4b6>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <UART_SetConfig+0x46c>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059f1 	.word	0x080059f1
 80059d0:	080059f9 	.word	0x080059f9
 80059d4:	08005a01 	.word	0x08005a01
 80059d8:	08005a17 	.word	0x08005a17
 80059dc:	08005a07 	.word	0x08005a07
 80059e0:	08005a17 	.word	0x08005a17
 80059e4:	08005a17 	.word	0x08005a17
 80059e8:	08005a17 	.word	0x08005a17
 80059ec:	08005a0f 	.word	0x08005a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7fe fd28 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80059f4:	6178      	str	r0, [r7, #20]
        break;
 80059f6:	e013      	b.n	8005a20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f8:	f7fe fd3a 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 80059fc:	6178      	str	r0, [r7, #20]
        break;
 80059fe:	e00f      	b.n	8005a20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a00:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <UART_SetConfig+0x510>)
 8005a02:	617b      	str	r3, [r7, #20]
        break;
 8005a04:	e00c      	b.n	8005a20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a06:	f7fe fc87 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8005a0a:	6178      	str	r0, [r7, #20]
        break;
 8005a0c:	e008      	b.n	8005a20 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a12:	617b      	str	r3, [r7, #20]
        break;
 8005a14:	e004      	b.n	8005a20 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	76bb      	strb	r3, [r7, #26]
        break;
 8005a1e:	bf00      	nop
    }

    if (pclk != 0U)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d018      	beq.n	8005a58 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	085a      	lsrs	r2, r3, #1
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	441a      	add	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b0f      	cmp	r3, #15
 8005a40:	d908      	bls.n	8005a54 <UART_SetConfig+0x4f4>
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d204      	bcs.n	8005a54 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	e001      	b.n	8005a58 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a64:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005a70:	00f42400 	.word	0x00f42400

08005a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01a      	beq.n	8005b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b72:	d10a      	bne.n	8005b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  }
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bc6:	f7fb faed 	bl	80011a4 <HAL_GetTick>
 8005bca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d10e      	bne.n	8005bf8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f82a 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e020      	b.n	8005c3a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d10e      	bne.n	8005c24 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f814 	bl	8005c42 <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e00a      	b.n	8005c3a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c52:	e05d      	b.n	8005d10 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d059      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5c:	f7fb faa2 	bl	80011a4 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d302      	bcc.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d11b      	bne.n	8005caa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c80:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0201 	bic.w	r2, r2, #1
 8005c90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e042      	b.n	8005d30 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02b      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc6:	d123      	bne.n	8005d10 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ce0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e00f      	b.n	8005d30 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69da      	ldr	r2, [r3, #28]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d092      	beq.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d4e:	f3ef 8305 	mrs	r3, IPSR
 8005d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d105      	bne.n	8005d72 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d66:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <osKernelInitialize+0x3a>
 8005d72:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <osKernelInitialize+0x64>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d103      	bne.n	8005d82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005d7a:	f06f 0305 	mvn.w	r3, #5
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e00c      	b.n	8005d9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <osKernelInitialize+0x64>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d105      	bne.n	8005d96 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <osKernelInitialize+0x64>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e002      	b.n	8005d9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000030 	.word	0x20000030

08005db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db6:	f3ef 8305 	mrs	r3, IPSR
 8005dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d105      	bne.n	8005dda <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dce:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <osKernelStart+0x3a>
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <osKernelStart+0x68>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d103      	bne.n	8005dea <osKernelStart+0x3a>
    stat = osErrorISR;
 8005de2:	f06f 0305 	mvn.w	r3, #5
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e010      	b.n	8005e0c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <osKernelStart+0x68>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d109      	bne.n	8005e06 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005df2:	f7ff ffa1 	bl	8005d38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005df6:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <osKernelStart+0x68>)
 8005df8:	2202      	movs	r2, #2
 8005dfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dfc:	f001 f870 	bl	8006ee0 <vTaskStartScheduler>
      stat = osOK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e002      	b.n	8005e0c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000030 	.word	0x20000030

08005e1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b090      	sub	sp, #64	; 0x40
 8005e20:	af04      	add	r7, sp, #16
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e2c:	f3ef 8305 	mrs	r3, IPSR
 8005e30:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e32:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 808f 	bne.w	8005f58 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e46:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4a:	617b      	str	r3, [r7, #20]
  return(result);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <osThreadNew+0x3e>
 8005e52:	4b44      	ldr	r3, [pc, #272]	; (8005f64 <osThreadNew+0x148>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d07e      	beq.n	8005f58 <osThreadNew+0x13c>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d07b      	beq.n	8005f58 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e64:	2318      	movs	r3, #24
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d045      	beq.n	8005f04 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <osThreadNew+0x6a>
        name = attr->name;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <osThreadNew+0x90>
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b38      	cmp	r3, #56	; 0x38
 8005e9e:	d805      	bhi.n	8005eac <osThreadNew+0x90>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <osThreadNew+0x94>
        return (NULL);
 8005eac:	2300      	movs	r3, #0
 8005eae:	e054      	b.n	8005f5a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	089b      	lsrs	r3, r3, #2
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00e      	beq.n	8005ee6 <osThreadNew+0xca>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b5b      	cmp	r3, #91	; 0x5b
 8005ece:	d90a      	bls.n	8005ee6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d006      	beq.n	8005ee6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <osThreadNew+0xca>
        mem = 1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	e010      	b.n	8005f08 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10c      	bne.n	8005f08 <osThreadNew+0xec>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d108      	bne.n	8005f08 <osThreadNew+0xec>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <osThreadNew+0xec>
          mem = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	e001      	b.n	8005f08 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d110      	bne.n	8005f30 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f16:	9202      	str	r2, [sp, #8]
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fe09 	bl	8006b3c <xTaskCreateStatic>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	e013      	b.n	8005f58 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d110      	bne.n	8005f58 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f107 0310 	add.w	r3, r7, #16
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fe51 	bl	8006bf0 <xTaskCreate>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d001      	beq.n	8005f58 <osThreadNew+0x13c>
          hTask = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f58:	693b      	ldr	r3, [r7, #16]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3730      	adds	r7, #48	; 0x30
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000030 	.word	0x20000030

08005f68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f70:	f3ef 8305 	mrs	r3, IPSR
 8005f74:	613b      	str	r3, [r7, #16]
  return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10f      	bne.n	8005f9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d105      	bne.n	8005f94 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f88:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <osDelay+0x3c>
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <osDelay+0x58>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d103      	bne.n	8005fa4 <osDelay+0x3c>
    stat = osErrorISR;
 8005f9c:	f06f 0305 	mvn.w	r3, #5
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e007      	b.n	8005fb4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 ff62 	bl	8006e78 <vTaskDelay>
    }
  }

  return (stat);
 8005fb4:	697b      	ldr	r3, [r7, #20]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000030 	.word	0x20000030

08005fc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a07      	ldr	r2, [pc, #28]	; (8005ff0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a06      	ldr	r2, [pc, #24]	; (8005ff4 <vApplicationGetIdleTaskMemory+0x30>)
 8005fda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	601a      	str	r2, [r3, #0]
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000034 	.word	0x20000034
 8005ff4:	20000090 	.word	0x20000090

08005ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4a07      	ldr	r2, [pc, #28]	; (8006024 <vApplicationGetTimerTaskMemory+0x2c>)
 8006008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4a06      	ldr	r2, [pc, #24]	; (8006028 <vApplicationGetTimerTaskMemory+0x30>)
 800600e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006016:	601a      	str	r2, [r3, #0]
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	20000290 	.word	0x20000290
 8006028:	200002ec 	.word	0x200002ec

0800602c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f103 0208 	add.w	r2, r3, #8
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f04f 32ff 	mov.w	r2, #4294967295
 8006044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f103 0208 	add.w	r2, r3, #8
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f103 0208 	add.w	r2, r3, #8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d103      	bne.n	80060ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e00c      	b.n	8006108 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3308      	adds	r3, #8
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e002      	b.n	80060fc <vListInsert+0x2e>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d2f6      	bcs.n	80060f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6892      	ldr	r2, [r2, #8]
 8006156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6852      	ldr	r2, [r2, #4]
 8006160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d103      	bne.n	8006174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	1e5a      	subs	r2, r3, #1
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	e7fe      	b.n	80061ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80061bc:	f002 f80e 	bl	80081dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	68f9      	ldr	r1, [r7, #12]
 80061ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	3b01      	subs	r3, #1
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	441a      	add	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	22ff      	movs	r2, #255	; 0xff
 8006200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	22ff      	movs	r2, #255	; 0xff
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d114      	bne.n	800623c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01a      	beq.n	8006250 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3310      	adds	r3, #16
 800621e:	4618      	mov	r0, r3
 8006220:	f001 f8de 	bl	80073e0 <xTaskRemoveFromEventList>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d012      	beq.n	8006250 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <xQueueGenericReset+0xcc>)
 800622c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	e009      	b.n	8006250 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3310      	adds	r3, #16
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fef3 	bl	800602c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff feee 	bl	800602c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006250:	f001 fff2 	bl	8008238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006254:	2301      	movs	r3, #1
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	; 0x38
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <xQueueGenericCreateStatic+0x28>
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
 800628a:	e7fe      	b.n	800628a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <xQueueGenericCreateStatic+0x42>
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	e7fe      	b.n	80062a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <xQueueGenericCreateStatic+0x4e>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <xQueueGenericCreateStatic+0x52>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <xQueueGenericCreateStatic+0x54>
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <xQueueGenericCreateStatic+0x6c>
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	e7fe      	b.n	80062ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <xQueueGenericCreateStatic+0x78>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <xQueueGenericCreateStatic+0x7c>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <xQueueGenericCreateStatic+0x7e>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <xQueueGenericCreateStatic+0x96>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062fa:	2350      	movs	r3, #80	; 0x50
 80062fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b50      	cmp	r3, #80	; 0x50
 8006302:	d009      	beq.n	8006318 <xQueueGenericCreateStatic+0xb4>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e7fe      	b.n	8006316 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006318:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800632c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f805 	bl	800634a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006342:	4618      	mov	r0, r3
 8006344:	3730      	adds	r7, #48	; 0x30
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e002      	b.n	800636c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006378:	2101      	movs	r1, #1
 800637a:	69b8      	ldr	r0, [r7, #24]
 800637c:	f7ff ff0a 	bl	8006194 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08e      	sub	sp, #56	; 0x38
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <xQueueGenericSend+0x30>
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063be:	e7fe      	b.n	80063be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueGenericSend+0x3e>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericSend+0x42>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericSend+0x44>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <xQueueGenericSend+0x5c>
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ea:	e7fe      	b.n	80063ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d103      	bne.n	80063fa <xQueueGenericSend+0x6a>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <xQueueGenericSend+0x6e>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueGenericSend+0x70>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d109      	bne.n	8006418 <xQueueGenericSend+0x88>
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	e7fe      	b.n	8006416 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006418:	f001 f998 	bl	800774c <xTaskGetSchedulerState>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <xQueueGenericSend+0x98>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <xQueueGenericSend+0x9c>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <xQueueGenericSend+0x9e>
 800642c:	2300      	movs	r3, #0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <xQueueGenericSend+0xb6>
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	e7fe      	b.n	8006444 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006446:	f001 fec9 	bl	80081dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <xQueueGenericSend+0xcc>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d129      	bne.n	80064b0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006462:	f000 f9ff 	bl	8006864 <prvCopyDataToQueue>
 8006466:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	4618      	mov	r0, r3
 8006476:	f000 ffb3 	bl	80073e0 <xTaskRemoveFromEventList>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d013      	beq.n	80064a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006480:	4b3f      	ldr	r3, [pc, #252]	; (8006580 <xQueueGenericSend+0x1f0>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	e00a      	b.n	80064a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006498:	4b39      	ldr	r3, [pc, #228]	; (8006580 <xQueueGenericSend+0x1f0>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064a8:	f001 fec6 	bl	8008238 <vPortExitCritical>
				return pdPASS;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e063      	b.n	8006578 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064b6:	f001 febf 	bl	8008238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e05c      	b.n	8006578 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 ffeb 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ce:	2301      	movs	r3, #1
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064d2:	f001 feb1 	bl	8008238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064d6:	f000 fd67 	bl	8006fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064da:	f001 fe7f 	bl	80081dc <vPortEnterCritical>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d103      	bne.n	80064f4 <xQueueGenericSend+0x164>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d103      	bne.n	800650a <xQueueGenericSend+0x17a>
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800650a:	f001 fe95 	bl	8008238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800650e:	1d3a      	adds	r2, r7, #4
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 ffda 	bl	80074d0 <xTaskCheckForTimeOut>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d124      	bne.n	800656c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006524:	f000 fa96 	bl	8006a54 <prvIsQueueFull>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d018      	beq.n	8006560 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	3310      	adds	r3, #16
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f000 ff04 	bl	8007344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800653c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800653e:	f000 fa21 	bl	8006984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006542:	f000 fd3f 	bl	8006fc4 <xTaskResumeAll>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	f47f af7c 	bne.w	8006446 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <xQueueGenericSend+0x1f0>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	e772      	b.n	8006446 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006562:	f000 fa0f 	bl	8006984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006566:	f000 fd2d 	bl	8006fc4 <xTaskResumeAll>
 800656a:	e76c      	b.n	8006446 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800656c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800656e:	f000 fa09 	bl	8006984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006572:	f000 fd27 	bl	8006fc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006576:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006578:	4618      	mov	r0, r3
 800657a:	3738      	adds	r7, #56	; 0x38
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08e      	sub	sp, #56	; 0x38
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <xQueueGenericSendFromISR+0x2c>
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
 80065ae:	e7fe      	b.n	80065ae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <xQueueGenericSendFromISR+0x3a>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSendFromISR+0x3e>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSendFromISR+0x40>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <xQueueGenericSendFromISR+0x58>
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	e7fe      	b.n	80065da <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSendFromISR+0x66>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSendFromISR+0x6a>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSendFromISR+0x6c>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d109      	bne.n	8006608 <xQueueGenericSendFromISR+0x84>
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	e7fe      	b.n	8006606 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006608:	f001 fec4 	bl	8008394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800660c:	f3ef 8211 	mrs	r2, BASEPRI
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61ba      	str	r2, [r7, #24]
 8006622:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006624:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006626:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	429a      	cmp	r2, r3
 8006632:	d302      	bcc.n	800663a <xQueueGenericSendFromISR+0xb6>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d12c      	bne.n	8006694 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800664a:	f000 f90b 	bl	8006864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800664e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d112      	bne.n	800667e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d016      	beq.n	800668e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	3324      	adds	r3, #36	; 0x24
 8006664:	4618      	mov	r0, r3
 8006666:	f000 febb 	bl	80073e0 <xTaskRemoveFromEventList>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	e007      	b.n	800668e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800667e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006682:	3301      	adds	r3, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	b25a      	sxtb	r2, r3
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800668e:	2301      	movs	r3, #1
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006692:	e001      	b.n	8006698 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006694:	2300      	movs	r3, #0
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3738      	adds	r7, #56	; 0x38
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <xQueueReceive+0x2e>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	e7fe      	b.n	80066d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <xQueueReceive+0x3c>
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <xQueueReceive+0x40>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <xQueueReceive+0x42>
 80066ec:	2300      	movs	r3, #0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <xQueueReceive+0x5a>
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e7fe      	b.n	8006704 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006706:	f001 f821 	bl	800774c <xTaskGetSchedulerState>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <xQueueReceive+0x6a>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <xQueueReceive+0x6e>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <xQueueReceive+0x70>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <xQueueReceive+0x88>
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e7fe      	b.n	8006732 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006734:	f001 fd52 	bl	80081dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01f      	beq.n	8006784 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006748:	f000 f8f6 	bl	8006938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1e5a      	subs	r2, r3, #1
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00f      	beq.n	800677c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	3310      	adds	r3, #16
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fe3d 	bl	80073e0 <xTaskRemoveFromEventList>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800676c:	4b3c      	ldr	r3, [pc, #240]	; (8006860 <xQueueReceive+0x1b4>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800677c:	f001 fd5c 	bl	8008238 <vPortExitCritical>
				return pdPASS;
 8006780:	2301      	movs	r3, #1
 8006782:	e069      	b.n	8006858 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800678a:	f001 fd55 	bl	8008238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800678e:	2300      	movs	r3, #0
 8006790:	e062      	b.n	8006858 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fe81 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a6:	f001 fd47 	bl	8008238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067aa:	f000 fbfd 	bl	8006fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ae:	f001 fd15 	bl	80081dc <vPortEnterCritical>
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d103      	bne.n	80067c8 <xQueueReceive+0x11c>
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ce:	b25b      	sxtb	r3, r3
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d103      	bne.n	80067de <xQueueReceive+0x132>
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067de:	f001 fd2b 	bl	8008238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e2:	1d3a      	adds	r2, r7, #4
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fe70 	bl	80074d0 <xTaskCheckForTimeOut>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d123      	bne.n	800683e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f8:	f000 f916 	bl	8006a28 <prvIsQueueEmpty>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d017      	beq.n	8006832 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	3324      	adds	r3, #36	; 0x24
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fd9a 	bl	8007344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006812:	f000 f8b7 	bl	8006984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006816:	f000 fbd5 	bl	8006fc4 <xTaskResumeAll>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d189      	bne.n	8006734 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <xQueueReceive+0x1b4>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	e780      	b.n	8006734 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006834:	f000 f8a6 	bl	8006984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006838:	f000 fbc4 	bl	8006fc4 <xTaskResumeAll>
 800683c:	e77a      	b.n	8006734 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800683e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006840:	f000 f8a0 	bl	8006984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006844:	f000 fbbe 	bl	8006fc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684a:	f000 f8ed 	bl	8006a28 <prvIsQueueEmpty>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	f43f af6f 	beq.w	8006734 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006858:	4618      	mov	r0, r3
 800685a:	3730      	adds	r7, #48	; 0x30
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10d      	bne.n	800689e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d14d      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 ff7a 	bl	8007788 <xTaskPriorityDisinherit>
 8006894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	e043      	b.n	8006926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d119      	bne.n	80068d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6858      	ldr	r0, [r3, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	461a      	mov	r2, r3
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	f001 ffa8 	bl	8008804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d32b      	bcc.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	e026      	b.n	8006926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68d8      	ldr	r0, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	461a      	mov	r2, r3
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	f001 ff8e 	bl	8008804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	425b      	negs	r3, r3
 80068f2:	441a      	add	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d207      	bcs.n	8006914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	425b      	negs	r3, r3
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d105      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	3b01      	subs	r3, #1
 8006924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800692e:	697b      	ldr	r3, [r7, #20]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	441a      	add	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	d303      	bcc.n	800696c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68d9      	ldr	r1, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	461a      	mov	r2, r3
 8006976:	6838      	ldr	r0, [r7, #0]
 8006978:	f001 ff44 	bl	8008804 <memcpy>
	}
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800698c:	f001 fc26 	bl	80081dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006998:	e011      	b.n	80069be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3324      	adds	r3, #36	; 0x24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fd1a 	bl	80073e0 <xTaskRemoveFromEventList>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069b2:	f000 fded 	bl	8007590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dce9      	bgt.n	800699a <prvUnlockQueue+0x16>
 80069c6:	e000      	b.n	80069ca <prvUnlockQueue+0x46>
					break;
 80069c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069d2:	f001 fc31 	bl	8008238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069d6:	f001 fc01 	bl	80081dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e2:	e011      	b.n	8006a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d012      	beq.n	8006a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3310      	adds	r3, #16
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fcf5 	bl	80073e0 <xTaskRemoveFromEventList>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069fc:	f000 fdc8 	bl	8007590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dce9      	bgt.n	80069e4 <prvUnlockQueue+0x60>
 8006a10:	e000      	b.n	8006a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	22ff      	movs	r2, #255	; 0xff
 8006a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a1c:	f001 fc0c 	bl	8008238 <vPortExitCritical>
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a30:	f001 fbd4 	bl	80081dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e001      	b.n	8006a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a46:	f001 fbf7 	bl	8008238 <vPortExitCritical>

	return xReturn;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a5c:	f001 fbbe 	bl	80081dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d102      	bne.n	8006a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e001      	b.n	8006a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 fbdf 	bl	8008238 <vPortExitCritical>

	return xReturn;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e014      	b.n	8006abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a94:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <vQueueAddToRegistry+0x4c>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aa0:	490b      	ldr	r1, [pc, #44]	; (8006ad0 <vQueueAddToRegistry+0x4c>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <vQueueAddToRegistry+0x4c>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	4413      	add	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ab6:	e005      	b.n	8006ac4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	d9e7      	bls.n	8006a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20001aec 	.word	0x20001aec

08006ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ae4:	f001 fb7a 	bl	80081dc <vPortEnterCritical>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d103      	bne.n	8006afe <vQueueWaitForMessageRestricted+0x2a>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d103      	bne.n	8006b14 <vQueueWaitForMessageRestricted+0x40>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b14:	f001 fb90 	bl	8008238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fc2f 	bl	800738c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f7ff ff28 	bl	8006984 <prvUnlockQueue>
	}
 8006b34:	bf00      	nop
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08e      	sub	sp, #56	; 0x38
 8006b40:	af04      	add	r7, sp, #16
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <xTaskCreateStatic+0x28>
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	623b      	str	r3, [r7, #32]
 8006b62:	e7fe      	b.n	8006b62 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <xTaskCreateStatic+0x42>
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e7fe      	b.n	8006b7c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b7e:	235c      	movs	r3, #92	; 0x5c
 8006b80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b5c      	cmp	r3, #92	; 0x5c
 8006b86:	d009      	beq.n	8006b9c <xTaskCreateStatic+0x60>
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	e7fe      	b.n	8006b9a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01e      	beq.n	8006be2 <xTaskCreateStatic+0xa6>
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01b      	beq.n	8006be2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9303      	str	r3, [sp, #12]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	9302      	str	r3, [sp, #8]
 8006bc4:	f107 0314 	add.w	r3, r7, #20
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f850 	bl	8006c7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bdc:	f000 f8dc 	bl	8006d98 <prvAddNewTaskToReadyList>
 8006be0:	e001      	b.n	8006be6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006be6:	697b      	ldr	r3, [r7, #20]
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3728      	adds	r7, #40	; 0x28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08c      	sub	sp, #48	; 0x30
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c00:	88fb      	ldrh	r3, [r7, #6]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fc03 	bl	8008410 <pvPortMalloc>
 8006c0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c12:	205c      	movs	r0, #92	; 0x5c
 8006c14:	f001 fbfc 	bl	8008410 <pvPortMalloc>
 8006c18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
 8006c26:	e005      	b.n	8006c34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c28:	6978      	ldr	r0, [r7, #20]
 8006c2a:	f001 fcb3 	bl	8008594 <vPortFree>
 8006c2e:	e001      	b.n	8006c34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d017      	beq.n	8006c6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	2300      	movs	r3, #0
 8006c46:	9303      	str	r3, [sp, #12]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f80e 	bl	8006c7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c5e:	69f8      	ldr	r0, [r7, #28]
 8006c60:	f000 f89a 	bl	8006d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c64:	2301      	movs	r3, #1
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e002      	b.n	8006c70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c70:	69bb      	ldr	r3, [r7, #24]
	}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b088      	sub	sp, #32
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	461a      	mov	r2, r3
 8006c92:	21a5      	movs	r1, #165	; 0xa5
 8006c94:	f001 fdc1 	bl	800881a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <prvInitialiseNewTask+0x56>
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e7fe      	b.n	8006cce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01f      	beq.n	8006d16 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	e012      	b.n	8006d02 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	7819      	ldrb	r1, [r3, #0]
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	3334      	adds	r3, #52	; 0x34
 8006cec:	460a      	mov	r2, r1
 8006cee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d006      	beq.n	8006d0a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b0f      	cmp	r3, #15
 8006d06:	d9e9      	bls.n	8006cdc <prvInitialiseNewTask+0x62>
 8006d08:	e000      	b.n	8006d0c <prvInitialiseNewTask+0x92>
			{
				break;
 8006d0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d14:	e003      	b.n	8006d1e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	2b37      	cmp	r3, #55	; 0x37
 8006d22:	d901      	bls.n	8006d28 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d24:	2337      	movs	r3, #55	; 0x37
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	2200      	movs	r2, #0
 8006d38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff f994 	bl	800606c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	3318      	adds	r3, #24
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff f98f 	bl	800606c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	2200      	movs	r2, #0
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	68f9      	ldr	r1, [r7, #12]
 8006d76:	69b8      	ldr	r0, [r7, #24]
 8006d78:	f001 f90c 	bl	8007f94 <pxPortInitialiseStack>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d8e:	bf00      	nop
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006da0:	f001 fa1c 	bl	80081dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006da4:	4b2d      	ldr	r3, [pc, #180]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dae:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d110      	bne.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dc4:	f000 fc08 	bl	80075d8 <prvInitialiseTaskLists>
 8006dc8:	e00d      	b.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <prvAddNewTaskToReadyList+0xcc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d802      	bhi.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006de0:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006de6:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <prvAddNewTaskToReadyList+0xd4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <prvAddNewTaskToReadyList+0x74>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <prvAddNewTaskToReadyList+0xd4>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <prvAddNewTaskToReadyList+0xd8>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7ff f92f 	bl	8006086 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e28:	f001 fa06 	bl	8008238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <prvAddNewTaskToReadyList+0xcc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00e      	beq.n	8006e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d207      	bcs.n	8006e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <prvAddNewTaskToReadyList+0xdc>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000bc0 	.word	0x20000bc0
 8006e60:	200006ec 	.word	0x200006ec
 8006e64:	20000bcc 	.word	0x20000bcc
 8006e68:	20000bdc 	.word	0x20000bdc
 8006e6c:	20000bc8 	.word	0x20000bc8
 8006e70:	200006f0 	.word	0x200006f0
 8006e74:	e000ed04 	.word	0xe000ed04

08006e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e8a:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <vTaskDelay+0x60>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <vTaskDelay+0x2e>
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60bb      	str	r3, [r7, #8]
 8006ea4:	e7fe      	b.n	8006ea4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006ea6:	f000 f87f 	bl	8006fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fcd7 	bl	8007860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eb2:	f000 f887 	bl	8006fc4 <xTaskResumeAll>
 8006eb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <vTaskDelay+0x64>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000be8 	.word	0x20000be8
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006eee:	463a      	mov	r2, r7
 8006ef0:	1d39      	adds	r1, r7, #4
 8006ef2:	f107 0308 	add.w	r3, r7, #8
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff f864 	bl	8005fc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	9202      	str	r2, [sp, #8]
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	2300      	movs	r3, #0
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	460a      	mov	r2, r1
 8006f0e:	4920      	ldr	r1, [pc, #128]	; (8006f90 <vTaskStartScheduler+0xb0>)
 8006f10:	4820      	ldr	r0, [pc, #128]	; (8006f94 <vTaskStartScheduler+0xb4>)
 8006f12:	f7ff fe13 	bl	8006b3c <xTaskCreateStatic>
 8006f16:	4602      	mov	r2, r0
 8006f18:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <vTaskStartScheduler+0xb8>)
 8006f1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f1c:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <vTaskStartScheduler+0xb8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f24:	2301      	movs	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e001      	b.n	8006f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d102      	bne.n	8006f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f34:	f000 fce8 	bl	8007908 <xTimerCreateTimerTask>
 8006f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d115      	bne.n	8006f6c <vTaskStartScheduler+0x8c>
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <vTaskStartScheduler+0xbc>)
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295
 8006f58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f5a:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <vTaskStartScheduler+0xc0>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f60:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <vTaskStartScheduler+0xc4>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f66:	f001 f89b 	bl	80080a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f6a:	e00d      	b.n	8006f88 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f72:	d109      	bne.n	8006f88 <vTaskStartScheduler+0xa8>
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	e7fe      	b.n	8006f86 <vTaskStartScheduler+0xa6>
}
 8006f88:	bf00      	nop
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	080088b4 	.word	0x080088b4
 8006f94:	080075a9 	.word	0x080075a9
 8006f98:	20000be4 	.word	0x20000be4
 8006f9c:	20000be0 	.word	0x20000be0
 8006fa0:	20000bcc 	.word	0x20000bcc
 8006fa4:	20000bc4 	.word	0x20000bc4

08006fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <vTaskSuspendAll+0x18>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	4a03      	ldr	r2, [pc, #12]	; (8006fc0 <vTaskSuspendAll+0x18>)
 8006fb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006fb6:	bf00      	nop
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000be8 	.word	0x20000be8

08006fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fd2:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <xTaskResumeAll+0x114>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <xTaskResumeAll+0x2a>
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	e7fe      	b.n	8006fec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fee:	f001 f8f5 	bl	80081dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ff2:	4b39      	ldr	r3, [pc, #228]	; (80070d8 <xTaskResumeAll+0x114>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	4a37      	ldr	r2, [pc, #220]	; (80070d8 <xTaskResumeAll+0x114>)
 8006ffa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffc:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <xTaskResumeAll+0x114>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d162      	bne.n	80070ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007004:	4b35      	ldr	r3, [pc, #212]	; (80070dc <xTaskResumeAll+0x118>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d05e      	beq.n	80070ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800700c:	e02f      	b.n	800706e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700e:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <xTaskResumeAll+0x11c>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3318      	adds	r3, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff f890 	bl	8006140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff f88b 	bl	8006140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	4b2d      	ldr	r3, [pc, #180]	; (80070e4 <xTaskResumeAll+0x120>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d903      	bls.n	800703e <xTaskResumeAll+0x7a>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	4a2a      	ldr	r2, [pc, #168]	; (80070e4 <xTaskResumeAll+0x120>)
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <xTaskResumeAll+0x124>)
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7ff f816 	bl	8006086 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	4b23      	ldr	r3, [pc, #140]	; (80070ec <xTaskResumeAll+0x128>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	429a      	cmp	r2, r3
 8007066:	d302      	bcc.n	800706e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007068:	4b21      	ldr	r3, [pc, #132]	; (80070f0 <xTaskResumeAll+0x12c>)
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800706e:	4b1c      	ldr	r3, [pc, #112]	; (80070e0 <xTaskResumeAll+0x11c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1cb      	bne.n	800700e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800707c:	f000 fb46 	bl	800770c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007080:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <xTaskResumeAll+0x130>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d010      	beq.n	80070ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800708c:	f000 f846 	bl	800711c <xTaskIncrementTick>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007096:	4b16      	ldr	r3, [pc, #88]	; (80070f0 <xTaskResumeAll+0x12c>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f1      	bne.n	800708c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80070a8:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <xTaskResumeAll+0x130>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070ae:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <xTaskResumeAll+0x12c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <xTaskResumeAll+0x134>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070ca:	f001 f8b5 	bl	8008238 <vPortExitCritical>

	return xAlreadyYielded;
 80070ce:	68bb      	ldr	r3, [r7, #8]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000be8 	.word	0x20000be8
 80070dc:	20000bc0 	.word	0x20000bc0
 80070e0:	20000b80 	.word	0x20000b80
 80070e4:	20000bc8 	.word	0x20000bc8
 80070e8:	200006f0 	.word	0x200006f0
 80070ec:	200006ec 	.word	0x200006ec
 80070f0:	20000bd4 	.word	0x20000bd4
 80070f4:	20000bd0 	.word	0x20000bd0
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <xTaskGetTickCount+0x1c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007108:	687b      	ldr	r3, [r7, #4]
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000bc4 	.word	0x20000bc4

0800711c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007126:	4b4e      	ldr	r3, [pc, #312]	; (8007260 <xTaskIncrementTick+0x144>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	f040 8088 	bne.w	8007240 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007130:	4b4c      	ldr	r3, [pc, #304]	; (8007264 <xTaskIncrementTick+0x148>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007138:	4a4a      	ldr	r2, [pc, #296]	; (8007264 <xTaskIncrementTick+0x148>)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11f      	bne.n	8007184 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007144:	4b48      	ldr	r3, [pc, #288]	; (8007268 <xTaskIncrementTick+0x14c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <xTaskIncrementTick+0x46>
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	e7fe      	b.n	8007160 <xTaskIncrementTick+0x44>
 8007162:	4b41      	ldr	r3, [pc, #260]	; (8007268 <xTaskIncrementTick+0x14c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	4b40      	ldr	r3, [pc, #256]	; (800726c <xTaskIncrementTick+0x150>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a3e      	ldr	r2, [pc, #248]	; (8007268 <xTaskIncrementTick+0x14c>)
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	4a3e      	ldr	r2, [pc, #248]	; (800726c <xTaskIncrementTick+0x150>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <xTaskIncrementTick+0x154>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	4a3c      	ldr	r2, [pc, #240]	; (8007270 <xTaskIncrementTick+0x154>)
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	f000 fac4 	bl	800770c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007184:	4b3b      	ldr	r3, [pc, #236]	; (8007274 <xTaskIncrementTick+0x158>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	429a      	cmp	r2, r3
 800718c:	d349      	bcc.n	8007222 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800718e:	4b36      	ldr	r3, [pc, #216]	; (8007268 <xTaskIncrementTick+0x14c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007198:	4b36      	ldr	r3, [pc, #216]	; (8007274 <xTaskIncrementTick+0x158>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	601a      	str	r2, [r3, #0]
					break;
 80071a0:	e03f      	b.n	8007222 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a2:	4b31      	ldr	r3, [pc, #196]	; (8007268 <xTaskIncrementTick+0x14c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d203      	bcs.n	80071c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071ba:	4a2e      	ldr	r2, [pc, #184]	; (8007274 <xTaskIncrementTick+0x158>)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071c0:	e02f      	b.n	8007222 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe ffba 	bl	8006140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3318      	adds	r3, #24
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe ffb1 	bl	8006140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	4b25      	ldr	r3, [pc, #148]	; (8007278 <xTaskIncrementTick+0x15c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d903      	bls.n	80071f2 <xTaskIncrementTick+0xd6>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	4a22      	ldr	r2, [pc, #136]	; (8007278 <xTaskIncrementTick+0x15c>)
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4a1f      	ldr	r2, [pc, #124]	; (800727c <xTaskIncrementTick+0x160>)
 8007200:	441a      	add	r2, r3
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	3304      	adds	r3, #4
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f7fe ff3c 	bl	8006086 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007212:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <xTaskIncrementTick+0x164>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	429a      	cmp	r2, r3
 800721a:	d3b8      	bcc.n	800718e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800721c:	2301      	movs	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007220:	e7b5      	b.n	800718e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007222:	4b17      	ldr	r3, [pc, #92]	; (8007280 <xTaskIncrementTick+0x164>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007228:	4914      	ldr	r1, [pc, #80]	; (800727c <xTaskIncrementTick+0x160>)
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d907      	bls.n	800724a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800723a:	2301      	movs	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	e004      	b.n	800724a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007240:	4b10      	ldr	r3, [pc, #64]	; (8007284 <xTaskIncrementTick+0x168>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a0f      	ldr	r2, [pc, #60]	; (8007284 <xTaskIncrementTick+0x168>)
 8007248:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <xTaskIncrementTick+0x16c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007252:	2301      	movs	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007256:	697b      	ldr	r3, [r7, #20]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000be8 	.word	0x20000be8
 8007264:	20000bc4 	.word	0x20000bc4
 8007268:	20000b78 	.word	0x20000b78
 800726c:	20000b7c 	.word	0x20000b7c
 8007270:	20000bd8 	.word	0x20000bd8
 8007274:	20000be0 	.word	0x20000be0
 8007278:	20000bc8 	.word	0x20000bc8
 800727c:	200006f0 	.word	0x200006f0
 8007280:	200006ec 	.word	0x200006ec
 8007284:	20000bd0 	.word	0x20000bd0
 8007288:	20000bd4 	.word	0x20000bd4

0800728c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007292:	4b27      	ldr	r3, [pc, #156]	; (8007330 <vTaskSwitchContext+0xa4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800729a:	4b26      	ldr	r3, [pc, #152]	; (8007334 <vTaskSwitchContext+0xa8>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072a0:	e040      	b.n	8007324 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <vTaskSwitchContext+0xa8>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a8:	4b23      	ldr	r3, [pc, #140]	; (8007338 <vTaskSwitchContext+0xac>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e00f      	b.n	80072d0 <vTaskSwitchContext+0x44>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <vTaskSwitchContext+0x3e>
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	e7fe      	b.n	80072c8 <vTaskSwitchContext+0x3c>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	491a      	ldr	r1, [pc, #104]	; (800733c <vTaskSwitchContext+0xb0>)
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0e5      	beq.n	80072b0 <vTaskSwitchContext+0x24>
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4a13      	ldr	r2, [pc, #76]	; (800733c <vTaskSwitchContext+0xb0>)
 80072f0:	4413      	add	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	3308      	adds	r3, #8
 8007306:	429a      	cmp	r2, r3
 8007308:	d104      	bne.n	8007314 <vTaskSwitchContext+0x88>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	605a      	str	r2, [r3, #4]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	4a09      	ldr	r2, [pc, #36]	; (8007340 <vTaskSwitchContext+0xb4>)
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	4a06      	ldr	r2, [pc, #24]	; (8007338 <vTaskSwitchContext+0xac>)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6013      	str	r3, [r2, #0]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	20000be8 	.word	0x20000be8
 8007334:	20000bd4 	.word	0x20000bd4
 8007338:	20000bc8 	.word	0x20000bc8
 800733c:	200006f0 	.word	0x200006f0
 8007340:	200006ec 	.word	0x200006ec

08007344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <vTaskPlaceOnEventList+0x24>
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	e7fe      	b.n	8007366 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <vTaskPlaceOnEventList+0x44>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3318      	adds	r3, #24
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fe feac 	bl	80060ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007376:	2101      	movs	r1, #1
 8007378:	6838      	ldr	r0, [r7, #0]
 800737a:	f000 fa71 	bl	8007860 <prvAddCurrentTaskToDelayedList>
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200006ec 	.word	0x200006ec

0800738c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <vTaskPlaceOnEventListRestricted+0x26>
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	e7fe      	b.n	80073b0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b2:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <vTaskPlaceOnEventListRestricted+0x50>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3318      	adds	r3, #24
 80073b8:	4619      	mov	r1, r3
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7fe fe63 	bl	8006086 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	68b8      	ldr	r0, [r7, #8]
 80073d0:	f000 fa46 	bl	8007860 <prvAddCurrentTaskToDelayedList>
	}
 80073d4:	bf00      	nop
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	200006ec 	.word	0x200006ec

080073e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <xTaskRemoveFromEventList+0x2a>
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e7fe      	b.n	8007408 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3318      	adds	r3, #24
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fe96 	bl	8006140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007414:	4b1d      	ldr	r3, [pc, #116]	; (800748c <xTaskRemoveFromEventList+0xac>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11d      	bne.n	8007458 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fe8d 	bl	8006140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742a:	4b19      	ldr	r3, [pc, #100]	; (8007490 <xTaskRemoveFromEventList+0xb0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d903      	bls.n	800743a <xTaskRemoveFromEventList+0x5a>
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	4a16      	ldr	r2, [pc, #88]	; (8007490 <xTaskRemoveFromEventList+0xb0>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a13      	ldr	r2, [pc, #76]	; (8007494 <xTaskRemoveFromEventList+0xb4>)
 8007448:	441a      	add	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe fe18 	bl	8006086 <vListInsertEnd>
 8007456:	e005      	b.n	8007464 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3318      	adds	r3, #24
 800745c:	4619      	mov	r1, r3
 800745e:	480e      	ldr	r0, [pc, #56]	; (8007498 <xTaskRemoveFromEventList+0xb8>)
 8007460:	f7fe fe11 	bl	8006086 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <xTaskRemoveFromEventList+0xbc>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	429a      	cmp	r2, r3
 8007470:	d905      	bls.n	800747e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <xTaskRemoveFromEventList+0xc0>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e001      	b.n	8007482 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000be8 	.word	0x20000be8
 8007490:	20000bc8 	.word	0x20000bc8
 8007494:	200006f0 	.word	0x200006f0
 8007498:	20000b80 	.word	0x20000b80
 800749c:	200006ec 	.word	0x200006ec
 80074a0:	20000bd4 	.word	0x20000bd4

080074a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <vTaskInternalSetTimeOutState+0x24>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <vTaskInternalSetTimeOutState+0x28>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000bd8 	.word	0x20000bd8
 80074cc:	20000bc4 	.word	0x20000bc4

080074d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d109      	bne.n	80074f4 <xTaskCheckForTimeOut+0x24>
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
 80074f2:	e7fe      	b.n	80074f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <xTaskCheckForTimeOut+0x3e>
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e7fe      	b.n	800750c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800750e:	f000 fe65 	bl	80081dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007512:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <xTaskCheckForTimeOut+0xb8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d102      	bne.n	8007532 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	e023      	b.n	800757a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4b15      	ldr	r3, [pc, #84]	; (800758c <xTaskCheckForTimeOut+0xbc>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d007      	beq.n	800754e <xTaskCheckForTimeOut+0x7e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	429a      	cmp	r2, r3
 8007546:	d302      	bcc.n	800754e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	e015      	b.n	800757a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	429a      	cmp	r2, r3
 8007556:	d20b      	bcs.n	8007570 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff ff9d 	bl	80074a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	e004      	b.n	800757a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800757a:	f000 fe5d 	bl	8008238 <vPortExitCritical>

	return xReturn;
 800757e:	69fb      	ldr	r3, [r7, #28]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20000bc4 	.word	0x20000bc4
 800758c:	20000bd8 	.word	0x20000bd8

08007590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007594:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <vTaskMissedYield+0x14>)
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
}
 800759a:	bf00      	nop
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	20000bd4 	.word	0x20000bd4

080075a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075b0:	f000 f852 	bl	8007658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075b4:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <prvIdleTask+0x28>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d9f9      	bls.n	80075b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <prvIdleTask+0x2c>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075cc:	e7f0      	b.n	80075b0 <prvIdleTask+0x8>
 80075ce:	bf00      	nop
 80075d0:	200006f0 	.word	0x200006f0
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	e00c      	b.n	80075fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4a12      	ldr	r2, [pc, #72]	; (8007638 <prvInitialiseTaskLists+0x60>)
 80075f0:	4413      	add	r3, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fd1a 	bl	800602c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3301      	adds	r3, #1
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b37      	cmp	r3, #55	; 0x37
 8007602:	d9ef      	bls.n	80075e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007604:	480d      	ldr	r0, [pc, #52]	; (800763c <prvInitialiseTaskLists+0x64>)
 8007606:	f7fe fd11 	bl	800602c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800760a:	480d      	ldr	r0, [pc, #52]	; (8007640 <prvInitialiseTaskLists+0x68>)
 800760c:	f7fe fd0e 	bl	800602c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007610:	480c      	ldr	r0, [pc, #48]	; (8007644 <prvInitialiseTaskLists+0x6c>)
 8007612:	f7fe fd0b 	bl	800602c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007616:	480c      	ldr	r0, [pc, #48]	; (8007648 <prvInitialiseTaskLists+0x70>)
 8007618:	f7fe fd08 	bl	800602c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800761c:	480b      	ldr	r0, [pc, #44]	; (800764c <prvInitialiseTaskLists+0x74>)
 800761e:	f7fe fd05 	bl	800602c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007622:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <prvInitialiseTaskLists+0x78>)
 8007624:	4a05      	ldr	r2, [pc, #20]	; (800763c <prvInitialiseTaskLists+0x64>)
 8007626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvInitialiseTaskLists+0x7c>)
 800762a:	4a05      	ldr	r2, [pc, #20]	; (8007640 <prvInitialiseTaskLists+0x68>)
 800762c:	601a      	str	r2, [r3, #0]
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	200006f0 	.word	0x200006f0
 800763c:	20000b50 	.word	0x20000b50
 8007640:	20000b64 	.word	0x20000b64
 8007644:	20000b80 	.word	0x20000b80
 8007648:	20000b94 	.word	0x20000b94
 800764c:	20000bac 	.word	0x20000bac
 8007650:	20000b78 	.word	0x20000b78
 8007654:	20000b7c 	.word	0x20000b7c

08007658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800765e:	e019      	b.n	8007694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007660:	f000 fdbc 	bl	80081dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <prvCheckTasksWaitingTermination+0x4c>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fd65 	bl	8006140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvCheckTasksWaitingTermination+0x50>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3b01      	subs	r3, #1
 800767c:	4a0a      	ldr	r2, [pc, #40]	; (80076a8 <prvCheckTasksWaitingTermination+0x50>)
 800767e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvCheckTasksWaitingTermination+0x54>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3b01      	subs	r3, #1
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <prvCheckTasksWaitingTermination+0x54>)
 8007688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800768a:	f000 fdd5 	bl	8008238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f80e 	bl	80076b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <prvCheckTasksWaitingTermination+0x54>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e1      	bne.n	8007660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000b94 	.word	0x20000b94
 80076a8:	20000bc0 	.word	0x20000bc0
 80076ac:	20000ba8 	.word	0x20000ba8

080076b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d108      	bne.n	80076d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 ff64 	bl	8008594 <vPortFree>
				vPortFree( pxTCB );
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 ff61 	bl	8008594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076d2:	e017      	b.n	8007704 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d103      	bne.n	80076e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 ff58 	bl	8008594 <vPortFree>
	}
 80076e4:	e00e      	b.n	8007704 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d009      	beq.n	8007704 <prvDeleteTCB+0x54>
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	e7fe      	b.n	8007702 <prvDeleteTCB+0x52>
	}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <prvResetNextTaskUnblockTime+0x38>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <prvResetNextTaskUnblockTime+0x3c>)
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007724:	e008      	b.n	8007738 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007726:	4b07      	ldr	r3, [pc, #28]	; (8007744 <prvResetNextTaskUnblockTime+0x38>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4a04      	ldr	r2, [pc, #16]	; (8007748 <prvResetNextTaskUnblockTime+0x3c>)
 8007736:	6013      	str	r3, [r2, #0]
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20000b78 	.word	0x20000b78
 8007748:	20000be0 	.word	0x20000be0

0800774c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <xTaskGetSchedulerState+0x34>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800775a:	2301      	movs	r3, #1
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	e008      	b.n	8007772 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007760:	4b08      	ldr	r3, [pc, #32]	; (8007784 <xTaskGetSchedulerState+0x38>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d102      	bne.n	800776e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007768:	2302      	movs	r3, #2
 800776a:	607b      	str	r3, [r7, #4]
 800776c:	e001      	b.n	8007772 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007772:	687b      	ldr	r3, [r7, #4]
	}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20000bcc 	.word	0x20000bcc
 8007784:	20000be8 	.word	0x20000be8

08007788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d054      	beq.n	8007848 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800779e:	4b2d      	ldr	r3, [pc, #180]	; (8007854 <xTaskPriorityDisinherit+0xcc>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d009      	beq.n	80077bc <xTaskPriorityDisinherit+0x34>
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e7fe      	b.n	80077ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d109      	bne.n	80077d8 <xTaskPriorityDisinherit+0x50>
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	e7fe      	b.n	80077d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077dc:	1e5a      	subs	r2, r3, #1
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d02c      	beq.n	8007848 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d128      	bne.n	8007848 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fca0 	bl	8006140 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <xTaskPriorityDisinherit+0xd0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d903      	bls.n	8007828 <xTaskPriorityDisinherit+0xa0>
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a0c      	ldr	r2, [pc, #48]	; (8007858 <xTaskPriorityDisinherit+0xd0>)
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4a09      	ldr	r2, [pc, #36]	; (800785c <xTaskPriorityDisinherit+0xd4>)
 8007836:	441a      	add	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	3304      	adds	r3, #4
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f7fe fc21 	bl	8006086 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007844:	2301      	movs	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007848:	697b      	ldr	r3, [r7, #20]
	}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	200006ec 	.word	0x200006ec
 8007858:	20000bc8 	.word	0x20000bc8
 800785c:	200006f0 	.word	0x200006f0

08007860 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800786a:	4b21      	ldr	r3, [pc, #132]	; (80078f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007870:	4b20      	ldr	r3, [pc, #128]	; (80078f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3304      	adds	r3, #4
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fc62 	bl	8006140 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d10a      	bne.n	800789a <prvAddCurrentTaskToDelayedList+0x3a>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d007      	beq.n	800789a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800788a:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3304      	adds	r3, #4
 8007890:	4619      	mov	r1, r3
 8007892:	4819      	ldr	r0, [pc, #100]	; (80078f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007894:	f7fe fbf7 	bl	8006086 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007898:	e026      	b.n	80078e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078a2:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d209      	bcs.n	80078c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078b2:	4b12      	ldr	r3, [pc, #72]	; (80078fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fe fc05 	bl	80060ce <vListInsert>
}
 80078c4:	e010      	b.n	80078e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f7fe fbfb 	bl	80060ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d202      	bcs.n	80078e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078e2:	4a08      	ldr	r2, [pc, #32]	; (8007904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6013      	str	r3, [r2, #0]
}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000bc4 	.word	0x20000bc4
 80078f4:	200006ec 	.word	0x200006ec
 80078f8:	20000bac 	.word	0x20000bac
 80078fc:	20000b7c 	.word	0x20000b7c
 8007900:	20000b78 	.word	0x20000b78
 8007904:	20000be0 	.word	0x20000be0

08007908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007912:	f000 faff 	bl	8007f14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007916:	4b1c      	ldr	r3, [pc, #112]	; (8007988 <xTimerCreateTimerTask+0x80>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d021      	beq.n	8007962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007926:	1d3a      	adds	r2, r7, #4
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	f107 030c 	add.w	r3, r7, #12
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe fb61 	bl	8005ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	9202      	str	r2, [sp, #8]
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	2302      	movs	r3, #2
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	2300      	movs	r3, #0
 8007946:	460a      	mov	r2, r1
 8007948:	4910      	ldr	r1, [pc, #64]	; (800798c <xTimerCreateTimerTask+0x84>)
 800794a:	4811      	ldr	r0, [pc, #68]	; (8007990 <xTimerCreateTimerTask+0x88>)
 800794c:	f7ff f8f6 	bl	8006b3c <xTaskCreateStatic>
 8007950:	4602      	mov	r2, r0
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <xTimerCreateTimerTask+0x8c>)
 8007954:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <xTimerCreateTimerTask+0x8c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800795e:	2301      	movs	r3, #1
 8007960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d109      	bne.n	800797c <xTimerCreateTimerTask+0x74>
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	e7fe      	b.n	800797a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800797c:	697b      	ldr	r3, [r7, #20]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000c1c 	.word	0x20000c1c
 800798c:	080088bc 	.word	0x080088bc
 8007990:	08007ac9 	.word	0x08007ac9
 8007994:	20000c20 	.word	0x20000c20

08007998 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <xTimerGenericCommand+0x2c>
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e7fe      	b.n	80079c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079c4:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <xTimerGenericCommand+0x94>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d02a      	beq.n	8007a22 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b05      	cmp	r3, #5
 80079dc:	dc18      	bgt.n	8007a10 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079de:	f7ff feb5 	bl	800774c <xTaskGetSchedulerState>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d109      	bne.n	80079fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079e8:	4b10      	ldr	r3, [pc, #64]	; (8007a2c <xTimerGenericCommand+0x94>)
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	f107 0110 	add.w	r1, r7, #16
 80079f0:	2300      	movs	r3, #0
 80079f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f4:	f7fe fccc 	bl	8006390 <xQueueGenericSend>
 80079f8:	6278      	str	r0, [r7, #36]	; 0x24
 80079fa:	e012      	b.n	8007a22 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <xTimerGenericCommand+0x94>)
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	f107 0110 	add.w	r1, r7, #16
 8007a04:	2300      	movs	r3, #0
 8007a06:	2200      	movs	r2, #0
 8007a08:	f7fe fcc2 	bl	8006390 <xQueueGenericSend>
 8007a0c:	6278      	str	r0, [r7, #36]	; 0x24
 8007a0e:	e008      	b.n	8007a22 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <xTimerGenericCommand+0x94>)
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	f107 0110 	add.w	r1, r7, #16
 8007a18:	2300      	movs	r3, #0
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	f7fe fdb2 	bl	8006584 <xQueueGenericSendFromISR>
 8007a20:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3728      	adds	r7, #40	; 0x28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000c1c 	.word	0x20000c1c

08007a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3a:	4b22      	ldr	r3, [pc, #136]	; (8007ac4 <prvProcessExpiredTimer+0x94>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fb79 	bl	8006140 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d021      	beq.n	8007aa0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	18d1      	adds	r1, r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	6978      	ldr	r0, [r7, #20]
 8007a6a:	f000 f8d1 	bl	8007c10 <prvInsertTimerInActiveList>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d01e      	beq.n	8007ab2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a74:	2300      	movs	r3, #0
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	6978      	ldr	r0, [r7, #20]
 8007a80:	f7ff ff8a 	bl	8007998 <xTimerGenericCommand>
 8007a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d112      	bne.n	8007ab2 <prvProcessExpiredTimer+0x82>
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e7fe      	b.n	8007a9e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aa6:	f023 0301 	bic.w	r3, r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	6978      	ldr	r0, [r7, #20]
 8007ab8:	4798      	blx	r3
}
 8007aba:	bf00      	nop
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000c14 	.word	0x20000c14

08007ac8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ad0:	f107 0308 	add.w	r3, r7, #8
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 f857 	bl	8007b88 <prvGetNextExpireTime>
 8007ada:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f803 	bl	8007aec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ae6:	f000 f8d5 	bl	8007c94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aea:	e7f1      	b.n	8007ad0 <prvTimerTask+0x8>

08007aec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007af6:	f7ff fa57 	bl	8006fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007afa:	f107 0308 	add.w	r3, r7, #8
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 f866 	bl	8007bd0 <prvSampleTimeNow>
 8007b04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d130      	bne.n	8007b6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <prvProcessTimerOrBlockTask+0x3c>
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d806      	bhi.n	8007b28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b1a:	f7ff fa53 	bl	8006fc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff ff85 	bl	8007a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b26:	e024      	b.n	8007b72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d008      	beq.n	8007b40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <prvProcessTimerOrBlockTask+0x90>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <prvProcessTimerOrBlockTask+0x50>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e000      	b.n	8007b3e <prvProcessTimerOrBlockTask+0x52>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <prvProcessTimerOrBlockTask+0x94>)
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f7fe ffc1 	bl	8006ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b52:	f7ff fa37 	bl	8006fc4 <xTaskResumeAll>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <prvProcessTimerOrBlockTask+0x98>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
}
 8007b6c:	e001      	b.n	8007b72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b6e:	f7ff fa29 	bl	8006fc4 <xTaskResumeAll>
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000c18 	.word	0x20000c18
 8007b80:	20000c1c 	.word	0x20000c1c
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b90:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <prvGetNextExpireTime+0x44>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <prvGetNextExpireTime+0x16>
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	e000      	b.n	8007ba0 <prvGetNextExpireTime+0x18>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d105      	bne.n	8007bb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bac:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <prvGetNextExpireTime+0x44>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	e001      	b.n	8007bbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000c14 	.word	0x20000c14

08007bd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bd8:	f7ff fa90 	bl	80070fc <xTaskGetTickCount>
 8007bdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bde:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <prvSampleTimeNow+0x3c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d205      	bcs.n	8007bf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007be8:	f000 f930 	bl	8007e4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	e002      	b.n	8007bfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bfa:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <prvSampleTimeNow+0x3c>)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c00:	68fb      	ldr	r3, [r7, #12]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000c24 	.word	0x20000c24

08007c10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d812      	bhi.n	8007c5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	1ad2      	subs	r2, r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d302      	bcc.n	8007c4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c44:	2301      	movs	r3, #1
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	e01b      	b.n	8007c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c4a:	4b10      	ldr	r3, [pc, #64]	; (8007c8c <prvInsertTimerInActiveList+0x7c>)
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3304      	adds	r3, #4
 8007c52:	4619      	mov	r1, r3
 8007c54:	4610      	mov	r0, r2
 8007c56:	f7fe fa3a 	bl	80060ce <vListInsert>
 8007c5a:	e012      	b.n	8007c82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d206      	bcs.n	8007c72 <prvInsertTimerInActiveList+0x62>
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e007      	b.n	8007c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c72:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <prvInsertTimerInActiveList+0x80>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7fe fa26 	bl	80060ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c82:	697b      	ldr	r3, [r7, #20]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000c18 	.word	0x20000c18
 8007c90:	20000c14 	.word	0x20000c14

08007c94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	; 0x38
 8007c98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c9a:	e0c6      	b.n	8007e2a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da17      	bge.n	8007cd2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <prvProcessReceivedCommands+0x2e>
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e7fe      	b.n	8007cc0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc8:	6850      	ldr	r0, [r2, #4]
 8007cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ccc:	6892      	ldr	r2, [r2, #8]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f2c0 80a7 	blt.w	8007e28 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	3304      	adds	r3, #4
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fa28 	bl	8006140 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff ff6c 	bl	8007bd0 <prvSampleTimeNow>
 8007cf8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b09      	cmp	r3, #9
 8007cfe:	f200 8094 	bhi.w	8007e2a <prvProcessReceivedCommands+0x196>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <prvProcessReceivedCommands+0x74>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d31 	.word	0x08007d31
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007da3 	.word	0x08007da3
 8007d18:	08007db7 	.word	0x08007db7
 8007d1c:	08007dff 	.word	0x08007dff
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d31 	.word	0x08007d31
 8007d28:	08007da3 	.word	0x08007da3
 8007d2c:	08007db7 	.word	0x08007db7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	18d1      	adds	r1, r2, r3
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d50:	f7ff ff5e 	bl	8007c10 <prvInsertTimerInActiveList>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d067      	beq.n	8007e2a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d05c      	beq.n	8007e2a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	441a      	add	r2, r3
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2100      	movs	r1, #0
 8007d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d82:	f7ff fe09 	bl	8007998 <xTimerGenericCommand>
 8007d86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d14d      	bne.n	8007e2a <prvProcessReceivedCommands+0x196>
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	61bb      	str	r3, [r7, #24]
 8007da0:	e7fe      	b.n	8007da0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007db4:	e039      	b.n	8007e2a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d109      	bne.n	8007dea <prvProcessReceivedCommands+0x156>
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e7fe      	b.n	8007de8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	18d1      	adds	r1, r2, r3
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df8:	f7ff ff0a 	bl	8007c10 <prvInsertTimerInActiveList>
					break;
 8007dfc:	e015      	b.n	8007e2a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d103      	bne.n	8007e14 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0e:	f000 fbc1 	bl	8008594 <vPortFree>
 8007e12:	e00a      	b.n	8007e2a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e1a:	f023 0301 	bic.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e26:	e000      	b.n	8007e2a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e2a:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <prvProcessReceivedCommands+0x1b4>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	1d39      	adds	r1, r7, #4
 8007e30:	2200      	movs	r2, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fc3a 	bl	80066ac <xQueueReceive>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f47f af2e 	bne.w	8007c9c <prvProcessReceivedCommands+0x8>
	}
}
 8007e40:	bf00      	nop
 8007e42:	3730      	adds	r7, #48	; 0x30
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20000c1c 	.word	0x20000c1c

08007e4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e52:	e047      	b.n	8007ee4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e54:	4b2d      	ldr	r3, [pc, #180]	; (8007f0c <prvSwitchTimerLists+0xc0>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5e:	4b2b      	ldr	r3, [pc, #172]	; (8007f0c <prvSwitchTimerLists+0xc0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe f967 	bl	8006140 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d02d      	beq.n	8007ee4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4413      	add	r3, r2
 8007e90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d90e      	bls.n	8007eb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ea6:	4b19      	ldr	r3, [pc, #100]	; (8007f0c <prvSwitchTimerLists+0xc0>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7fe f90c 	bl	80060ce <vListInsert>
 8007eb6:	e015      	b.n	8007ee4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff fd68 	bl	8007998 <xTimerGenericCommand>
 8007ec8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <prvSwitchTimerLists+0x98>
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	603b      	str	r3, [r7, #0]
 8007ee2:	e7fe      	b.n	8007ee2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ee4:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <prvSwitchTimerLists+0xc0>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1b2      	bne.n	8007e54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <prvSwitchTimerLists+0xc0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <prvSwitchTimerLists+0xc4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <prvSwitchTimerLists+0xc0>)
 8007efa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <prvSwitchTimerLists+0xc4>)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6013      	str	r3, [r2, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000c14 	.word	0x20000c14
 8007f10:	20000c18 	.word	0x20000c18

08007f14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f1a:	f000 f95f 	bl	80081dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f1e:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d120      	bne.n	8007f68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f26:	4814      	ldr	r0, [pc, #80]	; (8007f78 <prvCheckForValidListAndQueue+0x64>)
 8007f28:	f7fe f880 	bl	800602c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f2c:	4813      	ldr	r0, [pc, #76]	; (8007f7c <prvCheckForValidListAndQueue+0x68>)
 8007f2e:	f7fe f87d 	bl	800602c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f32:	4b13      	ldr	r3, [pc, #76]	; (8007f80 <prvCheckForValidListAndQueue+0x6c>)
 8007f34:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <prvCheckForValidListAndQueue+0x64>)
 8007f36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f38:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <prvCheckForValidListAndQueue+0x70>)
 8007f3a:	4a10      	ldr	r2, [pc, #64]	; (8007f7c <prvCheckForValidListAndQueue+0x68>)
 8007f3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <prvCheckForValidListAndQueue+0x74>)
 8007f44:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <prvCheckForValidListAndQueue+0x78>)
 8007f46:	2110      	movs	r1, #16
 8007f48:	200a      	movs	r0, #10
 8007f4a:	f7fe f98b 	bl	8006264 <xQueueGenericCreateStatic>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f52:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <prvCheckForValidListAndQueue+0x60>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	490b      	ldr	r1, [pc, #44]	; (8007f90 <prvCheckForValidListAndQueue+0x7c>)
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fd8e 	bl	8006a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f68:	f000 f966 	bl	8008238 <vPortExitCritical>
}
 8007f6c:	bf00      	nop
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000c1c 	.word	0x20000c1c
 8007f78:	20000bec 	.word	0x20000bec
 8007f7c:	20000c00 	.word	0x20000c00
 8007f80:	20000c14 	.word	0x20000c14
 8007f84:	20000c18 	.word	0x20000c18
 8007f88:	20000cc8 	.word	0x20000cc8
 8007f8c:	20000c28 	.word	0x20000c28
 8007f90:	080088c4 	.word	0x080088c4

08007f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3b04      	subs	r3, #4
 8007fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3b04      	subs	r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0201 	bic.w	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fc4:	4a0c      	ldr	r2, [pc, #48]	; (8007ff8 <pxPortInitialiseStack+0x64>)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3b14      	subs	r3, #20
 8007fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3b04      	subs	r3, #4
 8007fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f06f 0202 	mvn.w	r2, #2
 8007fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3b20      	subs	r3, #32
 8007fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fea:	68fb      	ldr	r3, [r7, #12]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	08007ffd 	.word	0x08007ffd

08007ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <prvTaskExitError+0x50>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d009      	beq.n	8008024 <prvTaskExitError+0x28>
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e7fe      	b.n	8008022 <prvTaskExitError+0x26>
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008036:	bf00      	nop
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0fc      	beq.n	8008038 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	2000000c 	.word	0x2000000c

08008050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <pxCurrentTCBConst2>)
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	6808      	ldr	r0, [r1, #0]
 8008056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805a:	f380 8809 	msr	PSP, r0
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f380 8811 	msr	BASEPRI, r0
 800806a:	4770      	bx	lr
 800806c:	f3af 8000 	nop.w

08008070 <pxCurrentTCBConst2>:
 8008070:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop

08008078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008078:	4808      	ldr	r0, [pc, #32]	; (800809c <prvPortStartFirstTask+0x24>)
 800807a:	6800      	ldr	r0, [r0, #0]
 800807c:	6800      	ldr	r0, [r0, #0]
 800807e:	f380 8808 	msr	MSP, r0
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f380 8814 	msr	CONTROL, r0
 800808a:	b662      	cpsie	i
 800808c:	b661      	cpsie	f
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	df00      	svc	0
 8008098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800809a:	bf00      	nop
 800809c:	e000ed08 	.word	0xe000ed08

080080a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080a6:	4b44      	ldr	r3, [pc, #272]	; (80081b8 <xPortStartScheduler+0x118>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a44      	ldr	r2, [pc, #272]	; (80081bc <xPortStartScheduler+0x11c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d109      	bne.n	80080c4 <xPortStartScheduler+0x24>
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	e7fe      	b.n	80080c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080c4:	4b3c      	ldr	r3, [pc, #240]	; (80081b8 <xPortStartScheduler+0x118>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a3d      	ldr	r2, [pc, #244]	; (80081c0 <xPortStartScheduler+0x120>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d109      	bne.n	80080e2 <xPortStartScheduler+0x42>
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e7fe      	b.n	80080e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080e2:	4b38      	ldr	r3, [pc, #224]	; (80081c4 <xPortStartScheduler+0x124>)
 80080e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	22ff      	movs	r2, #255	; 0xff
 80080f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008104:	b2da      	uxtb	r2, r3
 8008106:	4b30      	ldr	r3, [pc, #192]	; (80081c8 <xPortStartScheduler+0x128>)
 8008108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800810a:	4b30      	ldr	r3, [pc, #192]	; (80081cc <xPortStartScheduler+0x12c>)
 800810c:	2207      	movs	r2, #7
 800810e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008110:	e009      	b.n	8008126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008112:	4b2e      	ldr	r3, [pc, #184]	; (80081cc <xPortStartScheduler+0x12c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3b01      	subs	r3, #1
 8008118:	4a2c      	ldr	r2, [pc, #176]	; (80081cc <xPortStartScheduler+0x12c>)
 800811a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	b2db      	uxtb	r3, r3
 8008124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812e:	2b80      	cmp	r3, #128	; 0x80
 8008130:	d0ef      	beq.n	8008112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008132:	4b26      	ldr	r3, [pc, #152]	; (80081cc <xPortStartScheduler+0x12c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f1c3 0307 	rsb	r3, r3, #7
 800813a:	2b04      	cmp	r3, #4
 800813c:	d009      	beq.n	8008152 <xPortStartScheduler+0xb2>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60bb      	str	r3, [r7, #8]
 8008150:	e7fe      	b.n	8008150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008152:	4b1e      	ldr	r3, [pc, #120]	; (80081cc <xPortStartScheduler+0x12c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	4a1c      	ldr	r2, [pc, #112]	; (80081cc <xPortStartScheduler+0x12c>)
 800815a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800815c:	4b1b      	ldr	r3, [pc, #108]	; (80081cc <xPortStartScheduler+0x12c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008164:	4a19      	ldr	r2, [pc, #100]	; (80081cc <xPortStartScheduler+0x12c>)
 8008166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	b2da      	uxtb	r2, r3
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008170:	4b17      	ldr	r3, [pc, #92]	; (80081d0 <xPortStartScheduler+0x130>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a16      	ldr	r2, [pc, #88]	; (80081d0 <xPortStartScheduler+0x130>)
 8008176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800817a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800817c:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <xPortStartScheduler+0x130>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <xPortStartScheduler+0x130>)
 8008182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008188:	f000 f8d6 	bl	8008338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <xPortStartScheduler+0x134>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008192:	f000 f8f5 	bl	8008380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008196:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <xPortStartScheduler+0x138>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a0f      	ldr	r2, [pc, #60]	; (80081d8 <xPortStartScheduler+0x138>)
 800819c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081a2:	f7ff ff69 	bl	8008078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081a6:	f7ff f871 	bl	800728c <vTaskSwitchContext>
	prvTaskExitError();
 80081aa:	f7ff ff27 	bl	8007ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000ed00 	.word	0xe000ed00
 80081bc:	410fc271 	.word	0x410fc271
 80081c0:	410fc270 	.word	0x410fc270
 80081c4:	e000e400 	.word	0xe000e400
 80081c8:	20000d18 	.word	0x20000d18
 80081cc:	20000d1c 	.word	0x20000d1c
 80081d0:	e000ed20 	.word	0xe000ed20
 80081d4:	2000000c 	.word	0x2000000c
 80081d8:	e000ef34 	.word	0xe000ef34

080081dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081f4:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <vPortEnterCritical+0x54>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	4a0d      	ldr	r2, [pc, #52]	; (8008230 <vPortEnterCritical+0x54>)
 80081fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081fe:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <vPortEnterCritical+0x54>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d10e      	bne.n	8008224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <vPortEnterCritical+0x58>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d009      	beq.n	8008224 <vPortEnterCritical+0x48>
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	e7fe      	b.n	8008222 <vPortEnterCritical+0x46>
	}
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	2000000c 	.word	0x2000000c
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800823e:	4b11      	ldr	r3, [pc, #68]	; (8008284 <vPortExitCritical+0x4c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d109      	bne.n	800825a <vPortExitCritical+0x22>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	607b      	str	r3, [r7, #4]
 8008258:	e7fe      	b.n	8008258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800825a:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <vPortExitCritical+0x4c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3b01      	subs	r3, #1
 8008260:	4a08      	ldr	r2, [pc, #32]	; (8008284 <vPortExitCritical+0x4c>)
 8008262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008264:	4b07      	ldr	r3, [pc, #28]	; (8008284 <vPortExitCritical+0x4c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <vPortExitCritical+0x3e>
 800826c:	2300      	movs	r3, #0
 800826e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	2000000c 	.word	0x2000000c
	...

08008290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008290:	f3ef 8009 	mrs	r0, PSP
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <pxCurrentTCBConst>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	f01e 0f10 	tst.w	lr, #16
 80082a0:	bf08      	it	eq
 80082a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	6010      	str	r0, [r2, #0]
 80082ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082b4:	f380 8811 	msr	BASEPRI, r0
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f7fe ffe4 	bl	800728c <vTaskSwitchContext>
 80082c4:	f04f 0000 	mov.w	r0, #0
 80082c8:	f380 8811 	msr	BASEPRI, r0
 80082cc:	bc09      	pop	{r0, r3}
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	6808      	ldr	r0, [r1, #0]
 80082d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d6:	f01e 0f10 	tst.w	lr, #16
 80082da:	bf08      	it	eq
 80082dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082e0:	f380 8809 	msr	PSP, r0
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w

080082f0 <pxCurrentTCBConst>:
 80082f0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop

080082f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008310:	f7fe ff04 	bl	800711c <xTaskIncrementTick>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800831a:	4b06      	ldr	r3, [pc, #24]	; (8008334 <SysTick_Handler+0x3c>)
 800831c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	2300      	movs	r3, #0
 8008324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <vPortSetupTimerInterrupt+0x34>)
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008342:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <vPortSetupTimerInterrupt+0x38>)
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <vPortSetupTimerInterrupt+0x3c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <vPortSetupTimerInterrupt+0x40>)
 800834e:	fba2 2303 	umull	r2, r3, r2, r3
 8008352:	099b      	lsrs	r3, r3, #6
 8008354:	4a09      	ldr	r2, [pc, #36]	; (800837c <vPortSetupTimerInterrupt+0x44>)
 8008356:	3b01      	subs	r3, #1
 8008358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800835a:	4b04      	ldr	r3, [pc, #16]	; (800836c <vPortSetupTimerInterrupt+0x34>)
 800835c:	2207      	movs	r2, #7
 800835e:	601a      	str	r2, [r3, #0]
}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	e000e010 	.word	0xe000e010
 8008370:	e000e018 	.word	0xe000e018
 8008374:	20000000 	.word	0x20000000
 8008378:	10624dd3 	.word	0x10624dd3
 800837c:	e000e014 	.word	0xe000e014

08008380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008390 <vPortEnableVFP+0x10>
 8008384:	6801      	ldr	r1, [r0, #0]
 8008386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800838a:	6001      	str	r1, [r0, #0]
 800838c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800838e:	bf00      	nop
 8008390:	e000ed88 	.word	0xe000ed88

08008394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800839a:	f3ef 8305 	mrs	r3, IPSR
 800839e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b0f      	cmp	r3, #15
 80083a4:	d913      	bls.n	80083ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083a6:	4a16      	ldr	r2, [pc, #88]	; (8008400 <vPortValidateInterruptPriority+0x6c>)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4413      	add	r3, r2
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083b0:	4b14      	ldr	r3, [pc, #80]	; (8008404 <vPortValidateInterruptPriority+0x70>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	7afa      	ldrb	r2, [r7, #11]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d209      	bcs.n	80083ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	607b      	str	r3, [r7, #4]
 80083cc:	e7fe      	b.n	80083cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083ce:	4b0e      	ldr	r3, [pc, #56]	; (8008408 <vPortValidateInterruptPriority+0x74>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083d6:	4b0d      	ldr	r3, [pc, #52]	; (800840c <vPortValidateInterruptPriority+0x78>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d909      	bls.n	80083f2 <vPortValidateInterruptPriority+0x5e>
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	e7fe      	b.n	80083f0 <vPortValidateInterruptPriority+0x5c>
	}
 80083f2:	bf00      	nop
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	e000e3f0 	.word	0xe000e3f0
 8008404:	20000d18 	.word	0x20000d18
 8008408:	e000ed0c 	.word	0xe000ed0c
 800840c:	20000d1c 	.word	0x20000d1c

08008410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	; 0x28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800841c:	f7fe fdc4 	bl	8006fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008420:	4b57      	ldr	r3, [pc, #348]	; (8008580 <pvPortMalloc+0x170>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008428:	f000 f90c 	bl	8008644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800842c:	4b55      	ldr	r3, [pc, #340]	; (8008584 <pvPortMalloc+0x174>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4013      	ands	r3, r2
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 808c 	bne.w	8008552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01c      	beq.n	800847a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008440:	2208      	movs	r2, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4413      	add	r3, r2
 8008446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	2b00      	cmp	r3, #0
 8008450:	d013      	beq.n	800847a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f023 0307 	bic.w	r3, r3, #7
 8008458:	3308      	adds	r3, #8
 800845a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <pvPortMalloc+0x6a>
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e7fe      	b.n	8008478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d068      	beq.n	8008552 <pvPortMalloc+0x142>
 8008480:	4b41      	ldr	r3, [pc, #260]	; (8008588 <pvPortMalloc+0x178>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d863      	bhi.n	8008552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800848a:	4b40      	ldr	r3, [pc, #256]	; (800858c <pvPortMalloc+0x17c>)
 800848c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800848e:	4b3f      	ldr	r3, [pc, #252]	; (800858c <pvPortMalloc+0x17c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008494:	e004      	b.n	80084a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d903      	bls.n	80084b2 <pvPortMalloc+0xa2>
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f1      	bne.n	8008496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084b2:	4b33      	ldr	r3, [pc, #204]	; (8008580 <pvPortMalloc+0x170>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d04a      	beq.n	8008552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2208      	movs	r2, #8
 80084c2:	4413      	add	r3, r2
 80084c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	2308      	movs	r3, #8
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	429a      	cmp	r2, r3
 80084dc:	d91e      	bls.n	800851c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <pvPortMalloc+0xf4>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	e7fe      	b.n	8008502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008516:	69b8      	ldr	r0, [r7, #24]
 8008518:	f000 f8f6 	bl	8008708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800851c:	4b1a      	ldr	r3, [pc, #104]	; (8008588 <pvPortMalloc+0x178>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	4a18      	ldr	r2, [pc, #96]	; (8008588 <pvPortMalloc+0x178>)
 8008528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800852a:	4b17      	ldr	r3, [pc, #92]	; (8008588 <pvPortMalloc+0x178>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4b18      	ldr	r3, [pc, #96]	; (8008590 <pvPortMalloc+0x180>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d203      	bcs.n	800853e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <pvPortMalloc+0x178>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a15      	ldr	r2, [pc, #84]	; (8008590 <pvPortMalloc+0x180>)
 800853c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	4b10      	ldr	r3, [pc, #64]	; (8008584 <pvPortMalloc+0x174>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	431a      	orrs	r2, r3
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008552:	f7fe fd37 	bl	8006fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <pvPortMalloc+0x164>
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e7fe      	b.n	8008572 <pvPortMalloc+0x162>
	return pvReturn;
 8008574:	69fb      	ldr	r3, [r7, #28]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3728      	adds	r7, #40	; 0x28
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200018e0 	.word	0x200018e0
 8008584:	200018ec 	.word	0x200018ec
 8008588:	200018e4 	.word	0x200018e4
 800858c:	200018d8 	.word	0x200018d8
 8008590:	200018e8 	.word	0x200018e8

08008594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d046      	beq.n	8008634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085a6:	2308      	movs	r3, #8
 80085a8:	425b      	negs	r3, r3
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4413      	add	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	4b20      	ldr	r3, [pc, #128]	; (800863c <vPortFree+0xa8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4013      	ands	r3, r2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <vPortFree+0x42>
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e7fe      	b.n	80085d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <vPortFree+0x5e>
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60bb      	str	r3, [r7, #8]
 80085f0:	e7fe      	b.n	80085f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	4b11      	ldr	r3, [pc, #68]	; (800863c <vPortFree+0xa8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d019      	beq.n	8008634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d115      	bne.n	8008634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	4b0b      	ldr	r3, [pc, #44]	; (800863c <vPortFree+0xa8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	43db      	mvns	r3, r3
 8008612:	401a      	ands	r2, r3
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008618:	f7fe fcc6 	bl	8006fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <vPortFree+0xac>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4413      	add	r3, r2
 8008626:	4a06      	ldr	r2, [pc, #24]	; (8008640 <vPortFree+0xac>)
 8008628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800862a:	6938      	ldr	r0, [r7, #16]
 800862c:	f000 f86c 	bl	8008708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008630:	f7fe fcc8 	bl	8006fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008634:	bf00      	nop
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	200018ec 	.word	0x200018ec
 8008640:	200018e4 	.word	0x200018e4

08008644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800864a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800864e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008650:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <prvHeapInit+0xac>)
 8008652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3307      	adds	r3, #7
 8008662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0307 	bic.w	r3, r3, #7
 800866a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <prvHeapInit+0xac>)
 8008674:	4413      	add	r3, r2
 8008676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800867c:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <prvHeapInit+0xb0>)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008682:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <prvHeapInit+0xb0>)
 8008684:	2200      	movs	r2, #0
 8008686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4413      	add	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008690:	2208      	movs	r2, #8
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0307 	bic.w	r3, r3, #7
 800869e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a15      	ldr	r2, [pc, #84]	; (80086f8 <prvHeapInit+0xb4>)
 80086a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <prvHeapInit+0xb4>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2200      	movs	r2, #0
 80086ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <prvHeapInit+0xb4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086c4:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <prvHeapInit+0xb4>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <prvHeapInit+0xb8>)
 80086d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	4a09      	ldr	r2, [pc, #36]	; (8008700 <prvHeapInit+0xbc>)
 80086da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <prvHeapInit+0xc0>)
 80086de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086e2:	601a      	str	r2, [r3, #0]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	20000d20 	.word	0x20000d20
 80086f4:	200018d8 	.word	0x200018d8
 80086f8:	200018e0 	.word	0x200018e0
 80086fc:	200018e8 	.word	0x200018e8
 8008700:	200018e4 	.word	0x200018e4
 8008704:	200018ec 	.word	0x200018ec

08008708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008710:	4b28      	ldr	r3, [pc, #160]	; (80087b4 <prvInsertBlockIntoFreeList+0xac>)
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e002      	b.n	800871c <prvInsertBlockIntoFreeList+0x14>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	429a      	cmp	r2, r3
 8008724:	d8f7      	bhi.n	8008716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	4413      	add	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d108      	bne.n	800874a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	441a      	add	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	441a      	add	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d118      	bne.n	8008790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d00d      	beq.n	8008786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	441a      	add	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	e008      	b.n	8008798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008786:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e003      	b.n	8008798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	429a      	cmp	r2, r3
 800879e:	d002      	beq.n	80087a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	200018d8 	.word	0x200018d8
 80087b8:	200018e0 	.word	0x200018e0

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	4e0d      	ldr	r6, [pc, #52]	; (80087f4 <__libc_init_array+0x38>)
 80087c0:	4c0d      	ldr	r4, [pc, #52]	; (80087f8 <__libc_init_array+0x3c>)
 80087c2:	1ba4      	subs	r4, r4, r6
 80087c4:	10a4      	asrs	r4, r4, #2
 80087c6:	2500      	movs	r5, #0
 80087c8:	42a5      	cmp	r5, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	4e0b      	ldr	r6, [pc, #44]	; (80087fc <__libc_init_array+0x40>)
 80087ce:	4c0c      	ldr	r4, [pc, #48]	; (8008800 <__libc_init_array+0x44>)
 80087d0:	f000 f834 	bl	800883c <_init>
 80087d4:	1ba4      	subs	r4, r4, r6
 80087d6:	10a4      	asrs	r4, r4, #2
 80087d8:	2500      	movs	r5, #0
 80087da:	42a5      	cmp	r5, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087e4:	4798      	blx	r3
 80087e6:	3501      	adds	r5, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087ee:	4798      	blx	r3
 80087f0:	3501      	adds	r5, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	080089ac 	.word	0x080089ac
 80087f8:	080089ac 	.word	0x080089ac
 80087fc:	080089ac 	.word	0x080089ac
 8008800:	080089b0 	.word	0x080089b0

08008804 <memcpy>:
 8008804:	b510      	push	{r4, lr}
 8008806:	1e43      	subs	r3, r0, #1
 8008808:	440a      	add	r2, r1
 800880a:	4291      	cmp	r1, r2
 800880c:	d100      	bne.n	8008810 <memcpy+0xc>
 800880e:	bd10      	pop	{r4, pc}
 8008810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008818:	e7f7      	b.n	800880a <memcpy+0x6>

0800881a <memset>:
 800881a:	4402      	add	r2, r0
 800881c:	4603      	mov	r3, r0
 800881e:	4293      	cmp	r3, r2
 8008820:	d100      	bne.n	8008824 <memset+0xa>
 8008822:	4770      	bx	lr
 8008824:	f803 1b01 	strb.w	r1, [r3], #1
 8008828:	e7f9      	b.n	800881e <memset+0x4>

0800882a <strcpy>:
 800882a:	4603      	mov	r3, r0
 800882c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008830:	f803 2b01 	strb.w	r2, [r3], #1
 8008834:	2a00      	cmp	r2, #0
 8008836:	d1f9      	bne.n	800882c <strcpy+0x2>
 8008838:	4770      	bx	lr
	...

0800883c <_init>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr

08008848 <_fini>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr
