
NucleoL476RG-freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a4  080080a4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ac  080080ac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080080b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000014  080080c8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  080080c8  00021b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021910  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037c1  00000000  00000000  00041954  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  00045118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001960  00000000  00000000  00046c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000044fc  00000000  00000000  00048560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015210  00000000  00000000  0004ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00113a84  00000000  00000000  00061c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001756f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a8  00000000  00000000  0017576c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f2c 	.word	0x08007f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007f2c 	.word	0x08007f2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fcba 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f850 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f9b2 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f980 	bl	80007f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004f4:	f000 f8d2 	bl	800069c <MX_ADC1_Init>
  MX_CAN1_Init();
 80004f8:	f000 f946 	bl	8000788 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_filterConfig();
 80004fc:	f000 fa74 	bl	80009e8 <CAN_filterConfig>
  HAL_CAN_Start(&hcan1);
 8000500:	4815      	ldr	r0, [pc, #84]	; (8000558 <main+0x78>)
 8000502:	f001 fe72 	bl	80021ea <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000506:	2102      	movs	r1, #2
 8000508:	4813      	ldr	r0, [pc, #76]	; (8000558 <main+0x78>)
 800050a:	f001 ffc4 	bl	8002496 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800050e:	f004 ff95 	bl	800543c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000512:	4a12      	ldr	r2, [pc, #72]	; (800055c <main+0x7c>)
 8000514:	2100      	movs	r1, #0
 8000516:	4812      	ldr	r0, [pc, #72]	; (8000560 <main+0x80>)
 8000518:	f004 fffa 	bl	8005510 <osThreadNew>
 800051c:	4602      	mov	r2, r0
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <main+0x84>)
 8000520:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask01 */
  blinkyTask01Handle = osThreadNew(StartBlinkyTask01, NULL, &blinkyTask01_attributes);
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <main+0x88>)
 8000524:	2100      	movs	r1, #0
 8000526:	4811      	ldr	r0, [pc, #68]	; (800056c <main+0x8c>)
 8000528:	f004 fff2 	bl	8005510 <osThreadNew>
 800052c:	4602      	mov	r2, r0
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <main+0x90>)
 8000530:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask02 */
  blinkyTask02Handle = osThreadNew(StartBlinkyTask02, NULL, &blinkyTask02_attributes);
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <main+0x94>)
 8000534:	2100      	movs	r1, #0
 8000536:	4810      	ldr	r0, [pc, #64]	; (8000578 <main+0x98>)
 8000538:	f004 ffea 	bl	8005510 <osThreadNew>
 800053c:	4602      	mov	r2, r0
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <main+0x9c>)
 8000540:	601a      	str	r2, [r3, #0]

  /* creation of ReadAndPrintTas */
  ReadAndPrintTasHandle = osThreadNew(StartTaskReadAndPrint01, NULL, &ReadAndPrintTas_attributes);
 8000542:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <main+0xa0>)
 8000544:	2100      	movs	r1, #0
 8000546:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0xa4>)
 8000548:	f004 ffe2 	bl	8005510 <osThreadNew>
 800054c:	4602      	mov	r2, r0
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0xa8>)
 8000550:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f004 ffa7 	bl	80054a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x76>
 8000558:	200019e8 	.word	0x200019e8
 800055c:	08007fcc 	.word	0x08007fcc
 8000560:	08000a29 	.word	0x08000a29
 8000564:	200018f0 	.word	0x200018f0
 8000568:	08007ff0 	.word	0x08007ff0
 800056c:	08000a39 	.word	0x08000a39
 8000570:	200018f4 	.word	0x200018f4
 8000574:	08008014 	.word	0x08008014
 8000578:	08000a4b 	.word	0x08000a4b
 800057c:	20001a28 	.word	0x20001a28
 8000580:	08008038 	.word	0x08008038
 8000584:	08000a5d 	.word	0x08000a5d
 8000588:	20001964 	.word	0x20001964

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0b8      	sub	sp, #224	; 0xe0
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000596:	2244      	movs	r2, #68	; 0x44
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f007 fcbd 	bl	8007f1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2288      	movs	r2, #136	; 0x88
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fcaf 	bl	8007f1a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2310      	movs	r3, #16
 80005cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005e2:	230a      	movs	r3, #10
 80005e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fca8 	bl	8002f54 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800060a:	f000 fa45 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2303      	movs	r3, #3
 8000616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2104      	movs	r1, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f003 f874 	bl	8003720 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800063e:	f000 fa2b 	bl	8000a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000642:	f244 0302 	movw	r3, #16386	; 0x4002
 8000646:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800064c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000650:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800065a:	2308      	movs	r3, #8
 800065c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800066a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800066e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fa8a 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800067e:	f000 fa0b 	bl	8000a98 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f002 fc0f 	bl	8002ea8 <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000690:	f000 fa02 	bl	8000a98 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	37e0      	adds	r7, #224	; 0xe0
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <MX_ADC1_Init+0xe0>)
 80006c0:	4a2f      	ldr	r2, [pc, #188]	; (8000780 <MX_ADC1_Init+0xe4>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_ADC1_Init+0xe0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <MX_ADC1_Init+0xe0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_ADC1_Init+0xe0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <MX_ADC1_Init+0xe0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_ADC1_Init+0xe0>)
 80006de:	2204      	movs	r2, #4
 80006e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <MX_ADC1_Init+0xe0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_ADC1_Init+0xe0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_ADC1_Init+0xe0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0xe0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0xe0>)
 8000704:	2200      	movs	r2, #0
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ADC1_Init+0xe0>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <MX_ADC1_Init+0xe0>)
 8000720:	f000 fd8a 	bl	8001238 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800072a:	f000 f9b5 	bl	8000a98 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4810      	ldr	r0, [pc, #64]	; (800077c <MX_ADC1_Init+0xe0>)
 800073a:	f001 fae5 	bl	8001d08 <HAL_ADCEx_MultiModeConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000744:	f000 f9a8 	bl	8000a98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_ADC1_Init+0xe8>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	237f      	movs	r3, #127	; 0x7f
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000758:	2304      	movs	r3, #4
 800075a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_ADC1_Init+0xe0>)
 8000766:	f000 febb 	bl	80014e0 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000770:	f000 f992 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200018fc 	.word	0x200018fc
 8000780:	50040000 	.word	0x50040000
 8000784:	14f00020 	.word	0x14f00020

08000788 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_CAN1_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_CAN1_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_CAN1_Init+0x64>)
 8000794:	2210      	movs	r2, #16
 8000796:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_CAN1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_CAN1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_CAN1_Init+0x64>)
 80007a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_CAN1_Init+0x64>)
 80007ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_CAN1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_CAN1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_CAN1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_CAN1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_CAN1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_CAN1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_CAN1_Init+0x64>)
 80007da:	f001 fb41 	bl	8001e60 <HAL_CAN_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f958 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200019e8 	.word	0x200019e8
 80007f0:	40006400 	.word	0x40006400

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART2_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART2_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART2_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000838:	f004 f92a 	bl	8004a90 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f929 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20001968 	.word	0x20001968
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0xec>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <MX_GPIO_Init+0xec>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0xec>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_GPIO_Init+0xec>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <MX_GPIO_Init+0xec>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0xec>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0xec>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_GPIO_Init+0xec>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xec>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_GPIO_Init+0xec>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <MX_GPIO_Init+0xec>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_GPIO_Init+0xec>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2101      	movs	r1, #1
 80008ce:	481d      	ldr	r0, [pc, #116]	; (8000944 <MX_GPIO_Init+0xf0>)
 80008d0:	f002 fac4 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f002 fabd 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_GPIO_Init+0xf4>)
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_GPIO_Init+0xf0>)
 80008f8:	f002 f908 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_GPIO_Init+0xf0>)
 8000914:	f002 f8fa 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000918:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f002 f8ea 	bl	8002b0c <HAL_GPIO_Init>

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	48000800 	.word	0x48000800
 8000948:	10210000 	.word	0x10210000

0800094c <serialMsg>:

/* USER CODE BEGIN 4 */

void serialMsg(char msg[]){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fc3b 	bl	80001d0 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <serialMsg+0x28>)
 8000966:	f004 f8e1 	bl	8004b2c <HAL_UART_Transmit>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20001968 	.word	0x20001968

08000978 <CAN_Rx>:
		//serialMsg("Message transmitted!\n\r");
	}
	else return;
}

void CAN_Rx(void){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <CAN_Rx+0x5c>)
 8000980:	2208      	movs	r2, #8
 8000982:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <CAN_Rx+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <CAN_Rx+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <CAN_Rx+0x60>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <CAN_Rx+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 800099a:	463b      	mov	r3, r7
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <CAN_Rx+0x5c>)
 800099e:	2100      	movs	r1, #0
 80009a0:	480e      	ldr	r0, [pc, #56]	; (80009dc <CAN_Rx+0x64>)
 80009a2:	f001 fc66 	bl	8002272 <HAL_CAN_GetRxMessage>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <CAN_Rx+0x3a>
		Error_Handler();
 80009ac:	f000 f874 	bl	8000a98 <Error_Handler>
 80009b0:	e00c      	b.n	80009cc <CAN_Rx+0x54>
		return;
	}
	HAL_Delay(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 fa92 	bl	8000edc <HAL_Delay>
	serialMsg("Received message: ");
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <CAN_Rx+0x68>)
 80009ba:	f7ff ffc7 	bl	800094c <serialMsg>
	serialMsg((char*)crx);
 80009be:	463b      	mov	r3, r7
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffc3 	bl	800094c <serialMsg>
	serialMsg("\n\r");
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <CAN_Rx+0x6c>)
 80009c8:	f7ff ffc0 	bl	800094c <serialMsg>

}
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20001a2c 	.word	0x20001a2c
 80009d8:	20000000 	.word	0x20000000
 80009dc:	200019e8 	.word	0x200019e8
 80009e0:	08007f9c 	.word	0x08007f9c
 80009e4:	08007fb0 	.word	0x08007fb0

080009e8 <CAN_filterConfig>:

void CAN_filterConfig(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
	filterConfig.FilterActivation = ENABLE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0x0000;
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <CAN_filterConfig+0x3c>)
 8000a18:	f001 fb1d 	bl	8002056 <HAL_CAN_ConfigFilter>
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200019e8 	.word	0x200019e8

08000a28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f004 fe13 	bl	800565c <osDelay>
 8000a36:	e7fb      	b.n	8000a30 <StartDefaultTask+0x8>

08000a38 <StartBlinkyTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask01 */
void StartBlinkyTask01(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask01 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    osDelay(500);
 8000a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a44:	f004 fe0a 	bl	800565c <osDelay>
 8000a48:	e7fa      	b.n	8000a40 <StartBlinkyTask01+0x8>

08000a4a <StartBlinkyTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask02 */
void StartBlinkyTask02(void *argument)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  osDelay(600);
 8000a52:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000a56:	f004 fe01 	bl	800565c <osDelay>
 8000a5a:	e7fa      	b.n	8000a52 <StartBlinkyTask02+0x8>

08000a5c <StartTaskReadAndPrint01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadAndPrint01 */
void StartTaskReadAndPrint01(void *argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	  sprintf(msg, "%hu\r\n", raw); //DON'T USE THIS!
	  CAN_Tx(msg);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	   * */

	  HAL_Delay(10);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f000 fa39 	bl	8000edc <HAL_Delay>
	  osDelay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f004 fdf6 	bl	800565c <osDelay>
	  HAL_Delay(10);
 8000a70:	e7f8      	b.n	8000a64 <StartTaskReadAndPrint01+0x8>
	...

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 fa09 	bl	8000e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40001000 	.word	0x40001000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_MspInit+0x4c>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f001 ffe7 	bl	8002ab8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <HAL_ADC_MspInit+0x74>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d124      	bne.n	8000b64 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_ADC_MspInit+0x78>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_ADC_MspInit+0x78>)
 8000b20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_ADC_MspInit+0x78>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_ADC_MspInit+0x78>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_ADC_MspInit+0x78>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_ADC_MspInit+0x78>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b4e:	230b      	movs	r3, #11
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f001 ffd4 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	50040000 	.word	0x50040000
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <HAL_CAN_MspInit+0x90>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d131      	bne.n	8000bfa <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_CAN_MspInit+0x94>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <HAL_CAN_MspInit+0x94>)
 8000b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_CAN_MspInit+0x94>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_CAN_MspInit+0x94>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <HAL_CAN_MspInit+0x94>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_CAN_MspInit+0x94>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bd8:	2309      	movs	r3, #9
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f001 ff91 	bl	8002b0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2105      	movs	r1, #5
 8000bee:	2014      	movs	r0, #20
 8000bf0:	f001 ff62 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bf4:	2014      	movs	r0, #20
 8000bf6:	f001 ff7b 	bl	8002af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40006400 	.word	0x40006400
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0x7c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d128      	bne.n	8000c80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x80>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <HAL_UART_MspInit+0x80>)
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0x80>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x80>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0x80>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0x80>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f001 ff46 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	2036      	movs	r0, #54	; 0x36
 8000ca6:	f001 ff07 	bl	8002ab8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000caa:	2036      	movs	r0, #54	; 0x36
 8000cac:	f001 ff20 	bl	8002af0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_InitTick+0x9c>)
 8000cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <HAL_InitTick+0x9c>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_InitTick+0x9c>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc8:	f107 0210 	add.w	r2, r7, #16
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fec8 	bl	8003a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd8:	f002 fe9a 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8000cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_InitTick+0xa0>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_InitTick+0xa8>)
 8000cf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_InitTick+0xa4>)
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d0e:	f003 fbed 	bl	80044ec <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d104      	bne.n	8000d22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <HAL_InitTick+0xa4>)
 8000d1a:	f003 fc49 	bl	80045b0 <HAL_TIM_Base_Start_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	20001a7c 	.word	0x20001a7c
 8000d38:	40001000 	.word	0x40001000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <CAN1_RX0_IRQHandler+0x14>)
 8000d76:	f001 fbb4 	bl	80024e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 8000d7a:	f7ff fdfd 	bl	8000978 <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200019e8 	.word	0x200019e8

08000d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM6_DAC_IRQHandler+0x10>)
 8000d8e:	f003 fc7f 	bl	8004690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20001a7c 	.word	0x20001a7c

08000d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <SystemInit+0x64>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <SystemInit+0x64>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <SystemInit+0x68>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <SystemInit+0x68>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <SystemInit+0x68>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <SystemInit+0x68>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <SystemInit+0x68>)
 8000dc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dcc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <SystemInit+0x68>)
 8000dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <SystemInit+0x68>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <SystemInit+0x68>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <SystemInit+0x68>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SystemInit+0x64>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	609a      	str	r2, [r3, #8]
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	40021000 	.word	0x40021000

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff ffc6 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e12:	e003      	b.n	8000e1c <LoopCopyDataInit>

08000e14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e1a:	3104      	adds	r1, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e24:	d3f6      	bcc.n	8000e14 <CopyDataInit>
	ldr	r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e28:	e002      	b.n	8000e30 <LoopFillZerobss>

08000e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e2c:	f842 3b04 	str.w	r3, [r2], #4

08000e30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <LoopForever+0x16>)
	cmp	r2, r3
 8000e32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e34:	d3f9      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f007 f841 	bl	8007ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fb51 	bl	80004e0 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e44:	080080b4 	.word	0x080080b4
	ldr	r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e4c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000e50:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000e54:	20001b0c 	.word	0x20001b0c

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_Init+0x3c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_Init+0x3c>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f001 fe15 	bl	8002aa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff ff09 	bl	8000c90 <HAL_InitTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	e001      	b.n	8000e8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e8a:	f7ff fe0d 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	20001ac8 	.word	0x20001ac8

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20001ac8 	.word	0x20001ac8

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_Delay+0x40>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000000c 	.word	0x2000000c

08000f20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	609a      	str	r2, [r3, #8]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3360      	adds	r3, #96	; 0x60
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LL_ADC_SetOffset+0x44>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	03fff000 	.word	0x03fff000

08000fd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3360      	adds	r3, #96	; 0x60
 8000fde:	461a      	mov	r2, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3360      	adds	r3, #96	; 0x60
 800100c:	461a      	mov	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001032:	b480      	push	{r7}
 8001034:	b087      	sub	sp, #28
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3330      	adds	r3, #48	; 0x30
 8001042:	461a      	mov	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	4413      	add	r3, r2
 8001050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	211f      	movs	r1, #31
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0e9b      	lsrs	r3, r3, #26
 800106a:	f003 011f 	and.w	r1, r3, #31
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	431a      	orrs	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800107e:	bf00      	nop
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800108a:	b480      	push	{r7}
 800108c:	b087      	sub	sp, #28
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3314      	adds	r3, #20
 800109a:	461a      	mov	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0e5b      	lsrs	r3, r3, #25
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	0d1b      	lsrs	r3, r3, #20
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2107      	movs	r1, #7
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	0d1b      	lsrs	r3, r3, #20
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0318 	and.w	r3, r3, #24
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001104:	40d9      	lsrs	r1, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	400b      	ands	r3, r1
 800110a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	0007ffff 	.word	0x0007ffff

08001128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800115c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001160:	d101      	bne.n	8001166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <LL_ADC_IsEnabled+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_ADC_IsEnabled+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d101      	bne.n	8001202 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b08      	cmp	r3, #8
 8001222:	d101      	bne.n	8001228 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e134      	b.n	80014bc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fc49 	bl	8000af8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff67 	bl	800114c <LL_ADC_IsDeepPowerDownEnabled>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff4d 	bl	8001128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff82 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d113      	bne.n	80012c6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff66 	bl	8001174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012a8:	4b86      	ldr	r3, [pc, #536]	; (80014c4 <HAL_ADC_Init+0x28c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	4a86      	ldr	r2, [pc, #536]	; (80014c8 <HAL_ADC_Init+0x290>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	099b      	lsrs	r3, r3, #6
 80012b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff66 	bl	800119c <LL_ADC_IsInternalRegulatorEnabled>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10d      	bne.n	80012f2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	f043 0210 	orr.w	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff77 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 80012fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 80cf 	bne.w	80014aa <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 80cb 	bne.w	80014aa <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001318:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800131c:	f043 0202 	orr.w	r2, r3, #2
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff4b 	bl	80011c4 <LL_ADC_IsEnabled>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d115      	bne.n	8001360 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001334:	4865      	ldr	r0, [pc, #404]	; (80014cc <HAL_ADC_Init+0x294>)
 8001336:	f7ff ff45 	bl	80011c4 <LL_ADC_IsEnabled>
 800133a:	4604      	mov	r4, r0
 800133c:	4864      	ldr	r0, [pc, #400]	; (80014d0 <HAL_ADC_Init+0x298>)
 800133e:	f7ff ff41 	bl	80011c4 <LL_ADC_IsEnabled>
 8001342:	4603      	mov	r3, r0
 8001344:	431c      	orrs	r4, r3
 8001346:	4863      	ldr	r0, [pc, #396]	; (80014d4 <HAL_ADC_Init+0x29c>)
 8001348:	f7ff ff3c 	bl	80011c4 <LL_ADC_IsEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	4323      	orrs	r3, r4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4619      	mov	r1, r3
 800135a:	485f      	ldr	r0, [pc, #380]	; (80014d8 <HAL_ADC_Init+0x2a0>)
 800135c:	f7ff fde0 	bl	8000f20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e5b      	ldrb	r3, [r3, #25]
 8001364:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800136a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001370:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001376:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d106      	bne.n	800139c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	3b01      	subs	r3, #1
 8001394:	045b      	lsls	r3, r3, #17
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_ADC_Init+0x2a4>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff0a 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 80013d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff17 	bl	8001210 <LL_ADC_INJ_IsConversionOngoing>
 80013e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d13d      	bne.n	8001466 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d13a      	bne.n	8001466 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800140c:	f023 0302 	bic.w	r3, r3, #2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	69b9      	ldr	r1, [r7, #24]
 8001416:	430b      	orrs	r3, r1
 8001418:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001420:	2b01      	cmp	r3, #1
 8001422:	d118      	bne.n	8001456 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800142e:	f023 0304 	bic.w	r3, r3, #4
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800143a:	4311      	orrs	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001446:	430a      	orrs	r2, r1
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	e007      	b.n	8001466 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10c      	bne.n	8001488 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f023 010f 	bic.w	r1, r3, #15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	1e5a      	subs	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
 8001486:	e007      	b.n	8001498 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020f 	bic.w	r2, r2, #15
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149c:	f023 0303 	bic.w	r3, r3, #3
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
 80014a8:	e007      	b.n	80014ba <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	f043 0210 	orr.w	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3724      	adds	r7, #36	; 0x24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	20000004 	.word	0x20000004
 80014c8:	053e2d63 	.word	0x053e2d63
 80014cc:	50040000 	.word	0x50040000
 80014d0:	50040100 	.word	0x50040100
 80014d4:	50040200 	.word	0x50040200
 80014d8:	50040300 	.word	0x50040300
 80014dc:	fff0c007 	.word	0xfff0c007

080014e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0b6      	sub	sp, #216	; 0xd8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x22>
 80014fe:	2302      	movs	r3, #2
 8001500:	e3c6      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x7b0>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fe6b 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 83a7 	bne.w	8001c6a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d824      	bhi.n	800156e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	3b02      	subs	r3, #2
 800152a:	2b03      	cmp	r3, #3
 800152c:	d81b      	bhi.n	8001566 <HAL_ADC_ConfigChannel+0x86>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_ADC_ConfigChannel+0x54>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	08001545 	.word	0x08001545
 8001538:	0800154d 	.word	0x0800154d
 800153c:	08001555 	.word	0x08001555
 8001540:	0800155d 	.word	0x0800155d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	220c      	movs	r2, #12
 8001548:	605a      	str	r2, [r3, #4]
          break;
 800154a:	e011      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2212      	movs	r2, #18
 8001550:	605a      	str	r2, [r3, #4]
          break;
 8001552:	e00d      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2218      	movs	r2, #24
 8001558:	605a      	str	r2, [r3, #4]
          break;
 800155a:	e009      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001562:	605a      	str	r2, [r3, #4]
          break;
 8001564:	e004      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2206      	movs	r2, #6
 800156a:	605a      	str	r2, [r3, #4]
          break;
 800156c:	e000      	b.n	8001570 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800156e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	f7ff fd58 	bl	8001032 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe2f 	bl	80011ea <LL_ADC_REG_IsConversionOngoing>
 800158c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe3b 	bl	8001210 <LL_ADC_INJ_IsConversionOngoing>
 800159a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800159e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 81a6 	bne.w	80018f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 81a1 	bne.w	80018f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	461a      	mov	r2, r3
 80015c0:	f7ff fd63 	bl	800108a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d00a      	beq.n	80015fc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015f6:	f7ff fcc7 	bl	8000f88 <LL_ADC_SetOffset>
 80015fa:	e17b      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fce4 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10a      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x148>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fcd9 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	0e9b      	lsrs	r3, r3, #26
 8001622:	f003 021f 	and.w	r2, r3, #31
 8001626:	e01e      	b.n	8001666 <HAL_ADC_ConfigChannel+0x186>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fcce 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800164a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800164e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001656:	2320      	movs	r3, #32
 8001658:	e004      	b.n	8001664 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800165a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166e:	2b00      	cmp	r3, #0
 8001670:	d105      	bne.n	800167e <HAL_ADC_ConfigChannel+0x19e>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0e9b      	lsrs	r3, r3, #26
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	e018      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x1d0>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800169a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80016a2:	2320      	movs	r3, #32
 80016a4:	e004      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80016a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d106      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fc9d 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fc81 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10a      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x20e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fc76 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	0e9b      	lsrs	r3, r3, #26
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	e01e      	b.n	800172c <HAL_ADC_ConfigChannel+0x24c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fc6b 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800170c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001714:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800171c:	2320      	movs	r3, #32
 800171e:	e004      	b.n	800172a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x264>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0e9b      	lsrs	r3, r3, #26
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	e018      	b.n	8001776 <HAL_ADC_ConfigChannel+0x296>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001758:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800175c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	e004      	b.n	8001776 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800176c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001776:	429a      	cmp	r2, r3
 8001778:	d106      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fc3a 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2102      	movs	r1, #2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fc1e 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10a      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x2d4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2102      	movs	r1, #2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc13 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	f003 021f 	and.w	r2, r3, #31
 80017b2:	e01e      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x312>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2102      	movs	r1, #2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fc08 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80017e2:	2320      	movs	r3, #32
 80017e4:	e004      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80017e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_ADC_ConfigChannel+0x32a>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0e9b      	lsrs	r3, r3, #26
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	e016      	b.n	8001838 <HAL_ADC_ConfigChannel+0x358>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800181c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800181e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800182a:	2320      	movs	r3, #32
 800182c:	e004      	b.n	8001838 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800182e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001838:	429a      	cmp	r2, r3
 800183a:	d106      	bne.n	800184a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	2102      	movs	r1, #2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fbd9 	bl	8000ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2103      	movs	r1, #3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fbbd 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x396>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2103      	movs	r1, #3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fbb2 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	e017      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x3c6>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2103      	movs	r1, #3
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fba7 	bl	8000fd0 <LL_ADC_GetOffsetChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800188e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001890:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001898:	2320      	movs	r3, #32
 800189a:	e003      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800189c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_ADC_ConfigChannel+0x3de>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0e9b      	lsrs	r3, r3, #26
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	e011      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x402>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e003      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80018da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	2103      	movs	r1, #3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fb84 	bl	8000ffc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fc63 	bl	80011c4 <LL_ADC_IsEnabled>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	f040 813f 	bne.w	8001b84 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	461a      	mov	r2, r3
 8001914:	f7ff fbe4 	bl	80010e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a8e      	ldr	r2, [pc, #568]	; (8001b58 <HAL_ADC_ConfigChannel+0x678>)
 800191e:	4293      	cmp	r3, r2
 8001920:	f040 8130 	bne.w	8001b84 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10b      	bne.n	800194c <HAL_ADC_ConfigChannel+0x46c>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	3301      	adds	r3, #1
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2b09      	cmp	r3, #9
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e019      	b.n	8001980 <HAL_ADC_ConfigChannel+0x4a0>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800195a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800195c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800195e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	e003      	b.n	8001970 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b09      	cmp	r3, #9
 8001978:	bf94      	ite	ls
 800197a:	2301      	movls	r3, #1
 800197c:	2300      	movhi	r3, #0
 800197e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001980:	2b00      	cmp	r3, #0
 8001982:	d079      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x4c0>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0e9b      	lsrs	r3, r3, #26
 8001996:	3301      	adds	r3, #1
 8001998:	069b      	lsls	r3, r3, #26
 800199a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800199e:	e015      	b.n	80019cc <HAL_ADC_ConfigChannel+0x4ec>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80019b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80019b8:	2320      	movs	r3, #32
 80019ba:	e003      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80019bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	069b      	lsls	r3, r3, #26
 80019c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x50c>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	3301      	adds	r3, #1
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	e017      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x53c>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80019fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a04:	2320      	movs	r3, #32
 8001a06:	e003      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	ea42 0103 	orr.w	r1, r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x562>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0e9b      	lsrs	r3, r3, #26
 8001a32:	3301      	adds	r3, #1
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	051b      	lsls	r3, r3, #20
 8001a40:	e018      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x594>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e003      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a74:	430b      	orrs	r3, r1
 8001a76:	e080      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x5b4>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	069b      	lsls	r3, r3, #26
 8001a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a92:	e015      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x5e0>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	069b      	lsls	r3, r3, #26
 8001abc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x600>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	e017      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x630>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	61fb      	str	r3, [r7, #28]
  return result;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e003      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	ea42 0103 	orr.w	r1, r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x65c>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0e9b      	lsrs	r3, r3, #26
 8001b26:	3301      	adds	r3, #1
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	3b1e      	subs	r3, #30
 8001b34:	051b      	lsls	r3, r3, #20
 8001b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	e01d      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x698>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	613b      	str	r3, [r7, #16]
  return result;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d103      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e005      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x684>
 8001b58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	051b      	lsls	r3, r3, #20
 8001b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	6892      	ldr	r2, [r2, #8]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7ff fa83 	bl	800108a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_ADC_ConfigChannel+0x7b8>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d079      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b90:	4842      	ldr	r0, [pc, #264]	; (8001c9c <HAL_ADC_ConfigChannel+0x7bc>)
 8001b92:	f7ff f9eb 	bl	8000f6c <LL_ADC_GetCommonPathInternalCh>
 8001b96:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d12b      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d125      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3b      	ldr	r2, [pc, #236]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0x6e4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d15c      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4833      	ldr	r0, [pc, #204]	; (8001c9c <HAL_ADC_ConfigChannel+0x7bc>)
 8001bd0:	f7ff f9b9 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_ADC_ConfigChannel+0x7cc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	4a35      	ldr	r2, [pc, #212]	; (8001cb0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	099a      	lsrs	r2, r3, #6
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bfa:	e040      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d118      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x758>
 8001c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d112      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x746>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12d      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481a      	ldr	r0, [pc, #104]	; (8001c9c <HAL_ADC_ConfigChannel+0x7bc>)
 8001c32:	f7ff f988 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c36:	e024      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d120      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11a      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d115      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c60:	4619      	mov	r1, r3
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <HAL_ADC_ConfigChannel+0x7bc>)
 8001c64:	f7ff f96f 	bl	8000f46 <LL_ADC_SetCommonPathInternalCh>
 8001c68:	e00c      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c7c:	e002      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c7e:	bf00      	nop
 8001c80:	e000      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c82:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	37d8      	adds	r7, #216	; 0xd8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	80080000 	.word	0x80080000
 8001c9c:	50040300 	.word	0x50040300
 8001ca0:	c7520000 	.word	0xc7520000
 8001ca4:	50040000 	.word	0x50040000
 8001ca8:	50040200 	.word	0x50040200
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	053e2d63 	.word	0x053e2d63
 8001cb4:	cb840000 	.word	0xcb840000
 8001cb8:	80000001 	.word	0x80000001

08001cbc <LL_ADC_IsEnabled>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_IsEnabled+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_IsEnabled+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d101      	bne.n	8001cfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b09f      	sub	sp, #124	; 0x7c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e08f      	b.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a47      	ldr	r2, [pc, #284]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d102      	bne.n	8001d3e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	e001      	b.n	8001d42 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10b      	bne.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e072      	b.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ffbd 	bl	8001ce2 <LL_ADC_REG_IsConversionOngoing>
 8001d68:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ffb7 	bl	8001ce2 <LL_ADC_REG_IsConversionOngoing>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d154      	bne.n	8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d151      	bne.n	8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d02c      	beq.n	8001de6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d9e:	035b      	lsls	r3, r3, #13
 8001da0:	430b      	orrs	r3, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da8:	4829      	ldr	r0, [pc, #164]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001daa:	f7ff ff87 	bl	8001cbc <LL_ADC_IsEnabled>
 8001dae:	4604      	mov	r4, r0
 8001db0:	4828      	ldr	r0, [pc, #160]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001db2:	f7ff ff83 	bl	8001cbc <LL_ADC_IsEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	431c      	orrs	r4, r3
 8001dba:	4828      	ldr	r0, [pc, #160]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dbc:	f7ff ff7e 	bl	8001cbc <LL_ADC_IsEnabled>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d137      	bne.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dd0:	f023 030f 	bic.w	r3, r3, #15
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	6811      	ldr	r1, [r2, #0]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6892      	ldr	r2, [r2, #8]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	431a      	orrs	r2, r3
 8001de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de4:	e028      	b.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001df4:	f7ff ff62 	bl	8001cbc <LL_ADC_IsEnabled>
 8001df8:	4604      	mov	r4, r0
 8001dfa:	4816      	ldr	r0, [pc, #88]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001dfc:	f7ff ff5e 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	431c      	orrs	r4, r3
 8001e04:	4815      	ldr	r0, [pc, #84]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e06:	f7ff ff59 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4323      	orrs	r3, r4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d112      	bne.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e1a:	f023 030f 	bic.w	r3, r3, #15
 8001e1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e20:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e22:	e009      	b.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e36:	e000      	b.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	377c      	adds	r7, #124	; 0x7c
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd90      	pop	{r4, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	50040000 	.word	0x50040000
 8001e54:	50040100 	.word	0x50040100
 8001e58:	50040300 	.word	0x50040300
 8001e5c:	50040200 	.word	0x50040200

08001e60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0ed      	b.n	800204e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fe78 	bl	8000b74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0202 	bic.w	r2, r2, #2
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e94:	f7ff f816 	bl	8000ec4 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e9a:	e012      	b.n	8001ec2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e9c:	f7ff f812 	bl	8000ec4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b0a      	cmp	r3, #10
 8001ea8:	d90b      	bls.n	8001ec2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2205      	movs	r2, #5
 8001eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0c5      	b.n	800204e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e5      	bne.n	8001e9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee0:	f7fe fff0 	bl	8000ec4 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ee6:	e012      	b.n	8001f0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ee8:	f7fe ffec 	bl	8000ec4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b0a      	cmp	r3, #10
 8001ef4:	d90b      	bls.n	8001f0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2205      	movs	r2, #5
 8001f06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e09f      	b.n	800204e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0e5      	beq.n	8001ee8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7e1b      	ldrb	r3, [r3, #24]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d108      	bne.n	8001f36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e007      	b.n	8001f46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7e5b      	ldrb	r3, [r3, #25]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e007      	b.n	8001f70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7e9b      	ldrb	r3, [r3, #26]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0220 	orr.w	r2, r2, #32
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0220 	bic.w	r2, r2, #32
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7edb      	ldrb	r3, [r3, #27]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d108      	bne.n	8001fb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0210 	bic.w	r2, r2, #16
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e007      	b.n	8001fc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0210 	orr.w	r2, r2, #16
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7f1b      	ldrb	r3, [r3, #28]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e007      	b.n	8001fee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7f5b      	ldrb	r3, [r3, #29]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d108      	bne.n	8002008 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0204 	orr.w	r2, r2, #4
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e007      	b.n	8002018 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0204 	bic.w	r2, r2, #4
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	ea42 0103 	orr.w	r1, r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	1e5a      	subs	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002056:	b480      	push	{r7}
 8002058:	b087      	sub	sp, #28
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d003      	beq.n	800207c <HAL_CAN_ConfigFilter+0x26>
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b02      	cmp	r3, #2
 8002078:	f040 80aa 	bne.w	80021d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2201      	movs	r2, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d123      	bne.n	80020fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	401a      	ands	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3248      	adds	r2, #72	; 0x48
 80020de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020f4:	6979      	ldr	r1, [r7, #20]
 80020f6:	3348      	adds	r3, #72	; 0x48
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d122      	bne.n	800214c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	431a      	orrs	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002126:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3248      	adds	r2, #72	; 0x48
 800212c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002140:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002142:	6979      	ldr	r1, [r7, #20]
 8002144:	3348      	adds	r3, #72	; 0x48
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002166:	e007      	b.n	8002178 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	431a      	orrs	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002192:	e007      	b.n	80021a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	431a      	orrs	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d107      	bne.n	80021bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021c2:	f023 0201 	bic.w	r2, r3, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e006      	b.n	80021de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d12e      	bne.n	800225c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002216:	f7fe fe55 	bl	8000ec4 <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800221c:	e012      	b.n	8002244 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800221e:	f7fe fe51 	bl	8000ec4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b0a      	cmp	r3, #10
 800222a:	d90b      	bls.n	8002244 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2205      	movs	r2, #5
 800223c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e012      	b.n	800226a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e5      	bne.n	800221e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e006      	b.n	800226a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002272:	b480      	push	{r7}
 8002274:	b087      	sub	sp, #28
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002286:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d003      	beq.n	8002296 <HAL_CAN_GetRxMessage+0x24>
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b02      	cmp	r3, #2
 8002292:	f040 80f3 	bne.w	800247c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10e      	bne.n	80022ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e0e7      	b.n	800248a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0d8      	b.n	800248a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	331b      	adds	r3, #27
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4413      	add	r3, r2
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0204 	and.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	331b      	adds	r3, #27
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00b      	b.n	8002328 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	331b      	adds	r3, #27
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	4413      	add	r3, r2
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	08db      	lsrs	r3, r3, #3
 8002320:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	331b      	adds	r3, #27
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	4413      	add	r3, r2
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0202 	and.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	331b      	adds	r3, #27
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 020f 	and.w	r2, r3, #15
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	331b      	adds	r3, #27
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	3304      	adds	r3, #4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	331b      	adds	r3, #27
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0c1b      	lsrs	r3, r3, #16
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0a1a      	lsrs	r2, r3, #8
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0c1a      	lsrs	r2, r3, #16
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	3302      	adds	r3, #2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e1a      	lsrs	r2, r3, #24
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	3303      	adds	r3, #3
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	3304      	adds	r3, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0a1a      	lsrs	r2, r3, #8
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3305      	adds	r3, #5
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4413      	add	r3, r2
 8002426:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0c1a      	lsrs	r2, r3, #16
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	3306      	adds	r3, #6
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0e1a      	lsrs	r2, r3, #24
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3307      	adds	r3, #7
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0220 	orr.w	r2, r2, #32
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	e007      	b.n	8002478 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0220 	orr.w	r2, r2, #32
 8002476:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e006      	b.n	800248a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d002      	beq.n	80024b4 <HAL_CAN_ActivateNotification+0x1e>
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d109      	bne.n	80024c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6959      	ldr	r1, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e006      	b.n	80024d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b08a      	sub	sp, #40	; 0x28
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d07c      	beq.n	8002622 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f97d 	bl	8002844 <HAL_CAN_TxMailbox0CompleteCallback>
 800254a:	e016      	b.n	800257a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	e00c      	b.n	800257a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	e002      	b.n	800257a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f983 	bl	8002880 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d024      	beq.n	80025ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f95d 	bl	8002858 <HAL_CAN_TxMailbox1CompleteCallback>
 800259e:	e016      	b.n	80025ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	e00c      	b.n	80025ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	e002      	b.n	80025ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f963 	bl	8002894 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d024      	beq.n	8002622 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f93d 	bl	800286c <HAL_CAN_TxMailbox2CompleteCallback>
 80025f2:	e016      	b.n	8002622 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	e00c      	b.n	8002622 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	e002      	b.n	8002622 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f943 	bl	80028a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2210      	movs	r2, #16
 8002644:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00b      	beq.n	8002668 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2208      	movs	r2, #8
 8002660:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f934 	bl	80028d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f91b 	bl	80028bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2210      	movs	r2, #16
 80026a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2208      	movs	r2, #8
 80026c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f916 	bl	80028f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8fd 	bl	80028e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2210      	movs	r2, #16
 8002704:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f900 	bl	800290c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8f9 	bl	8002920 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d075      	beq.n	8002824 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d06c      	beq.n	800281c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03d      	beq.n	800281c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d038      	beq.n	800281c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d017      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x302>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d804      	bhi.n	80027c2 <HAL_CAN_IRQHandler+0x2e0>
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d009      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x2ee>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d00c      	beq.n	80027da <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027c0:	e024      	b.n	800280c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80027c2:	2b50      	cmp	r3, #80	; 0x50
 80027c4:	d018      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x316>
 80027c6:	2b60      	cmp	r3, #96	; 0x60
 80027c8:	d01b      	beq.n	8002802 <HAL_CAN_IRQHandler+0x320>
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d00f      	beq.n	80027ee <HAL_CAN_IRQHandler+0x30c>
            break;
 80027ce:	e01d      	b.n	800280c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d8:	e018      	b.n	800280c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027e2:	e013      	b.n	800280c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	f043 0320 	orr.w	r3, r3, #32
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ec:	e00e      	b.n	800280c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f6:	e009      	b.n	800280c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002800:	e004      	b.n	800280c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800280a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800281a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2204      	movs	r2, #4
 8002822:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f87c 	bl	8002934 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800283c:	bf00      	nop
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff4c 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aca:	f7ff ff61 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002ace:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7ff ffb1 	bl	8002a3c <NVIC_EncodePriority>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff80 	bl	80029e8 <__NVIC_SetPriority>
}
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff54 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1a:	e17f      	b.n	8002e1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2101      	movs	r1, #1
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8171 	beq.w	8002e16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d00b      	beq.n	8002b54 <HAL_GPIO_Init+0x48>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d007      	beq.n	8002b54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b48:	2b11      	cmp	r3, #17
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d130      	bne.n	8002bb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 0201 	and.w	r2, r3, #1
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d118      	bne.n	8002bf4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	f003 0201 	and.w	r2, r3, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x128>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b12      	cmp	r3, #18
 8002c32:	d123      	bne.n	8002c7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	08da      	lsrs	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3208      	adds	r2, #8
 8002c76:	6939      	ldr	r1, [r7, #16]
 8002c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0203 	and.w	r2, r3, #3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80ac 	beq.w	8002e16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_GPIO_Init+0x32c>)
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <HAL_GPIO_Init+0x32c>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <HAL_GPIO_Init+0x32c>)
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cd6:	4a59      	ldr	r2, [pc, #356]	; (8002e3c <HAL_GPIO_Init+0x330>)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d00:	d025      	beq.n	8002d4e <HAL_GPIO_Init+0x242>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4e      	ldr	r2, [pc, #312]	; (8002e40 <HAL_GPIO_Init+0x334>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01f      	beq.n	8002d4a <HAL_GPIO_Init+0x23e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4d      	ldr	r2, [pc, #308]	; (8002e44 <HAL_GPIO_Init+0x338>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x23a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <HAL_GPIO_Init+0x33c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x236>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4b      	ldr	r2, [pc, #300]	; (8002e4c <HAL_GPIO_Init+0x340>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x232>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4a      	ldr	r2, [pc, #296]	; (8002e50 <HAL_GPIO_Init+0x344>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x22e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a49      	ldr	r2, [pc, #292]	; (8002e54 <HAL_GPIO_Init+0x348>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x22a>
 8002d32:	2306      	movs	r3, #6
 8002d34:	e00c      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e00a      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	e008      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	e006      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d42:	2303      	movs	r3, #3
 8002d44:	e004      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e002      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	f002 0203 	and.w	r2, r2, #3
 8002d56:	0092      	lsls	r2, r2, #2
 8002d58:	4093      	lsls	r3, r2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d60:	4936      	ldr	r1, [pc, #216]	; (8002e3c <HAL_GPIO_Init+0x330>)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	3302      	adds	r3, #2
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d6e:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d92:	4a31      	ldr	r2, [pc, #196]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dbc:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc2:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002de6:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f47f ae78 	bne.w	8002b1c <HAL_GPIO_Init+0x10>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	48000400 	.word	0x48000400
 8002e44:	48000800 	.word	0x48000800
 8002e48:	48000c00 	.word	0x48000c00
 8002e4c:	48001000 	.word	0x48001000
 8002e50:	48001400 	.word	0x48001400
 8002e54:	48001800 	.word	0x48001800
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb6:	d130      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d038      	beq.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ece:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2232      	movs	r2, #50	; 0x32
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eec:	e002      	b.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d102      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f2      	bne.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d110      	bne.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e00f      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d007      	beq.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f30:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e3d4      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f66:	4ba1      	ldr	r3, [pc, #644]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f70:	4b9e      	ldr	r3, [pc, #632]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80e4 	beq.w	8003150 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_RCC_OscConfig+0x4a>
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	f040 808b 	bne.w	80030ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 8087 	bne.w	80030ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9e:	4b93      	ldr	r3, [pc, #588]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e3ac      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	4b8c      	ldr	r3, [pc, #560]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x7c>
 8002fc6:	4b89      	ldr	r3, [pc, #548]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fce:	e005      	b.n	8002fdc <HAL_RCC_OscConfig+0x88>
 8002fd0:	4b86      	ldr	r3, [pc, #536]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d223      	bcs.n	8003028 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fd71 	bl	8003acc <RCC_SetFlashLatencyFromMSIRange>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e38d      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff4:	4b7d      	ldr	r3, [pc, #500]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a7c      	ldr	r2, [pc, #496]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b7a      	ldr	r3, [pc, #488]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4977      	ldr	r1, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	4972      	ldr	r1, [pc, #456]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
 8003026:	e025      	b.n	8003074 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	496a      	ldr	r1, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003046:	4b69      	ldr	r3, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	4965      	ldr	r1, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fd31 	bl	8003acc <RCC_SetFlashLatencyFromMSIRange>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e34d      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003074:	f000 fc36 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003078:	4601      	mov	r1, r0
 800307a:	4b5c      	ldr	r3, [pc, #368]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	4a5a      	ldr	r2, [pc, #360]	; (80031f0 <HAL_RCC_OscConfig+0x29c>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa21 f303 	lsr.w	r3, r1, r3
 8003090:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <HAL_RCC_OscConfig+0x2a0>)
 8003092:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003094:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_OscConfig+0x2a4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fdf9 	bl	8000c90 <HAL_InitTick>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d052      	beq.n	800314e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	e331      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d032      	beq.n	800311a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b4:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4c      	ldr	r2, [pc, #304]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c0:	f7fd ff00 	bl	8000ec4 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c8:	f7fd fefc 	bl	8000ec4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e31a      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a40      	ldr	r2, [pc, #256]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80030ec:	f043 0308 	orr.w	r3, r3, #8
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	493b      	ldr	r1, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003104:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4936      	ldr	r1, [pc, #216]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	e01a      	b.n	8003150 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800311a:	4b34      	ldr	r3, [pc, #208]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a33      	ldr	r2, [pc, #204]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003126:	f7fd fecd 	bl	8000ec4 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312e:	f7fd fec9 	bl	8000ec4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e2e7      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x1da>
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d074      	beq.n	8003246 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x21a>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d10e      	bne.n	8003186 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d10b      	bne.n	8003186 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d064      	beq.n	8003244 <HAL_RCC_OscConfig+0x2f0>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d160      	bne.n	8003244 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e2c4      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x24a>
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a15      	ldr	r2, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e01d      	b.n	80031da <HAL_RCC_OscConfig+0x286>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x26e>
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x286>
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a06      	ldr	r2, [pc, #24]	; (80031ec <HAL_RCC_OscConfig+0x298>)
 80031d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01c      	beq.n	800321c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fd fe6f 	bl	8000ec4 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e8:	e011      	b.n	800320e <HAL_RCC_OscConfig+0x2ba>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	0800805c 	.word	0x0800805c
 80031f4:	20000004 	.word	0x20000004
 80031f8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fd fe62 	bl	8000ec4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e280      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320e:	4baf      	ldr	r3, [pc, #700]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x2a8>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd fe52 	bl	8000ec4 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fd fe4e 	bl	8000ec4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e26c      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	4ba5      	ldr	r3, [pc, #660]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x2d0>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d060      	beq.n	8003314 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d005      	beq.n	8003264 <HAL_RCC_OscConfig+0x310>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d119      	bne.n	8003292 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d116      	bne.n	8003292 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003264:	4b99      	ldr	r3, [pc, #612]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_OscConfig+0x328>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e249      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b93      	ldr	r3, [pc, #588]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	4990      	ldr	r1, [pc, #576]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003290:	e040      	b.n	8003314 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d023      	beq.n	80032e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329a:	4b8c      	ldr	r3, [pc, #560]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a8b      	ldr	r2, [pc, #556]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd fe0d 	bl	8000ec4 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fd fe09 	bl	8000ec4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e227      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	4b82      	ldr	r3, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b7f      	ldr	r3, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	497c      	ldr	r1, [pc, #496]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
 80032e0:	e018      	b.n	8003314 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b7a      	ldr	r3, [pc, #488]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a79      	ldr	r2, [pc, #484]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fd fde9 	bl	8000ec4 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fd fde5 	bl	8000ec4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e203      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003308:	4b70      	ldr	r3, [pc, #448]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03c      	beq.n	800339a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01c      	beq.n	8003362 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	4a67      	ldr	r2, [pc, #412]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd fdc4 	bl	8000ec4 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd fdc0 	bl	8000ec4 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1de      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003352:	4b5e      	ldr	r3, [pc, #376]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ef      	beq.n	8003340 <HAL_RCC_OscConfig+0x3ec>
 8003360:	e01b      	b.n	800339a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003362:	4b5a      	ldr	r3, [pc, #360]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003368:	4a58      	ldr	r2, [pc, #352]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fd fda7 	bl	8000ec4 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7fd fda3 	bl	8000ec4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1c1      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800338c:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ef      	bne.n	800337a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a6 	beq.w	80034f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a8:	2300      	movs	r3, #0
 80033aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033ac:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b44      	ldr	r3, [pc, #272]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	4a43      	ldr	r2, [pc, #268]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	; 0x58
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d0:	2301      	movs	r3, #1
 80033d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d4:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d118      	bne.n	8003412 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e0:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3a      	ldr	r2, [pc, #232]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ec:	f7fd fd6a 	bl	8000ec4 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7fd fd66 	bl	8000ec4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e184      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003406:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <HAL_RCC_OscConfig+0x4d8>
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342a:	e024      	b.n	8003476 <HAL_RCC_OscConfig+0x522>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d110      	bne.n	8003456 <HAL_RCC_OscConfig+0x502>
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	4a24      	ldr	r2, [pc, #144]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	4a20      	ldr	r2, [pc, #128]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003454:	e00f      	b.n	8003476 <HAL_RCC_OscConfig+0x522>
 8003456:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003466:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800346e:	f023 0304 	bic.w	r3, r3, #4
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fd fd21 	bl	8000ec4 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fd fd1d 	bl	8000ec4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e139      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ed      	beq.n	8003486 <HAL_RCC_OscConfig+0x532>
 80034aa:	e01a      	b.n	80034e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fd fd0a 	bl	8000ec4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f7fd fd06 	bl	8000ec4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d906      	bls.n	80034d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e122      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d4:	4b90      	ldr	r3, [pc, #576]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e8      	bne.n	80034b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e2:	7ffb      	ldrb	r3, [r7, #31]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b8b      	ldr	r3, [pc, #556]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	4a8a      	ldr	r2, [pc, #552]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8108 	beq.w	800370e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	2b02      	cmp	r3, #2
 8003504:	f040 80d0 	bne.w	80036a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003508:	4b83      	ldr	r3, [pc, #524]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	429a      	cmp	r2, r3
 800351a:	d130      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	3b01      	subs	r3, #1
 8003528:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d127      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d11f      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003548:	2a07      	cmp	r2, #7
 800354a:	bf14      	ite	ne
 800354c:	2201      	movne	r2, #1
 800354e:	2200      	moveq	r2, #0
 8003550:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	4293      	cmp	r3, r2
 8003554:	d113      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d109      	bne.n	800357e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d06e      	beq.n	800365c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d069      	beq.n	8003658 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003584:	4b64      	ldr	r3, [pc, #400]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003590:	4b61      	ldr	r3, [pc, #388]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b7      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035a0:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5c      	ldr	r2, [pc, #368]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ac:	f7fd fc8a 	bl	8000ec4 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd fc86 	bl	8000ec4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0a4      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	4b54      	ldr	r3, [pc, #336]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d2:	4b51      	ldr	r3, [pc, #324]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_OscConfig+0x7c8>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ec:	0212      	lsls	r2, r2, #8
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035f4:	0852      	lsrs	r2, r2, #1
 80035f6:	3a01      	subs	r2, #1
 80035f8:	0552      	lsls	r2, r2, #21
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003600:	0852      	lsrs	r2, r2, #1
 8003602:	3a01      	subs	r2, #1
 8003604:	0652      	lsls	r2, r2, #25
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800360c:	0912      	lsrs	r2, r2, #4
 800360e:	0452      	lsls	r2, r2, #17
 8003610:	430a      	orrs	r2, r1
 8003612:	4941      	ldr	r1, [pc, #260]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003618:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3e      	ldr	r2, [pc, #248]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003624:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800362a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003630:	f7fd fc48 	bl	8000ec4 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7fd fc44 	bl	8000ec4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e062      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003656:	e05a      	b.n	800370e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e059      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365c:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d152      	bne.n	800370e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800366e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003672:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003680:	f7fd fc20 	bl	8000ec4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fd fc1c 	bl	8000ec4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e03a      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x734>
 80036a6:	e032      	b.n	800370e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d02d      	beq.n	800370a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036c6:	4b14      	ldr	r3, [pc, #80]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a13      	ldr	r2, [pc, #76]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fd fbef 	bl	8000ec4 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fd fbeb 	bl	8000ec4 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e009      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_OscConfig+0x7c4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x796>
 8003708:	e001      	b.n	800370e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	f99d808c 	.word	0xf99d808c

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0c8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4961      	ldr	r1, [pc, #388]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b5f      	ldr	r3, [pc, #380]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d04c      	beq.n	800380a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003778:	4b56      	ldr	r3, [pc, #344]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d121      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e09e      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e092      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a8:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e086      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e07e      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f023 0203 	bic.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	493f      	ldr	r1, [pc, #252]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037da:	f7fd fb73 	bl	8000ec4 <HAL_GetTick>
 80037de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f7fd fb6f 	bl	8000ec4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e066      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f8:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 020c 	and.w	r2, r3, #12
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	429a      	cmp	r2, r3
 8003808:	d1eb      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	492c      	ldr	r1, [pc, #176]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d210      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	4924      	ldr	r1, [pc, #144]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e036      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4918      	ldr	r1, [pc, #96]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003882:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4910      	ldr	r1, [pc, #64]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003896:	f000 f825 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800389a:	4601      	mov	r1, r0
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	fa21 f303 	lsr.w	r3, r1, r3
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd f9e8 	bl	8000c90 <HAL_InitTick>
 80038c0:	4603      	mov	r3, r0
 80038c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80038c4:	7afb      	ldrb	r3, [r7, #11]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	0800805c 	.word	0x0800805c
 80038dc:	20000004 	.word	0x20000004
 80038e0:	20000008 	.word	0x20000008

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038fc:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d121      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d11e      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003918:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003924:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e005      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003940:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003954:	e00a      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d102      	bne.n	8003962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800395c:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e004      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d101      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800396a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d133      	bne.n	80039da <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d002      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0xa4>
 8003982:	2b03      	cmp	r3, #3
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0xaa>
 8003986:	e005      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800398a:	617b      	str	r3, [r7, #20]
      break;
 800398c:	e005      	b.n	800399a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	e002      	b.n	800399a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	617b      	str	r3, [r7, #20]
      break;
 8003998:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	3301      	adds	r3, #1
 80039a6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	fb02 f203 	mul.w	r2, r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0e5b      	lsrs	r3, r3, #25
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039da:	69bb      	ldr	r3, [r7, #24]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3724      	adds	r7, #36	; 0x24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08008074 	.word	0x08008074
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000004 	.word	0x20000004

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a14:	f7ff fff0 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	0800806c 	.word	0x0800806c

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a40:	f7ff ffda 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a44:	4601      	mov	r1, r0
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0adb      	lsrs	r3, r3, #11
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	0800806c 	.word	0x0800806c

08003a68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	220f      	movs	r2, #15
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_GetClockConfig+0x60>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0207 	and.w	r2, r3, #7
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40022000 	.word	0x40022000

08003acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ad8:	4b2a      	ldr	r3, [pc, #168]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ae4:	f7ff f9d2 	bl	8002e8c <HAL_PWREx_GetVoltageRange>
 8003ae8:	6178      	str	r0, [r7, #20]
 8003aea:	e014      	b.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	4a24      	ldr	r2, [pc, #144]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6593      	str	r3, [r2, #88]	; 0x58
 8003af8:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b04:	f7ff f9c2 	bl	8002e8c <HAL_PWREx_GetVoltageRange>
 8003b08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1c:	d10b      	bne.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d919      	bls.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2ba0      	cmp	r3, #160	; 0xa0
 8003b28:	d902      	bls.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	e013      	b.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b30:	2301      	movs	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e010      	b.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d902      	bls.n	8003b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e00a      	b.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d102      	bne.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b48:	2302      	movs	r3, #2
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e004      	b.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b70      	cmp	r3, #112	; 0x70
 8003b52:	d101      	bne.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b54:	2301      	movs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 0207 	bic.w	r2, r3, #7
 8003b60:	4909      	ldr	r1, [pc, #36]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d001      	beq.n	8003b7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40022000 	.word	0x40022000

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b94:	2300      	movs	r3, #0
 8003b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d03f      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb0:	d01c      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb6:	d802      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003bbc:	e01f      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003bbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc2:	d003      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc8:	d01c      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003bca:	e018      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bcc:	4b85      	ldr	r3, [pc, #532]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a84      	ldr	r2, [pc, #528]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd8:	e015      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fab9 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bea:	e00c      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3320      	adds	r3, #32
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fba0 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfc:	e003      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	74fb      	strb	r3, [r7, #19]
      break;
 8003c02:	e000      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c0c:	4b75      	ldr	r3, [pc, #468]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1a:	4972      	ldr	r1, [pc, #456]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c22:	e001      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03f      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c3c:	d01c      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c42:	d802      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003c48:	e01f      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003c50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c54:	d01c      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003c56:	e018      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c58:	4b62      	ldr	r3, [pc, #392]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a61      	ldr	r2, [pc, #388]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c64:	e015      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fa73 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c76:	e00c      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3320      	adds	r3, #32
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fb5a 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c88:	e003      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c98:	4b52      	ldr	r3, [pc, #328]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca6:	494f      	ldr	r1, [pc, #316]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cae:	e001      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a0 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	4a40      	ldr	r2, [pc, #256]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3a      	ldr	r2, [pc, #232]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d04:	f7fd f8de 	bl	8000ec4 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d0a:	e009      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fd f8da 	bl	8000ec4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d902      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ef      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d15c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d32:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01f      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d019      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fd f899 	bl	8000ec4 <HAL_GetTick>
 8003d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d94:	e00b      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fd f895 	bl	8000ec4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d902      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	74fb      	strb	r3, [r7, #19]
            break;
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ec      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd2:	4904      	ldr	r1, [pc, #16]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dda:	e009      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
 8003de0:	e006      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df0:	7c7b      	ldrb	r3, [r7, #17]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b9e      	ldr	r3, [pc, #632]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	4a9d      	ldr	r2, [pc, #628]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e0e:	4b98      	ldr	r3, [pc, #608]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 0203 	bic.w	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	4994      	ldr	r1, [pc, #592]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e30:	4b8f      	ldr	r3, [pc, #572]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f023 020c 	bic.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	498c      	ldr	r1, [pc, #560]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e52:	4b87      	ldr	r3, [pc, #540]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	4983      	ldr	r1, [pc, #524]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e74:	4b7e      	ldr	r3, [pc, #504]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	497b      	ldr	r1, [pc, #492]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e96:	4b76      	ldr	r3, [pc, #472]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	4972      	ldr	r1, [pc, #456]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb8:	4b6d      	ldr	r3, [pc, #436]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	496a      	ldr	r1, [pc, #424]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eda:	4b65      	ldr	r3, [pc, #404]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	4961      	ldr	r1, [pc, #388]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003efc:	4b5c      	ldr	r3, [pc, #368]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	4959      	ldr	r1, [pc, #356]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f1e:	4b54      	ldr	r3, [pc, #336]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2c:	4950      	ldr	r1, [pc, #320]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f40:	4b4b      	ldr	r3, [pc, #300]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	4948      	ldr	r1, [pc, #288]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	493f      	ldr	r1, [pc, #252]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d028      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f84:	4b3a      	ldr	r3, [pc, #232]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f92:	4937      	ldr	r1, [pc, #220]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a31      	ldr	r2, [pc, #196]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fae:	60d3      	str	r3, [r2, #12]
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f8c8 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d028      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	491f      	ldr	r1, [pc, #124]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004000:	d106      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800400c:	60d3      	str	r3, [r2, #12]
 800400e:	e011      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f899 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	4908      	ldr	r1, [pc, #32]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405e:	d109      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a02      	ldr	r2, [pc, #8]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e014      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f867 	bl	8004158 <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b2:	4928      	ldr	r1, [pc, #160]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2102      	movs	r1, #2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f844 	bl	8004158 <RCCEx_PLLSAI1_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d014      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	74bb      	strb	r3, [r7, #18]
 80040de:	e011      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3320      	adds	r3, #32
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f921 	bl	8004338 <RCCEx_PLLSAI2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004110:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411e:	490d      	ldr	r1, [pc, #52]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004142:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800414a:	7cbb      	ldrb	r3, [r7, #18]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000

08004158 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004166:	4b73      	ldr	r3, [pc, #460]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004172:	4b70      	ldr	r3, [pc, #448]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0203 	and.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d10d      	bne.n	800419e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
       ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800418a:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
       ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d044      	beq.n	8004228 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
 80041a2:	e041      	b.n	8004228 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d00c      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0x6e>
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d013      	beq.n	80041d8 <RCCEx_PLLSAI1_Config+0x80>
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d120      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041b4:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11d      	bne.n	80041fc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e01a      	b.n	80041fc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041c6:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d116      	bne.n	8004200 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d6:	e013      	b.n	8004200 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041f4:	e006      	b.n	8004204 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      break;
 80041fa:	e004      	b.n	8004206 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004204:	bf00      	nop
    }

    if(status == HAL_OK)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10d      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6819      	ldr	r1, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	3b01      	subs	r3, #1
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	430b      	orrs	r3, r1
 8004222:	4944      	ldr	r1, [pc, #272]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d17d      	bne.n	800432a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800422e:	4b41      	ldr	r3, [pc, #260]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a40      	ldr	r2, [pc, #256]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423a:	f7fc fe43 	bl	8000ec4 <HAL_GetTick>
 800423e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004240:	e009      	b.n	8004256 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004242:	f7fc fe3f 	bl	8000ec4 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d902      	bls.n	8004256 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	73fb      	strb	r3, [r7, #15]
        break;
 8004254:	e005      	b.n	8004262 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ef      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d160      	bne.n	800432a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d111      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	0211      	lsls	r1, r2, #8
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68d2      	ldr	r2, [r2, #12]
 8004284:	0912      	lsrs	r2, r2, #4
 8004286:	0452      	lsls	r2, r2, #17
 8004288:	430a      	orrs	r2, r1
 800428a:	492a      	ldr	r1, [pc, #168]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	610b      	str	r3, [r1, #16]
 8004290:	e027      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d112      	bne.n	80042be <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6892      	ldr	r2, [r2, #8]
 80042a8:	0211      	lsls	r1, r2, #8
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6912      	ldr	r2, [r2, #16]
 80042ae:	0852      	lsrs	r2, r2, #1
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0552      	lsls	r2, r2, #21
 80042b4:	430a      	orrs	r2, r1
 80042b6:	491f      	ldr	r1, [pc, #124]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	610b      	str	r3, [r1, #16]
 80042bc:	e011      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042be:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6892      	ldr	r2, [r2, #8]
 80042ce:	0211      	lsls	r1, r2, #8
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6952      	ldr	r2, [r2, #20]
 80042d4:	0852      	lsrs	r2, r2, #1
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0652      	lsls	r2, r2, #25
 80042da:	430a      	orrs	r2, r1
 80042dc:	4915      	ldr	r1, [pc, #84]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a13      	ldr	r2, [pc, #76]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fc fde9 	bl	8000ec4 <HAL_GetTick>
 80042f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f4:	e009      	b.n	800430a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f6:	f7fc fde5 	bl	8000ec4 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d902      	bls.n	800430a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	73fb      	strb	r3, [r7, #15]
          break;
 8004308:	e005      	b.n	8004316 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ef      	beq.n	80042f6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4903      	ldr	r1, [pc, #12]	; (8004334 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40021000 	.word	0x40021000

08004338 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004346:	4b68      	ldr	r3, [pc, #416]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004352:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d10d      	bne.n	800437e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
       ||
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800436a:	4b5f      	ldr	r3, [pc, #380]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
       ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d044      	beq.n	8004408 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e041      	b.n	8004408 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d00c      	beq.n	80043a6 <RCCEx_PLLSAI2_Config+0x6e>
 800438c:	2b03      	cmp	r3, #3
 800438e:	d013      	beq.n	80043b8 <RCCEx_PLLSAI2_Config+0x80>
 8004390:	2b01      	cmp	r3, #1
 8004392:	d120      	bne.n	80043d6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004394:	4b54      	ldr	r3, [pc, #336]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11d      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a4:	e01a      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043a6:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d116      	bne.n	80043e0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b6:	e013      	b.n	80043e0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043b8:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043c4:	4b48      	ldr	r3, [pc, #288]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043d4:	e006      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
      break;
 80043da:	e004      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80043e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10d      	bne.n	8004408 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043ec:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	430b      	orrs	r3, r1
 8004402:	4939      	ldr	r1, [pc, #228]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004404:	4313      	orrs	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d167      	bne.n	80044de <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800440e:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441a:	f7fc fd53 	bl	8000ec4 <HAL_GetTick>
 800441e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004420:	e009      	b.n	8004436 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004422:	f7fc fd4f 	bl	8000ec4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d902      	bls.n	8004436 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	73fb      	strb	r3, [r7, #15]
        break;
 8004434:	e005      	b.n	8004442 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004436:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ef      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d14a      	bne.n	80044de <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d111      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6892      	ldr	r2, [r2, #8]
 800445e:	0211      	lsls	r1, r2, #8
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68d2      	ldr	r2, [r2, #12]
 8004464:	0912      	lsrs	r2, r2, #4
 8004466:	0452      	lsls	r2, r2, #17
 8004468:	430a      	orrs	r2, r1
 800446a:	491f      	ldr	r1, [pc, #124]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800446c:	4313      	orrs	r3, r2
 800446e:	614b      	str	r3, [r1, #20]
 8004470:	e011      	b.n	8004496 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800447a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6892      	ldr	r2, [r2, #8]
 8004482:	0211      	lsls	r1, r2, #8
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6912      	ldr	r2, [r2, #16]
 8004488:	0852      	lsrs	r2, r2, #1
 800448a:	3a01      	subs	r2, #1
 800448c:	0652      	lsls	r2, r2, #25
 800448e:	430a      	orrs	r2, r1
 8004490:	4915      	ldr	r1, [pc, #84]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004492:	4313      	orrs	r3, r2
 8004494:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a2:	f7fc fd0f 	bl	8000ec4 <HAL_GetTick>
 80044a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044a8:	e009      	b.n	80044be <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044aa:	f7fc fd0b 	bl	8000ec4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d902      	bls.n	80044be <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	73fb      	strb	r3, [r7, #15]
          break;
 80044bc:	e005      	b.n	80044ca <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ef      	beq.n	80044aa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	4903      	ldr	r1, [pc, #12]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e049      	b.n	8004592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f841 	bl	800459a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 f9f8 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04f      	b.n	8004668 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <HAL_TIM_Base_Start_IT+0xc4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01d      	beq.n	8004626 <HAL_TIM_Base_Start_IT+0x76>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d018      	beq.n	8004626 <HAL_TIM_Base_Start_IT+0x76>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_TIM_Base_Start_IT+0xc8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_TIM_Base_Start_IT+0x76>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_TIM_Base_Start_IT+0xcc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_TIM_Base_Start_IT+0x76>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <HAL_TIM_Base_Start_IT+0xd0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_TIM_Base_Start_IT+0x76>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <HAL_TIM_Base_Start_IT+0xd4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_TIM_Base_Start_IT+0x76>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_TIM_Base_Start_IT+0xd8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d115      	bne.n	8004652 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	4b17      	ldr	r3, [pc, #92]	; (800468c <HAL_TIM_Base_Start_IT+0xdc>)
 800462e:	4013      	ands	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b06      	cmp	r3, #6
 8004636:	d015      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0xb4>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463e:	d011      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	e008      	b.n	8004664 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e000      	b.n	8004666 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40014000 	.word	0x40014000
 800468c:	00010007 	.word	0x00010007

08004690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d122      	bne.n	80046ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d11b      	bne.n	80046ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f06f 0202 	mvn.w	r2, #2
 80046bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f905 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 80046d8:	e005      	b.n	80046e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8f7 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f908 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d122      	bne.n	8004740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11b      	bne.n	8004740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0204 	mvn.w	r2, #4
 8004710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8db 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 800472c:	e005      	b.n	800473a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8cd 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8de 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d122      	bne.n	8004794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b08      	cmp	r3, #8
 800475a:	d11b      	bne.n	8004794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0208 	mvn.w	r2, #8
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8b1 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f8a3 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8b4 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d122      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d11b      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0210 	mvn.w	r2, #16
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2208      	movs	r2, #8
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f887 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f879 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f88a 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10e      	bne.n	8004814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d107      	bne.n	8004814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0201 	mvn.w	r2, #1
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc f930 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d10e      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	2b80      	cmp	r3, #128	; 0x80
 800482e:	d107      	bne.n	8004840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f914 	bl	8004a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	d10e      	bne.n	800486e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d107      	bne.n	800486e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f907 	bl	8004a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d10e      	bne.n	800489a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d107      	bne.n	800489a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f838 	bl	800490a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d10e      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f06f 0220 	mvn.w	r2, #32
 80048be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8c7 	bl	8004a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <TIM_Base_SetConfig+0x114>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d00f      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3d      	ldr	r2, [pc, #244]	; (8004a38 <TIM_Base_SetConfig+0x118>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3c      	ldr	r2, [pc, #240]	; (8004a3c <TIM_Base_SetConfig+0x11c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3b      	ldr	r2, [pc, #236]	; (8004a40 <TIM_Base_SetConfig+0x120>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3a      	ldr	r2, [pc, #232]	; (8004a44 <TIM_Base_SetConfig+0x124>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d108      	bne.n	8004972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <TIM_Base_SetConfig+0x114>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01f      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d01b      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <TIM_Base_SetConfig+0x118>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d017      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <TIM_Base_SetConfig+0x11c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <TIM_Base_SetConfig+0x120>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00f      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <TIM_Base_SetConfig+0x124>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a28      	ldr	r2, [pc, #160]	; (8004a48 <TIM_Base_SetConfig+0x128>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <TIM_Base_SetConfig+0x12c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0x9a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a26      	ldr	r2, [pc, #152]	; (8004a50 <TIM_Base_SetConfig+0x130>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <TIM_Base_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00f      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <TIM_Base_SetConfig+0x124>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <TIM_Base_SetConfig+0x128>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <TIM_Base_SetConfig+0x12c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0xf8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <TIM_Base_SetConfig+0x130>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800

08004a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e040      	b.n	8004b24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc f8aa 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	; 0x24
 8004abc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8c0 	bl	8004c54 <UART_SetConfig>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e022      	b.n	8004b24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fb3e 	bl	8005168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fbc5 	bl	80052ac <UART_CheckIdleState>
 8004b22:	4603      	mov	r3, r0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	f040 8081 	bne.w	8004c48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_Transmit+0x26>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e079      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_UART_Transmit+0x38>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e072      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b78:	f7fc f9a4 	bl	8000ec4 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d108      	bne.n	8004baa <HAL_UART_Transmit+0x7e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e003      	b.n	8004bb2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004bba:	e02d      	b.n	8004c18 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2180      	movs	r1, #128	; 0x80
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fbb5 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e039      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be8:	b292      	uxth	r2, r2
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	3302      	adds	r3, #2
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e008      	b.n	8004c06 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1cb      	bne.n	8004bbc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2140      	movs	r1, #64	; 0x40
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fb81 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e005      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c58:	b088      	sub	sp, #32
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4bac      	ldr	r3, [pc, #688]	; (8004f34 <UART_SetConfig+0x2e0>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	69f9      	ldr	r1, [r7, #28]
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4aa2      	ldr	r2, [pc, #648]	; (8004f38 <UART_SetConfig+0x2e4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a99      	ldr	r2, [pc, #612]	; (8004f3c <UART_SetConfig+0x2e8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d121      	bne.n	8004d20 <UART_SetConfig+0xcc>
 8004cdc:	4b98      	ldr	r3, [pc, #608]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d816      	bhi.n	8004d18 <UART_SetConfig+0xc4>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x9c>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d0d 	.word	0x08004d0d
 8004cf8:	08004d07 	.word	0x08004d07
 8004cfc:	08004d13 	.word	0x08004d13
 8004d00:	2301      	movs	r3, #1
 8004d02:	76fb      	strb	r3, [r7, #27]
 8004d04:	e0e8      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d06:	2302      	movs	r3, #2
 8004d08:	76fb      	strb	r3, [r7, #27]
 8004d0a:	e0e5      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	76fb      	strb	r3, [r7, #27]
 8004d10:	e0e2      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d12:	2308      	movs	r3, #8
 8004d14:	76fb      	strb	r3, [r7, #27]
 8004d16:	e0df      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	76fb      	strb	r3, [r7, #27]
 8004d1c:	bf00      	nop
 8004d1e:	e0db      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a87      	ldr	r2, [pc, #540]	; (8004f44 <UART_SetConfig+0x2f0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d134      	bne.n	8004d94 <UART_SetConfig+0x140>
 8004d2a:	4b85      	ldr	r3, [pc, #532]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d829      	bhi.n	8004d8c <UART_SetConfig+0x138>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0xec>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004d8d 	.word	0x08004d8d
 8004d48:	08004d8d 	.word	0x08004d8d
 8004d4c:	08004d8d 	.word	0x08004d8d
 8004d50:	08004d81 	.word	0x08004d81
 8004d54:	08004d8d 	.word	0x08004d8d
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004d8d 	.word	0x08004d8d
 8004d60:	08004d7b 	.word	0x08004d7b
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004d8d 	.word	0x08004d8d
 8004d70:	08004d87 	.word	0x08004d87
 8004d74:	2300      	movs	r3, #0
 8004d76:	76fb      	strb	r3, [r7, #27]
 8004d78:	e0ae      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	76fb      	strb	r3, [r7, #27]
 8004d7e:	e0ab      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d80:	2304      	movs	r3, #4
 8004d82:	76fb      	strb	r3, [r7, #27]
 8004d84:	e0a8      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d86:	2308      	movs	r3, #8
 8004d88:	76fb      	strb	r3, [r7, #27]
 8004d8a:	e0a5      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	76fb      	strb	r3, [r7, #27]
 8004d90:	bf00      	nop
 8004d92:	e0a1      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a6b      	ldr	r2, [pc, #428]	; (8004f48 <UART_SetConfig+0x2f4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d120      	bne.n	8004de0 <UART_SetConfig+0x18c>
 8004d9e:	4b68      	ldr	r3, [pc, #416]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d00f      	beq.n	8004dcc <UART_SetConfig+0x178>
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d802      	bhi.n	8004db6 <UART_SetConfig+0x162>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <UART_SetConfig+0x16c>
 8004db4:	e010      	b.n	8004dd8 <UART_SetConfig+0x184>
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d005      	beq.n	8004dc6 <UART_SetConfig+0x172>
 8004dba:	2b30      	cmp	r3, #48	; 0x30
 8004dbc:	d009      	beq.n	8004dd2 <UART_SetConfig+0x17e>
 8004dbe:	e00b      	b.n	8004dd8 <UART_SetConfig+0x184>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	e088      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	76fb      	strb	r3, [r7, #27]
 8004dca:	e085      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	76fb      	strb	r3, [r7, #27]
 8004dd0:	e082      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	76fb      	strb	r3, [r7, #27]
 8004dd6:	e07f      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	bf00      	nop
 8004dde:	e07b      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a59      	ldr	r2, [pc, #356]	; (8004f4c <UART_SetConfig+0x2f8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d120      	bne.n	8004e2c <UART_SetConfig+0x1d8>
 8004dea:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d00f      	beq.n	8004e18 <UART_SetConfig+0x1c4>
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d802      	bhi.n	8004e02 <UART_SetConfig+0x1ae>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <UART_SetConfig+0x1b8>
 8004e00:	e010      	b.n	8004e24 <UART_SetConfig+0x1d0>
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d005      	beq.n	8004e12 <UART_SetConfig+0x1be>
 8004e06:	2bc0      	cmp	r3, #192	; 0xc0
 8004e08:	d009      	beq.n	8004e1e <UART_SetConfig+0x1ca>
 8004e0a:	e00b      	b.n	8004e24 <UART_SetConfig+0x1d0>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	76fb      	strb	r3, [r7, #27]
 8004e10:	e062      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e12:	2302      	movs	r3, #2
 8004e14:	76fb      	strb	r3, [r7, #27]
 8004e16:	e05f      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	76fb      	strb	r3, [r7, #27]
 8004e1c:	e05c      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	76fb      	strb	r3, [r7, #27]
 8004e22:	e059      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e24:	2310      	movs	r3, #16
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	bf00      	nop
 8004e2a:	e055      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a47      	ldr	r2, [pc, #284]	; (8004f50 <UART_SetConfig+0x2fc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d124      	bne.n	8004e80 <UART_SetConfig+0x22c>
 8004e36:	4b42      	ldr	r3, [pc, #264]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e44:	d012      	beq.n	8004e6c <UART_SetConfig+0x218>
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d802      	bhi.n	8004e52 <UART_SetConfig+0x1fe>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <UART_SetConfig+0x20c>
 8004e50:	e012      	b.n	8004e78 <UART_SetConfig+0x224>
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e56:	d006      	beq.n	8004e66 <UART_SetConfig+0x212>
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d009      	beq.n	8004e72 <UART_SetConfig+0x21e>
 8004e5e:	e00b      	b.n	8004e78 <UART_SetConfig+0x224>
 8004e60:	2300      	movs	r3, #0
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	e038      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e66:	2302      	movs	r3, #2
 8004e68:	76fb      	strb	r3, [r7, #27]
 8004e6a:	e035      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	76fb      	strb	r3, [r7, #27]
 8004e70:	e032      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e72:	2308      	movs	r3, #8
 8004e74:	76fb      	strb	r3, [r7, #27]
 8004e76:	e02f      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	76fb      	strb	r3, [r7, #27]
 8004e7c:	bf00      	nop
 8004e7e:	e02b      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <UART_SetConfig+0x2e4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d124      	bne.n	8004ed4 <UART_SetConfig+0x280>
 8004e8a:	4b2d      	ldr	r3, [pc, #180]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d012      	beq.n	8004ec0 <UART_SetConfig+0x26c>
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d802      	bhi.n	8004ea6 <UART_SetConfig+0x252>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <UART_SetConfig+0x260>
 8004ea4:	e012      	b.n	8004ecc <UART_SetConfig+0x278>
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eaa:	d006      	beq.n	8004eba <UART_SetConfig+0x266>
 8004eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eb0:	d009      	beq.n	8004ec6 <UART_SetConfig+0x272>
 8004eb2:	e00b      	b.n	8004ecc <UART_SetConfig+0x278>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e00e      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	76fb      	strb	r3, [r7, #27]
 8004ebe:	e00b      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	76fb      	strb	r3, [r7, #27]
 8004ec4:	e008      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e005      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	bf00      	nop
 8004ed2:	e001      	b.n	8004ed8 <UART_SetConfig+0x284>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a16      	ldr	r2, [pc, #88]	; (8004f38 <UART_SetConfig+0x2e4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f040 8087 	bne.w	8004ff2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ee4:	7efb      	ldrb	r3, [r7, #27]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d836      	bhi.n	8004f58 <UART_SetConfig+0x304>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x29c>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f59 	.word	0x08004f59
 8004f00:	08004f23 	.word	0x08004f23
 8004f04:	08004f59 	.word	0x08004f59
 8004f08:	08004f59 	.word	0x08004f59
 8004f0c:	08004f59 	.word	0x08004f59
 8004f10:	08004f2b 	.word	0x08004f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7fe fd7c 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004f18:	6178      	str	r0, [r7, #20]
        break;
 8004f1a:	e022      	b.n	8004f62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <UART_SetConfig+0x300>)
 8004f1e:	617b      	str	r3, [r7, #20]
        break;
 8004f20:	e01f      	b.n	8004f62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f22:	f7fe fcdf 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8004f26:	6178      	str	r0, [r7, #20]
        break;
 8004f28:	e01b      	b.n	8004f62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2e:	617b      	str	r3, [r7, #20]
        break;
 8004f30:	e017      	b.n	8004f62 <UART_SetConfig+0x30e>
 8004f32:	bf00      	nop
 8004f34:	efff69f3 	.word	0xefff69f3
 8004f38:	40008000 	.word	0x40008000
 8004f3c:	40013800 	.word	0x40013800
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40004400 	.word	0x40004400
 8004f48:	40004800 	.word	0x40004800
 8004f4c:	40004c00 	.word	0x40004c00
 8004f50:	40005000 	.word	0x40005000
 8004f54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	76bb      	strb	r3, [r7, #26]
        break;
 8004f60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80f1 	beq.w	800514c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d305      	bcc.n	8004f86 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d902      	bls.n	8004f8c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	76bb      	strb	r3, [r7, #26]
 8004f8a:	e0df      	b.n	800514c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	0214      	lsls	r4, r2, #8
 8004f9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fa2:	020b      	lsls	r3, r1, #8
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6852      	ldr	r2, [r2, #4]
 8004fa8:	0852      	lsrs	r2, r2, #1
 8004faa:	4611      	mov	r1, r2
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	eb13 0b01 	adds.w	fp, r3, r1
 8004fb4:	eb44 0c02 	adc.w	ip, r4, r2
 8004fb8:	4658      	mov	r0, fp
 8004fba:	4661      	mov	r1, ip
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	f7fb f90a 	bl	80001e0 <__aeabi_uldivmod>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd8:	d308      	bcc.n	8004fec <UART_SetConfig+0x398>
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe0:	d204      	bcs.n	8004fec <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	e0af      	b.n	800514c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	76bb      	strb	r3, [r7, #26]
 8004ff0:	e0ac      	b.n	800514c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffa:	d15b      	bne.n	80050b4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004ffc:	7efb      	ldrb	r3, [r7, #27]
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d827      	bhi.n	8005052 <UART_SetConfig+0x3fe>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x3b4>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005035 	.word	0x08005035
 8005010:	0800503d 	.word	0x0800503d
 8005014:	08005053 	.word	0x08005053
 8005018:	08005043 	.word	0x08005043
 800501c:	08005053 	.word	0x08005053
 8005020:	08005053 	.word	0x08005053
 8005024:	08005053 	.word	0x08005053
 8005028:	0800504b 	.word	0x0800504b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe fcf0 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8005030:	6178      	str	r0, [r7, #20]
        break;
 8005032:	e013      	b.n	800505c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005034:	f7fe fd02 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8005038:	6178      	str	r0, [r7, #20]
        break;
 800503a:	e00f      	b.n	800505c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800503c:	4b49      	ldr	r3, [pc, #292]	; (8005164 <UART_SetConfig+0x510>)
 800503e:	617b      	str	r3, [r7, #20]
        break;
 8005040:	e00c      	b.n	800505c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005042:	f7fe fc4f 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8005046:	6178      	str	r0, [r7, #20]
        break;
 8005048:	e008      	b.n	800505c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504e:	617b      	str	r3, [r7, #20]
        break;
 8005050:	e004      	b.n	800505c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	76bb      	strb	r3, [r7, #26]
        break;
 800505a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d074      	beq.n	800514c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	005a      	lsls	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	fbb2 f3f3 	udiv	r3, r2, r3
 8005076:	b29b      	uxth	r3, r3
 8005078:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d916      	bls.n	80050ae <UART_SetConfig+0x45a>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005086:	d212      	bcs.n	80050ae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f023 030f 	bic.w	r3, r3, #15
 8005090:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	b29a      	uxth	r2, r3
 800509e:	89fb      	ldrh	r3, [r7, #14]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	89fa      	ldrh	r2, [r7, #14]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	e04e      	b.n	800514c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	76bb      	strb	r3, [r7, #26]
 80050b2:	e04b      	b.n	800514c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b4:	7efb      	ldrb	r3, [r7, #27]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d827      	bhi.n	800510a <UART_SetConfig+0x4b6>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x46c>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe fc94 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 80050e8:	6178      	str	r0, [r7, #20]
        break;
 80050ea:	e013      	b.n	8005114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe fca6 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 80050f0:	6178      	str	r0, [r7, #20]
        break;
 80050f2:	e00f      	b.n	8005114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <UART_SetConfig+0x510>)
 80050f6:	617b      	str	r3, [r7, #20]
        break;
 80050f8:	e00c      	b.n	8005114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fbf3 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80050fe:	6178      	str	r0, [r7, #20]
        break;
 8005100:	e008      	b.n	8005114 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	617b      	str	r3, [r7, #20]
        break;
 8005108:	e004      	b.n	8005114 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	76bb      	strb	r3, [r7, #26]
        break;
 8005112:	bf00      	nop
    }

    if (pclk != 0U)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085a      	lsrs	r2, r3, #1
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	441a      	add	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	b29b      	uxth	r3, r3
 800512e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d908      	bls.n	8005148 <UART_SetConfig+0x4f4>
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d204      	bcs.n	8005148 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	e001      	b.n	800514c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005158:	7ebb      	ldrb	r3, [r7, #26]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005164:	00f42400 	.word	0x00f42400

08005168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01a      	beq.n	800527e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005266:	d10a      	bne.n	800527e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
  }
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052ba:	f7fb fe03 	bl	8000ec4 <HAL_GetTick>
 80052be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d10e      	bne.n	80052ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f82a 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e020      	b.n	800532e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d10e      	bne.n	8005318 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f814 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e00a      	b.n	800532e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005346:	e05d      	b.n	8005404 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d059      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005350:	f7fb fdb8 	bl	8000ec4 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	429a      	cmp	r2, r3
 800535e:	d302      	bcc.n	8005366 <UART_WaitOnFlagUntilTimeout+0x30>
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11b      	bne.n	800539e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005374:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e042      	b.n	8005424 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02b      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ba:	d123      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053d4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e00f      	b.n	8005424 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	429a      	cmp	r2, r3
 8005420:	d092      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005442:	f3ef 8305 	mrs	r3, IPSR
 8005446:	60bb      	str	r3, [r7, #8]
  return(result);
 8005448:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544e:	f3ef 8310 	mrs	r3, PRIMASK
 8005452:	607b      	str	r3, [r7, #4]
  return(result);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800545a:	f3ef 8311 	mrs	r3, BASEPRI
 800545e:	603b      	str	r3, [r7, #0]
  return(result);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <osKernelInitialize+0x3a>
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <osKernelInitialize+0x64>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d103      	bne.n	8005476 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800546e:	f06f 0305 	mvn.w	r3, #5
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e00c      	b.n	8005490 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <osKernelInitialize+0x64>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <osKernelInitialize+0x64>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	e002      	b.n	8005490 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005490:	68fb      	ldr	r3, [r7, #12]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000030 	.word	0x20000030

080054a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054aa:	f3ef 8305 	mrs	r3, IPSR
 80054ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80054b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10f      	bne.n	80054d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ba:	607b      	str	r3, [r7, #4]
  return(result);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d105      	bne.n	80054ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054c2:	f3ef 8311 	mrs	r3, BASEPRI
 80054c6:	603b      	str	r3, [r7, #0]
  return(result);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <osKernelStart+0x3a>
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <osKernelStart+0x68>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d103      	bne.n	80054de <osKernelStart+0x3a>
    stat = osErrorISR;
 80054d6:	f06f 0305 	mvn.w	r3, #5
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e010      	b.n	8005500 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <osKernelStart+0x68>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d109      	bne.n	80054fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054e6:	f7ff ffa1 	bl	800542c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <osKernelStart+0x68>)
 80054ec:	2202      	movs	r2, #2
 80054ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054f0:	f001 f870 	bl	80065d4 <vTaskStartScheduler>
      stat = osOK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e002      	b.n	8005500 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295
 80054fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005500:	68fb      	ldr	r3, [r7, #12]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000030 	.word	0x20000030

08005510 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b090      	sub	sp, #64	; 0x40
 8005514:	af04      	add	r7, sp, #16
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005520:	f3ef 8305 	mrs	r3, IPSR
 8005524:	61fb      	str	r3, [r7, #28]
  return(result);
 8005526:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 808f 	bne.w	800564c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552e:	f3ef 8310 	mrs	r3, PRIMASK
 8005532:	61bb      	str	r3, [r7, #24]
  return(result);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800553a:	f3ef 8311 	mrs	r3, BASEPRI
 800553e:	617b      	str	r3, [r7, #20]
  return(result);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <osThreadNew+0x3e>
 8005546:	4b44      	ldr	r3, [pc, #272]	; (8005658 <osThreadNew+0x148>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d07e      	beq.n	800564c <osThreadNew+0x13c>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07b      	beq.n	800564c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005558:	2318      	movs	r3, #24
 800555a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800555c:	2300      	movs	r3, #0
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d045      	beq.n	80055f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <osThreadNew+0x6a>
        name = attr->name;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <osThreadNew+0x90>
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	2b38      	cmp	r3, #56	; 0x38
 8005592:	d805      	bhi.n	80055a0 <osThreadNew+0x90>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <osThreadNew+0x94>
        return (NULL);
 80055a0:	2300      	movs	r3, #0
 80055a2:	e054      	b.n	800564e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	089b      	lsrs	r3, r3, #2
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <osThreadNew+0xca>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b5b      	cmp	r3, #91	; 0x5b
 80055c2:	d90a      	bls.n	80055da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d006      	beq.n	80055da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <osThreadNew+0xca>
        mem = 1;
 80055d4:	2301      	movs	r3, #1
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	e010      	b.n	80055fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10c      	bne.n	80055fc <osThreadNew+0xec>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d108      	bne.n	80055fc <osThreadNew+0xec>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <osThreadNew+0xec>
          mem = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	623b      	str	r3, [r7, #32]
 80055f6:	e001      	b.n	80055fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d110      	bne.n	8005624 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fe09 	bl	8006230 <xTaskCreateStatic>
 800561e:	4603      	mov	r3, r0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e013      	b.n	800564c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	b29a      	uxth	r2, r3
 800562e:	f107 0310 	add.w	r3, r7, #16
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fe51 	bl	80062e4 <xTaskCreate>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <osThreadNew+0x13c>
          hTask = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800564c:	693b      	ldr	r3, [r7, #16]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3730      	adds	r7, #48	; 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000030 	.word	0x20000030

0800565c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005664:	f3ef 8305 	mrs	r3, IPSR
 8005668:	613b      	str	r3, [r7, #16]
  return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10f      	bne.n	8005690 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005670:	f3ef 8310 	mrs	r3, PRIMASK
 8005674:	60fb      	str	r3, [r7, #12]
  return(result);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800567c:	f3ef 8311 	mrs	r3, BASEPRI
 8005680:	60bb      	str	r3, [r7, #8]
  return(result);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <osDelay+0x3c>
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <osDelay+0x58>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d103      	bne.n	8005698 <osDelay+0x3c>
    stat = osErrorISR;
 8005690:	f06f 0305 	mvn.w	r3, #5
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	e007      	b.n	80056a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 ff62 	bl	800656c <vTaskDelay>
    }
  }

  return (stat);
 80056a8:	697b      	ldr	r3, [r7, #20]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000030 	.word	0x20000030

080056b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80056c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4a06      	ldr	r2, [pc, #24]	; (80056e8 <vApplicationGetIdleTaskMemory+0x30>)
 80056ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2280      	movs	r2, #128	; 0x80
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000034 	.word	0x20000034
 80056e8:	20000090 	.word	0x20000090

080056ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a07      	ldr	r2, [pc, #28]	; (8005718 <vApplicationGetTimerTaskMemory+0x2c>)
 80056fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a06      	ldr	r2, [pc, #24]	; (800571c <vApplicationGetTimerTaskMemory+0x30>)
 8005702:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800570a:	601a      	str	r2, [r3, #0]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	20000290 	.word	0x20000290
 800571c:	200002ec 	.word	0x200002ec

08005720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f103 0208 	add.w	r2, r3, #8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f103 0208 	add.w	r2, r3, #8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f103 0208 	add.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d103      	bne.n	80057e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e00c      	b.n	80057fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3308      	adds	r3, #8
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	e002      	b.n	80057f0 <vListInsert+0x2e>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d2f6      	bcs.n	80057ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	601a      	str	r2, [r3, #0]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6892      	ldr	r2, [r2, #8]
 800584a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6852      	ldr	r2, [r2, #4]
 8005854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d103      	bne.n	8005868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	1e5a      	subs	r2, r3, #1
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	e7fe      	b.n	80058ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80058b0:	f002 f814 	bl	80078dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e0:	3b01      	subs	r3, #1
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	441a      	add	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	22ff      	movs	r2, #255	; 0xff
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d114      	bne.n	8005930 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01a      	beq.n	8005944 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3310      	adds	r3, #16
 8005912:	4618      	mov	r0, r3
 8005914:	f001 f8de 	bl	8006ad4 <xTaskRemoveFromEventList>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800591e:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <xQueueGenericReset+0xcc>)
 8005920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	e009      	b.n	8005944 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3310      	adds	r3, #16
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fef3 	bl	8005720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3324      	adds	r3, #36	; 0x24
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff feee 	bl	8005720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005944:	f001 fff8 	bl	8007938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005948:	2301      	movs	r3, #1
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08e      	sub	sp, #56	; 0x38
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <xQueueGenericCreateStatic+0x28>
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
 800597e:	e7fe      	b.n	800597e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <xQueueGenericCreateStatic+0x42>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
 8005998:	e7fe      	b.n	8005998 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <xQueueGenericCreateStatic+0x4e>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <xQueueGenericCreateStatic+0x52>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueGenericCreateStatic+0x54>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <xQueueGenericCreateStatic+0x6c>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	e7fe      	b.n	80059c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <xQueueGenericCreateStatic+0x78>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <xQueueGenericCreateStatic+0x7c>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <xQueueGenericCreateStatic+0x7e>
 80059d4:	2300      	movs	r3, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <xQueueGenericCreateStatic+0x96>
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ee:	2350      	movs	r3, #80	; 0x50
 80059f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b50      	cmp	r3, #80	; 0x50
 80059f6:	d009      	beq.n	8005a0c <xQueueGenericCreateStatic+0xb4>
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e7fe      	b.n	8005a0a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f805 	bl	8005a3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3730      	adds	r7, #48	; 0x30
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e002      	b.n	8005a60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	69b8      	ldr	r0, [r7, #24]
 8005a70:	f7ff ff0a 	bl	8005888 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	; 0x38
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a92:	2300      	movs	r3, #0
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <xQueueGenericSend+0x30>
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab2:	e7fe      	b.n	8005ab2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <xQueueGenericSend+0x3e>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <xQueueGenericSend+0x42>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <xQueueGenericSend+0x44>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <xQueueGenericSend+0x5c>
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	e7fe      	b.n	8005ade <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d103      	bne.n	8005aee <xQueueGenericSend+0x6a>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <xQueueGenericSend+0x6e>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <xQueueGenericSend+0x70>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <xQueueGenericSend+0x88>
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	623b      	str	r3, [r7, #32]
 8005b0a:	e7fe      	b.n	8005b0a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b0c:	f001 f998 	bl	8006e40 <xTaskGetSchedulerState>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <xQueueGenericSend+0x98>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <xQueueGenericSend+0x9c>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <xQueueGenericSend+0x9e>
 8005b20:	2300      	movs	r3, #0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <xQueueGenericSend+0xb6>
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b3a:	f001 fecf 	bl	80078dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d302      	bcc.n	8005b50 <xQueueGenericSend+0xcc>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d129      	bne.n	8005ba4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b56:	f000 f9ff 	bl	8005f58 <prvCopyDataToQueue>
 8005b5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	3324      	adds	r3, #36	; 0x24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 ffb3 	bl	8006ad4 <xTaskRemoveFromEventList>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d013      	beq.n	8005b9c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b74:	4b3f      	ldr	r3, [pc, #252]	; (8005c74 <xQueueGenericSend+0x1f0>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	e00a      	b.n	8005b9c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b8c:	4b39      	ldr	r3, [pc, #228]	; (8005c74 <xQueueGenericSend+0x1f0>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b9c:	f001 fecc 	bl	8007938 <vPortExitCritical>
				return pdPASS;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e063      	b.n	8005c6c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005baa:	f001 fec5 	bl	8007938 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e05c      	b.n	8005c6c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 ffeb 	bl	8006b98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bc6:	f001 feb7 	bl	8007938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bca:	f000 fd67 	bl	800669c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bce:	f001 fe85 	bl	80078dc <vPortEnterCritical>
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd8:	b25b      	sxtb	r3, r3
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d103      	bne.n	8005be8 <xQueueGenericSend+0x164>
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d103      	bne.n	8005bfe <xQueueGenericSend+0x17a>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bfe:	f001 fe9b 	bl	8007938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c02:	1d3a      	adds	r2, r7, #4
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 ffda 	bl	8006bc4 <xTaskCheckForTimeOut>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d124      	bne.n	8005c60 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c18:	f000 fa96 	bl	8006148 <prvIsQueueFull>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d018      	beq.n	8005c54 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	3310      	adds	r3, #16
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 ff04 	bl	8006a38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c32:	f000 fa21 	bl	8006078 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c36:	f000 fd3f 	bl	80066b8 <xTaskResumeAll>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f47f af7c 	bne.w	8005b3a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005c42:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <xQueueGenericSend+0x1f0>)
 8005c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	e772      	b.n	8005b3a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c56:	f000 fa0f 	bl	8006078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c5a:	f000 fd2d 	bl	80066b8 <xTaskResumeAll>
 8005c5e:	e76c      	b.n	8005b3a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c62:	f000 fa09 	bl	8006078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c66:	f000 fd27 	bl	80066b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3738      	adds	r7, #56	; 0x38
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08e      	sub	sp, #56	; 0x38
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <xQueueGenericSendFromISR+0x2c>
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	e7fe      	b.n	8005ca2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x3a>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <xQueueGenericSendFromISR+0x3e>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueGenericSendFromISR+0x40>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x58>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	623b      	str	r3, [r7, #32]
 8005cce:	e7fe      	b.n	8005cce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d103      	bne.n	8005cde <xQueueGenericSendFromISR+0x66>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <xQueueGenericSendFromISR+0x6a>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueGenericSendFromISR+0x6c>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <xQueueGenericSendFromISR+0x84>
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	e7fe      	b.n	8005cfa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cfc:	f001 feca 	bl	8007a94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d00:	f3ef 8211 	mrs	r2, BASEPRI
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61ba      	str	r2, [r7, #24]
 8005d16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <xQueueGenericSendFromISR+0xb6>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d12c      	bne.n	8005d88 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3e:	f000 f90b 	bl	8005f58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d112      	bne.n	8005d72 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d016      	beq.n	8005d82 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 febb 	bl	8006ad4 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e007      	b.n	8005d82 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d76:	3301      	adds	r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	b25a      	sxtb	r2, r3
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d82:	2301      	movs	r3, #1
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005d86:	e001      	b.n	8005d8c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3738      	adds	r7, #56	; 0x38
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08c      	sub	sp, #48	; 0x30
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <xQueueReceive+0x2e>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	e7fe      	b.n	8005dcc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <xQueueReceive+0x3c>
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <xQueueReceive+0x40>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <xQueueReceive+0x42>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <xQueueReceive+0x5a>
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e7fe      	b.n	8005df8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dfa:	f001 f821 	bl	8006e40 <xTaskGetSchedulerState>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <xQueueReceive+0x6a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <xQueueReceive+0x6e>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueReceive+0x70>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <xQueueReceive+0x88>
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	e7fe      	b.n	8005e26 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e28:	f001 fd58 	bl	80078dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01f      	beq.n	8005e78 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3c:	f000 f8f6 	bl	800602c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	1e5a      	subs	r2, r3, #1
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00f      	beq.n	8005e70 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	3310      	adds	r3, #16
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fe3d 	bl	8006ad4 <xTaskRemoveFromEventList>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e60:	4b3c      	ldr	r3, [pc, #240]	; (8005f54 <xQueueReceive+0x1b4>)
 8005e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e70:	f001 fd62 	bl	8007938 <vPortExitCritical>
				return pdPASS;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e069      	b.n	8005f4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e7e:	f001 fd5b 	bl	8007938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e062      	b.n	8005f4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e8c:	f107 0310 	add.w	r3, r7, #16
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fe81 	bl	8006b98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e96:	2301      	movs	r3, #1
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e9a:	f001 fd4d 	bl	8007938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e9e:	f000 fbfd 	bl	800669c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ea2:	f001 fd1b 	bl	80078dc <vPortEnterCritical>
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eac:	b25b      	sxtb	r3, r3
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d103      	bne.n	8005ebc <xQueueReceive+0x11c>
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec2:	b25b      	sxtb	r3, r3
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d103      	bne.n	8005ed2 <xQueueReceive+0x132>
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed2:	f001 fd31 	bl	8007938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ed6:	1d3a      	adds	r2, r7, #4
 8005ed8:	f107 0310 	add.w	r3, r7, #16
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fe70 	bl	8006bc4 <xTaskCheckForTimeOut>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d123      	bne.n	8005f32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eec:	f000 f916 	bl	800611c <prvIsQueueEmpty>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d017      	beq.n	8005f26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	3324      	adds	r3, #36	; 0x24
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fd9a 	bl	8006a38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f06:	f000 f8b7 	bl	8006078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f0a:	f000 fbd5 	bl	80066b8 <xTaskResumeAll>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d189      	bne.n	8005e28 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <xQueueReceive+0x1b4>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	e780      	b.n	8005e28 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f28:	f000 f8a6 	bl	8006078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f2c:	f000 fbc4 	bl	80066b8 <xTaskResumeAll>
 8005f30:	e77a      	b.n	8005e28 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f34:	f000 f8a0 	bl	8006078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f38:	f000 fbbe 	bl	80066b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f3e:	f000 f8ed 	bl	800611c <prvIsQueueEmpty>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f43f af6f 	beq.w	8005e28 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3730      	adds	r7, #48	; 0x30
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10d      	bne.n	8005f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d14d      	bne.n	800601a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 ff7a 	bl	8006e7c <xTaskPriorityDisinherit>
 8005f88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	e043      	b.n	800601a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d119      	bne.n	8005fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6858      	ldr	r0, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	f001 ffae 	bl	8007f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	441a      	add	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d32b      	bcc.n	800601a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	e026      	b.n	800601a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68d8      	ldr	r0, [r3, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	f001 ff94 	bl	8007f04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe4:	425b      	negs	r3, r3
 8005fe6:	441a      	add	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d207      	bcs.n	8006008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	425b      	negs	r3, r3
 8006002:	441a      	add	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d105      	bne.n	800601a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	3b01      	subs	r3, #1
 8006018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006022:	697b      	ldr	r3, [r7, #20]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d018      	beq.n	8006070 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	441a      	add	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	d303      	bcc.n	8006060 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68d9      	ldr	r1, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	461a      	mov	r2, r3
 800606a:	6838      	ldr	r0, [r7, #0]
 800606c:	f001 ff4a 	bl	8007f04 <memcpy>
	}
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006080:	f001 fc2c 	bl	80078dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800608c:	e011      	b.n	80060b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d012      	beq.n	80060bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3324      	adds	r3, #36	; 0x24
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fd1a 	bl	8006ad4 <xTaskRemoveFromEventList>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060a6:	f000 fded 	bl	8006c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dce9      	bgt.n	800608e <prvUnlockQueue+0x16>
 80060ba:	e000      	b.n	80060be <prvUnlockQueue+0x46>
					break;
 80060bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060c6:	f001 fc37 	bl	8007938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060ca:	f001 fc07 	bl	80078dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060d6:	e011      	b.n	80060fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d012      	beq.n	8006106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3310      	adds	r3, #16
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fcf5 	bl	8006ad4 <xTaskRemoveFromEventList>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060f0:	f000 fdc8 	bl	8006c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060f4:	7bbb      	ldrb	r3, [r7, #14]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006100:	2b00      	cmp	r3, #0
 8006102:	dce9      	bgt.n	80060d8 <prvUnlockQueue+0x60>
 8006104:	e000      	b.n	8006108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	22ff      	movs	r2, #255	; 0xff
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006110:	f001 fc12 	bl	8007938 <vPortExitCritical>
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006124:	f001 fbda 	bl	80078dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006130:	2301      	movs	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e001      	b.n	800613a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800613a:	f001 fbfd 	bl	8007938 <vPortExitCritical>

	return xReturn;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006150:	f001 fbc4 	bl	80078dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615c:	429a      	cmp	r2, r3
 800615e:	d102      	bne.n	8006166 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e001      	b.n	800616a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800616a:	f001 fbe5 	bl	8007938 <vPortExitCritical>

	return xReturn;
 800616e:	68fb      	ldr	r3, [r7, #12]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e014      	b.n	80061b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006188:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <vQueueAddToRegistry+0x4c>)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006194:	490b      	ldr	r1, [pc, #44]	; (80061c4 <vQueueAddToRegistry+0x4c>)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800619e:	4a09      	ldr	r2, [pc, #36]	; (80061c4 <vQueueAddToRegistry+0x4c>)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	4413      	add	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061aa:	e005      	b.n	80061b8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3301      	adds	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b07      	cmp	r3, #7
 80061b6:	d9e7      	bls.n	8006188 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	20001acc 	.word	0x20001acc

080061c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061d8:	f001 fb80 	bl	80078dc <vPortEnterCritical>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e2:	b25b      	sxtb	r3, r3
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d103      	bne.n	80061f2 <vQueueWaitForMessageRestricted+0x2a>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d103      	bne.n	8006208 <vQueueWaitForMessageRestricted+0x40>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006208:	f001 fb96 	bl	8007938 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	3324      	adds	r3, #36	; 0x24
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fc2f 	bl	8006a80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f7ff ff28 	bl	8006078 <prvUnlockQueue>
	}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08e      	sub	sp, #56	; 0x38
 8006234:	af04      	add	r7, sp, #16
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <xTaskCreateStatic+0x28>
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
 8006256:	e7fe      	b.n	8006256 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <xTaskCreateStatic+0x42>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	e7fe      	b.n	8006270 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006272:	235c      	movs	r3, #92	; 0x5c
 8006274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b5c      	cmp	r3, #92	; 0x5c
 800627a:	d009      	beq.n	8006290 <xTaskCreateStatic+0x60>
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	e7fe      	b.n	800628e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006290:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01e      	beq.n	80062d6 <xTaskCreateStatic+0xa6>
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01b      	beq.n	80062d6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062b0:	2300      	movs	r3, #0
 80062b2:	9303      	str	r3, [sp, #12]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	9302      	str	r3, [sp, #8]
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f850 	bl	800636e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062d0:	f000 f8dc 	bl	800648c <prvAddNewTaskToReadyList>
 80062d4:	e001      	b.n	80062da <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062da:	697b      	ldr	r3, [r7, #20]
	}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	; 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08c      	sub	sp, #48	; 0x30
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fc09 	bl	8007b10 <pvPortMalloc>
 80062fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00e      	beq.n	8006324 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006306:	205c      	movs	r0, #92	; 0x5c
 8006308:	f001 fc02 	bl	8007b10 <pvPortMalloc>
 800630c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
 800631a:	e005      	b.n	8006328 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800631c:	6978      	ldr	r0, [r7, #20]
 800631e:	f001 fcb9 	bl	8007c94 <vPortFree>
 8006322:	e001      	b.n	8006328 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	2300      	movs	r3, #0
 800633a:	9303      	str	r3, [sp, #12]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	9302      	str	r3, [sp, #8]
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f80e 	bl	800636e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006352:	69f8      	ldr	r0, [r7, #28]
 8006354:	f000 f89a 	bl	800648c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006358:	2301      	movs	r3, #1
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e002      	b.n	8006364 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800635e:	f04f 33ff 	mov.w	r3, #4294967295
 8006362:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006364:	69bb      	ldr	r3, [r7, #24]
	}
 8006366:	4618      	mov	r0, r3
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b088      	sub	sp, #32
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	461a      	mov	r2, r3
 8006386:	21a5      	movs	r1, #165	; 0xa5
 8006388:	f001 fdc7 	bl	8007f1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006396:	3b01      	subs	r3, #1
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f023 0307 	bic.w	r3, r3, #7
 80063a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d009      	beq.n	80063c4 <prvInitialiseNewTask+0x56>
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e7fe      	b.n	80063c2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01f      	beq.n	800640a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ca:	2300      	movs	r3, #0
 80063cc:	61fb      	str	r3, [r7, #28]
 80063ce:	e012      	b.n	80063f6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	7819      	ldrb	r1, [r3, #0]
 80063d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	3334      	adds	r3, #52	; 0x34
 80063e0:	460a      	mov	r2, r1
 80063e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3301      	adds	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	d9e9      	bls.n	80063d0 <prvInitialiseNewTask+0x62>
 80063fc:	e000      	b.n	8006400 <prvInitialiseNewTask+0x92>
			{
				break;
 80063fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006408:	e003      	b.n	8006412 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	2b37      	cmp	r3, #55	; 0x37
 8006416:	d901      	bls.n	800641c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006418:	2337      	movs	r3, #55	; 0x37
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006420:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006426:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	2200      	movs	r2, #0
 800642c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff f994 	bl	8005760 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	3318      	adds	r3, #24
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff f98f 	bl	8005760 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2200      	movs	r2, #0
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	69b8      	ldr	r0, [r7, #24]
 800646c:	f001 f90c 	bl	8007688 <pxPortInitialiseStack>
 8006470:	4602      	mov	r2, r0
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006482:	bf00      	nop
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006494:	f001 fa22 	bl	80078dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006498:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <prvAddNewTaskToReadyList+0xc4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	4a2c      	ldr	r2, [pc, #176]	; (8006550 <prvAddNewTaskToReadyList+0xc4>)
 80064a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064a2:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <prvAddNewTaskToReadyList+0xc8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064aa:	4a2a      	ldr	r2, [pc, #168]	; (8006554 <prvAddNewTaskToReadyList+0xc8>)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064b0:	4b27      	ldr	r3, [pc, #156]	; (8006550 <prvAddNewTaskToReadyList+0xc4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d110      	bne.n	80064da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064b8:	f000 fc08 	bl	8006ccc <prvInitialiseTaskLists>
 80064bc:	e00d      	b.n	80064da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064be:	4b26      	ldr	r3, [pc, #152]	; (8006558 <prvAddNewTaskToReadyList+0xcc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064c6:	4b23      	ldr	r3, [pc, #140]	; (8006554 <prvAddNewTaskToReadyList+0xc8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d802      	bhi.n	80064da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064d4:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <prvAddNewTaskToReadyList+0xc8>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064da:	4b20      	ldr	r3, [pc, #128]	; (800655c <prvAddNewTaskToReadyList+0xd0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3301      	adds	r3, #1
 80064e0:	4a1e      	ldr	r2, [pc, #120]	; (800655c <prvAddNewTaskToReadyList+0xd0>)
 80064e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <prvAddNewTaskToReadyList+0xd0>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <prvAddNewTaskToReadyList+0xd4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d903      	bls.n	8006500 <prvAddNewTaskToReadyList+0x74>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	4a18      	ldr	r2, [pc, #96]	; (8006560 <prvAddNewTaskToReadyList+0xd4>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <prvAddNewTaskToReadyList+0xd8>)
 800650e:	441a      	add	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f7ff f92f 	bl	800577a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800651c:	f001 fa0c 	bl	8007938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <prvAddNewTaskToReadyList+0xcc>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <prvAddNewTaskToReadyList+0xc8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	429a      	cmp	r2, r3
 8006534:	d207      	bcs.n	8006546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006536:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <prvAddNewTaskToReadyList+0xdc>)
 8006538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000bc0 	.word	0x20000bc0
 8006554:	200006ec 	.word	0x200006ec
 8006558:	20000bcc 	.word	0x20000bcc
 800655c:	20000bdc 	.word	0x20000bdc
 8006560:	20000bc8 	.word	0x20000bc8
 8006564:	200006f0 	.word	0x200006f0
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <vTaskDelay+0x60>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <vTaskDelay+0x2e>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	e7fe      	b.n	8006598 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800659a:	f000 f87f 	bl	800669c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800659e:	2100      	movs	r1, #0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fcd7 	bl	8006f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065a6:	f000 f887 	bl	80066b8 <xTaskResumeAll>
 80065aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <vTaskDelay+0x64>)
 80065b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000be8 	.word	0x20000be8
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065e2:	463a      	mov	r2, r7
 80065e4:	1d39      	adds	r1, r7, #4
 80065e6:	f107 0308 	add.w	r3, r7, #8
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff f864 	bl	80056b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	9202      	str	r2, [sp, #8]
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	2300      	movs	r3, #0
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	460a      	mov	r2, r1
 8006602:	4920      	ldr	r1, [pc, #128]	; (8006684 <vTaskStartScheduler+0xb0>)
 8006604:	4820      	ldr	r0, [pc, #128]	; (8006688 <vTaskStartScheduler+0xb4>)
 8006606:	f7ff fe13 	bl	8006230 <xTaskCreateStatic>
 800660a:	4602      	mov	r2, r0
 800660c:	4b1f      	ldr	r3, [pc, #124]	; (800668c <vTaskStartScheduler+0xb8>)
 800660e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006610:	4b1e      	ldr	r3, [pc, #120]	; (800668c <vTaskStartScheduler+0xb8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e001      	b.n	8006622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d102      	bne.n	800662e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006628:	f000 fce8 	bl	8006ffc <xTimerCreateTimerTask>
 800662c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d115      	bne.n	8006660 <vTaskStartScheduler+0x8c>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <vTaskStartScheduler+0xbc>)
 8006648:	f04f 32ff 	mov.w	r2, #4294967295
 800664c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800664e:	4b11      	ldr	r3, [pc, #68]	; (8006694 <vTaskStartScheduler+0xc0>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <vTaskStartScheduler+0xc4>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800665a:	f001 f8a1 	bl	80077a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800665e:	e00d      	b.n	800667c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d109      	bne.n	800667c <vTaskStartScheduler+0xa8>
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e7fe      	b.n	800667a <vTaskStartScheduler+0xa6>
}
 800667c:	bf00      	nop
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	08007fb4 	.word	0x08007fb4
 8006688:	08006c9d 	.word	0x08006c9d
 800668c:	20000be4 	.word	0x20000be4
 8006690:	20000be0 	.word	0x20000be0
 8006694:	20000bcc 	.word	0x20000bcc
 8006698:	20000bc4 	.word	0x20000bc4

0800669c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <vTaskSuspendAll+0x18>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3301      	adds	r3, #1
 80066a6:	4a03      	ldr	r2, [pc, #12]	; (80066b4 <vTaskSuspendAll+0x18>)
 80066a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80066aa:	bf00      	nop
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	20000be8 	.word	0x20000be8

080066b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066c6:	4b41      	ldr	r3, [pc, #260]	; (80067cc <xTaskResumeAll+0x114>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d109      	bne.n	80066e2 <xTaskResumeAll+0x2a>
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	e7fe      	b.n	80066e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066e2:	f001 f8fb 	bl	80078dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <xTaskResumeAll+0x114>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	4a37      	ldr	r2, [pc, #220]	; (80067cc <xTaskResumeAll+0x114>)
 80066ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f0:	4b36      	ldr	r3, [pc, #216]	; (80067cc <xTaskResumeAll+0x114>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d162      	bne.n	80067be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066f8:	4b35      	ldr	r3, [pc, #212]	; (80067d0 <xTaskResumeAll+0x118>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d05e      	beq.n	80067be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006700:	e02f      	b.n	8006762 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006702:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <xTaskResumeAll+0x11c>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3318      	adds	r3, #24
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff f890 	bl	8005834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3304      	adds	r3, #4
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff f88b 	bl	8005834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <xTaskResumeAll+0x120>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d903      	bls.n	8006732 <xTaskResumeAll+0x7a>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	4a2a      	ldr	r2, [pc, #168]	; (80067d8 <xTaskResumeAll+0x120>)
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4a27      	ldr	r2, [pc, #156]	; (80067dc <xTaskResumeAll+0x124>)
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3304      	adds	r3, #4
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7ff f816 	bl	800577a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006752:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <xTaskResumeAll+0x128>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	429a      	cmp	r2, r3
 800675a:	d302      	bcc.n	8006762 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800675c:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <xTaskResumeAll+0x12c>)
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <xTaskResumeAll+0x11c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1cb      	bne.n	8006702 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006770:	f000 fb46 	bl	8006e00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006774:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <xTaskResumeAll+0x130>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006780:	f000 f846 	bl	8006810 <xTaskIncrementTick>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800678a:	4b16      	ldr	r3, [pc, #88]	; (80067e4 <xTaskResumeAll+0x12c>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3b01      	subs	r3, #1
 8006794:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f1      	bne.n	8006780 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800679c:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <xTaskResumeAll+0x130>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067a2:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <xTaskResumeAll+0x12c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067aa:	2301      	movs	r3, #1
 80067ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067ae:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <xTaskResumeAll+0x134>)
 80067b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067be:	f001 f8bb 	bl	8007938 <vPortExitCritical>

	return xAlreadyYielded;
 80067c2:	68bb      	ldr	r3, [r7, #8]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000be8 	.word	0x20000be8
 80067d0:	20000bc0 	.word	0x20000bc0
 80067d4:	20000b80 	.word	0x20000b80
 80067d8:	20000bc8 	.word	0x20000bc8
 80067dc:	200006f0 	.word	0x200006f0
 80067e0:	200006ec 	.word	0x200006ec
 80067e4:	20000bd4 	.word	0x20000bd4
 80067e8:	20000bd0 	.word	0x20000bd0
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067f6:	4b05      	ldr	r3, [pc, #20]	; (800680c <xTaskGetTickCount+0x1c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067fc:	687b      	ldr	r3, [r7, #4]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000bc4 	.word	0x20000bc4

08006810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800681a:	4b4e      	ldr	r3, [pc, #312]	; (8006954 <xTaskIncrementTick+0x144>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 8088 	bne.w	8006934 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006824:	4b4c      	ldr	r3, [pc, #304]	; (8006958 <xTaskIncrementTick+0x148>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800682c:	4a4a      	ldr	r2, [pc, #296]	; (8006958 <xTaskIncrementTick+0x148>)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11f      	bne.n	8006878 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006838:	4b48      	ldr	r3, [pc, #288]	; (800695c <xTaskIncrementTick+0x14c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <xTaskIncrementTick+0x46>
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	e7fe      	b.n	8006854 <xTaskIncrementTick+0x44>
 8006856:	4b41      	ldr	r3, [pc, #260]	; (800695c <xTaskIncrementTick+0x14c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	4b40      	ldr	r3, [pc, #256]	; (8006960 <xTaskIncrementTick+0x150>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a3e      	ldr	r2, [pc, #248]	; (800695c <xTaskIncrementTick+0x14c>)
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	4a3e      	ldr	r2, [pc, #248]	; (8006960 <xTaskIncrementTick+0x150>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <xTaskIncrementTick+0x154>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	4a3c      	ldr	r2, [pc, #240]	; (8006964 <xTaskIncrementTick+0x154>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	f000 fac4 	bl	8006e00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006878:	4b3b      	ldr	r3, [pc, #236]	; (8006968 <xTaskIncrementTick+0x158>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	429a      	cmp	r2, r3
 8006880:	d349      	bcc.n	8006916 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <xTaskIncrementTick+0x14c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688c:	4b36      	ldr	r3, [pc, #216]	; (8006968 <xTaskIncrementTick+0x158>)
 800688e:	f04f 32ff 	mov.w	r2, #4294967295
 8006892:	601a      	str	r2, [r3, #0]
					break;
 8006894:	e03f      	b.n	8006916 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006896:	4b31      	ldr	r3, [pc, #196]	; (800695c <xTaskIncrementTick+0x14c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d203      	bcs.n	80068b6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068ae:	4a2e      	ldr	r2, [pc, #184]	; (8006968 <xTaskIncrementTick+0x158>)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068b4:	e02f      	b.n	8006916 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	3304      	adds	r3, #4
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe ffba 	bl	8005834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3318      	adds	r3, #24
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe ffb1 	bl	8005834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	4b25      	ldr	r3, [pc, #148]	; (800696c <xTaskIncrementTick+0x15c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d903      	bls.n	80068e6 <xTaskIncrementTick+0xd6>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4a22      	ldr	r2, [pc, #136]	; (800696c <xTaskIncrementTick+0x15c>)
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4a1f      	ldr	r2, [pc, #124]	; (8006970 <xTaskIncrementTick+0x160>)
 80068f4:	441a      	add	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fe ff3c 	bl	800577a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006906:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <xTaskIncrementTick+0x164>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	429a      	cmp	r2, r3
 800690e:	d3b8      	bcc.n	8006882 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006914:	e7b5      	b.n	8006882 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006916:	4b17      	ldr	r3, [pc, #92]	; (8006974 <xTaskIncrementTick+0x164>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4914      	ldr	r1, [pc, #80]	; (8006970 <xTaskIncrementTick+0x160>)
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d907      	bls.n	800693e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800692e:	2301      	movs	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	e004      	b.n	800693e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006934:	4b10      	ldr	r3, [pc, #64]	; (8006978 <xTaskIncrementTick+0x168>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	4a0f      	ldr	r2, [pc, #60]	; (8006978 <xTaskIncrementTick+0x168>)
 800693c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <xTaskIncrementTick+0x16c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006946:	2301      	movs	r3, #1
 8006948:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800694a:	697b      	ldr	r3, [r7, #20]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000be8 	.word	0x20000be8
 8006958:	20000bc4 	.word	0x20000bc4
 800695c:	20000b78 	.word	0x20000b78
 8006960:	20000b7c 	.word	0x20000b7c
 8006964:	20000bd8 	.word	0x20000bd8
 8006968:	20000be0 	.word	0x20000be0
 800696c:	20000bc8 	.word	0x20000bc8
 8006970:	200006f0 	.word	0x200006f0
 8006974:	200006ec 	.word	0x200006ec
 8006978:	20000bd0 	.word	0x20000bd0
 800697c:	20000bd4 	.word	0x20000bd4

08006980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <vTaskSwitchContext+0xa4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800698e:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <vTaskSwitchContext+0xa8>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006994:	e040      	b.n	8006a18 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006996:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <vTaskSwitchContext+0xa8>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699c:	4b23      	ldr	r3, [pc, #140]	; (8006a2c <vTaskSwitchContext+0xac>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e00f      	b.n	80069c4 <vTaskSwitchContext+0x44>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <vTaskSwitchContext+0x3e>
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e7fe      	b.n	80069bc <vTaskSwitchContext+0x3c>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	491a      	ldr	r1, [pc, #104]	; (8006a30 <vTaskSwitchContext+0xb0>)
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0e5      	beq.n	80069a4 <vTaskSwitchContext+0x24>
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <vTaskSwitchContext+0xb0>)
 80069e4:	4413      	add	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	605a      	str	r2, [r3, #4]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	3308      	adds	r3, #8
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d104      	bne.n	8006a08 <vTaskSwitchContext+0x88>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	605a      	str	r2, [r3, #4]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <vTaskSwitchContext+0xb4>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4a06      	ldr	r2, [pc, #24]	; (8006a2c <vTaskSwitchContext+0xac>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6013      	str	r3, [r2, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	20000be8 	.word	0x20000be8
 8006a28:	20000bd4 	.word	0x20000bd4
 8006a2c:	20000bc8 	.word	0x20000bc8
 8006a30:	200006f0 	.word	0x200006f0
 8006a34:	200006ec 	.word	0x200006ec

08006a38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <vTaskPlaceOnEventList+0x24>
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e7fe      	b.n	8006a5a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <vTaskPlaceOnEventList+0x44>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3318      	adds	r3, #24
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fe feac 	bl	80057c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	6838      	ldr	r0, [r7, #0]
 8006a6e:	f000 fa71 	bl	8006f54 <prvAddCurrentTaskToDelayedList>
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200006ec 	.word	0x200006ec

08006a80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <vTaskPlaceOnEventListRestricted+0x26>
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e7fe      	b.n	8006aa4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <vTaskPlaceOnEventListRestricted+0x50>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3318      	adds	r3, #24
 8006aac:	4619      	mov	r1, r3
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7fe fe63 	bl	800577a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295
 8006abe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	68b8      	ldr	r0, [r7, #8]
 8006ac4:	f000 fa46 	bl	8006f54 <prvAddCurrentTaskToDelayedList>
	}
 8006ac8:	bf00      	nop
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	200006ec 	.word	0x200006ec

08006ad4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <xTaskRemoveFromEventList+0x2a>
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e7fe      	b.n	8006afc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3318      	adds	r3, #24
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fe96 	bl	8005834 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b08:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <xTaskRemoveFromEventList+0xac>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d11d      	bne.n	8006b4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fe8d 	bl	8005834 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4b19      	ldr	r3, [pc, #100]	; (8006b84 <xTaskRemoveFromEventList+0xb0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d903      	bls.n	8006b2e <xTaskRemoveFromEventList+0x5a>
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <xTaskRemoveFromEventList+0xb0>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4a13      	ldr	r2, [pc, #76]	; (8006b88 <xTaskRemoveFromEventList+0xb4>)
 8006b3c:	441a      	add	r2, r3
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f7fe fe18 	bl	800577a <vListInsertEnd>
 8006b4a:	e005      	b.n	8006b58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	3318      	adds	r3, #24
 8006b50:	4619      	mov	r1, r3
 8006b52:	480e      	ldr	r0, [pc, #56]	; (8006b8c <xTaskRemoveFromEventList+0xb8>)
 8006b54:	f7fe fe11 	bl	800577a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <xTaskRemoveFromEventList+0xbc>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d905      	bls.n	8006b72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b66:	2301      	movs	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <xTaskRemoveFromEventList+0xc0>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e001      	b.n	8006b76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b76:	697b      	ldr	r3, [r7, #20]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000be8 	.word	0x20000be8
 8006b84:	20000bc8 	.word	0x20000bc8
 8006b88:	200006f0 	.word	0x200006f0
 8006b8c:	20000b80 	.word	0x20000b80
 8006b90:	200006ec 	.word	0x200006ec
 8006b94:	20000bd4 	.word	0x20000bd4

08006b98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <vTaskInternalSetTimeOutState+0x24>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <vTaskInternalSetTimeOutState+0x28>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	605a      	str	r2, [r3, #4]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	20000bd8 	.word	0x20000bd8
 8006bc0:	20000bc4 	.word	0x20000bc4

08006bc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d109      	bne.n	8006be8 <xTaskCheckForTimeOut+0x24>
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	e7fe      	b.n	8006be6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <xTaskCheckForTimeOut+0x3e>
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e7fe      	b.n	8006c00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006c02:	f000 fe6b 	bl	80078dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <xTaskCheckForTimeOut+0xb8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d102      	bne.n	8006c26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e023      	b.n	8006c6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <xTaskCheckForTimeOut+0xbc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d007      	beq.n	8006c42 <xTaskCheckForTimeOut+0x7e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e015      	b.n	8006c6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d20b      	bcs.n	8006c64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ff9d 	bl	8006b98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e004      	b.n	8006c6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c6e:	f000 fe63 	bl	8007938 <vPortExitCritical>

	return xReturn;
 8006c72:	69fb      	ldr	r3, [r7, #28]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000bc4 	.word	0x20000bc4
 8006c80:	20000bd8 	.word	0x20000bd8

08006c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c88:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <vTaskMissedYield+0x14>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000bd4 	.word	0x20000bd4

08006c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ca4:	f000 f852 	bl	8006d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <prvIdleTask+0x28>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d9f9      	bls.n	8006ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <prvIdleTask+0x2c>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cc0:	e7f0      	b.n	8006ca4 <prvIdleTask+0x8>
 8006cc2:	bf00      	nop
 8006cc4:	200006f0 	.word	0x200006f0
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	e00c      	b.n	8006cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a12      	ldr	r2, [pc, #72]	; (8006d2c <prvInitialiseTaskLists+0x60>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fd1a 	bl	8005720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b37      	cmp	r3, #55	; 0x37
 8006cf6:	d9ef      	bls.n	8006cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cf8:	480d      	ldr	r0, [pc, #52]	; (8006d30 <prvInitialiseTaskLists+0x64>)
 8006cfa:	f7fe fd11 	bl	8005720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cfe:	480d      	ldr	r0, [pc, #52]	; (8006d34 <prvInitialiseTaskLists+0x68>)
 8006d00:	f7fe fd0e 	bl	8005720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d04:	480c      	ldr	r0, [pc, #48]	; (8006d38 <prvInitialiseTaskLists+0x6c>)
 8006d06:	f7fe fd0b 	bl	8005720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d0a:	480c      	ldr	r0, [pc, #48]	; (8006d3c <prvInitialiseTaskLists+0x70>)
 8006d0c:	f7fe fd08 	bl	8005720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d10:	480b      	ldr	r0, [pc, #44]	; (8006d40 <prvInitialiseTaskLists+0x74>)
 8006d12:	f7fe fd05 	bl	8005720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <prvInitialiseTaskLists+0x78>)
 8006d18:	4a05      	ldr	r2, [pc, #20]	; (8006d30 <prvInitialiseTaskLists+0x64>)
 8006d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <prvInitialiseTaskLists+0x7c>)
 8006d1e:	4a05      	ldr	r2, [pc, #20]	; (8006d34 <prvInitialiseTaskLists+0x68>)
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200006f0 	.word	0x200006f0
 8006d30:	20000b50 	.word	0x20000b50
 8006d34:	20000b64 	.word	0x20000b64
 8006d38:	20000b80 	.word	0x20000b80
 8006d3c:	20000b94 	.word	0x20000b94
 8006d40:	20000bac 	.word	0x20000bac
 8006d44:	20000b78 	.word	0x20000b78
 8006d48:	20000b7c 	.word	0x20000b7c

08006d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d52:	e019      	b.n	8006d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d54:	f000 fdc2 	bl	80078dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <prvCheckTasksWaitingTermination+0x4c>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fd65 	bl	8005834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <prvCheckTasksWaitingTermination+0x50>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <prvCheckTasksWaitingTermination+0x50>)
 8006d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <prvCheckTasksWaitingTermination+0x54>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <prvCheckTasksWaitingTermination+0x54>)
 8006d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d7e:	f000 fddb 	bl	8007938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f80e 	bl	8006da4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d88:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <prvCheckTasksWaitingTermination+0x54>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e1      	bne.n	8006d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000b94 	.word	0x20000b94
 8006d9c:	20000bc0 	.word	0x20000bc0
 8006da0:	20000ba8 	.word	0x20000ba8

08006da4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff6a 	bl	8007c94 <vPortFree>
				vPortFree( pxTCB );
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 ff67 	bl	8007c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dc6:	e017      	b.n	8006df8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d103      	bne.n	8006dda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 ff5e 	bl	8007c94 <vPortFree>
	}
 8006dd8:	e00e      	b.n	8006df8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d009      	beq.n	8006df8 <prvDeleteTCB+0x54>
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e7fe      	b.n	8006df6 <prvDeleteTCB+0x52>
	}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <prvResetNextTaskUnblockTime+0x38>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <prvResetNextTaskUnblockTime+0x3c>)
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295
 8006e16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e18:	e008      	b.n	8006e2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <prvResetNextTaskUnblockTime+0x38>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	4a04      	ldr	r2, [pc, #16]	; (8006e3c <prvResetNextTaskUnblockTime+0x3c>)
 8006e2a:	6013      	str	r3, [r2, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20000b78 	.word	0x20000b78
 8006e3c:	20000be0 	.word	0x20000be0

08006e40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <xTaskGetSchedulerState+0x34>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d102      	bne.n	8006e54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	e008      	b.n	8006e66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <xTaskGetSchedulerState+0x38>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	607b      	str	r3, [r7, #4]
 8006e60:	e001      	b.n	8006e66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e66:	687b      	ldr	r3, [r7, #4]
	}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	20000bcc 	.word	0x20000bcc
 8006e78:	20000be8 	.word	0x20000be8

08006e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d054      	beq.n	8006f3c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e92:	4b2d      	ldr	r3, [pc, #180]	; (8006f48 <xTaskPriorityDisinherit+0xcc>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d009      	beq.n	8006eb0 <xTaskPriorityDisinherit+0x34>
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e7fe      	b.n	8006eae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d109      	bne.n	8006ecc <xTaskPriorityDisinherit+0x50>
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60bb      	str	r3, [r7, #8]
 8006eca:	e7fe      	b.n	8006eca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed0:	1e5a      	subs	r2, r3, #1
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d02c      	beq.n	8006f3c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d128      	bne.n	8006f3c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fca0 	bl	8005834 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <xTaskPriorityDisinherit+0xd0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <xTaskPriorityDisinherit+0xa0>
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4a0c      	ldr	r2, [pc, #48]	; (8006f4c <xTaskPriorityDisinherit+0xd0>)
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <xTaskPriorityDisinherit+0xd4>)
 8006f2a:	441a      	add	r2, r3
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fe fc21 	bl	800577a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f3c:	697b      	ldr	r3, [r7, #20]
	}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	200006ec 	.word	0x200006ec
 8006f4c:	20000bc8 	.word	0x20000bc8
 8006f50:	200006f0 	.word	0x200006f0

08006f54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f5e:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f64:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fc62 	bl	8005834 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f76:	d10a      	bne.n	8006f8e <prvAddCurrentTaskToDelayedList+0x3a>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7e:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4819      	ldr	r0, [pc, #100]	; (8006fec <prvAddCurrentTaskToDelayedList+0x98>)
 8006f88:	f7fe fbf7 	bl	800577a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f8c:	e026      	b.n	8006fdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d209      	bcs.n	8006fba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f7fe fc05 	bl	80057c2 <vListInsert>
}
 8006fb8:	e010      	b.n	8006fdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f7fe fbfb 	bl	80057c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d202      	bcs.n	8006fdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fd6:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6013      	str	r3, [r2, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000bc4 	.word	0x20000bc4
 8006fe8:	200006ec 	.word	0x200006ec
 8006fec:	20000bac 	.word	0x20000bac
 8006ff0:	20000b7c 	.word	0x20000b7c
 8006ff4:	20000b78 	.word	0x20000b78
 8006ff8:	20000be0 	.word	0x20000be0

08006ffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007006:	f000 faff 	bl	8007608 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800700a:	4b1c      	ldr	r3, [pc, #112]	; (800707c <xTimerCreateTimerTask+0x80>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d021      	beq.n	8007056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800701a:	1d3a      	adds	r2, r7, #4
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fb61 	bl	80056ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	2302      	movs	r3, #2
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2300      	movs	r3, #0
 800703a:	460a      	mov	r2, r1
 800703c:	4910      	ldr	r1, [pc, #64]	; (8007080 <xTimerCreateTimerTask+0x84>)
 800703e:	4811      	ldr	r0, [pc, #68]	; (8007084 <xTimerCreateTimerTask+0x88>)
 8007040:	f7ff f8f6 	bl	8006230 <xTaskCreateStatic>
 8007044:	4602      	mov	r2, r0
 8007046:	4b10      	ldr	r3, [pc, #64]	; (8007088 <xTimerCreateTimerTask+0x8c>)
 8007048:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <xTimerCreateTimerTask+0x8c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007052:	2301      	movs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <xTimerCreateTimerTask+0x74>
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	e7fe      	b.n	800706e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007070:	697b      	ldr	r3, [r7, #20]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000c1c 	.word	0x20000c1c
 8007080:	08007fbc 	.word	0x08007fbc
 8007084:	080071bd 	.word	0x080071bd
 8007088:	20000c20 	.word	0x20000c20

0800708c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <xTimerGenericCommand+0x2c>
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	623b      	str	r3, [r7, #32]
 80070b6:	e7fe      	b.n	80070b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070b8:	4b19      	ldr	r3, [pc, #100]	; (8007120 <xTimerGenericCommand+0x94>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d02a      	beq.n	8007116 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	dc18      	bgt.n	8007104 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070d2:	f7ff feb5 	bl	8006e40 <xTaskGetSchedulerState>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d109      	bne.n	80070f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070dc:	4b10      	ldr	r3, [pc, #64]	; (8007120 <xTimerGenericCommand+0x94>)
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	f107 0110 	add.w	r1, r7, #16
 80070e4:	2300      	movs	r3, #0
 80070e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e8:	f7fe fccc 	bl	8005a84 <xQueueGenericSend>
 80070ec:	6278      	str	r0, [r7, #36]	; 0x24
 80070ee:	e012      	b.n	8007116 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <xTimerGenericCommand+0x94>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	f107 0110 	add.w	r1, r7, #16
 80070f8:	2300      	movs	r3, #0
 80070fa:	2200      	movs	r2, #0
 80070fc:	f7fe fcc2 	bl	8005a84 <xQueueGenericSend>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24
 8007102:	e008      	b.n	8007116 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <xTimerGenericCommand+0x94>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	f107 0110 	add.w	r1, r7, #16
 800710c:	2300      	movs	r3, #0
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	f7fe fdb2 	bl	8005c78 <xQueueGenericSendFromISR>
 8007114:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000c1c 	.word	0x20000c1c

08007124 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712e:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <prvProcessExpiredTimer+0x94>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fb79 	bl	8005834 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d021      	beq.n	8007194 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	18d1      	adds	r1, r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	6978      	ldr	r0, [r7, #20]
 800715e:	f000 f8d1 	bl	8007304 <prvInsertTimerInActiveList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01e      	beq.n	80071a6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007168:	2300      	movs	r3, #0
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2300      	movs	r3, #0
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	2100      	movs	r1, #0
 8007172:	6978      	ldr	r0, [r7, #20]
 8007174:	f7ff ff8a 	bl	800708c <xTimerGenericCommand>
 8007178:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d112      	bne.n	80071a6 <prvProcessExpiredTimer+0x82>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e7fe      	b.n	8007192 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	4798      	blx	r3
}
 80071ae:	bf00      	nop
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20000c14 	.word	0x20000c14

080071bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071c4:	f107 0308 	add.w	r3, r7, #8
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f857 	bl	800727c <prvGetNextExpireTime>
 80071ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4619      	mov	r1, r3
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f803 	bl	80071e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071da:	f000 f8d5 	bl	8007388 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071de:	e7f1      	b.n	80071c4 <prvTimerTask+0x8>

080071e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ea:	f7ff fa57 	bl	800669c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ee:	f107 0308 	add.w	r3, r7, #8
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f866 	bl	80072c4 <prvSampleTimeNow>
 80071f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d130      	bne.n	8007262 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <prvProcessTimerOrBlockTask+0x3c>
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	429a      	cmp	r2, r3
 800720c:	d806      	bhi.n	800721c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800720e:	f7ff fa53 	bl	80066b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff ff85 	bl	8007124 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800721a:	e024      	b.n	8007266 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d008      	beq.n	8007234 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007222:	4b13      	ldr	r3, [pc, #76]	; (8007270 <prvProcessTimerOrBlockTask+0x90>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <prvProcessTimerOrBlockTask+0x50>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <prvProcessTimerOrBlockTask+0x52>
 8007230:	2300      	movs	r3, #0
 8007232:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007234:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <prvProcessTimerOrBlockTask+0x94>)
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4619      	mov	r1, r3
 8007242:	f7fe ffc1 	bl	80061c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007246:	f7ff fa37 	bl	80066b8 <xTaskResumeAll>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <prvProcessTimerOrBlockTask+0x98>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
}
 8007260:	e001      	b.n	8007266 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007262:	f7ff fa29 	bl	80066b8 <xTaskResumeAll>
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000c18 	.word	0x20000c18
 8007274:	20000c1c 	.word	0x20000c1c
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <prvGetNextExpireTime+0x44>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <prvGetNextExpireTime+0x16>
 800728e:	2201      	movs	r2, #1
 8007290:	e000      	b.n	8007294 <prvGetNextExpireTime+0x18>
 8007292:	2200      	movs	r2, #0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d105      	bne.n	80072ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <prvGetNextExpireTime+0x44>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	e001      	b.n	80072b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072b0:	68fb      	ldr	r3, [r7, #12]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000c14 	.word	0x20000c14

080072c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072cc:	f7ff fa90 	bl	80067f0 <xTaskGetTickCount>
 80072d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <prvSampleTimeNow+0x3c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d205      	bcs.n	80072e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072dc:	f000 f930 	bl	8007540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e002      	b.n	80072ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072ee:	4a04      	ldr	r2, [pc, #16]	; (8007300 <prvSampleTimeNow+0x3c>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000c24 	.word	0x20000c24

08007304 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d812      	bhi.n	8007350 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	429a      	cmp	r2, r3
 8007336:	d302      	bcc.n	800733e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007338:	2301      	movs	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e01b      	b.n	8007376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <prvInsertTimerInActiveList+0x7c>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3304      	adds	r3, #4
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f7fe fa3a 	bl	80057c2 <vListInsert>
 800734e:	e012      	b.n	8007376 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d206      	bcs.n	8007366 <prvInsertTimerInActiveList+0x62>
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d302      	bcc.n	8007366 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007360:	2301      	movs	r3, #1
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e007      	b.n	8007376 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007366:	4b07      	ldr	r3, [pc, #28]	; (8007384 <prvInsertTimerInActiveList+0x80>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3304      	adds	r3, #4
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f7fe fa26 	bl	80057c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007376:	697b      	ldr	r3, [r7, #20]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000c18 	.word	0x20000c18
 8007384:	20000c14 	.word	0x20000c14

08007388 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08e      	sub	sp, #56	; 0x38
 800738c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800738e:	e0c6      	b.n	800751e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	da17      	bge.n	80073c6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	3304      	adds	r3, #4
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <prvProcessReceivedCommands+0x2e>
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	e7fe      	b.n	80073b4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073bc:	6850      	ldr	r0, [r2, #4]
 80073be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c0:	6892      	ldr	r2, [r2, #8]
 80073c2:	4611      	mov	r1, r2
 80073c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f2c0 80a7 	blt.w	800751c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	3304      	adds	r3, #4
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fa28 	bl	8005834 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073e4:	463b      	mov	r3, r7
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff ff6c 	bl	80072c4 <prvSampleTimeNow>
 80073ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b09      	cmp	r3, #9
 80073f2:	f200 8094 	bhi.w	800751e <prvProcessReceivedCommands+0x196>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <prvProcessReceivedCommands+0x74>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007425 	.word	0x08007425
 8007400:	08007425 	.word	0x08007425
 8007404:	08007425 	.word	0x08007425
 8007408:	08007497 	.word	0x08007497
 800740c:	080074ab 	.word	0x080074ab
 8007410:	080074f3 	.word	0x080074f3
 8007414:	08007425 	.word	0x08007425
 8007418:	08007425 	.word	0x08007425
 800741c:	08007497 	.word	0x08007497
 8007420:	080074ab 	.word	0x080074ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	18d1      	adds	r1, r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007444:	f7ff ff5e 	bl	8007304 <prvInsertTimerInActiveList>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d067      	beq.n	800751e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d05c      	beq.n	800751e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	441a      	add	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	2100      	movs	r1, #0
 8007474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007476:	f7ff fe09 	bl	800708c <xTimerGenericCommand>
 800747a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d14d      	bne.n	800751e <prvProcessReceivedCommands+0x196>
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	61bb      	str	r3, [r7, #24]
 8007494:	e7fe      	b.n	8007494 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074a8:	e039      	b.n	800751e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <prvProcessReceivedCommands+0x156>
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	e7fe      	b.n	80074dc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	18d1      	adds	r1, r2, r3
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ec:	f7ff ff0a 	bl	8007304 <prvInsertTimerInActiveList>
					break;
 80074f0:	e015      	b.n	800751e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007502:	f000 fbc7 	bl	8007c94 <vPortFree>
 8007506:	e00a      	b.n	800751e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750e:	f023 0301 	bic.w	r3, r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800751a:	e000      	b.n	800751e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800751c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <prvProcessReceivedCommands+0x1b4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	1d39      	adds	r1, r7, #4
 8007524:	2200      	movs	r2, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fc3a 	bl	8005da0 <xQueueReceive>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f af2e 	bne.w	8007390 <prvProcessReceivedCommands+0x8>
	}
}
 8007534:	bf00      	nop
 8007536:	3730      	adds	r7, #48	; 0x30
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20000c1c 	.word	0x20000c1c

08007540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007546:	e047      	b.n	80075d8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007548:	4b2d      	ldr	r3, [pc, #180]	; (8007600 <prvSwitchTimerLists+0xc0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007552:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <prvSwitchTimerLists+0xc0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe f967 	bl	8005834 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02d      	beq.n	80075d8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90e      	bls.n	80075ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800759a:	4b19      	ldr	r3, [pc, #100]	; (8007600 <prvSwitchTimerLists+0xc0>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f7fe f90c 	bl	80057c2 <vListInsert>
 80075aa:	e015      	b.n	80075d8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	2100      	movs	r1, #0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fd68 	bl	800708c <xTimerGenericCommand>
 80075bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d109      	bne.n	80075d8 <prvSwitchTimerLists+0x98>
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	603b      	str	r3, [r7, #0]
 80075d6:	e7fe      	b.n	80075d6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075d8:	4b09      	ldr	r3, [pc, #36]	; (8007600 <prvSwitchTimerLists+0xc0>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1b2      	bne.n	8007548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <prvSwitchTimerLists+0xc0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <prvSwitchTimerLists+0xc4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a04      	ldr	r2, [pc, #16]	; (8007600 <prvSwitchTimerLists+0xc0>)
 80075ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075f0:	4a04      	ldr	r2, [pc, #16]	; (8007604 <prvSwitchTimerLists+0xc4>)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	6013      	str	r3, [r2, #0]
}
 80075f6:	bf00      	nop
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000c14 	.word	0x20000c14
 8007604:	20000c18 	.word	0x20000c18

08007608 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800760e:	f000 f965 	bl	80078dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d120      	bne.n	800765c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800761a:	4814      	ldr	r0, [pc, #80]	; (800766c <prvCheckForValidListAndQueue+0x64>)
 800761c:	f7fe f880 	bl	8005720 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007620:	4813      	ldr	r0, [pc, #76]	; (8007670 <prvCheckForValidListAndQueue+0x68>)
 8007622:	f7fe f87d 	bl	8005720 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <prvCheckForValidListAndQueue+0x6c>)
 8007628:	4a10      	ldr	r2, [pc, #64]	; (800766c <prvCheckForValidListAndQueue+0x64>)
 800762a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800762c:	4b12      	ldr	r3, [pc, #72]	; (8007678 <prvCheckForValidListAndQueue+0x70>)
 800762e:	4a10      	ldr	r2, [pc, #64]	; (8007670 <prvCheckForValidListAndQueue+0x68>)
 8007630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <prvCheckForValidListAndQueue+0x74>)
 8007638:	4a11      	ldr	r2, [pc, #68]	; (8007680 <prvCheckForValidListAndQueue+0x78>)
 800763a:	2110      	movs	r1, #16
 800763c:	200a      	movs	r0, #10
 800763e:	f7fe f98b 	bl	8005958 <xQueueGenericCreateStatic>
 8007642:	4602      	mov	r2, r0
 8007644:	4b08      	ldr	r3, [pc, #32]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 8007646:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	490b      	ldr	r1, [pc, #44]	; (8007684 <prvCheckForValidListAndQueue+0x7c>)
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fd8e 	bl	8006178 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800765c:	f000 f96c 	bl	8007938 <vPortExitCritical>
}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000c1c 	.word	0x20000c1c
 800766c:	20000bec 	.word	0x20000bec
 8007670:	20000c00 	.word	0x20000c00
 8007674:	20000c14 	.word	0x20000c14
 8007678:	20000c18 	.word	0x20000c18
 800767c:	20000cc8 	.word	0x20000cc8
 8007680:	20000c28 	.word	0x20000c28
 8007684:	08007fc4 	.word	0x08007fc4

08007688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3b04      	subs	r3, #4
 8007698:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3b04      	subs	r3, #4
 80076a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f023 0201 	bic.w	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3b04      	subs	r3, #4
 80076b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076b8:	4a0c      	ldr	r2, [pc, #48]	; (80076ec <pxPortInitialiseStack+0x64>)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3b14      	subs	r3, #20
 80076c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f06f 0202 	mvn.w	r2, #2
 80076d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b20      	subs	r3, #32
 80076dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	080076f1 	.word	0x080076f1

080076f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076fa:	4b11      	ldr	r3, [pc, #68]	; (8007740 <prvTaskExitError+0x50>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d009      	beq.n	8007718 <prvTaskExitError+0x28>
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e7fe      	b.n	8007716 <prvTaskExitError+0x26>
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800772a:	bf00      	nop
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0fc      	beq.n	800772c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000010 	.word	0x20000010
	...

08007750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <pxCurrentTCBConst2>)
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	6808      	ldr	r0, [r1, #0]
 8007756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	f380 8809 	msr	PSP, r0
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f380 8811 	msr	BASEPRI, r0
 800776a:	4770      	bx	lr
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst2>:
 8007770:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007778:	4808      	ldr	r0, [pc, #32]	; (800779c <prvPortStartFirstTask+0x24>)
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	6800      	ldr	r0, [r0, #0]
 800777e:	f380 8808 	msr	MSP, r0
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8814 	msr	CONTROL, r0
 800778a:	b662      	cpsie	i
 800778c:	b661      	cpsie	f
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	df00      	svc	0
 8007798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800779a:	bf00      	nop
 800779c:	e000ed08 	.word	0xe000ed08

080077a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077a6:	4b44      	ldr	r3, [pc, #272]	; (80078b8 <xPortStartScheduler+0x118>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a44      	ldr	r2, [pc, #272]	; (80078bc <xPortStartScheduler+0x11c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d109      	bne.n	80077c4 <xPortStartScheduler+0x24>
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	e7fe      	b.n	80077c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077c4:	4b3c      	ldr	r3, [pc, #240]	; (80078b8 <xPortStartScheduler+0x118>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3d      	ldr	r2, [pc, #244]	; (80078c0 <xPortStartScheduler+0x120>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d109      	bne.n	80077e2 <xPortStartScheduler+0x42>
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e7fe      	b.n	80077e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077e2:	4b38      	ldr	r3, [pc, #224]	; (80078c4 <xPortStartScheduler+0x124>)
 80077e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	22ff      	movs	r2, #255	; 0xff
 80077f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077fc:	78fb      	ldrb	r3, [r7, #3]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007804:	b2da      	uxtb	r2, r3
 8007806:	4b30      	ldr	r3, [pc, #192]	; (80078c8 <xPortStartScheduler+0x128>)
 8007808:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800780a:	4b30      	ldr	r3, [pc, #192]	; (80078cc <xPortStartScheduler+0x12c>)
 800780c:	2207      	movs	r2, #7
 800780e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007810:	e009      	b.n	8007826 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007812:	4b2e      	ldr	r3, [pc, #184]	; (80078cc <xPortStartScheduler+0x12c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3b01      	subs	r3, #1
 8007818:	4a2c      	ldr	r2, [pc, #176]	; (80078cc <xPortStartScheduler+0x12c>)
 800781a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d0ef      	beq.n	8007812 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007832:	4b26      	ldr	r3, [pc, #152]	; (80078cc <xPortStartScheduler+0x12c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f1c3 0307 	rsb	r3, r3, #7
 800783a:	2b04      	cmp	r3, #4
 800783c:	d009      	beq.n	8007852 <xPortStartScheduler+0xb2>
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	e7fe      	b.n	8007850 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007852:	4b1e      	ldr	r3, [pc, #120]	; (80078cc <xPortStartScheduler+0x12c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	4a1c      	ldr	r2, [pc, #112]	; (80078cc <xPortStartScheduler+0x12c>)
 800785a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800785c:	4b1b      	ldr	r3, [pc, #108]	; (80078cc <xPortStartScheduler+0x12c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007864:	4a19      	ldr	r2, [pc, #100]	; (80078cc <xPortStartScheduler+0x12c>)
 8007866:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	b2da      	uxtb	r2, r3
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007870:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <xPortStartScheduler+0x130>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a16      	ldr	r2, [pc, #88]	; (80078d0 <xPortStartScheduler+0x130>)
 8007876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800787a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800787c:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <xPortStartScheduler+0x130>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <xPortStartScheduler+0x130>)
 8007882:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007886:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007888:	f000 f8d6 	bl	8007a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800788c:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <xPortStartScheduler+0x134>)
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007892:	f000 f8f5 	bl	8007a80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007896:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <xPortStartScheduler+0x138>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a0f      	ldr	r2, [pc, #60]	; (80078d8 <xPortStartScheduler+0x138>)
 800789c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078a2:	f7ff ff69 	bl	8007778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078a6:	f7ff f86b 	bl	8006980 <vTaskSwitchContext>
	prvTaskExitError();
 80078aa:	f7ff ff21 	bl	80076f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed00 	.word	0xe000ed00
 80078bc:	410fc271 	.word	0x410fc271
 80078c0:	410fc270 	.word	0x410fc270
 80078c4:	e000e400 	.word	0xe000e400
 80078c8:	20000d18 	.word	0x20000d18
 80078cc:	20000d1c 	.word	0x20000d1c
 80078d0:	e000ed20 	.word	0xe000ed20
 80078d4:	20000010 	.word	0x20000010
 80078d8:	e000ef34 	.word	0xe000ef34

080078dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <vPortEnterCritical+0x54>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a0d      	ldr	r2, [pc, #52]	; (8007930 <vPortEnterCritical+0x54>)
 80078fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078fe:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <vPortEnterCritical+0x54>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d10e      	bne.n	8007924 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007906:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <vPortEnterCritical+0x58>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d009      	beq.n	8007924 <vPortEnterCritical+0x48>
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	e7fe      	b.n	8007922 <vPortEnterCritical+0x46>
	}
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20000010 	.word	0x20000010
 8007934:	e000ed04 	.word	0xe000ed04

08007938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <vPortExitCritical+0x4c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <vPortExitCritical+0x22>
 8007946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	607b      	str	r3, [r7, #4]
 8007958:	e7fe      	b.n	8007958 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800795a:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <vPortExitCritical+0x4c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3b01      	subs	r3, #1
 8007960:	4a08      	ldr	r2, [pc, #32]	; (8007984 <vPortExitCritical+0x4c>)
 8007962:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <vPortExitCritical+0x4c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d104      	bne.n	8007976 <vPortExitCritical+0x3e>
 800796c:	2300      	movs	r3, #0
 800796e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000010 	.word	0x20000010
	...

08007990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007990:	f3ef 8009 	mrs	r0, PSP
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <pxCurrentTCBConst>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f01e 0f10 	tst.w	lr, #16
 80079a0:	bf08      	it	eq
 80079a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	6010      	str	r0, [r2, #0]
 80079ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079b4:	f380 8811 	msr	BASEPRI, r0
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f7fe ffde 	bl	8006980 <vTaskSwitchContext>
 80079c4:	f04f 0000 	mov.w	r0, #0
 80079c8:	f380 8811 	msr	BASEPRI, r0
 80079cc:	bc09      	pop	{r0, r3}
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	6808      	ldr	r0, [r1, #0]
 80079d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d6:	f01e 0f10 	tst.w	lr, #16
 80079da:	bf08      	it	eq
 80079dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079e0:	f380 8809 	msr	PSP, r0
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst>:
 80079f0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a10:	f7fe fefe 	bl	8006810 <xTaskIncrementTick>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <SysTick_Handler+0x3c>)
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <vPortSetupTimerInterrupt+0x34>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a42:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <vPortSetupTimerInterrupt+0x38>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a48:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <vPortSetupTimerInterrupt+0x3c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <vPortSetupTimerInterrupt+0x40>)
 8007a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a52:	099b      	lsrs	r3, r3, #6
 8007a54:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <vPortSetupTimerInterrupt+0x44>)
 8007a56:	3b01      	subs	r3, #1
 8007a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a5a:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <vPortSetupTimerInterrupt+0x34>)
 8007a5c:	2207      	movs	r2, #7
 8007a5e:	601a      	str	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	e000e010 	.word	0xe000e010
 8007a70:	e000e018 	.word	0xe000e018
 8007a74:	20000004 	.word	0x20000004
 8007a78:	10624dd3 	.word	0x10624dd3
 8007a7c:	e000e014 	.word	0xe000e014

08007a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a90 <vPortEnableVFP+0x10>
 8007a84:	6801      	ldr	r1, [r0, #0]
 8007a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a8a:	6001      	str	r1, [r0, #0]
 8007a8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a8e:	bf00      	nop
 8007a90:	e000ed88 	.word	0xe000ed88

08007a94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a9a:	f3ef 8305 	mrs	r3, IPSR
 8007a9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	d913      	bls.n	8007ace <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aa6:	4a16      	ldr	r2, [pc, #88]	; (8007b00 <vPortValidateInterruptPriority+0x6c>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ab0:	4b14      	ldr	r3, [pc, #80]	; (8007b04 <vPortValidateInterruptPriority+0x70>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	7afa      	ldrb	r2, [r7, #11]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d209      	bcs.n	8007ace <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	607b      	str	r3, [r7, #4]
 8007acc:	e7fe      	b.n	8007acc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ace:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <vPortValidateInterruptPriority+0x74>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <vPortValidateInterruptPriority+0x78>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d909      	bls.n	8007af2 <vPortValidateInterruptPriority+0x5e>
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	e7fe      	b.n	8007af0 <vPortValidateInterruptPriority+0x5c>
	}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	e000e3f0 	.word	0xe000e3f0
 8007b04:	20000d18 	.word	0x20000d18
 8007b08:	e000ed0c 	.word	0xe000ed0c
 8007b0c:	20000d1c 	.word	0x20000d1c

08007b10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08a      	sub	sp, #40	; 0x28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b1c:	f7fe fdbe 	bl	800669c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b20:	4b57      	ldr	r3, [pc, #348]	; (8007c80 <pvPortMalloc+0x170>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b28:	f000 f90c 	bl	8007d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b2c:	4b55      	ldr	r3, [pc, #340]	; (8007c84 <pvPortMalloc+0x174>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4013      	ands	r3, r2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f040 808c 	bne.w	8007c52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01c      	beq.n	8007b7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4413      	add	r3, r2
 8007b46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d013      	beq.n	8007b7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f023 0307 	bic.w	r3, r3, #7
 8007b58:	3308      	adds	r3, #8
 8007b5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <pvPortMalloc+0x6a>
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e7fe      	b.n	8007b78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d068      	beq.n	8007c52 <pvPortMalloc+0x142>
 8007b80:	4b41      	ldr	r3, [pc, #260]	; (8007c88 <pvPortMalloc+0x178>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d863      	bhi.n	8007c52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b8a:	4b40      	ldr	r3, [pc, #256]	; (8007c8c <pvPortMalloc+0x17c>)
 8007b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b8e:	4b3f      	ldr	r3, [pc, #252]	; (8007c8c <pvPortMalloc+0x17c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b94:	e004      	b.n	8007ba0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d903      	bls.n	8007bb2 <pvPortMalloc+0xa2>
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f1      	bne.n	8007b96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bb2:	4b33      	ldr	r3, [pc, #204]	; (8007c80 <pvPortMalloc+0x170>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d04a      	beq.n	8007c52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	4413      	add	r3, r2
 8007bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d91e      	bls.n	8007c1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4413      	add	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <pvPortMalloc+0xf4>
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	e7fe      	b.n	8007c02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1ad2      	subs	r2, r2, r3
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c16:	69b8      	ldr	r0, [r7, #24]
 8007c18:	f000 f8f6 	bl	8007e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <pvPortMalloc+0x178>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <pvPortMalloc+0x178>)
 8007c28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c2a:	4b17      	ldr	r3, [pc, #92]	; (8007c88 <pvPortMalloc+0x178>)
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <pvPortMalloc+0x180>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d203      	bcs.n	8007c3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c36:	4b14      	ldr	r3, [pc, #80]	; (8007c88 <pvPortMalloc+0x178>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <pvPortMalloc+0x180>)
 8007c3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	4b10      	ldr	r3, [pc, #64]	; (8007c84 <pvPortMalloc+0x174>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c52:	f7fe fd31 	bl	80066b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d009      	beq.n	8007c74 <pvPortMalloc+0x164>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e7fe      	b.n	8007c72 <pvPortMalloc+0x162>
	return pvReturn;
 8007c74:	69fb      	ldr	r3, [r7, #28]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3728      	adds	r7, #40	; 0x28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	200018e0 	.word	0x200018e0
 8007c84:	200018ec 	.word	0x200018ec
 8007c88:	200018e4 	.word	0x200018e4
 8007c8c:	200018d8 	.word	0x200018d8
 8007c90:	200018e8 	.word	0x200018e8

08007c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d046      	beq.n	8007d34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ca6:	2308      	movs	r3, #8
 8007ca8:	425b      	negs	r3, r3
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4413      	add	r3, r2
 8007cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <vPortFree+0xa8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <vPortFree+0x42>
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e7fe      	b.n	8007cd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <vPortFree+0x5e>
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	e7fe      	b.n	8007cf0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <vPortFree+0xa8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d019      	beq.n	8007d34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d115      	bne.n	8007d34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <vPortFree+0xa8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	401a      	ands	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d18:	f7fe fcc0 	bl	800669c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <vPortFree+0xac>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4413      	add	r3, r2
 8007d26:	4a06      	ldr	r2, [pc, #24]	; (8007d40 <vPortFree+0xac>)
 8007d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d2a:	6938      	ldr	r0, [r7, #16]
 8007d2c:	f000 f86c 	bl	8007e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d30:	f7fe fcc2 	bl	80066b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d34:	bf00      	nop
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200018ec 	.word	0x200018ec
 8007d40:	200018e4 	.word	0x200018e4

08007d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d50:	4b27      	ldr	r3, [pc, #156]	; (8007df0 <prvHeapInit+0xac>)
 8007d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00c      	beq.n	8007d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3307      	adds	r3, #7
 8007d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0307 	bic.w	r3, r3, #7
 8007d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	4a1f      	ldr	r2, [pc, #124]	; (8007df0 <prvHeapInit+0xac>)
 8007d74:	4413      	add	r3, r2
 8007d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d7c:	4a1d      	ldr	r2, [pc, #116]	; (8007df4 <prvHeapInit+0xb0>)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d82:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <prvHeapInit+0xb0>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d90:	2208      	movs	r2, #8
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1a9b      	subs	r3, r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <prvHeapInit+0xb4>)
 8007da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <prvHeapInit+0xb4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2200      	movs	r2, #0
 8007dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dae:	4b12      	ldr	r3, [pc, #72]	; (8007df8 <prvHeapInit+0xb4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	1ad2      	subs	r2, r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <prvHeapInit+0xb4>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4a0a      	ldr	r2, [pc, #40]	; (8007dfc <prvHeapInit+0xb8>)
 8007dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <prvHeapInit+0xbc>)
 8007dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <prvHeapInit+0xc0>)
 8007dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007de2:	601a      	str	r2, [r3, #0]
}
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	20000d20 	.word	0x20000d20
 8007df4:	200018d8 	.word	0x200018d8
 8007df8:	200018e0 	.word	0x200018e0
 8007dfc:	200018e8 	.word	0x200018e8
 8007e00:	200018e4 	.word	0x200018e4
 8007e04:	200018ec 	.word	0x200018ec

08007e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e10:	4b28      	ldr	r3, [pc, #160]	; (8007eb4 <prvInsertBlockIntoFreeList+0xac>)
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e002      	b.n	8007e1c <prvInsertBlockIntoFreeList+0x14>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d8f7      	bhi.n	8007e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4413      	add	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d108      	bne.n	8007e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	441a      	add	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	441a      	add	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d118      	bne.n	8007e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d00d      	beq.n	8007e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	441a      	add	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e008      	b.n	8007e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e003      	b.n	8007e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d002      	beq.n	8007ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	200018d8 	.word	0x200018d8
 8007eb8:	200018e0 	.word	0x200018e0

08007ebc <__libc_init_array>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	4e0d      	ldr	r6, [pc, #52]	; (8007ef4 <__libc_init_array+0x38>)
 8007ec0:	4c0d      	ldr	r4, [pc, #52]	; (8007ef8 <__libc_init_array+0x3c>)
 8007ec2:	1ba4      	subs	r4, r4, r6
 8007ec4:	10a4      	asrs	r4, r4, #2
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	42a5      	cmp	r5, r4
 8007eca:	d109      	bne.n	8007ee0 <__libc_init_array+0x24>
 8007ecc:	4e0b      	ldr	r6, [pc, #44]	; (8007efc <__libc_init_array+0x40>)
 8007ece:	4c0c      	ldr	r4, [pc, #48]	; (8007f00 <__libc_init_array+0x44>)
 8007ed0:	f000 f82c 	bl	8007f2c <_init>
 8007ed4:	1ba4      	subs	r4, r4, r6
 8007ed6:	10a4      	asrs	r4, r4, #2
 8007ed8:	2500      	movs	r5, #0
 8007eda:	42a5      	cmp	r5, r4
 8007edc:	d105      	bne.n	8007eea <__libc_init_array+0x2e>
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ee4:	4798      	blx	r3
 8007ee6:	3501      	adds	r5, #1
 8007ee8:	e7ee      	b.n	8007ec8 <__libc_init_array+0xc>
 8007eea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eee:	4798      	blx	r3
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	e7f2      	b.n	8007eda <__libc_init_array+0x1e>
 8007ef4:	080080ac 	.word	0x080080ac
 8007ef8:	080080ac 	.word	0x080080ac
 8007efc:	080080ac 	.word	0x080080ac
 8007f00:	080080b0 	.word	0x080080b0

08007f04 <memcpy>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	1e43      	subs	r3, r0, #1
 8007f08:	440a      	add	r2, r1
 8007f0a:	4291      	cmp	r1, r2
 8007f0c:	d100      	bne.n	8007f10 <memcpy+0xc>
 8007f0e:	bd10      	pop	{r4, pc}
 8007f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f18:	e7f7      	b.n	8007f0a <memcpy+0x6>

08007f1a <memset>:
 8007f1a:	4402      	add	r2, r0
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d100      	bne.n	8007f24 <memset+0xa>
 8007f22:	4770      	bx	lr
 8007f24:	f803 1b01 	strb.w	r1, [r3], #1
 8007f28:	e7f9      	b.n	8007f1e <memset+0x4>
	...

08007f2c <_init>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	bf00      	nop
 8007f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f32:	bc08      	pop	{r3}
 8007f34:	469e      	mov	lr, r3
 8007f36:	4770      	bx	lr

08007f38 <_fini>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr
