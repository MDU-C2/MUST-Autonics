
NucleoL476RG-Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800dcf8  0800dcf8  0001dcf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e134  0800e134  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e134  0800e134  0001e134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e13c  0800e13c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e13c  0800e13c  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e140  0800e140  0001e140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d80  200001e4  0800e328  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f64  0800e328  00021f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002877e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041e6  00000000  00000000  00048992  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002080  00000000  00000000  0004cb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ea8  00000000  00000000  0004ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c855  00000000  00000000  00050aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019cf2  00000000  00000000  0007d2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117f6a  00000000  00000000  00096fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aef51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a20  00000000  00000000  001aefcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcdc 	.word	0x0800dcdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800dcdc 	.word	0x0800dcdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f006 fcb9 	bl	8007908 <osDelay>
  #else
  HAL_Delay(delay_ms);
  #endif
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b088      	sub	sp, #32
 8000fa2:	af02      	add	r7, sp, #8
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	460b      	mov	r3, r1
 8000fac:	72fb      	strb	r3, [r7, #11]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	72bb      	strb	r3, [r7, #10]
  uint8_t tmp = 0xFF;
 8000fb2:	23ff      	movs	r3, #255	; 0xff
 8000fb4:	75fb      	strb	r3, [r7, #23]
	addr &= 0x7F;
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f003 f9dc 	bl	8004388 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6898      	ldr	r0, [r3, #8]
 8000fd4:	f107 010b 	add.w	r1, r7, #11
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f004 feff 	bl	8005dde <HAL_SPI_Transmit>
	while (n--)
 8000fe0:	e00c      	b.n	8000ffc <Max31865_readRegisterN+0x5e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6898      	ldr	r0, [r3, #8]
 8000fe6:	f107 0117 	add.w	r1, r7, #23
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	f005 f862 	bl	80060ba <HAL_SPI_TransmitReceive>
		buffer++;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
	while (n--)
 8000ffc:	7abb      	ldrb	r3, [r7, #10]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	72ba      	strb	r2, [r7, #10]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1ed      	bne.n	8000fe2 <Max31865_readRegisterN+0x44>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	889b      	ldrh	r3, [r3, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	4619      	mov	r1, r3
 8001012:	f003 f9b9 	bl	8004388 <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 800102e:	f107 020f 	add.w	r2, r7, #15
 8001032:	78f9      	ldrb	r1, [r7, #3]
 8001034:	2301      	movs	r3, #1
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb1 	bl	8000f9e <Max31865_readRegisterN>
	return ret;  
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0, 0};
 8001052:	2300      	movs	r3, #0
 8001054:	733b      	strb	r3, [r7, #12]
 8001056:	2300      	movs	r3, #0
 8001058:	737b      	strb	r3, [r7, #13]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 800105a:	f107 020c 	add.w	r2, r7, #12
 800105e:	78f9      	ldrb	r1, [r7, #3]
 8001060:	2302      	movs	r3, #2
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff9b 	bl	8000f9e <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	81fb      	strh	r3, [r7, #14]
	ret |=  buffer[1];
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b29a      	uxth	r2, r3
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	4313      	orrs	r3, r2
 800107a:	81fb      	strh	r3, [r7, #14]
	return ret;
 800107c:	89fb      	ldrh	r3, [r7, #14]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	70fb      	strb	r3, [r7, #3]
 8001092:	4613      	mov	r3, r2
 8001094:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	889b      	ldrh	r3, [r3, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	f003 f971 	bl	8004388 <HAL_GPIO_WritePin>
  addr |= 0x80;
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);   
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6898      	ldr	r0, [r3, #8]
 80010b4:	1cf9      	adds	r1, r7, #3
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2201      	movs	r2, #1
 80010ba:	f004 fe90 	bl	8005dde <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	1cb9      	adds	r1, r7, #2
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	f004 fe89 	bl	8005dde <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);          
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	889b      	ldrh	r3, [r3, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	f003 f956 	bl	8004388 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 80010ec:	2107      	movs	r1, #7
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff95 	bl	800101e <Max31865_readRegister8>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001106:	2100      	movs	r1, #0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff88 	bl	800101e <Max31865_readRegister8>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
	t &= ~0x2C;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 8001118:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_FAULTSTAT;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	461a      	mov	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffac 	bl	8001086 <Max31865_writeRegister8>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001142:	2100      	movs	r1, #0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff6a 	bl	800101e <Max31865_readRegister8>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
	if (enable)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <Max31865_enableBias+0x28>
		t |= MAX31856_CONFIG_BIAS;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e003      	b.n	8001166 <Max31865_enableBias+0x30>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001164:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	461a      	mov	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff8a 	bl	8001086 <Max31865_writeRegister8>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001186:	2100      	movs	r1, #0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff48 	bl	800101e <Max31865_readRegister8>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
	if (enable)
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <Max31865_autoConvert+0x28>
		t |= MAX31856_CONFIG_MODEAUTO;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e003      	b.n	80011aa <Max31865_autoConvert+0x30>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO; 
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a8:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff68 	bl	8001086 <Max31865_writeRegister8>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff26 	bl	800101e <Max31865_readRegister8>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
	if (numWires == 3)
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d104      	bne.n	80011e6 <Max31865_setWires+0x28>
		t |= MAX31856_CONFIG_3WIRE;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e003      	b.n	80011ee <Max31865_setWires+0x30>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f023 0310 	bic.w	r3, r3, #16
 80011ec:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	461a      	mov	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff46 	bl	8001086 <Max31865_writeRegister8>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800120e:	2100      	movs	r1, #0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff04 	bl	800101e <Max31865_readRegister8>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
	if (filterHz == 50)
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	2b32      	cmp	r3, #50	; 0x32
 800121e:	d104      	bne.n	800122a <Max31865_setFilter+0x28>
		t |= MAX31856_CONFIG_FILT50HZ;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e003      	b.n	8001232 <Max31865_setFilter+0x30>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	461a      	mov	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff24 	bl	8001086 <Max31865_writeRegister8>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff55 	bl	80010fe <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff6d 	bl	8001136 <Max31865_enableBias>
	Max31865_delay(10);
 800125c:	200a      	movs	r0, #10
 800125e:	f7ff fe93 	bl	8000f88 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff feda 	bl	800101e <Max31865_readRegister8>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_1SHOT;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	461a      	mov	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff02 	bl	8001086 <Max31865_writeRegister8>
	Max31865_delay(65);
 8001282:	2041      	movs	r0, #65	; 0x41
 8001284:	f7ff fe80 	bl	8000f88 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8001288:	2101      	movs	r1, #1
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fedb 	bl	8001046 <Max31865_readRegister16>
 8001290:	4603      	mov	r3, r0
 8001292:	81bb      	strh	r3, [r7, #12]
	rtd >>= 1;
 8001294:	89bb      	ldrh	r3, [r7, #12]
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	81bb      	strh	r3, [r7, #12]
	return rtd;
 800129a:	89bb      	ldrh	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	807b      	strh	r3, [r7, #2]
  if(max31865->lock == 1)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	7b1b      	ldrb	r3, [r3, #12]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <Max31865_init+0x1c>
    Max31865_delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fe64 	bl	8000f88 <Max31865_delay>
  max31865->lock = 1;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	f003 f850 	bl	8004388 <HAL_GPIO_WritePin>
  Max31865_delay(100);
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f7ff fe4d 	bl	8000f88 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 80012ee:	7e3b      	ldrb	r3, [r7, #24]
 80012f0:	4619      	mov	r1, r3
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff ff63 	bl	80011be <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff ff1b 	bl	8001136 <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff39 	bl	800117a <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff fef8 	bl	80010fe <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);
 800130e:	7f3b      	ldrb	r3, [r7, #28]
 8001310:	4619      	mov	r1, r3
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff ff75 	bl	8001202 <Max31865_setFilter>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <Max31865_readTempC>:
//#########################################################################################################################
uint8_t Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	uint8_t fault;
  if(max31865->lock == 1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d102      	bne.n	8001338 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fe28 	bl	8000f88 <Max31865_delay>
  max31865->lock = 1;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	731a      	strb	r2, [r3, #12]
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff81 	bl	8001246 <Max31865_readRTD>
 8001344:	4603      	mov	r3, r0
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Rt /= 32768;
 8001352:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001356:	eddf 6a92 	vldr	s13, [pc, #584]	; 80015a0 <Max31865_readTempC+0x280>
 800135a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Rt *= _MAX31865_RREF;
 8001362:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001366:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80015a4 <Max31865_readTempC+0x284>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Z1 = -RTD_A;
 8001372:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <Max31865_readTempC+0x288>)
 8001374:	623b      	str	r3, [r7, #32]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 8001376:	4b8d      	ldr	r3, [pc, #564]	; (80015ac <Max31865_readTempC+0x28c>)
 8001378:	61fb      	str	r3, [r7, #28]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 800137a:	4b8d      	ldr	r3, [pc, #564]	; (80015b0 <Max31865_readTempC+0x290>)
 800137c:	61bb      	str	r3, [r7, #24]
	Z4 = 2 * RTD_B;
 800137e:	4b8d      	ldr	r3, [pc, #564]	; (80015b4 <Max31865_readTempC+0x294>)
 8001380:	617b      	str	r3, [r7, #20]
	temp = Z2 + (Z3 * Rt);
 8001382:	ed97 7a06 	vldr	s14, [r7, #24]
 8001386:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a04 	vstr	s15, [r7, #16]
	temp = (sqrtf(temp) + Z1) / Z4;
 800139a:	ed97 0a04 	vldr	s0, [r7, #16]
 800139e:	f00c fc47 	bl	800dc30 <sqrtf>
 80013a2:	eeb0 7a40 	vmov.f32	s14, s0
 80013a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013aa:	ee77 6a27 	vadd.f32	s13, s14, s15
 80013ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80013b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b6:	edc7 7a04 	vstr	s15, [r7, #16]

	if (temp >= 0)
 80013ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80013be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	db0c      	blt.n	80013e2 <Max31865_readTempC+0xc2>
	{
		*readTemp = temp;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	601a      	str	r2, [r3, #0]
		fault = Max31865_readFault(max31865);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fe88 	bl	80010e4 <Max31865_readFault>
 80013d4:	4603      	mov	r3, r0
 80013d6:	72fb      	strb	r3, [r7, #11]
		max31865->lock = 0;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	731a      	strb	r2, [r3, #12]
		return fault;
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	e0c6      	b.n	8001570 <Max31865_readTempC+0x250>
	}
	Rt /= _MAX31865_RNOMINAL;
 80013e2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013e6:	eddf 6a74 	vldr	s13, [pc, #464]	; 80015b8 <Max31865_readTempC+0x298>
 80013ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Rt *= 100;    
 80013f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013f6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80015b8 <Max31865_readTempC+0x298>
 80013fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float rpoly = Rt;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	60fb      	str	r3, [r7, #12]
	temp = -242.02;
 8001406:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <Max31865_readTempC+0x29c>)
 8001408:	613b      	str	r3, [r7, #16]
	temp += 2.2228 * rpoly;
 800140a:	6938      	ldr	r0, [r7, #16]
 800140c:	f7ff f89c 	bl	8000548 <__aeabi_f2d>
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff f897 	bl	8000548 <__aeabi_f2d>
 800141a:	a357      	add	r3, pc, #348	; (adr r3, 8001578 <Max31865_readTempC+0x258>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8ea 	bl	80005f8 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7fe ff2e 	bl	800028c <__adddf3>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4618      	mov	r0, r3
 8001436:	4621      	mov	r1, r4
 8001438:	f7ff fbd6 	bl	8000be8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // square
 8001440:	ed97 7a03 	vldr	s14, [r7, #12]
 8001444:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp += 2.5859e-3 * rpoly;
 8001450:	6938      	ldr	r0, [r7, #16]
 8001452:	f7ff f879 	bl	8000548 <__aeabi_f2d>
 8001456:	4604      	mov	r4, r0
 8001458:	460d      	mov	r5, r1
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff f874 	bl	8000548 <__aeabi_f2d>
 8001460:	a347      	add	r3, pc, #284	; (adr r3, 8001580 <Max31865_readTempC+0x260>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff f8c7 	bl	80005f8 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4620      	mov	r0, r4
 8001470:	4629      	mov	r1, r5
 8001472:	f7fe ff0b 	bl	800028c <__adddf3>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	f7ff fbb3 	bl	8000be8 <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // ^3
 8001486:	ed97 7a03 	vldr	s14, [r7, #12]
 800148a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	edc7 7a03 	vstr	s15, [r7, #12]
	temp -= 4.8260e-6 * rpoly;
 8001496:	6938      	ldr	r0, [r7, #16]
 8001498:	f7ff f856 	bl	8000548 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff f851 	bl	8000548 <__aeabi_f2d>
 80014a6:	a338      	add	r3, pc, #224	; (adr r3, 8001588 <Max31865_readTempC+0x268>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f8a4 	bl	80005f8 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe fee6 	bl	8000288 <__aeabi_dsub>
 80014bc:	4603      	mov	r3, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	4618      	mov	r0, r3
 80014c2:	4621      	mov	r1, r4
 80014c4:	f7ff fb90 	bl	8000be8 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // ^4
 80014cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a03 	vstr	s15, [r7, #12]
	temp -= 2.8183e-8 * rpoly;
 80014dc:	6938      	ldr	r0, [r7, #16]
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	4604      	mov	r4, r0
 80014e4:	460d      	mov	r5, r1
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	a328      	add	r3, pc, #160	; (adr r3, 8001590 <Max31865_readTempC+0x270>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f881 	bl	80005f8 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7fe fec3 	bl	8000288 <__aeabi_dsub>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb6d 	bl	8000be8 <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // ^5
 8001512:	ed97 7a03 	vldr	s14, [r7, #12]
 8001516:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151e:	edc7 7a03 	vstr	s15, [r7, #12]
	temp += 1.5243e-10 * rpoly;
 8001522:	6938      	ldr	r0, [r7, #16]
 8001524:	f7ff f810 	bl	8000548 <__aeabi_f2d>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	a319      	add	r3, pc, #100	; (adr r3, 8001598 <Max31865_readTempC+0x278>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f85e 	bl	80005f8 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe fea2 	bl	800028c <__adddf3>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	4618      	mov	r0, r3
 800154e:	4621      	mov	r1, r4
 8001550:	f7ff fb4a 	bl	8000be8 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	613b      	str	r3, [r7, #16]

  *readTemp = temp;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	601a      	str	r2, [r3, #0]
  fault = Max31865_readFault(max31865);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fdc0 	bl	80010e4 <Max31865_readFault>
 8001564:	4603      	mov	r3, r0
 8001566:	72fb      	strb	r3, [r7, #11]
  max31865->lock = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	731a      	strb	r2, [r3, #12]
  return fault;
 800156e:	7afb      	ldrb	r3, [r7, #11]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bdb0      	pop	{r4, r5, r7, pc}
 8001578:	5dcc63f1 	.word	0x5dcc63f1
 800157c:	4001c84b 	.word	0x4001c84b
 8001580:	7dc882bb 	.word	0x7dc882bb
 8001584:	3f652f06 	.word	0x3f652f06
 8001588:	c766c293 	.word	0xc766c293
 800158c:	3ed43de0 	.word	0x3ed43de0
 8001590:	513156ce 	.word	0x513156ce
 8001594:	3e5e42e2 	.word	0x3e5e42e2
 8001598:	61e4fa3e 	.word	0x61e4fa3e
 800159c:	3de4f327 	.word	0x3de4f327
 80015a0:	47000000 	.word	0x47000000
 80015a4:	43d70000 	.word	0x43d70000
 80015a8:	bb801132 	.word	0xbb801132
 80015ac:	37938317 	.word	0x37938317
 80015b0:	b2c66d70 	.word	0xb2c66d70
 80015b4:	b59b057f 	.word	0xb59b057f
 80015b8:	42c80000 	.word	0x42c80000
 80015bc:	c372051f 	.word	0xc372051f

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c4:	f000 fee0 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c8:	f000 f84a 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015cc:	f000 fa60 	bl	8001a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015d0:	f000 fa2e 	bl	8001a30 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015d4:	f000 f8ce 	bl	8001774 <MX_ADC1_Init>
  MX_CAN1_Init();
 80015d8:	f000 f942 	bl	8001860 <MX_CAN1_Init>
  MX_I2C1_Init();
 80015dc:	f000 f9aa 	bl	8001934 <MX_I2C1_Init>
  MX_SPI2_Init();
 80015e0:	f000 f9e8 	bl	80019b4 <MX_SPI2_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015e4:	f006 f880 	bl	80076e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <main+0x70>)
 80015ea:	2100      	movs	r1, #0
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <main+0x74>)
 80015ee:	f006 f8e5 	bl	80077bc <osThreadNew>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <main+0x78>)
 80015f6:	601a      	str	r2, [r3, #0]

  /* creation of blinkyTask01 */
  blinkyTask01Handle = osThreadNew(StartBlinkyTask01, NULL, &blinkyTask01_attributes);
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <main+0x7c>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <main+0x80>)
 80015fe:	f006 f8dd 	bl	80077bc <osThreadNew>
 8001602:	4602      	mov	r2, r0
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <main+0x84>)
 8001606:	601a      	str	r2, [r3, #0]

  /* creation of ReadAndPrintTas */
  ReadAndPrintTasHandle = osThreadNew(StartTaskReadAndPrint01, NULL, &ReadAndPrintTas_attributes);
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <main+0x88>)
 800160a:	2100      	movs	r1, #0
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <main+0x8c>)
 800160e:	f006 f8d5 	bl	80077bc <osThreadNew>
 8001612:	4602      	mov	r2, r0
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <main+0x90>)
 8001616:	601a      	str	r2, [r3, #0]

  /* creation of readTemperature */
  readTemperatureHandle = osThreadNew(StartTaskReadTemperature, NULL, &readTemperature_attributes);
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <main+0x94>)
 800161a:	2100      	movs	r1, #0
 800161c:	480e      	ldr	r0, [pc, #56]	; (8001658 <main+0x98>)
 800161e:	f006 f8cd 	bl	80077bc <osThreadNew>
 8001622:	4602      	mov	r2, r0
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <main+0x9c>)
 8001626:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001628:	f006 f892 	bl	8007750 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800162c:	e7fe      	b.n	800162c <main+0x6c>
 800162e:	bf00      	nop
 8001630:	0800dda4 	.word	0x0800dda4
 8001634:	08001c81 	.word	0x08001c81
 8001638:	20001cc8 	.word	0x20001cc8
 800163c:	0800ddc8 	.word	0x0800ddc8
 8001640:	08001c91 	.word	0x08001c91
 8001644:	20001d7c 	.word	0x20001d7c
 8001648:	0800ddec 	.word	0x0800ddec
 800164c:	08001cad 	.word	0x08001cad
 8001650:	20001df0 	.word	0x20001df0
 8001654:	0800de10 	.word	0x0800de10
 8001658:	08001cbd 	.word	0x08001cbd
 800165c:	20001cc4 	.word	0x20001cc4

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0b8      	sub	sp, #224	; 0xe0
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800166a:	2244      	movs	r2, #68	; 0x44
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f008 fda9 	bl	800a1c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2288      	movs	r2, #136	; 0x88
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f008 fd9b 	bl	800a1c6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169e:	2310      	movs	r3, #16
 80016a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016b6:	230a      	movs	r3, #10
 80016b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016bc:	2307      	movs	r3, #7
 80016be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 f814 	bl	8004700 <HAL_RCC_OscConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016de:	f000 fbb3 	bl	8001e48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e2:	230f      	movs	r3, #15
 80016e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2303      	movs	r3, #3
 80016ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001700:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001704:	2104      	movs	r1, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fbe0 	bl	8004ecc <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001712:	f000 fb99 	bl	8001e48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001716:	f244 0342 	movw	r3, #16450	; 0x4042
 800171a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001720:	2300      	movs	r3, #0
 8001722:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001724:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001728:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800172a:	2302      	movs	r3, #2
 800172c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001732:	2308      	movs	r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001736:	2307      	movs	r3, #7
 8001738:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001746:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fdf4 	bl	8005338 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001756:	f000 fb77 	bl	8001e48 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800175a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800175e:	f002 ff79 	bl	8004654 <HAL_PWREx_ControlVoltageScaling>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001768:	f000 fb6e 	bl	8001e48 <Error_Handler>
  }
}
 800176c:	bf00      	nop
 800176e:	37e0      	adds	r7, #224	; 0xe0
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <MX_ADC1_Init+0xe0>)
 8001798:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <MX_ADC1_Init+0xe4>)
 800179a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <MX_ADC1_Init+0xe0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a2:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017f8:	f000 ffb4 	bl	8002764 <HAL_ADC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001802:	f000 fb21 	bl	8001e48 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4810      	ldr	r0, [pc, #64]	; (8001854 <MX_ADC1_Init+0xe0>)
 8001812:	f001 fd0f 	bl	8003234 <HAL_ADCEx_MultiModeConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800181c:	f000 fb14 	bl	8001e48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_ADC1_Init+0xe8>)
 8001822:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001824:	2306      	movs	r3, #6
 8001826:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800182c:	237f      	movs	r3, #127	; 0x7f
 800182e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001830:	2304      	movs	r3, #4
 8001832:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_ADC1_Init+0xe0>)
 800183e:	f001 f8e5 	bl	8002a0c <HAL_ADC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001848:	f000 fafe 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20001d88 	.word	0x20001d88
 8001858:	50040000 	.word	0x50040000
 800185c:	14f00020 	.word	0x14f00020

08001860 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <MX_CAN1_Init+0xcc>)
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <MX_CAN1_Init+0xd0>)
 800186a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800186c:	4b2f      	ldr	r3, [pc, #188]	; (800192c <MX_CAN1_Init+0xcc>)
 800186e:	2210      	movs	r2, #16
 8001870:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <MX_CAN1_Init+0xcc>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <MX_CAN1_Init+0xcc>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <MX_CAN1_Init+0xcc>)
 8001880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001884:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <MX_CAN1_Init+0xcc>)
 8001888:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800188c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <MX_CAN1_Init+0xcc>)
 8001890:	2200      	movs	r2, #0
 8001892:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <MX_CAN1_Init+0xcc>)
 8001896:	2200      	movs	r2, #0
 8001898:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <MX_CAN1_Init+0xcc>)
 800189c:	2200      	movs	r2, #0
 800189e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_CAN1_Init+0xcc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <MX_CAN1_Init+0xcc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_CAN1_Init+0xcc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018b2:	481e      	ldr	r0, [pc, #120]	; (800192c <MX_CAN1_Init+0xcc>)
 80018b4:	f001 fd6a 	bl	800338c <HAL_CAN_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80018be:	f000 fac3 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sf;
  sf.FilterBank = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  sf.FilterMode = CAN_FILTERMODE_IDMASK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  sf.FilterScale = CAN_FILTERSCALE_16BIT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  sf.FilterIdLow = 0xffff;
 80018ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d2:	607b      	str	r3, [r7, #4]
  sf.FilterIdHigh = 0x1fff;
 80018d4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80018d8:	603b      	str	r3, [r7, #0]
  sf.FilterMaskIdLow = 0x0000;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  sf.FilterMaskIdHigh = 0x0000;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sf.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  sf.SlaveStartFilterBank = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  sf.FilterActivation = ENABLE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	623b      	str	r3, [r7, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK) {
 80018ee:	463b      	mov	r3, r7
 80018f0:	4619      	mov	r1, r3
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <MX_CAN1_Init+0xcc>)
 80018f4:	f001 fe45 	bl	8003582 <HAL_CAN_ConfigFilter>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_CAN1_Init+0xa2>
      Error_Handler();
 80018fe:	f000 faa3 	bl	8001e48 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001902:	480a      	ldr	r0, [pc, #40]	; (800192c <MX_CAN1_Init+0xcc>)
 8001904:	f001 ff07 	bl	8003716 <HAL_CAN_Start>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_CAN1_Init+0xb2>
      Error_Handler();
 800190e:	f000 fa9b 	bl	8001e48 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001912:	2102      	movs	r1, #2
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_CAN1_Init+0xcc>)
 8001916:	f002 f854 	bl	80039c2 <HAL_CAN_ActivateNotification>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_CAN1_Init+0xc4>
      Error_Handler();
 8001920:	f000 fa92 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20001e74 	.word	0x20001e74
 8001930:	40006400 	.word	0x40006400

08001934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_I2C1_Init+0x74>)
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <MX_I2C1_Init+0x78>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <MX_I2C1_Init+0x7c>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_I2C1_Init+0x74>)
 800194c:	2201      	movs	r2, #1
 800194e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_I2C1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_I2C1_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800196e:	480e      	ldr	r0, [pc, #56]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001970:	f002 fd3c 	bl	80043ec <HAL_I2C_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800197a:	f000 fa65 	bl	8001e48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800197e:	2100      	movs	r1, #0
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001982:	f002 fdc2 	bl	800450a <HAL_I2CEx_ConfigAnalogFilter>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800198c:	f000 fa5c 	bl	8001e48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001990:	2100      	movs	r1, #0
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_I2C1_Init+0x74>)
 8001994:	f002 fe04 	bl	80045a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800199e:	f000 fa53 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20001d30 	.word	0x20001d30
 80019ac:	40005400 	.word	0x40005400
 80019b0:	10909cec 	.word	0x10909cec

080019b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <MX_SPI2_Init+0x78>)
 80019bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019dc:	2201      	movs	r2, #1
 80019de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019ea:	2228      	movs	r2, #40	; 0x28
 80019ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_SPI2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_SPI2_Init+0x74>)
 8001a02:	2207      	movs	r2, #7
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_SPI2_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_SPI2_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_SPI2_Init+0x74>)
 8001a14:	f004 f940 	bl	8005c98 <HAL_SPI_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f000 fa13 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20001ccc 	.word	0x20001ccc
 8001a2c:	40003800 	.word	0x40003800

08001a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_USART2_UART_Init+0x5c>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a74:	f005 f962 	bl	8006d3c <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a7e:	f000 f9e3 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20001df4 	.word	0x20001df4
 8001a8c:	40004400 	.word	0x40004400

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a44      	ldr	r2, [pc, #272]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a3e      	ldr	r2, [pc, #248]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a38      	ldr	r2, [pc, #224]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <MX_GPIO_Init+0x144>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4833      	ldr	r0, [pc, #204]	; (8001bd8 <MX_GPIO_Init+0x148>)
 8001b0c:	f002 fc3c 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f002 fc35 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS1_GPIO_Port, SPI2_CS1_Pin, GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b24:	482d      	ldr	r0, [pc, #180]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001b26:	f002 fc2f 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS2_Pin|SPI2_CS3_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f002 fc28 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <MX_GPIO_Init+0x150>)
 8001b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4822      	ldr	r0, [pc, #136]	; (8001bd8 <MX_GPIO_Init+0x148>)
 8001b4e:	f002 fa73 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b52:	2301      	movs	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <MX_GPIO_Init+0x148>)
 8001b6a:	f002 fa65 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001b6e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f002 fa55 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS1_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS1_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480d      	ldr	r0, [pc, #52]	; (8001bdc <MX_GPIO_Init+0x14c>)
 8001ba8:	f002 fa46 	bl	8004038 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS2_Pin SPI2_CS3_Pin */
  GPIO_InitStruct.Pin = SPI2_CS2_Pin|SPI2_CS3_Pin;
 8001bac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc8:	f002 fa36 	bl	8004038 <HAL_GPIO_Init>

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000400 	.word	0x48000400
 8001be0:	10210000 	.word	0x10210000

08001be4 <serialMsg>:

/* USER CODE BEGIN 4 */

void serialMsg(char msg[]){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7fe faef 	bl	80001d0 <strlen>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <serialMsg+0x28>)
 8001bfe:	f005 f8eb 	bl	8006dd8 <HAL_UART_Transmit>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20001df4 	.word	0x20001df4

08001c10 <CAN_Rx>:
		//serialMsg("Message transmitted!\n\r");
	}
	else return;
}

void CAN_Rx(void){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <CAN_Rx+0x5c>)
 8001c18:	2208      	movs	r2, #8
 8001c1a:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <CAN_Rx+0x5c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <CAN_Rx+0x5c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <CAN_Rx+0x60>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <CAN_Rx+0x5c>)
 8001c30:	601a      	str	r2, [r3, #0]


	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8001c32:	463b      	mov	r3, r7
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <CAN_Rx+0x5c>)
 8001c36:	2100      	movs	r1, #0
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <CAN_Rx+0x64>)
 8001c3a:	f001 fdb0 	bl	800379e <HAL_CAN_GetRxMessage>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <CAN_Rx+0x3a>
		Error_Handler();
 8001c44:	f000 f900 	bl	8001e48 <Error_Handler>
 8001c48:	e00c      	b.n	8001c64 <CAN_Rx+0x54>
		return;
	}
	HAL_Delay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 fbdc 	bl	8002408 <HAL_Delay>
	if(USING_UART){
		serialMsg("Received message: ");
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <CAN_Rx+0x68>)
 8001c52:	f7ff ffc7 	bl	8001be4 <serialMsg>
		serialMsg((char*)crx);
 8001c56:	463b      	mov	r3, r7
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffc3 	bl	8001be4 <serialMsg>
		serialMsg("\n\r");
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <CAN_Rx+0x6c>)
 8001c60:	f7ff ffc0 	bl	8001be4 <serialMsg>
	}

}
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20001eb4 	.word	0x20001eb4
 8001c70:	20000200 	.word	0x20000200
 8001c74:	20001e74 	.word	0x20001e74
 8001c78:	0800dd50 	.word	0x0800dd50
 8001c7c:	0800dd64 	.word	0x0800dd64

08001c80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f005 fe3d 	bl	8007908 <osDelay>
 8001c8e:	e7fb      	b.n	8001c88 <StartDefaultTask+0x8>

08001c90 <StartBlinkyTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask01 */
void StartBlinkyTask01(void *argument)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c98:	2120      	movs	r1, #32
 8001c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9e:	f002 fb8b 	bl	80043b8 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca6:	f005 fe2f 	bl	8007908 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001caa:	e7f5      	b.n	8001c98 <StartBlinkyTask01+0x8>

08001cac <StartTaskReadAndPrint01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadAndPrint01 */
void StartTaskReadAndPrint01(void *argument)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
			  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);

		  HAL_Delay(1);
	  }

	  osDelay(100);
 8001cb4:	2064      	movs	r0, #100	; 0x64
 8001cb6:	f005 fe27 	bl	8007908 <osDelay>
	  if(ADC_READ)
 8001cba:	e7fb      	b.n	8001cb4 <StartTaskReadAndPrint01+0x8>

08001cbc <StartTaskReadTemperature>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadTemperature */
void StartTaskReadTemperature(void *argument)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b09b      	sub	sp, #108	; 0x6c
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	6078      	str	r0, [r7, #4]
	float temperature[3];
	uint8_t fault[3], buffer_len;
	Max31865_t  MaxHandles[3];
	char usartBuffer[16];

	Max31865_init(&MaxHandles[0], &hspi2, SPI2_CS1_GPIO_Port, SPI2_CS1_Pin, 2, 50);
 8001cc4:	f107 001c 	add.w	r0, r7, #28
 8001cc8:	2332      	movs	r3, #50	; 0x32
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	; (8001e0c <StartTaskReadTemperature+0x150>)
 8001cd6:	494e      	ldr	r1, [pc, #312]	; (8001e10 <StartTaskReadTemperature+0x154>)
 8001cd8:	f7ff fae4 	bl	80012a4 <Max31865_init>
	Max31865_init(&MaxHandles[1], &hspi2, SPI2_CS2_GPIO_Port, SPI2_CS2_Pin, 2, 50);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	f103 0010 	add.w	r0, r3, #16
 8001ce4:	2332      	movs	r3, #50	; 0x32
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2302      	movs	r3, #2
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cf4:	4946      	ldr	r1, [pc, #280]	; (8001e10 <StartTaskReadTemperature+0x154>)
 8001cf6:	f7ff fad5 	bl	80012a4 <Max31865_init>
	Max31865_init(&MaxHandles[2], &hspi2, SPI2_CS3_GPIO_Port, SPI2_CS3_Pin, 2, 50);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	f103 0020 	add.w	r0, r3, #32
 8001d02:	2332      	movs	r3, #50	; 0x32
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	2302      	movs	r3, #2
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d12:	493f      	ldr	r1, [pc, #252]	; (8001e10 <StartTaskReadTemperature+0x154>)
 8001d14:	f7ff fac6 	bl	80012a4 <Max31865_init>
  /* Infinite loop */
  for(;;)
  {
	  fault[0] = Max31865_readTempC(&MaxHandles[0], &temperature[0]);
 8001d18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fafc 	bl	8001320 <Max31865_readTempC>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	  fault[1] = Max31865_readTempC(&MaxHandles[1], &temperature[1]);
 8001d2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d32:	1d1a      	adds	r2, r3, #4
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	3310      	adds	r3, #16
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff faef 	bl	8001320 <Max31865_readTempC>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	  fault[2] = Max31865_readTempC(&MaxHandles[2], &temperature[2]);
 8001d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d4c:	f103 0208 	add.w	r2, r3, #8
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	3320      	adds	r3, #32
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fae1 	bl	8001320 <Max31865_readTempC>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	  //sprintf(message, "T3%.1f", temperature[2]);
	  //CAN_Tx(message);

	  if(USING_UART)
	  {
		  buffer_len = sprintf(usartBuffer, "T1:%.1f\r\n", temperature[0]);
 8001d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	f107 000c 	add.w	r0, r7, #12
 8001d74:	461a      	mov	r2, r3
 8001d76:	4623      	mov	r3, r4
 8001d78:	4926      	ldr	r1, [pc, #152]	; (8001e14 <StartTaskReadTemperature+0x158>)
 8001d7a:	f009 f871 	bl	800ae60 <siprintf>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  HAL_UART_Transmit(&huart2, (uint8_t*)usartBuffer, buffer_len, 100);
 8001d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f107 010c 	add.w	r1, r7, #12
 8001d8e:	2364      	movs	r3, #100	; 0x64
 8001d90:	4821      	ldr	r0, [pc, #132]	; (8001e18 <StartTaskReadTemperature+0x15c>)
 8001d92:	f005 f821 	bl	8006dd8 <HAL_UART_Transmit>

		  buffer_len = sprintf(usartBuffer, "T2:%.1f\r\n", temperature[1]);
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbd5 	bl	8000548 <__aeabi_f2d>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460c      	mov	r4, r1
 8001da2:	f107 000c 	add.w	r0, r7, #12
 8001da6:	461a      	mov	r2, r3
 8001da8:	4623      	mov	r3, r4
 8001daa:	491c      	ldr	r1, [pc, #112]	; (8001e1c <StartTaskReadTemperature+0x160>)
 8001dac:	f009 f858 	bl	800ae60 <siprintf>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  HAL_UART_Transmit(&huart2, (uint8_t*)usartBuffer, buffer_len, 100);
 8001db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f107 010c 	add.w	r1, r7, #12
 8001dc0:	2364      	movs	r3, #100	; 0x64
 8001dc2:	4815      	ldr	r0, [pc, #84]	; (8001e18 <StartTaskReadTemperature+0x15c>)
 8001dc4:	f005 f808 	bl	8006dd8 <HAL_UART_Transmit>

		  buffer_len = sprintf(usartBuffer, "T3:%.1f\r\n\r\n", temperature[2]);
 8001dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbbc 	bl	8000548 <__aeabi_f2d>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	f107 000c 	add.w	r0, r7, #12
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4623      	mov	r3, r4
 8001ddc:	4910      	ldr	r1, [pc, #64]	; (8001e20 <StartTaskReadTemperature+0x164>)
 8001dde:	f009 f83f 	bl	800ae60 <siprintf>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  HAL_UART_Transmit(&huart2, (uint8_t*)usartBuffer, buffer_len, 100);
 8001de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	f107 010c 	add.w	r1, r7, #12
 8001df2:	2364      	movs	r3, #100	; 0x64
 8001df4:	4808      	ldr	r0, [pc, #32]	; (8001e18 <StartTaskReadTemperature+0x15c>)
 8001df6:	f004 ffef 	bl	8006dd8 <HAL_UART_Transmit>
		  HAL_Delay(1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 fb04 	bl	8002408 <HAL_Delay>

	  }

	  osDelay(1000);
 8001e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e04:	f005 fd80 	bl	8007908 <osDelay>
	  fault[0] = Max31865_readTempC(&MaxHandles[0], &temperature[0]);
 8001e08:	e786      	b.n	8001d18 <StartTaskReadTemperature+0x5c>
 8001e0a:	bf00      	nop
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	20001ccc 	.word	0x20001ccc
 8001e14:	0800dd68 	.word	0x0800dd68
 8001e18:	20001df4 	.word	0x20001df4
 8001e1c:	0800dd74 	.word	0x0800dd74
 8001e20:	0800dd80 	.word	0x0800dd80

08001e24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e36:	f000 fac7 	bl	80023c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40001000 	.word	0x40001000

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_MspInit+0x4c>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	210f      	movs	r1, #15
 8001e92:	f06f 0001 	mvn.w	r0, #1
 8001e96:	f002 f8a5 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <HAL_ADC_MspInit+0x74>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d124      	bne.n	8001f14 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_ADC_MspInit+0x78>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_ADC_MspInit+0x78>)
 8001ed0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_ADC_MspInit+0x78>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_ADC_MspInit+0x78>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_ADC_MspInit+0x78>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_ADC_MspInit+0x78>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001efa:	2301      	movs	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001efe:	230b      	movs	r3, #11
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f002 f892 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	50040000 	.word	0x50040000
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_CAN_MspInit+0x90>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d131      	bne.n	8001faa <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_CAN_MspInit+0x94>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <HAL_CAN_MspInit+0x94>)
 8001f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_CAN_MspInit+0x94>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_CAN_MspInit+0x94>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_CAN_MspInit+0x94>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_CAN_MspInit+0x94>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f88:	2309      	movs	r3, #9
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f002 f84f 	bl	8004038 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	2014      	movs	r0, #20
 8001fa0:	f002 f820 	bl	8003fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001fa4:	2014      	movs	r0, #20
 8001fa6:	f002 f839 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40006400 	.word	0x40006400
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_I2C_MspInit+0x7c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d128      	bne.n	8002030 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_I2C_MspInit+0x80>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_I2C_MspInit+0x80>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_I2C_MspInit+0x80>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffc:	2312      	movs	r3, #18
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002000:	2301      	movs	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002008:	2304      	movs	r3, #4
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <HAL_I2C_MspInit+0x84>)
 8002014:	f002 f810 	bl	8004038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_I2C_MspInit+0x80>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_I2C_MspInit+0x80>)
 800201e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_I2C_MspInit+0x80>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3728      	adds	r7, #40	; 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40005400 	.word	0x40005400
 800203c:	40021000 	.word	0x40021000
 8002040:	48000400 	.word	0x48000400

08002044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_SPI_MspInit+0x7c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d128      	bne.n	80020b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_SPI_MspInit+0x80>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_SPI_MspInit+0x80>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_SPI_MspInit+0x80>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_SPI_MspInit+0x80>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_SPI_MspInit+0x80>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_SPI_MspInit+0x80>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002096:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a8:	2305      	movs	r3, #5
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <HAL_SPI_MspInit+0x84>)
 80020b4:	f001 ffc0 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40003800 	.word	0x40003800
 80020c4:	40021000 	.word	0x40021000
 80020c8:	48000400 	.word	0x48000400

080020cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_UART_MspInit+0x7c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d128      	bne.n	8002140 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_UART_MspInit+0x80>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_UART_MspInit+0x80>)
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	6593      	str	r3, [r2, #88]	; 0x58
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_UART_MspInit+0x80>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_UART_MspInit+0x80>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_UART_MspInit+0x80>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_UART_MspInit+0x80>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800211e:	230c      	movs	r3, #12
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212e:	2307      	movs	r3, #7
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213c:	f001 ff7c 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40004400 	.word	0x40004400
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002160:	2200      	movs	r2, #0
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	2036      	movs	r0, #54	; 0x36
 8002166:	f001 ff3d 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800216a:	2036      	movs	r0, #54	; 0x36
 800216c:	f001 ff56 	bl	800401c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_InitTick+0x9c>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_InitTick+0x9c>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_InitTick+0x9c>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002188:	f107 0210 	add.w	r2, r7, #16
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f003 f83e 	bl	8005214 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002198:	f003 f810 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 800219c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <HAL_InitTick+0xa0>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	3b01      	subs	r3, #1
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_InitTick+0xa4>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_InitTick+0xa8>)
 80021b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_InitTick+0xa4>)
 80021b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_InitTick+0xa4>)
 80021bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_InitTick+0xa4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_InitTick+0xa4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <HAL_InitTick+0xa4>)
 80021ce:	f004 fae3 	bl	8006798 <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <HAL_InitTick+0xa4>)
 80021da:	f004 fb3f 	bl	800685c <HAL_TIM_Base_Start_IT>
 80021de:	4603      	mov	r3, r0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3730      	adds	r7, #48	; 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	20001ed0 	.word	0x20001ed0
 80021f8:	40001000 	.word	0x40001000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler+0x4>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <UsageFault_Handler+0x4>

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <CAN1_RX0_IRQHandler+0x14>)
 8002236:	f001 fbea 	bl	8003a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 800223a:	f7ff fce9 	bl	8001c10 <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20001e74 	.word	0x20001e74

08002248 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <TIM6_DAC_IRQHandler+0x10>)
 800224e:	f004 fb75 	bl	800693c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20001ed0 	.word	0x20001ed0

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f007 ff66 	bl	800a15c <__errno>
 8002290:	4602      	mov	r2, r0
 8002292:	230c      	movs	r3, #12
 8002294:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20018000 	.word	0x20018000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	20000204 	.word	0x20000204
 80022c4:	20001f68 	.word	0x20001f68

080022c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <SystemInit+0x64>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <SystemInit+0x64>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <SystemInit+0x68>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <SystemInit+0x68>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <SystemInit+0x68>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <SystemInit+0x68>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <SystemInit+0x68>)
 80022f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <SystemInit+0x68>)
 8002300:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002304:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <SystemInit+0x68>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a09      	ldr	r2, [pc, #36]	; (8002330 <SystemInit+0x68>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <SystemInit+0x68>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <SystemInit+0x64>)
 800231a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800231e:	609a      	str	r2, [r3, #8]
#endif
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	40021000 	.word	0x40021000

08002334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002338:	f7ff ffc6 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800233c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800233e:	e003      	b.n	8002348 <LoopCopyDataInit>

08002340 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002342:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002344:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002346:	3104      	adds	r1, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002348:	480a      	ldr	r0, [pc, #40]	; (8002374 <LoopForever+0xa>)
	ldr	r3, =_edata
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <LoopForever+0xe>)
	adds	r2, r0, r1
 800234c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800234e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002350:	d3f6      	bcc.n	8002340 <CopyDataInit>
	ldr	r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002354:	e002      	b.n	800235c <LoopFillZerobss>

08002356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002356:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002358:	f842 3b04 	str.w	r3, [r2], #4

0800235c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <LoopForever+0x16>)
	cmp	r2, r3
 800235e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002360:	d3f9      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002362:	f007 ff01 	bl	800a168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002366:	f7ff f92b 	bl	80015c0 <main>

0800236a <LoopForever>:

LoopForever:
    b LoopForever
 800236a:	e7fe      	b.n	800236a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800236c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002370:	0800e144 	.word	0x0800e144
	ldr	r0, =_sdata
 8002374:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002378:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 800237c:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002380:	20001f64 	.word	0x20001f64

08002384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_2_IRQHandler>
	...

08002388 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_Init+0x3c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_Init+0x3c>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239e:	2003      	movs	r0, #3
 80023a0:	f001 fe15 	bl	8003fce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff fed3 	bl	8002150 <HAL_InitTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	e001      	b.n	80023ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b6:	f7ff fd4f 	bl	8001e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ba:	79fb      	ldrb	r3, [r7, #7]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40022000 	.word	0x40022000

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008
 80023ec:	20001f1c 	.word	0x20001f1c

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20001f1c 	.word	0x20001f1c

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_Delay+0x40>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800242e:	bf00      	nop
 8002430:	f7ff ffde 	bl	80023f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000008 	.word	0x20000008

0800244c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	609a      	str	r2, [r3, #8]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3360      	adds	r3, #96	; 0x60
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <LL_ADC_SetOffset+0x44>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	03fff000 	.word	0x03fff000

080024fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3360      	adds	r3, #96	; 0x60
 800250a:	461a      	mov	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3360      	adds	r3, #96	; 0x60
 8002538:	461a      	mov	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800255e:	b480      	push	{r7}
 8002560:	b087      	sub	sp, #28
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3330      	adds	r3, #48	; 0x30
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	211f      	movs	r1, #31
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	401a      	ands	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 011f 	and.w	r1, r3, #31
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	431a      	orrs	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3314      	adds	r3, #20
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	0e5b      	lsrs	r3, r3, #25
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	4413      	add	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	0d1b      	lsrs	r3, r3, #20
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2107      	movs	r1, #7
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	0d1b      	lsrs	r3, r3, #20
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	431a      	orrs	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002600:	bf00      	nop
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0318 	and.w	r3, r3, #24
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002630:	40d9      	lsrs	r1, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	400b      	ands	r3, r1
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	431a      	orrs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	0007ffff 	.word	0x0007ffff

08002654 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6093      	str	r3, [r2, #8]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800268c:	d101      	bne.n	8002692 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026dc:	d101      	bne.n	80026e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <LL_ADC_IsEnabled+0x18>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <LL_ADC_IsEnabled+0x1a>
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b04      	cmp	r3, #4
 8002728:	d101      	bne.n	800272e <LL_ADC_REG_IsConversionOngoing+0x18>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b08      	cmp	r3, #8
 800274e:	d101      	bne.n	8002754 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e134      	b.n	80029e8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fb8b 	bl	8001ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff67 	bl	8002678 <LL_ADC_IsDeepPowerDownEnabled>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff4d 	bl	8002654 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff82 	bl	80026c8 <LL_ADC_IsInternalRegulatorEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d113      	bne.n	80027f2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff66 	bl	80026a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027d4:	4b86      	ldr	r3, [pc, #536]	; (80029f0 <HAL_ADC_Init+0x28c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	4a86      	ldr	r2, [pc, #536]	; (80029f4 <HAL_ADC_Init+0x290>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027e4:	e002      	b.n	80027ec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f9      	bne.n	80027e6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff66 	bl	80026c8 <LL_ADC_IsInternalRegulatorEnabled>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10d      	bne.n	800281e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff77 	bl	8002716 <LL_ADC_REG_IsConversionOngoing>
 8002828:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80cf 	bne.w	80029d6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 80cb 	bne.w	80029d6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002848:	f043 0202 	orr.w	r2, r3, #2
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff4b 	bl	80026f0 <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d115      	bne.n	800288c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002860:	4865      	ldr	r0, [pc, #404]	; (80029f8 <HAL_ADC_Init+0x294>)
 8002862:	f7ff ff45 	bl	80026f0 <LL_ADC_IsEnabled>
 8002866:	4604      	mov	r4, r0
 8002868:	4864      	ldr	r0, [pc, #400]	; (80029fc <HAL_ADC_Init+0x298>)
 800286a:	f7ff ff41 	bl	80026f0 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	431c      	orrs	r4, r3
 8002872:	4863      	ldr	r0, [pc, #396]	; (8002a00 <HAL_ADC_Init+0x29c>)
 8002874:	f7ff ff3c 	bl	80026f0 <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	4323      	orrs	r3, r4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4619      	mov	r1, r3
 8002886:	485f      	ldr	r0, [pc, #380]	; (8002a04 <HAL_ADC_Init+0x2a0>)
 8002888:	f7ff fde0 	bl	800244c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e5b      	ldrb	r3, [r3, #25]
 8002890:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002896:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800289c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d106      	bne.n	80028c8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	3b01      	subs	r3, #1
 80028c0:	045b      	lsls	r3, r3, #17
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_ADC_Init+0x2a4>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff0a 	bl	8002716 <LL_ADC_REG_IsConversionOngoing>
 8002902:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff17 	bl	800273c <LL_ADC_INJ_IsConversionOngoing>
 800290e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d13d      	bne.n	8002992 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13a      	bne.n	8002992 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002920:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002928:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002938:	f023 0302 	bic.w	r3, r3, #2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	430b      	orrs	r3, r1
 8002944:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800294c:	2b01      	cmp	r3, #1
 800294e:	d118      	bne.n	8002982 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800296c:	4311      	orrs	r1, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002972:	430a      	orrs	r2, r1
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	e007      	b.n	8002992 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d10c      	bne.n	80029b4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	f023 010f 	bic.w	r1, r3, #15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
 80029b2:	e007      	b.n	80029c4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 020f 	bic.w	r2, r2, #15
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f023 0303 	bic.w	r3, r3, #3
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
 80029d4:	e007      	b.n	80029e6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f043 0210 	orr.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}
 80029f0:	20000000 	.word	0x20000000
 80029f4:	053e2d63 	.word	0x053e2d63
 80029f8:	50040000 	.word	0x50040000
 80029fc:	50040100 	.word	0x50040100
 8002a00:	50040200 	.word	0x50040200
 8002a04:	50040300 	.word	0x50040300
 8002a08:	fff0c007 	.word	0xfff0c007

08002a0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0b6      	sub	sp, #216	; 0xd8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x22>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e3c6      	b.n	80031bc <HAL_ADC_ConfigChannel+0x7b0>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fe6b 	bl	8002716 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 83a7 	bne.w	8003196 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d824      	bhi.n	8002a9a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	3b02      	subs	r3, #2
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d81b      	bhi.n	8002a92 <HAL_ADC_ConfigChannel+0x86>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <HAL_ADC_ConfigChannel+0x54>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a79 	.word	0x08002a79
 8002a68:	08002a81 	.word	0x08002a81
 8002a6c:	08002a89 	.word	0x08002a89
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	220c      	movs	r2, #12
 8002a74:	605a      	str	r2, [r3, #4]
          break;
 8002a76:	e011      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2212      	movs	r2, #18
 8002a7c:	605a      	str	r2, [r3, #4]
          break;
 8002a7e:	e00d      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2218      	movs	r2, #24
 8002a84:	605a      	str	r2, [r3, #4]
          break;
 8002a86:	e009      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8e:	605a      	str	r2, [r3, #4]
          break;
 8002a90:	e004      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2206      	movs	r2, #6
 8002a96:	605a      	str	r2, [r3, #4]
          break;
 8002a98:	e000      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a9a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f7ff fd58 	bl	800255e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe2f 	bl	8002716 <LL_ADC_REG_IsConversionOngoing>
 8002ab8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fe3b 	bl	800273c <LL_ADC_INJ_IsConversionOngoing>
 8002ac6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 81a6 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f040 81a1 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f7ff fd63 	bl	80025b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d00a      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6919      	ldr	r1, [r3, #16]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b22:	f7ff fcc7 	bl	80024b4 <LL_ADC_SetOffset>
 8002b26:	e17b      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fce4 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x148>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fcd9 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 021f 	and.w	r2, r3, #31
 8002b52:	e01e      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x186>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fcce 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e004      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x19e>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	0e9b      	lsrs	r3, r3, #26
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	e018      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x1d0>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e004      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d106      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fc9d 	bl	8002528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fc81 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x20e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fc76 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	e01e      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x24c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fc6b 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e004      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x264>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	e018      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x296>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e004      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d106      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fc3a 	bl	8002528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fc1e 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x2d4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fc13 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	e01e      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x312>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fc08 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	e004      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x32a>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	e016      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x358>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d56:	2320      	movs	r3, #32
 8002d58:	e004      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d106      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2102      	movs	r1, #2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fbd9 	bl	8002528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2103      	movs	r1, #3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fbbd 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x396>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2103      	movs	r1, #3
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fbb2 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	e017      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x3c6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2103      	movs	r1, #3
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fba7 	bl	80024fc <LL_ADC_GetOffsetChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dbc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e003      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x3de>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e9b      	lsrs	r3, r3, #26
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	e011      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x402>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002e02:	2320      	movs	r3, #32
 8002e04:	e003      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2103      	movs	r1, #3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fb84 	bl	8002528 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fc63 	bl	80026f0 <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 813f 	bne.w	80030b0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f7ff fbe4 	bl	800260c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a8e      	ldr	r2, [pc, #568]	; (8003084 <HAL_ADC_ConfigChannel+0x678>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	f040 8130 	bne.w	80030b0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x46c>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e019      	b.n	8002eac <HAL_ADC_ConfigChannel+0x4a0>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e003      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	bf94      	ite	ls
 8002ea6:	2301      	movls	r3, #1
 8002ea8:	2300      	movhi	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d079      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x4c0>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eca:	e015      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x4ec>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002edc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e003      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x50c>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	e017      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x53c>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10a      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x562>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	051b      	lsls	r3, r3, #20
 8002f6c:	e018      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x594>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e003      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	e080      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d107      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x5b4>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	069b      	lsls	r3, r3, #26
 8002fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fbe:	e015      	b.n	8002fec <HAL_ADC_ConfigChannel+0x5e0>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e003      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	069b      	lsls	r3, r3, #26
 8002fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_ADC_ConfigChannel+0x600>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	3301      	adds	r3, #1
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	e017      	b.n	800303c <HAL_ADC_ConfigChannel+0x630>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	61fb      	str	r3, [r7, #28]
  return result;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003024:	2320      	movs	r3, #32
 8003026:	e003      	b.n	8003030 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	ea42 0103 	orr.w	r1, r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x65c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	3b1e      	subs	r3, #30
 8003060:	051b      	lsls	r3, r3, #20
 8003062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003066:	e01d      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x698>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	613b      	str	r3, [r7, #16]
  return result;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e005      	b.n	8003090 <HAL_ADC_ConfigChannel+0x684>
 8003084:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f003 021f 	and.w	r2, r3, #31
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	3b1e      	subs	r3, #30
 800309e:	051b      	lsls	r3, r3, #20
 80030a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a4:	430b      	orrs	r3, r1
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	6892      	ldr	r2, [r2, #8]
 80030aa:	4619      	mov	r1, r3
 80030ac:	f7ff fa83 	bl	80025b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_ADC_ConfigChannel+0x7b8>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d079      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030bc:	4842      	ldr	r0, [pc, #264]	; (80031c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80030be:	f7ff f9eb 	bl	8002498 <LL_ADC_GetCommonPathInternalCh>
 80030c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a40      	ldr	r2, [pc, #256]	; (80031cc <HAL_ADC_ConfigChannel+0x7c0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d12b      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d125      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3b      	ldr	r2, [pc, #236]	; (80031d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0x6e4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a3a      	ldr	r2, [pc, #232]	; (80031d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d15c      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f8:	4619      	mov	r1, r3
 80030fa:	4833      	ldr	r0, [pc, #204]	; (80031c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80030fc:	f7ff f9b9 	bl	8002472 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	4a35      	ldr	r2, [pc, #212]	; (80031dc <HAL_ADC_ConfigChannel+0x7d0>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	099a      	lsrs	r2, r3, #6
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003118:	e002      	b.n	8003120 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3b01      	subs	r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f9      	bne.n	800311a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003126:	e040      	b.n	80031aa <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <HAL_ADC_ConfigChannel+0x7d4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d118      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x758>
 8003132:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d112      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a23      	ldr	r2, [pc, #140]	; (80031d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x746>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_ADC_ConfigChannel+0x7c8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d12d      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003152:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315a:	4619      	mov	r1, r3
 800315c:	481a      	ldr	r0, [pc, #104]	; (80031c8 <HAL_ADC_ConfigChannel+0x7bc>)
 800315e:	f7ff f988 	bl	8002472 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003162:	e024      	b.n	80031ae <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d120      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800316e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11a      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d115      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003188:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800318c:	4619      	mov	r1, r3
 800318e:	480e      	ldr	r0, [pc, #56]	; (80031c8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003190:	f7ff f96f 	bl	8002472 <LL_ADC_SetCommonPathInternalCh>
 8003194:	e00c      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031a8:	e002      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031bc:	4618      	mov	r0, r3
 80031be:	37d8      	adds	r7, #216	; 0xd8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	80080000 	.word	0x80080000
 80031c8:	50040300 	.word	0x50040300
 80031cc:	c7520000 	.word	0xc7520000
 80031d0:	50040000 	.word	0x50040000
 80031d4:	50040200 	.word	0x50040200
 80031d8:	20000000 	.word	0x20000000
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	cb840000 	.word	0xcb840000
 80031e4:	80000001 	.word	0x80000001

080031e8 <LL_ADC_IsEnabled>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <LL_ADC_IsEnabled+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_ADC_IsEnabled+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_REG_IsConversionOngoing>:
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d101      	bne.n	8003226 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b09f      	sub	sp, #124	; 0x7c
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800324e:	2302      	movs	r3, #2
 8003250:	e08f      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d102      	bne.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003264:	4b46      	ldr	r3, [pc, #280]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	e001      	b.n	800326e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e072      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ffbd 	bl	800320e <LL_ADC_REG_IsConversionOngoing>
 8003294:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ffb7 	bl	800320e <LL_ADC_REG_IsConversionOngoing>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d154      	bne.n	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d151      	bne.n	8003350 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032ac:	4b35      	ldr	r3, [pc, #212]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02c      	beq.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ca:	035b      	lsls	r3, r3, #13
 80032cc:	430b      	orrs	r3, r1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d4:	4829      	ldr	r0, [pc, #164]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80032d6:	f7ff ff87 	bl	80031e8 <LL_ADC_IsEnabled>
 80032da:	4604      	mov	r4, r0
 80032dc:	4828      	ldr	r0, [pc, #160]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80032de:	f7ff ff83 	bl	80031e8 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	431c      	orrs	r4, r3
 80032e6:	4828      	ldr	r0, [pc, #160]	; (8003388 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032e8:	f7ff ff7e 	bl	80031e8 <LL_ADC_IsEnabled>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4323      	orrs	r3, r4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d137      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032fc:	f023 030f 	bic.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	6811      	ldr	r1, [r2, #0]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	430a      	orrs	r2, r1
 800330a:	431a      	orrs	r2, r3
 800330c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003310:	e028      	b.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800331a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800331e:	4817      	ldr	r0, [pc, #92]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003320:	f7ff ff62 	bl	80031e8 <LL_ADC_IsEnabled>
 8003324:	4604      	mov	r4, r0
 8003326:	4816      	ldr	r0, [pc, #88]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003328:	f7ff ff5e 	bl	80031e8 <LL_ADC_IsEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	431c      	orrs	r4, r3
 8003330:	4815      	ldr	r0, [pc, #84]	; (8003388 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003332:	f7ff ff59 	bl	80031e8 <LL_ADC_IsEnabled>
 8003336:	4603      	mov	r3, r0
 8003338:	4323      	orrs	r3, r4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d112      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800333e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003346:	f023 030f 	bic.w	r3, r3, #15
 800334a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800334c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800334e:	e009      	b.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003362:	e000      	b.n	8003366 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003364:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800336e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003372:	4618      	mov	r0, r3
 8003374:	377c      	adds	r7, #124	; 0x7c
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	50040000 	.word	0x50040000
 8003380:	50040100 	.word	0x50040100
 8003384:	50040300 	.word	0x50040300
 8003388:	50040200 	.word	0x50040200

0800338c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0ed      	b.n	800357a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe fdba 	bl	8001f24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0202 	bic.w	r2, r2, #2
 80033be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c0:	f7ff f816 	bl	80023f0 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033c6:	e012      	b.n	80033ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033c8:	f7ff f812 	bl	80023f0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b0a      	cmp	r3, #10
 80033d4:	d90b      	bls.n	80033ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2205      	movs	r2, #5
 80033e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0c5      	b.n	800357a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e5      	bne.n	80033c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800340c:	f7fe fff0 	bl	80023f0 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003412:	e012      	b.n	800343a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003414:	f7fe ffec 	bl	80023f0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b0a      	cmp	r3, #10
 8003420:	d90b      	bls.n	800343a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2205      	movs	r2, #5
 8003432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e09f      	b.n	800357a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0e5      	beq.n	8003414 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7e1b      	ldrb	r3, [r3, #24]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d108      	bne.n	8003462 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e007      	b.n	8003472 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7e5b      	ldrb	r3, [r3, #25]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d108      	bne.n	800348c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e007      	b.n	800349c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7e9b      	ldrb	r3, [r3, #26]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d108      	bne.n	80034b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0220 	orr.w	r2, r2, #32
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e007      	b.n	80034c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0220 	bic.w	r2, r2, #32
 80034c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7edb      	ldrb	r3, [r3, #27]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d108      	bne.n	80034e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0210 	bic.w	r2, r2, #16
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e007      	b.n	80034f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0210 	orr.w	r2, r2, #16
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7f1b      	ldrb	r3, [r3, #28]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d108      	bne.n	800350a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0208 	orr.w	r2, r2, #8
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e007      	b.n	800351a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0208 	bic.w	r2, r2, #8
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7f5b      	ldrb	r3, [r3, #29]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d108      	bne.n	8003534 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0204 	orr.w	r2, r2, #4
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e007      	b.n	8003544 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	ea42 0103 	orr.w	r1, r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003598:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d003      	beq.n	80035a8 <HAL_CAN_ConfigFilter+0x26>
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	f040 80aa 	bne.w	80036fc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2201      	movs	r2, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d123      	bne.n	800362a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	401a      	ands	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003604:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3248      	adds	r2, #72	; 0x48
 800360a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800361e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003620:	6979      	ldr	r1, [r7, #20]
 8003622:	3348      	adds	r3, #72	; 0x48
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d122      	bne.n	8003678 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	431a      	orrs	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003652:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3248      	adds	r2, #72	; 0x48
 8003658:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800366c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800366e:	6979      	ldr	r1, [r7, #20]
 8003670:	3348      	adds	r3, #72	; 0x48
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43db      	mvns	r3, r3
 800368a:	401a      	ands	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003692:	e007      	b.n	80036a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	431a      	orrs	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036be:	e007      	b.n	80036d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036ee:	f023 0201 	bic.w	r2, r3, #1
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e006      	b.n	800370a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d12e      	bne.n	8003788 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003742:	f7fe fe55 	bl	80023f0 <HAL_GetTick>
 8003746:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003748:	e012      	b.n	8003770 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800374a:	f7fe fe51 	bl	80023f0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b0a      	cmp	r3, #10
 8003756:	d90b      	bls.n	8003770 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2205      	movs	r2, #5
 8003768:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e012      	b.n	8003796 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e006      	b.n	8003796 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800379e:	b480      	push	{r7}
 80037a0:	b087      	sub	sp, #28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d003      	beq.n	80037c2 <HAL_CAN_GetRxMessage+0x24>
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	f040 80f3 	bne.w	80039a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10e      	bne.n	80037e6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d116      	bne.n	8003804 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0e7      	b.n	80039b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0d8      	b.n	80039b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	331b      	adds	r3, #27
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	4413      	add	r3, r2
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0204 	and.w	r2, r3, #4
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	331b      	adds	r3, #27
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4413      	add	r3, r2
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0d5b      	lsrs	r3, r3, #21
 8003832:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e00b      	b.n	8003854 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	331b      	adds	r3, #27
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	4413      	add	r3, r2
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	08db      	lsrs	r3, r3, #3
 800384c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	331b      	adds	r3, #27
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0202 	and.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	331b      	adds	r3, #27
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 020f 	and.w	r2, r3, #15
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	331b      	adds	r3, #27
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	b2da      	uxtb	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	331b      	adds	r3, #27
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0a1a      	lsrs	r2, r3, #8
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0c1a      	lsrs	r2, r3, #16
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	3302      	adds	r3, #2
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	4413      	add	r3, r2
 8003906:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e1a      	lsrs	r2, r3, #24
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	3303      	adds	r3, #3
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	4413      	add	r3, r2
 8003920:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	3304      	adds	r3, #4
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	4413      	add	r3, r2
 8003938:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0a1a      	lsrs	r2, r3, #8
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	3305      	adds	r3, #5
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4413      	add	r3, r2
 8003952:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0c1a      	lsrs	r2, r3, #16
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	3306      	adds	r3, #6
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	4413      	add	r3, r2
 800396c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	0e1a      	lsrs	r2, r3, #24
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3307      	adds	r3, #7
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d108      	bne.n	8003994 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0220 	orr.w	r2, r2, #32
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e007      	b.n	80039a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0220 	orr.w	r2, r2, #32
 80039a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e006      	b.n	80039b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d002      	beq.n	80039e0 <HAL_CAN_ActivateNotification+0x1e>
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d109      	bne.n	80039f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6959      	ldr	r1, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e006      	b.n	8003a02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b08a      	sub	sp, #40	; 0x28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d07c      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d023      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2201      	movs	r2, #1
 8003a64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f97d 	bl	8003d70 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a76:	e016      	b.n	8003aa6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8a:	e00c      	b.n	8003aa6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e002      	b.n	8003aa6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f983 	bl	8003dac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d024      	beq.n	8003afa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f95d 	bl	8003d84 <HAL_CAN_TxMailbox1CompleteCallback>
 8003aca:	e016      	b.n	8003afa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	e00c      	b.n	8003afa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	e002      	b.n	8003afa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f963 	bl	8003dc0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d024      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f93d 	bl	8003d98 <HAL_CAN_TxMailbox2CompleteCallback>
 8003b1e:	e016      	b.n	8003b4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	e00c      	b.n	8003b4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d004      	beq.n	8003b48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	e002      	b.n	8003b4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f943 	bl	8003dd4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f934 	bl	8003dfc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f91b 	bl	8003de8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2208      	movs	r2, #8
 8003bf0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f916 	bl	8003e24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8fd 	bl	8003e10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d006      	beq.n	8003c38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f900 	bl	8003e38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d006      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2208      	movs	r2, #8
 8003c52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8f9 	bl	8003e4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d075      	beq.n	8003d50 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06c      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03d      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d038      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d017      	beq.n	8003d10 <HAL_CAN_IRQHandler+0x302>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d804      	bhi.n	8003cee <HAL_CAN_IRQHandler+0x2e0>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d009      	beq.n	8003cfc <HAL_CAN_IRQHandler+0x2ee>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d00c      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003cec:	e024      	b.n	8003d38 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003cee:	2b50      	cmp	r3, #80	; 0x50
 8003cf0:	d018      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x316>
 8003cf2:	2b60      	cmp	r3, #96	; 0x60
 8003cf4:	d01b      	beq.n	8003d2e <HAL_CAN_IRQHandler+0x320>
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d00f      	beq.n	8003d1a <HAL_CAN_IRQHandler+0x30c>
            break;
 8003cfa:	e01d      	b.n	8003d38 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	f043 0308 	orr.w	r3, r3, #8
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d04:	e018      	b.n	8003d38 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	f043 0310 	orr.w	r3, r3, #16
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d0e:	e013      	b.n	8003d38 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	f043 0320 	orr.w	r3, r3, #32
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d18:	e00e      	b.n	8003d38 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d22:	e009      	b.n	8003d38 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d2c:	e004      	b.n	8003d38 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f87c 	bl	8003e60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3728      	adds	r7, #40	; 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea6:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	60d3      	str	r3, [r2, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 0307 	and.w	r3, r3, #7
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db0b      	blt.n	8003f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	4907      	ldr	r1, [pc, #28]	; (8003f10 <__NVIC_EnableIRQ+0x38>)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2001      	movs	r0, #1
 8003efa:	fa00 f202 	lsl.w	r2, r0, r2
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	db0a      	blt.n	8003f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	490c      	ldr	r1, [pc, #48]	; (8003f60 <__NVIC_SetPriority+0x4c>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f3c:	e00a      	b.n	8003f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4908      	ldr	r1, [pc, #32]	; (8003f64 <__NVIC_SetPriority+0x50>)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	0112      	lsls	r2, r2, #4
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	440b      	add	r3, r1
 8003f52:	761a      	strb	r2, [r3, #24]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000e100 	.word	0xe000e100
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	bf28      	it	cs
 8003f86:	2304      	movcs	r3, #4
 8003f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d902      	bls.n	8003f98 <NVIC_EncodePriority+0x30>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3b03      	subs	r3, #3
 8003f96:	e000      	b.n	8003f9a <NVIC_EncodePriority+0x32>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	4313      	orrs	r3, r2
         );
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	; 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff4c 	bl	8003e74 <__NVIC_SetPriorityGrouping>
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff6:	f7ff ff61 	bl	8003ebc <__NVIC_GetPriorityGrouping>
 8003ffa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	6978      	ldr	r0, [r7, #20]
 8004002:	f7ff ffb1 	bl	8003f68 <NVIC_EncodePriority>
 8004006:	4602      	mov	r2, r0
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff80 	bl	8003f14 <__NVIC_SetPriority>
}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff54 	bl	8003ed8 <__NVIC_EnableIRQ>
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004046:	e17f      	b.n	8004348 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2101      	movs	r1, #1
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	4013      	ands	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8171 	beq.w	8004342 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d00b      	beq.n	8004080 <HAL_GPIO_Init+0x48>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d007      	beq.n	8004080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004074:	2b11      	cmp	r3, #17
 8004076:	d003      	beq.n	8004080 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b12      	cmp	r3, #18
 800407e:	d130      	bne.n	80040e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2203      	movs	r2, #3
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040b6:	2201      	movs	r2, #1
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 0201 	and.w	r2, r3, #1
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d118      	bne.n	8004120 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040f4:	2201      	movs	r2, #1
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	43db      	mvns	r3, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f003 0201 	and.w	r2, r3, #1
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2203      	movs	r2, #3
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x128>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b12      	cmp	r3, #18
 800415e:	d123      	bne.n	80041a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	08da      	lsrs	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3208      	adds	r2, #8
 8004168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	220f      	movs	r2, #15
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	08da      	lsrs	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3208      	adds	r2, #8
 80041a2:	6939      	ldr	r1, [r7, #16]
 80041a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	2203      	movs	r2, #3
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0203 	and.w	r2, r3, #3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80ac 	beq.w	8004342 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ea:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_GPIO_Init+0x32c>)
 80041ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ee:	4a5d      	ldr	r2, [pc, #372]	; (8004364 <HAL_GPIO_Init+0x32c>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6613      	str	r3, [r2, #96]	; 0x60
 80041f6:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_GPIO_Init+0x32c>)
 80041f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004202:	4a59      	ldr	r2, [pc, #356]	; (8004368 <HAL_GPIO_Init+0x330>)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	089b      	lsrs	r3, r3, #2
 8004208:	3302      	adds	r3, #2
 800420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800422c:	d025      	beq.n	800427a <HAL_GPIO_Init+0x242>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a4e      	ldr	r2, [pc, #312]	; (800436c <HAL_GPIO_Init+0x334>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01f      	beq.n	8004276 <HAL_GPIO_Init+0x23e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4d      	ldr	r2, [pc, #308]	; (8004370 <HAL_GPIO_Init+0x338>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d019      	beq.n	8004272 <HAL_GPIO_Init+0x23a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4c      	ldr	r2, [pc, #304]	; (8004374 <HAL_GPIO_Init+0x33c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_GPIO_Init+0x236>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4b      	ldr	r2, [pc, #300]	; (8004378 <HAL_GPIO_Init+0x340>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00d      	beq.n	800426a <HAL_GPIO_Init+0x232>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4a      	ldr	r2, [pc, #296]	; (800437c <HAL_GPIO_Init+0x344>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <HAL_GPIO_Init+0x22e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a49      	ldr	r2, [pc, #292]	; (8004380 <HAL_GPIO_Init+0x348>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_GPIO_Init+0x22a>
 800425e:	2306      	movs	r3, #6
 8004260:	e00c      	b.n	800427c <HAL_GPIO_Init+0x244>
 8004262:	2307      	movs	r3, #7
 8004264:	e00a      	b.n	800427c <HAL_GPIO_Init+0x244>
 8004266:	2305      	movs	r3, #5
 8004268:	e008      	b.n	800427c <HAL_GPIO_Init+0x244>
 800426a:	2304      	movs	r3, #4
 800426c:	e006      	b.n	800427c <HAL_GPIO_Init+0x244>
 800426e:	2303      	movs	r3, #3
 8004270:	e004      	b.n	800427c <HAL_GPIO_Init+0x244>
 8004272:	2302      	movs	r3, #2
 8004274:	e002      	b.n	800427c <HAL_GPIO_Init+0x244>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_GPIO_Init+0x244>
 800427a:	2300      	movs	r3, #0
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	f002 0203 	and.w	r2, r2, #3
 8004282:	0092      	lsls	r2, r2, #2
 8004284:	4093      	lsls	r3, r2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800428c:	4936      	ldr	r1, [pc, #216]	; (8004368 <HAL_GPIO_Init+0x330>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3302      	adds	r3, #2
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800429a:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <HAL_GPIO_Init+0x34c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042be:	4a31      	ldr	r2, [pc, #196]	; (8004384 <HAL_GPIO_Init+0x34c>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_GPIO_Init+0x34c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042e8:	4a26      	ldr	r2, [pc, #152]	; (8004384 <HAL_GPIO_Init+0x34c>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042ee:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_GPIO_Init+0x34c>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_GPIO_Init+0x34c>)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_GPIO_Init+0x34c>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800433c:	4a11      	ldr	r2, [pc, #68]	; (8004384 <HAL_GPIO_Init+0x34c>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3301      	adds	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	f47f ae78 	bne.w	8004048 <HAL_GPIO_Init+0x10>
  }
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40021000 	.word	0x40021000
 8004368:	40010000 	.word	0x40010000
 800436c:	48000400 	.word	0x48000400
 8004370:	48000800 	.word	0x48000800
 8004374:	48000c00 	.word	0x48000c00
 8004378:	48001000 	.word	0x48001000
 800437c:	48001400 	.word	0x48001400
 8004380:	48001800 	.word	0x48001800
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
 8004394:	4613      	mov	r3, r2
 8004396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004398:	787b      	ldrb	r3, [r7, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	43d9      	mvns	r1, r3
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	400b      	ands	r3, r1
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	619a      	str	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e081      	b.n	8004502 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fdd2 	bl	8001fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800443c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800444c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	e006      	b.n	8004474 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004472:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d104      	bne.n	8004486 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004484:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	ea42 0103 	orr.w	r1, r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b20      	cmp	r3, #32
 800451e:	d138      	bne.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800452a:	2302      	movs	r3, #2
 800452c:	e032      	b.n	8004594 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2224      	movs	r2, #36	; 0x24
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800455c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d139      	bne.n	800462a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e033      	b.n	800462c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <HAL_PWREx_GetVoltageRange+0x18>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40007000 	.word	0x40007000

08004654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004662:	d130      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004664:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800466c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004670:	d038      	beq.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800467c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2232      	movs	r2, #50	; 0x32
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	0c9b      	lsrs	r3, r3, #18
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004698:	e002      	b.n	80046a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b01      	subs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046a0:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ac:	d102      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f2      	bne.n	800469a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	d110      	bne.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e00f      	b.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d007      	beq.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046dc:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40007000 	.word	0x40007000
 80046f8:	20000000 	.word	0x20000000
 80046fc:	431bde83 	.word	0x431bde83

08004700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e3d4      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004712:	4ba1      	ldr	r3, [pc, #644]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800471c:	4b9e      	ldr	r3, [pc, #632]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80e4 	beq.w	80048fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_RCC_OscConfig+0x4a>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	f040 808b 	bne.w	8004858 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b01      	cmp	r3, #1
 8004746:	f040 8087 	bne.w	8004858 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800474a:	4b93      	ldr	r3, [pc, #588]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x62>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e3ac      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	4b8c      	ldr	r3, [pc, #560]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <HAL_RCC_OscConfig+0x7c>
 8004772:	4b89      	ldr	r3, [pc, #548]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477a:	e005      	b.n	8004788 <HAL_RCC_OscConfig+0x88>
 800477c:	4b86      	ldr	r3, [pc, #536]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 800477e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004788:	4293      	cmp	r3, r2
 800478a:	d223      	bcs.n	80047d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fd71 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e38d      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047a0:	4b7d      	ldr	r3, [pc, #500]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a7c      	ldr	r2, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047a6:	f043 0308 	orr.w	r3, r3, #8
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4977      	ldr	r1, [pc, #476]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	4972      	ldr	r1, [pc, #456]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
 80047d2:	e025      	b.n	8004820 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d4:	4b70      	ldr	r3, [pc, #448]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a6f      	ldr	r2, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047da:	f043 0308 	orr.w	r3, r3, #8
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4b6d      	ldr	r3, [pc, #436]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	496a      	ldr	r1, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f2:	4b69      	ldr	r3, [pc, #420]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	4965      	ldr	r1, [pc, #404]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd31 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e34d      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004820:	f000 fc36 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8004824:	4601      	mov	r1, r0
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	4a5a      	ldr	r2, [pc, #360]	; (800499c <HAL_RCC_OscConfig+0x29c>)
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa21 f303 	lsr.w	r3, r1, r3
 800483c:	4a58      	ldr	r2, [pc, #352]	; (80049a0 <HAL_RCC_OscConfig+0x2a0>)
 800483e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004840:	4b58      	ldr	r3, [pc, #352]	; (80049a4 <HAL_RCC_OscConfig+0x2a4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd fc83 	bl	8002150 <HAL_InitTick>
 800484a:	4603      	mov	r3, r0
 800484c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d052      	beq.n	80048fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	e331      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d032      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004860:	4b4d      	ldr	r3, [pc, #308]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a4c      	ldr	r2, [pc, #304]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800486c:	f7fd fdc0 	bl	80023f0 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004874:	f7fd fdbc 	bl	80023f0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e31a      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004886:	4b44      	ldr	r3, [pc, #272]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004892:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a40      	ldr	r2, [pc, #256]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004898:	f043 0308 	orr.w	r3, r3, #8
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	493b      	ldr	r1, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b0:	4b39      	ldr	r3, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	4936      	ldr	r1, [pc, #216]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
 80048c4:	e01a      	b.n	80048fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048c6:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a33      	ldr	r2, [pc, #204]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048d2:	f7fd fd8d 	bl	80023f0 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048da:	f7fd fd89 	bl	80023f0 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e2e7      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f0      	bne.n	80048da <HAL_RCC_OscConfig+0x1da>
 80048f8:	e000      	b.n	80048fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d074      	beq.n	80049f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b08      	cmp	r3, #8
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x21a>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d10e      	bne.n	8004932 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d10b      	bne.n	8004932 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d064      	beq.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d160      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e2c4      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x24a>
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a15      	ldr	r2, [pc, #84]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e01d      	b.n	8004986 <HAL_RCC_OscConfig+0x286>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004952:	d10c      	bne.n	800496e <HAL_RCC_OscConfig+0x26e>
 8004954:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 800495a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e00b      	b.n	8004986 <HAL_RCC_OscConfig+0x286>
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a06      	ldr	r2, [pc, #24]	; (8004998 <HAL_RCC_OscConfig+0x298>)
 8004980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fd fd2f 	bl	80023f0 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004994:	e011      	b.n	80049ba <HAL_RCC_OscConfig+0x2ba>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	0800de34 	.word	0x0800de34
 80049a0:	20000000 	.word	0x20000000
 80049a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fd fd22 	bl	80023f0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e280      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ba:	4baf      	ldr	r3, [pc, #700]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x2a8>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd fd12 	bl	80023f0 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fd fd0e 	bl	80023f0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e26c      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049e2:	4ba5      	ldr	r3, [pc, #660]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x2d0>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d060      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_OscConfig+0x310>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d119      	bne.n	8004a3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d116      	bne.n	8004a3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a10:	4b99      	ldr	r3, [pc, #612]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_OscConfig+0x328>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e249      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b93      	ldr	r3, [pc, #588]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	4990      	ldr	r1, [pc, #576]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a3c:	e040      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d023      	beq.n	8004a8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a46:	4b8c      	ldr	r3, [pc, #560]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a8b      	ldr	r2, [pc, #556]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd fccd 	bl	80023f0 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5a:	f7fd fcc9 	bl	80023f0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e227      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a6c:	4b82      	ldr	r3, [pc, #520]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a78:	4b7f      	ldr	r3, [pc, #508]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	497c      	ldr	r1, [pc, #496]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
 8004a8c:	e018      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a79      	ldr	r2, [pc, #484]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fd fca9 	bl	80023f0 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fd fca5 	bl	80023f0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e203      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ab4:	4b70      	ldr	r3, [pc, #448]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d03c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01c      	beq.n	8004b0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad4:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ada:	4a67      	ldr	r2, [pc, #412]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae4:	f7fd fc84 	bl	80023f0 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aec:	f7fd fc80 	bl	80023f0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1de      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004afe:	4b5e      	ldr	r3, [pc, #376]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ef      	beq.n	8004aec <HAL_RCC_OscConfig+0x3ec>
 8004b0c:	e01b      	b.n	8004b46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b0e:	4b5a      	ldr	r3, [pc, #360]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b14:	4a58      	ldr	r2, [pc, #352]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fd fc67 	bl	80023f0 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b26:	f7fd fc63 	bl	80023f0 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1c1      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b38:	4b4f      	ldr	r3, [pc, #316]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ef      	bne.n	8004b26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80a6 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b54:	2300      	movs	r3, #0
 8004b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b58:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b64:	4b44      	ldr	r3, [pc, #272]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	4a43      	ldr	r2, [pc, #268]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b70:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b80:	4b3e      	ldr	r3, [pc, #248]	; (8004c7c <HAL_RCC_OscConfig+0x57c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d118      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	; (8004c7c <HAL_RCC_OscConfig+0x57c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a3a      	ldr	r2, [pc, #232]	; (8004c7c <HAL_RCC_OscConfig+0x57c>)
 8004b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b98:	f7fd fc2a 	bl	80023f0 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba0:	f7fd fc26 	bl	80023f0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e184      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb2:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_RCC_OscConfig+0x57c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d108      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x4d8>
 8004bc6:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bd6:	e024      	b.n	8004c22 <HAL_RCC_OscConfig+0x522>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d110      	bne.n	8004c02 <HAL_RCC_OscConfig+0x502>
 8004be0:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004be8:	f043 0304 	orr.w	r3, r3, #4
 8004bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf0:	4b21      	ldr	r3, [pc, #132]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	4a20      	ldr	r2, [pc, #128]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c00:	e00f      	b.n	8004c22 <HAL_RCC_OscConfig+0x522>
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2a:	f7fd fbe1 	bl	80023f0 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fd fbdd 	bl	80023f0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e139      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_OscConfig+0x578>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ed      	beq.n	8004c32 <HAL_RCC_OscConfig+0x532>
 8004c56:	e01a      	b.n	8004c8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd fbca 	bl	80023f0 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c5e:	e00f      	b.n	8004c80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fd fbc6 	bl	80023f0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d906      	bls.n	8004c80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e122      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c80:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e8      	bne.n	8004c60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8e:	7ffb      	ldrb	r3, [r7, #31]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c94:	4b8b      	ldr	r3, [pc, #556]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c98:	4a8a      	ldr	r2, [pc, #552]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8108 	beq.w	8004eba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	f040 80d0 	bne.w	8004e54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cb4:	4b83      	ldr	r3, [pc, #524]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0203 	and.w	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d130      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d127      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d11f      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cf4:	2a07      	cmp	r2, #7
 8004cf6:	bf14      	ite	ne
 8004cf8:	2201      	movne	r2, #1
 8004cfa:	2200      	moveq	r2, #0
 8004cfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d113      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d109      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	3b01      	subs	r3, #1
 8004d24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d06e      	beq.n	8004e08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d069      	beq.n	8004e04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d30:	4b64      	ldr	r3, [pc, #400]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d3c:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0b7      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b5d      	ldr	r3, [pc, #372]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5c      	ldr	r2, [pc, #368]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d58:	f7fd fb4a 	bl	80023f0 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fb46 	bl	80023f0 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e0a4      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7e:	4b51      	ldr	r3, [pc, #324]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_RCC_OscConfig+0x7c8>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0112      	lsls	r2, r2, #4
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d98:	0212      	lsls	r2, r2, #8
 8004d9a:	4311      	orrs	r1, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004da0:	0852      	lsrs	r2, r2, #1
 8004da2:	3a01      	subs	r2, #1
 8004da4:	0552      	lsls	r2, r2, #21
 8004da6:	4311      	orrs	r1, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004dac:	0852      	lsrs	r2, r2, #1
 8004dae:	3a01      	subs	r2, #1
 8004db0:	0652      	lsls	r2, r2, #25
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004db8:	0912      	lsrs	r2, r2, #4
 8004dba:	0452      	lsls	r2, r2, #17
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	4941      	ldr	r1, [pc, #260]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dc4:	4b3f      	ldr	r3, [pc, #252]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a3e      	ldr	r2, [pc, #248]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd0:	4b3c      	ldr	r3, [pc, #240]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a3b      	ldr	r2, [pc, #236]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ddc:	f7fd fb08 	bl	80023f0 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fd fb04 	bl	80023f0 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e062      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df6:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e02:	e05a      	b.n	8004eba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e059      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e08:	4b2e      	ldr	r3, [pc, #184]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d152      	bne.n	8004eba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e14:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e2c:	f7fd fae0 	bl	80023f0 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd fadc 	bl	80023f0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e03a      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e46:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x734>
 8004e52:	e032      	b.n	8004eba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d02d      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004e66:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d105      	bne.n	8004e7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e72:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e78:	f023 0303 	bic.w	r3, r3, #3
 8004e7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e7e:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004e84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fd faaf 	bl	80023f0 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fd faab 	bl	80023f0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e009      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_RCC_OscConfig+0x7c4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <HAL_RCC_OscConfig+0x796>
 8004eb4:	e001      	b.n	8004eba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	f99d808c 	.word	0xf99d808c

08004ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0c8      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b66      	ldr	r3, [pc, #408]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d910      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b63      	ldr	r3, [pc, #396]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 0207 	bic.w	r2, r3, #7
 8004ef6:	4961      	ldr	r1, [pc, #388]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b5f      	ldr	r3, [pc, #380]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0b0      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d04c      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f24:	4b56      	ldr	r3, [pc, #344]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d121      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e09e      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f3c:	4b50      	ldr	r3, [pc, #320]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e092      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f54:	4b4a      	ldr	r3, [pc, #296]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e086      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f64:	4b46      	ldr	r3, [pc, #280]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e07e      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f74:	4b42      	ldr	r3, [pc, #264]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 0203 	bic.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	493f      	ldr	r1, [pc, #252]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fd fa33 	bl	80023f0 <HAL_GetTick>
 8004f8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8e:	f7fd fa2f 	bl	80023f0 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e066      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa4:	4b36      	ldr	r3, [pc, #216]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 020c 	and.w	r2, r3, #12
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d1eb      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	492c      	ldr	r1, [pc, #176]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b29      	ldr	r3, [pc, #164]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d210      	bcs.n	8005004 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b26      	ldr	r3, [pc, #152]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 0207 	bic.w	r2, r3, #7
 8004fea:	4924      	ldr	r1, [pc, #144]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b22      	ldr	r3, [pc, #136]	; (800507c <HAL_RCC_ClockConfig+0x1b0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e036      	b.n	8005072 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4918      	ldr	r1, [pc, #96]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4910      	ldr	r1, [pc, #64]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005042:	f000 f825 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8005046:	4601      	mov	r1, r0
 8005048:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCC_ClockConfig+0x1b4>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	4a0c      	ldr	r2, [pc, #48]	; (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	5cd3      	ldrb	r3, [r2, r3]
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	fa21 f303 	lsr.w	r3, r1, r3
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd f872 	bl	8002150 <HAL_InitTick>
 800506c:	4603      	mov	r3, r0
 800506e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005070:	7afb      	ldrb	r3, [r7, #11]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40022000 	.word	0x40022000
 8005080:	40021000 	.word	0x40021000
 8005084:	0800de34 	.word	0x0800de34
 8005088:	20000000 	.word	0x20000000
 800508c:	20000004 	.word	0x20000004

08005090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509e:	4b3d      	ldr	r3, [pc, #244]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a8:	4b3a      	ldr	r3, [pc, #232]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x34>
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d121      	bne.n	8005102 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d11e      	bne.n	8005102 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050c4:	4b33      	ldr	r3, [pc, #204]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050d0:	4b30      	ldr	r3, [pc, #192]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 80050d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e005      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050e0:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10d      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d102      	bne.n	800510e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005108:	4b24      	ldr	r3, [pc, #144]	; (800519c <HAL_RCC_GetSysClockFreq+0x10c>)
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e004      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d101      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005114:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005116:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d133      	bne.n	8005186 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800511e:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d002      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0xa4>
 800512e:	2b03      	cmp	r3, #3
 8005130:	d003      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0xaa>
 8005132:	e005      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005136:	617b      	str	r3, [r7, #20]
      break;
 8005138:	e005      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800513a:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800513c:	617b      	str	r3, [r7, #20]
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	617b      	str	r3, [r7, #20]
      break;
 8005144:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	3301      	adds	r3, #1
 8005152:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	fb02 f203 	mul.w	r2, r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_RCC_GetSysClockFreq+0x104>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	0e5b      	lsrs	r3, r3, #25
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	3301      	adds	r3, #1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005186:	69bb      	ldr	r3, [r7, #24]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3724      	adds	r7, #36	; 0x24
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40021000 	.word	0x40021000
 8005198:	0800de4c 	.word	0x0800de4c
 800519c:	00f42400 	.word	0x00f42400
 80051a0:	007a1200 	.word	0x007a1200

080051a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000000 	.word	0x20000000

080051bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051c0:	f7ff fff0 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051c4:	4601      	mov	r1, r0
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051d2:	5cd3      	ldrb	r3, [r2, r3]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40021000 	.word	0x40021000
 80051e4:	0800de44 	.word	0x0800de44

080051e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051ec:	f7ff ffda 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80051f0:	4601      	mov	r1, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	0adb      	lsrs	r3, r3, #11
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4a04      	ldr	r2, [pc, #16]	; (8005210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40021000 	.word	0x40021000
 8005210:	0800de44 	.word	0x0800de44

08005214 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	220f      	movs	r2, #15
 8005222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0203 	and.w	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005248:	4b09      	ldr	r3, [pc, #36]	; (8005270 <HAL_RCC_GetClockConfig+0x5c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	08db      	lsrs	r3, r3, #3
 800524e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <HAL_RCC_GetClockConfig+0x60>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0207 	and.w	r2, r3, #7
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	601a      	str	r2, [r3, #0]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	40022000 	.word	0x40022000

08005278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005284:	4b2a      	ldr	r3, [pc, #168]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005290:	f7ff f9d2 	bl	8004638 <HAL_PWREx_GetVoltageRange>
 8005294:	6178      	str	r0, [r7, #20]
 8005296:	e014      	b.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	4a24      	ldr	r2, [pc, #144]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6593      	str	r3, [r2, #88]	; 0x58
 80052a4:	4b22      	ldr	r3, [pc, #136]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052b0:	f7ff f9c2 	bl	8004638 <HAL_PWREx_GetVoltageRange>
 80052b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052b6:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c8:	d10b      	bne.n	80052e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d919      	bls.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2ba0      	cmp	r3, #160	; 0xa0
 80052d4:	d902      	bls.n	80052dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052d6:	2302      	movs	r3, #2
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e013      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052dc:	2301      	movs	r3, #1
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	e010      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d902      	bls.n	80052ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052e8:	2303      	movs	r3, #3
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	e00a      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d102      	bne.n	80052fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052f4:	2302      	movs	r3, #2
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	e004      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b70      	cmp	r3, #112	; 0x70
 80052fe:	d101      	bne.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005300:	2301      	movs	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 0207 	bic.w	r2, r3, #7
 800530c:	4909      	ldr	r1, [pc, #36]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	429a      	cmp	r2, r3
 8005320:	d001      	beq.n	8005326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000
 8005334:	40022000 	.word	0x40022000

08005338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005340:	2300      	movs	r3, #0
 8005342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005344:	2300      	movs	r3, #0
 8005346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005350:	2b00      	cmp	r3, #0
 8005352:	d03f      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800535c:	d01c      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d802      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005368:	e01f      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 800536a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800536e:	d003      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005374:	d01c      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005376:	e018      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005378:	4b85      	ldr	r3, [pc, #532]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a84      	ldr	r2, [pc, #528]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800537e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005382:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005384:	e015      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fab9 	bl	8005904 <RCCEx_PLLSAI1_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005396:	e00c      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3320      	adds	r3, #32
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fba0 	bl	8005ae4 <RCCEx_PLLSAI2_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053a8:	e003      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	74fb      	strb	r3, [r7, #19]
      break;
 80053ae:	e000      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80053b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b8:	4b75      	ldr	r3, [pc, #468]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c6:	4972      	ldr	r1, [pc, #456]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053ce:	e001      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d03f      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053e8:	d01c      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80053ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053ee:	d802      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80053f4:	e01f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053fa:	d003      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80053fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005400:	d01c      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005402:	e018      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005404:	4b62      	ldr	r3, [pc, #392]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a61      	ldr	r2, [pc, #388]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800540a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005410:	e015      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fa73 	bl	8005904 <RCCEx_PLLSAI1_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005422:	e00c      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3320      	adds	r3, #32
 8005428:	2100      	movs	r1, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fb5a 	bl	8005ae4 <RCCEx_PLLSAI2_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005434:	e003      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	74fb      	strb	r3, [r7, #19]
      break;
 800543a:	e000      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800543c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005444:	4b52      	ldr	r3, [pc, #328]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005452:	494f      	ldr	r1, [pc, #316]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800545a:	e001      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80a0 	beq.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005472:	4b47      	ldr	r3, [pc, #284]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b41      	ldr	r3, [pc, #260]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	4a40      	ldr	r2, [pc, #256]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6593      	str	r3, [r2, #88]	; 0x58
 8005494:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a0:	2301      	movs	r3, #1
 80054a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054a4:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a3a      	ldr	r2, [pc, #232]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b0:	f7fc ff9e 	bl	80023f0 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054b6:	e009      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b8:	f7fc ff9a 	bl	80023f0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d902      	bls.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	74fb      	strb	r3, [r7, #19]
        break;
 80054ca:	e005      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054cc:	4b31      	ldr	r3, [pc, #196]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ef      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d15c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054de:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01f      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d019      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054fc:	4b24      	ldr	r3, [pc, #144]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005508:	4b21      	ldr	r3, [pc, #132]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	4a20      	ldr	r2, [pc, #128]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d016      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fc ff59 	bl	80023f0 <HAL_GetTick>
 800553e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005540:	e00b      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005542:	f7fc ff55 	bl	80023f0 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005550:	4293      	cmp	r3, r2
 8005552:	d902      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	74fb      	strb	r3, [r7, #19]
            break;
 8005558:	e006      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555a:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0ec      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10c      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557e:	4904      	ldr	r1, [pc, #16]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005586:	e009      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800559c:	7c7b      	ldrb	r3, [r7, #17]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d105      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a2:	4b9e      	ldr	r3, [pc, #632]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	4a9d      	ldr	r2, [pc, #628]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ba:	4b98      	ldr	r3, [pc, #608]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f023 0203 	bic.w	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	4994      	ldr	r1, [pc, #592]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055dc:	4b8f      	ldr	r3, [pc, #572]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f023 020c 	bic.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	498c      	ldr	r1, [pc, #560]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055fe:	4b87      	ldr	r3, [pc, #540]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	4983      	ldr	r1, [pc, #524]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005620:	4b7e      	ldr	r3, [pc, #504]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	497b      	ldr	r1, [pc, #492]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005642:	4b76      	ldr	r3, [pc, #472]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005650:	4972      	ldr	r1, [pc, #456]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005664:	4b6d      	ldr	r3, [pc, #436]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	496a      	ldr	r1, [pc, #424]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005686:	4b65      	ldr	r3, [pc, #404]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	4961      	ldr	r1, [pc, #388]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056a8:	4b5c      	ldr	r3, [pc, #368]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b6:	4959      	ldr	r1, [pc, #356]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ca:	4b54      	ldr	r3, [pc, #336]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d8:	4950      	ldr	r1, [pc, #320]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	4948      	ldr	r1, [pc, #288]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800570e:	4b43      	ldr	r3, [pc, #268]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	493f      	ldr	r1, [pc, #252]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d028      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800573e:	4937      	ldr	r1, [pc, #220]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574e:	d106      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	4b32      	ldr	r3, [pc, #200]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a31      	ldr	r2, [pc, #196]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575a:	60d3      	str	r3, [r2, #12]
 800575c:	e011      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005766:	d10c      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f8c8 	bl	8005904 <RCCEx_PLLSAI1_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d028      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800578e:	4b23      	ldr	r3, [pc, #140]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	491f      	ldr	r1, [pc, #124]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ac:	d106      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ae:	4b1b      	ldr	r3, [pc, #108]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	4a1a      	ldr	r2, [pc, #104]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057b8:	60d3      	str	r3, [r2, #12]
 80057ba:	e011      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3304      	adds	r3, #4
 80057ca:	2101      	movs	r1, #1
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f899 	bl	8005904 <RCCEx_PLLSAI1_Config>
 80057d2:	4603      	mov	r3, r0
 80057d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02b      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fa:	4908      	ldr	r1, [pc, #32]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800580a:	d109      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a02      	ldr	r2, [pc, #8]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005816:	60d3      	str	r3, [r2, #12]
 8005818:	e014      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2101      	movs	r1, #1
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f867 	bl	8005904 <RCCEx_PLLSAI1_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02f      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585e:	4928      	ldr	r1, [pc, #160]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800586a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800586e:	d10d      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	2102      	movs	r1, #2
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f844 	bl	8005904 <RCCEx_PLLSAI1_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d014      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	74bb      	strb	r3, [r7, #18]
 800588a:	e011      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005894:	d10c      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3320      	adds	r3, #32
 800589a:	2102      	movs	r1, #2
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f921 	bl	8005ae4 <RCCEx_PLLSAI2_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80058ac:	7cfb      	ldrb	r3, [r7, #19]
 80058ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ca:	490d      	ldr	r1, [pc, #52]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ee:	4904      	ldr	r1, [pc, #16]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000

08005904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005912:	4b73      	ldr	r3, [pc, #460]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d018      	beq.n	8005950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800591e:	4b70      	ldr	r3, [pc, #448]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0203 	and.w	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d10d      	bne.n	800594a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
       ||
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005936:	4b6a      	ldr	r3, [pc, #424]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
       ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d044      	beq.n	80059d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
 800594e:	e041      	b.n	80059d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d00c      	beq.n	8005972 <RCCEx_PLLSAI1_Config+0x6e>
 8005958:	2b03      	cmp	r3, #3
 800595a:	d013      	beq.n	8005984 <RCCEx_PLLSAI1_Config+0x80>
 800595c:	2b01      	cmp	r3, #1
 800595e:	d120      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005960:	4b5f      	ldr	r3, [pc, #380]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11d      	bne.n	80059a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005970:	e01a      	b.n	80059a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005972:	4b5b      	ldr	r3, [pc, #364]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597a:	2b00      	cmp	r3, #0
 800597c:	d116      	bne.n	80059ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005982:	e013      	b.n	80059ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005984:	4b56      	ldr	r3, [pc, #344]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10f      	bne.n	80059b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005990:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059a0:	e006      	b.n	80059b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
      break;
 80059a6:	e004      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059a8:	bf00      	nop
 80059aa:	e002      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059b8:	4b49      	ldr	r3, [pc, #292]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	430b      	orrs	r3, r1
 80059ce:	4944      	ldr	r1, [pc, #272]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d17d      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059da:	4b41      	ldr	r3, [pc, #260]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e6:	f7fc fd03 	bl	80023f0 <HAL_GetTick>
 80059ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059ec:	e009      	b.n	8005a02 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ee:	f7fc fcff 	bl	80023f0 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d902      	bls.n	8005a02 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	73fb      	strb	r3, [r7, #15]
        break;
 8005a00:	e005      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a02:	4b37      	ldr	r3, [pc, #220]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ef      	bne.n	80059ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d160      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d111      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6892      	ldr	r2, [r2, #8]
 8005a2a:	0211      	lsls	r1, r2, #8
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	0912      	lsrs	r2, r2, #4
 8005a32:	0452      	lsls	r2, r2, #17
 8005a34:	430a      	orrs	r2, r1
 8005a36:	492a      	ldr	r1, [pc, #168]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	610b      	str	r3, [r1, #16]
 8005a3c:	e027      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d112      	bne.n	8005a6a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a44:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6892      	ldr	r2, [r2, #8]
 8005a54:	0211      	lsls	r1, r2, #8
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6912      	ldr	r2, [r2, #16]
 8005a5a:	0852      	lsrs	r2, r2, #1
 8005a5c:	3a01      	subs	r2, #1
 8005a5e:	0552      	lsls	r2, r2, #21
 8005a60:	430a      	orrs	r2, r1
 8005a62:	491f      	ldr	r1, [pc, #124]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	610b      	str	r3, [r1, #16]
 8005a68:	e011      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6892      	ldr	r2, [r2, #8]
 8005a7a:	0211      	lsls	r1, r2, #8
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6952      	ldr	r2, [r2, #20]
 8005a80:	0852      	lsrs	r2, r2, #1
 8005a82:	3a01      	subs	r2, #1
 8005a84:	0652      	lsls	r2, r2, #25
 8005a86:	430a      	orrs	r2, r1
 8005a88:	4915      	ldr	r1, [pc, #84]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fc fca9 	bl	80023f0 <HAL_GetTick>
 8005a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aa0:	e009      	b.n	8005ab6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aa2:	f7fc fca5 	bl	80023f0 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d902      	bls.n	8005ab6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ab4:	e005      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ef      	beq.n	8005aa2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	4903      	ldr	r1, [pc, #12]	; (8005ae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005af2:	4b68      	ldr	r3, [pc, #416]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d018      	beq.n	8005b30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005afe:	4b65      	ldr	r3, [pc, #404]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0203 	and.w	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d10d      	bne.n	8005b2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
       ||
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b16:	4b5f      	ldr	r3, [pc, #380]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
       ||
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d044      	beq.n	8005bb4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
 8005b2e:	e041      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d00c      	beq.n	8005b52 <RCCEx_PLLSAI2_Config+0x6e>
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d013      	beq.n	8005b64 <RCCEx_PLLSAI2_Config+0x80>
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d120      	bne.n	8005b82 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b40:	4b54      	ldr	r3, [pc, #336]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d11d      	bne.n	8005b88 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b50:	e01a      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b52:	4b50      	ldr	r3, [pc, #320]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d116      	bne.n	8005b8c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b62:	e013      	b.n	8005b8c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b64:	4b4b      	ldr	r3, [pc, #300]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10f      	bne.n	8005b90 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b70:	4b48      	ldr	r3, [pc, #288]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b80:	e006      	b.n	8005b90 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73fb      	strb	r3, [r7, #15]
      break;
 8005b86:	e004      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b88:	bf00      	nop
 8005b8a:	e002      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b8c:	bf00      	nop
 8005b8e:	e000      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b90:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b98:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6819      	ldr	r1, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	430b      	orrs	r3, r1
 8005bae:	4939      	ldr	r1, [pc, #228]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d167      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bba:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a35      	ldr	r2, [pc, #212]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc6:	f7fc fc13 	bl	80023f0 <HAL_GetTick>
 8005bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bcc:	e009      	b.n	8005be2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bce:	f7fc fc0f 	bl	80023f0 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d902      	bls.n	8005be2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	73fb      	strb	r3, [r7, #15]
        break;
 8005be0:	e005      	b.n	8005bee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005be2:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ef      	bne.n	8005bce <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d14a      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d111      	bne.n	8005c1e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bfa:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6892      	ldr	r2, [r2, #8]
 8005c0a:	0211      	lsls	r1, r2, #8
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	68d2      	ldr	r2, [r2, #12]
 8005c10:	0912      	lsrs	r2, r2, #4
 8005c12:	0452      	lsls	r2, r2, #17
 8005c14:	430a      	orrs	r2, r1
 8005c16:	491f      	ldr	r1, [pc, #124]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	614b      	str	r3, [r1, #20]
 8005c1c:	e011      	b.n	8005c42 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	0211      	lsls	r1, r2, #8
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6912      	ldr	r2, [r2, #16]
 8005c34:	0852      	lsrs	r2, r2, #1
 8005c36:	3a01      	subs	r2, #1
 8005c38:	0652      	lsls	r2, r2, #25
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	4915      	ldr	r1, [pc, #84]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4e:	f7fc fbcf 	bl	80023f0 <HAL_GetTick>
 8005c52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c54:	e009      	b.n	8005c6a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c56:	f7fc fbcb 	bl	80023f0 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d902      	bls.n	8005c6a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	73fb      	strb	r3, [r7, #15]
          break;
 8005c68:	e005      	b.n	8005c76 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0ef      	beq.n	8005c56 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	4903      	ldr	r1, [pc, #12]	; (8005c94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40021000 	.word	0x40021000

08005c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e095      	b.n	8005dd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d108      	bne.n	8005cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cba:	d009      	beq.n	8005cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	61da      	str	r2, [r3, #28]
 8005cc2:	e005      	b.n	8005cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc f9aa 	bl	8002044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d10:	d902      	bls.n	8005d18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e002      	b.n	8005d1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d26:	d007      	beq.n	8005d38 <HAL_SPI_Init+0xa0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d30:	d002      	beq.n	8005d38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	ea42 0103 	orr.w	r1, r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	0c1b      	lsrs	r3, r3, #16
 8005d94:	f003 0204 	and.w	r2, r3, #4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005db4:	ea42 0103 	orr.w	r1, r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b088      	sub	sp, #32
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_SPI_Transmit+0x22>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e158      	b.n	80060b2 <HAL_SPI_Transmit+0x2d4>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e08:	f7fc faf2 	bl	80023f0 <HAL_GetTick>
 8005e0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e22:	e13d      	b.n	80060a0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Transmit+0x52>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e34:	e134      	b.n	80060a0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e80:	d10f      	bne.n	8005ea2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d007      	beq.n	8005ec0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ec8:	d94b      	bls.n	8005f62 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_Transmit+0xfa>
 8005ed2:	8afb      	ldrh	r3, [r7, #22]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d13e      	bne.n	8005f56 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005efc:	e02b      	b.n	8005f56 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d112      	bne.n	8005f32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	881a      	ldrh	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f30:	e011      	b.n	8005f56 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f32:	f7fc fa5d 	bl	80023f0 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d803      	bhi.n	8005f4a <HAL_SPI_Transmit+0x16c>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d102      	bne.n	8005f50 <HAL_SPI_Transmit+0x172>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f54:	e0a4      	b.n	80060a0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ce      	bne.n	8005efe <HAL_SPI_Transmit+0x120>
 8005f60:	e07c      	b.n	800605c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_SPI_Transmit+0x192>
 8005f6a:	8afb      	ldrh	r3, [r7, #22]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d170      	bne.n	8006052 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d912      	bls.n	8005fa0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b02      	subs	r3, #2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f9e:	e058      	b.n	8006052 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	7812      	ldrb	r2, [r2, #0]
 8005fac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fc6:	e044      	b.n	8006052 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d12b      	bne.n	800602e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d912      	bls.n	8006006 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	881a      	ldrh	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	1c9a      	adds	r2, r3, #2
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b02      	subs	r3, #2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006004:	e025      	b.n	8006052 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	7812      	ldrb	r2, [r2, #0]
 8006012:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800602c:	e011      	b.n	8006052 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800602e:	f7fc f9df 	bl	80023f0 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d803      	bhi.n	8006046 <HAL_SPI_Transmit+0x268>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d102      	bne.n	800604c <HAL_SPI_Transmit+0x26e>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006050:	e026      	b.n	80060a0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1b5      	bne.n	8005fc8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fb53 	bl	800670c <SPI_EndRxTxTransaction>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e000      	b.n	80060a0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800609e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b08a      	sub	sp, #40	; 0x28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060c8:	2301      	movs	r3, #1
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x26>
 80060dc:	2302      	movs	r3, #2
 80060de:	e1fb      	b.n	80064d8 <HAL_SPI_TransmitReceive+0x41e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060e8:	f7fc f982 	bl	80023f0 <HAL_GetTick>
 80060ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060fc:	887b      	ldrh	r3, [r7, #2]
 80060fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006100:	887b      	ldrh	r3, [r7, #2]
 8006102:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006104:	7efb      	ldrb	r3, [r7, #27]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d00e      	beq.n	8006128 <HAL_SPI_TransmitReceive+0x6e>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006110:	d106      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x66>
 800611a:	7efb      	ldrb	r3, [r7, #27]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d003      	beq.n	8006128 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006120:	2302      	movs	r3, #2
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006126:	e1cd      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_SPI_TransmitReceive+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <HAL_SPI_TransmitReceive+0x80>
 8006134:	887b      	ldrh	r3, [r7, #2]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006140:	e1c0      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b04      	cmp	r3, #4
 800614c:	d003      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2205      	movs	r2, #5
 8006152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	887a      	ldrh	r2, [r7, #2]
 8006166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	887a      	ldrh	r2, [r7, #2]
 800616e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	887a      	ldrh	r2, [r7, #2]
 800617c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	887a      	ldrh	r2, [r7, #2]
 8006182:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006198:	d802      	bhi.n	80061a0 <HAL_SPI_TransmitReceive+0xe6>
 800619a:	8a3b      	ldrh	r3, [r7, #16]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d908      	bls.n	80061b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	e007      	b.n	80061c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d007      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e8:	d97c      	bls.n	80062e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x13e>
 80061f2:	8a7b      	ldrh	r3, [r7, #18]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d169      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	881a      	ldrh	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	1c9a      	adds	r2, r3, #2
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800621c:	e056      	b.n	80062cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b02      	cmp	r3, #2
 800622a:	d11b      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x1aa>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d016      	beq.n	8006264 <HAL_SPI_TransmitReceive+0x1aa>
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	2b01      	cmp	r3, #1
 800623a:	d113      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	881a      	ldrh	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	1c9a      	adds	r2, r3, #2
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006256:	b29b      	uxth	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b01      	cmp	r3, #1
 8006270:	d11c      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x1f2>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d016      	beq.n	80062ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	b292      	uxth	r2, r2
 800628a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062a8:	2301      	movs	r3, #1
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062ac:	f7fc f8a0 	bl	80023f0 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d807      	bhi.n	80062cc <HAL_SPI_TransmitReceive+0x212>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d003      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062ca:	e0fb      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1a3      	bne.n	800621e <HAL_SPI_TransmitReceive+0x164>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d19d      	bne.n	800621e <HAL_SPI_TransmitReceive+0x164>
 80062e2:	e0df      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x23a>
 80062ec:	8a7b      	ldrh	r3, [r7, #18]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	f040 80cb 	bne.w	800648a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d912      	bls.n	8006324 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	881a      	ldrh	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b02      	subs	r3, #2
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006322:	e0b2      	b.n	800648a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	7812      	ldrb	r2, [r2, #0]
 8006330:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800634a:	e09e      	b.n	800648a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b02      	cmp	r3, #2
 8006358:	d134      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x30a>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02f      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x30a>
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2b01      	cmp	r3, #1
 8006368:	d12c      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d912      	bls.n	800639a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	881a      	ldrh	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	1c9a      	adds	r2, r3, #2
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b02      	subs	r3, #2
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006398:	e012      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d148      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x3aa>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d042      	beq.n	8006464 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d923      	bls.n	8006432 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	b292      	uxth	r2, r2
 80063f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b02      	subs	r3, #2
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d81f      	bhi.n	8006460 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800642e:	605a      	str	r2, [r3, #4]
 8006430:	e016      	b.n	8006460 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f103 020c 	add.w	r2, r3, #12
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006454:	b29b      	uxth	r3, r3
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006460:	2301      	movs	r3, #1
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006464:	f7fb ffc4 	bl	80023f0 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006470:	429a      	cmp	r2, r3
 8006472:	d803      	bhi.n	800647c <HAL_SPI_TransmitReceive+0x3c2>
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d102      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x3c8>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006488:	e01c      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	f47f af5b 	bne.w	800634c <HAL_SPI_TransmitReceive+0x292>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f47f af54 	bne.w	800634c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f92f 	bl	800670c <SPI_EndRxTxTransaction>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	661a      	str	r2, [r3, #96]	; 0x60
 80064c0:	e000      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80064c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	; 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064f0:	f7fb ff7e 	bl	80023f0 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4413      	add	r3, r2
 80064fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006500:	f7fb ff76 	bl	80023f0 <HAL_GetTick>
 8006504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006506:	4b39      	ldr	r3, [pc, #228]	; (80065ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	015b      	lsls	r3, r3, #5
 800650c:	0d1b      	lsrs	r3, r3, #20
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	fb02 f303 	mul.w	r3, r2, r3
 8006514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006516:	e054      	b.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d050      	beq.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006520:	f7fb ff66 	bl	80023f0 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	429a      	cmp	r2, r3
 800652e:	d902      	bls.n	8006536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d13d      	bne.n	80065b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800654e:	d111      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	d004      	beq.n	8006564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006562:	d107      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657c:	d10f      	bne.n	800659e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800659c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e017      	b.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3b01      	subs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d19b      	bne.n	8006518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000000 	.word	0x20000000

080065f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065fe:	f7fb fef7 	bl	80023f0 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	4413      	add	r3, r2
 800660c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800660e:	f7fb feef 	bl	80023f0 <HAL_GetTick>
 8006612:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006614:	4b3c      	ldr	r3, [pc, #240]	; (8006708 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	00da      	lsls	r2, r3, #3
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	0d1b      	lsrs	r3, r3, #20
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800662c:	e05f      	b.n	80066ee <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006634:	d106      	bne.n	8006644 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d050      	beq.n	80066ee <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800664c:	f7fb fed0 	bl	80023f0 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	429a      	cmp	r2, r3
 800665a:	d902      	bls.n	8006662 <SPI_WaitFifoStateUntilTimeout+0x72>
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d13d      	bne.n	80066de <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800667a:	d111      	bne.n	80066a0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006684:	d004      	beq.n	8006690 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668e:	d107      	bne.n	80066a0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a8:	d10f      	bne.n	80066ca <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e010      	b.n	8006700 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4013      	ands	r3, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d197      	bne.n	800662e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000000 	.word	0x20000000

0800670c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff ff63 	bl	80065f0 <SPI_WaitFifoStateUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e027      	b.n	8006790 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff fec8 	bl	80064e0 <SPI_WaitFlagStateUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675a:	f043 0220 	orr.w	r2, r3, #32
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e014      	b.n	8006790 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2200      	movs	r2, #0
 800676e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff ff3c 	bl	80065f0 <SPI_WaitFifoStateUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006782:	f043 0220 	orr.w	r2, r3, #32
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e000      	b.n	8006790 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e049      	b.n	800683e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f841 	bl	8006846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f000 f9f8 	bl	8006bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d001      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e04f      	b.n	8006914 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a23      	ldr	r2, [pc, #140]	; (8006920 <HAL_TIM_Base_Start_IT+0xc4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0x76>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689e:	d018      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0x76>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1f      	ldr	r2, [pc, #124]	; (8006924 <HAL_TIM_Base_Start_IT+0xc8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0x76>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <HAL_TIM_Base_Start_IT+0xcc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0x76>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1c      	ldr	r2, [pc, #112]	; (800692c <HAL_TIM_Base_Start_IT+0xd0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0x76>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1b      	ldr	r2, [pc, #108]	; (8006930 <HAL_TIM_Base_Start_IT+0xd4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0x76>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a19      	ldr	r2, [pc, #100]	; (8006934 <HAL_TIM_Base_Start_IT+0xd8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d115      	bne.n	80068fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	4b17      	ldr	r3, [pc, #92]	; (8006938 <HAL_TIM_Base_Start_IT+0xdc>)
 80068da:	4013      	ands	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b06      	cmp	r3, #6
 80068e2:	d015      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0xb4>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ea:	d011      	beq.n	8006910 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fc:	e008      	b.n	8006910 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e000      	b.n	8006912 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006910:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	40012c00 	.word	0x40012c00
 8006924:	40000400 	.word	0x40000400
 8006928:	40000800 	.word	0x40000800
 800692c:	40000c00 	.word	0x40000c00
 8006930:	40013400 	.word	0x40013400
 8006934:	40014000 	.word	0x40014000
 8006938:	00010007 	.word	0x00010007

0800693c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b02      	cmp	r3, #2
 8006950:	d122      	bne.n	8006998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b02      	cmp	r3, #2
 800695e:	d11b      	bne.n	8006998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0202 	mvn.w	r2, #2
 8006968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f905 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 8006984:	e005      	b.n	8006992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8f7 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f908 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d122      	bne.n	80069ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d11b      	bne.n	80069ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0204 	mvn.w	r2, #4
 80069bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8db 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 80069d8:	e005      	b.n	80069e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8cd 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8de 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d122      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d11b      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0208 	mvn.w	r2, #8
 8006a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2204      	movs	r2, #4
 8006a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8b1 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f8a3 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8b4 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d122      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d11b      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0210 	mvn.w	r2, #16
 8006a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f887 	bl	8006b8e <HAL_TIM_IC_CaptureCallback>
 8006a80:	e005      	b.n	8006a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f879 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f88a 	bl	8006ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d10e      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d107      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0201 	mvn.w	r2, #1
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fb f9b2 	bl	8001e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aca:	2b80      	cmp	r3, #128	; 0x80
 8006acc:	d10e      	bne.n	8006aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d107      	bne.n	8006aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f914 	bl	8006d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afa:	d10e      	bne.n	8006b1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	d107      	bne.n	8006b1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f907 	bl	8006d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	d10e      	bne.n	8006b46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d107      	bne.n	8006b46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f838 	bl	8006bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d10e      	bne.n	8006b72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d107      	bne.n	8006b72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f06f 0220 	mvn.w	r2, #32
 8006b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8c7 	bl	8006d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b72:	bf00      	nop
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a40      	ldr	r2, [pc, #256]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d00f      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a3d      	ldr	r2, [pc, #244]	; (8006ce4 <TIM_Base_SetConfig+0x118>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a3c      	ldr	r2, [pc, #240]	; (8006ce8 <TIM_Base_SetConfig+0x11c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a3b      	ldr	r2, [pc, #236]	; (8006cec <TIM_Base_SetConfig+0x120>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a3a      	ldr	r2, [pc, #232]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01f      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2c:	d01b      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2c      	ldr	r2, [pc, #176]	; (8006ce4 <TIM_Base_SetConfig+0x118>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d017      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <TIM_Base_SetConfig+0x11c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <TIM_Base_SetConfig+0x120>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00f      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a28      	ldr	r2, [pc, #160]	; (8006cf4 <TIM_Base_SetConfig+0x128>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a27      	ldr	r2, [pc, #156]	; (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_Base_SetConfig+0x9a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a26      	ldr	r2, [pc, #152]	; (8006cfc <TIM_Base_SetConfig+0x130>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d108      	bne.n	8006c78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a10      	ldr	r2, [pc, #64]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00f      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00b      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <TIM_Base_SetConfig+0x128>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d007      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a10      	ldr	r2, [pc, #64]	; (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a0f      	ldr	r2, [pc, #60]	; (8006cfc <TIM_Base_SetConfig+0x130>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d103      	bne.n	8006ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	615a      	str	r2, [r3, #20]
}
 8006cd2:	bf00      	nop
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40012c00 	.word	0x40012c00
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40013400 	.word	0x40013400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800

08006d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e040      	b.n	8006dd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fb f9b4 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2224      	movs	r2, #36	; 0x24
 8006d68:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0201 	bic.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8c0 	bl	8006f00 <UART_SetConfig>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e022      	b.n	8006dd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fb3e 	bl	8007414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fbc5 	bl	8007558 <UART_CheckIdleState>
 8006dce:	4603      	mov	r3, r0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	f040 8081 	bne.w	8006ef4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_UART_Transmit+0x26>
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e079      	b.n	8006ef6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_UART_Transmit+0x38>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e072      	b.n	8006ef6 <HAL_UART_Transmit+0x11e>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2221      	movs	r2, #33	; 0x21
 8006e22:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006e24:	f7fb fae4 	bl	80023f0 <HAL_GetTick>
 8006e28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	88fa      	ldrh	r2, [r7, #6]
 8006e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	d108      	bne.n	8006e56 <HAL_UART_Transmit+0x7e>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	e003      	b.n	8006e5e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006e66:	e02d      	b.n	8006ec4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2180      	movs	r1, #128	; 0x80
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fbb5 	bl	80075e2 <UART_WaitOnFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e039      	b.n	8006ef6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10b      	bne.n	8006ea0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	881a      	ldrh	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e94:	b292      	uxth	r2, r2
 8006e96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e008      	b.n	8006eb2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	b292      	uxth	r2, r2
 8006eaa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1cb      	bne.n	8006e68 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2140      	movs	r1, #64	; 0x40
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 fb81 	bl	80075e2 <UART_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e005      	b.n	8006ef6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e000      	b.n	8006ef6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006ef4:	2302      	movs	r3, #2
  }
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3720      	adds	r7, #32
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006f04:	b088      	sub	sp, #32
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	4bac      	ldr	r3, [pc, #688]	; (80071e0 <UART_SetConfig+0x2e0>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	69f9      	ldr	r1, [r7, #28]
 8006f36:	430b      	orrs	r3, r1
 8006f38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4aa2      	ldr	r2, [pc, #648]	; (80071e4 <UART_SetConfig+0x2e4>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d004      	beq.n	8006f6a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a99      	ldr	r2, [pc, #612]	; (80071e8 <UART_SetConfig+0x2e8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d121      	bne.n	8006fcc <UART_SetConfig+0xcc>
 8006f88:	4b98      	ldr	r3, [pc, #608]	; (80071ec <UART_SetConfig+0x2ec>)
 8006f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d816      	bhi.n	8006fc4 <UART_SetConfig+0xc4>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0x9c>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fb9 	.word	0x08006fb9
 8006fa4:	08006fb3 	.word	0x08006fb3
 8006fa8:	08006fbf 	.word	0x08006fbf
 8006fac:	2301      	movs	r3, #1
 8006fae:	76fb      	strb	r3, [r7, #27]
 8006fb0:	e0e8      	b.n	8007184 <UART_SetConfig+0x284>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	76fb      	strb	r3, [r7, #27]
 8006fb6:	e0e5      	b.n	8007184 <UART_SetConfig+0x284>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	76fb      	strb	r3, [r7, #27]
 8006fbc:	e0e2      	b.n	8007184 <UART_SetConfig+0x284>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	76fb      	strb	r3, [r7, #27]
 8006fc2:	e0df      	b.n	8007184 <UART_SetConfig+0x284>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	76fb      	strb	r3, [r7, #27]
 8006fc8:	bf00      	nop
 8006fca:	e0db      	b.n	8007184 <UART_SetConfig+0x284>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a87      	ldr	r2, [pc, #540]	; (80071f0 <UART_SetConfig+0x2f0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d134      	bne.n	8007040 <UART_SetConfig+0x140>
 8006fd6:	4b85      	ldr	r3, [pc, #532]	; (80071ec <UART_SetConfig+0x2ec>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f003 030c 	and.w	r3, r3, #12
 8006fe0:	2b0c      	cmp	r3, #12
 8006fe2:	d829      	bhi.n	8007038 <UART_SetConfig+0x138>
 8006fe4:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <UART_SetConfig+0xec>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08007021 	.word	0x08007021
 8006ff0:	08007039 	.word	0x08007039
 8006ff4:	08007039 	.word	0x08007039
 8006ff8:	08007039 	.word	0x08007039
 8006ffc:	0800702d 	.word	0x0800702d
 8007000:	08007039 	.word	0x08007039
 8007004:	08007039 	.word	0x08007039
 8007008:	08007039 	.word	0x08007039
 800700c:	08007027 	.word	0x08007027
 8007010:	08007039 	.word	0x08007039
 8007014:	08007039 	.word	0x08007039
 8007018:	08007039 	.word	0x08007039
 800701c:	08007033 	.word	0x08007033
 8007020:	2300      	movs	r3, #0
 8007022:	76fb      	strb	r3, [r7, #27]
 8007024:	e0ae      	b.n	8007184 <UART_SetConfig+0x284>
 8007026:	2302      	movs	r3, #2
 8007028:	76fb      	strb	r3, [r7, #27]
 800702a:	e0ab      	b.n	8007184 <UART_SetConfig+0x284>
 800702c:	2304      	movs	r3, #4
 800702e:	76fb      	strb	r3, [r7, #27]
 8007030:	e0a8      	b.n	8007184 <UART_SetConfig+0x284>
 8007032:	2308      	movs	r3, #8
 8007034:	76fb      	strb	r3, [r7, #27]
 8007036:	e0a5      	b.n	8007184 <UART_SetConfig+0x284>
 8007038:	2310      	movs	r3, #16
 800703a:	76fb      	strb	r3, [r7, #27]
 800703c:	bf00      	nop
 800703e:	e0a1      	b.n	8007184 <UART_SetConfig+0x284>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6b      	ldr	r2, [pc, #428]	; (80071f4 <UART_SetConfig+0x2f4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d120      	bne.n	800708c <UART_SetConfig+0x18c>
 800704a:	4b68      	ldr	r3, [pc, #416]	; (80071ec <UART_SetConfig+0x2ec>)
 800704c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007050:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007054:	2b10      	cmp	r3, #16
 8007056:	d00f      	beq.n	8007078 <UART_SetConfig+0x178>
 8007058:	2b10      	cmp	r3, #16
 800705a:	d802      	bhi.n	8007062 <UART_SetConfig+0x162>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <UART_SetConfig+0x16c>
 8007060:	e010      	b.n	8007084 <UART_SetConfig+0x184>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d005      	beq.n	8007072 <UART_SetConfig+0x172>
 8007066:	2b30      	cmp	r3, #48	; 0x30
 8007068:	d009      	beq.n	800707e <UART_SetConfig+0x17e>
 800706a:	e00b      	b.n	8007084 <UART_SetConfig+0x184>
 800706c:	2300      	movs	r3, #0
 800706e:	76fb      	strb	r3, [r7, #27]
 8007070:	e088      	b.n	8007184 <UART_SetConfig+0x284>
 8007072:	2302      	movs	r3, #2
 8007074:	76fb      	strb	r3, [r7, #27]
 8007076:	e085      	b.n	8007184 <UART_SetConfig+0x284>
 8007078:	2304      	movs	r3, #4
 800707a:	76fb      	strb	r3, [r7, #27]
 800707c:	e082      	b.n	8007184 <UART_SetConfig+0x284>
 800707e:	2308      	movs	r3, #8
 8007080:	76fb      	strb	r3, [r7, #27]
 8007082:	e07f      	b.n	8007184 <UART_SetConfig+0x284>
 8007084:	2310      	movs	r3, #16
 8007086:	76fb      	strb	r3, [r7, #27]
 8007088:	bf00      	nop
 800708a:	e07b      	b.n	8007184 <UART_SetConfig+0x284>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a59      	ldr	r2, [pc, #356]	; (80071f8 <UART_SetConfig+0x2f8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d120      	bne.n	80070d8 <UART_SetConfig+0x1d8>
 8007096:	4b55      	ldr	r3, [pc, #340]	; (80071ec <UART_SetConfig+0x2ec>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d00f      	beq.n	80070c4 <UART_SetConfig+0x1c4>
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d802      	bhi.n	80070ae <UART_SetConfig+0x1ae>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <UART_SetConfig+0x1b8>
 80070ac:	e010      	b.n	80070d0 <UART_SetConfig+0x1d0>
 80070ae:	2b80      	cmp	r3, #128	; 0x80
 80070b0:	d005      	beq.n	80070be <UART_SetConfig+0x1be>
 80070b2:	2bc0      	cmp	r3, #192	; 0xc0
 80070b4:	d009      	beq.n	80070ca <UART_SetConfig+0x1ca>
 80070b6:	e00b      	b.n	80070d0 <UART_SetConfig+0x1d0>
 80070b8:	2300      	movs	r3, #0
 80070ba:	76fb      	strb	r3, [r7, #27]
 80070bc:	e062      	b.n	8007184 <UART_SetConfig+0x284>
 80070be:	2302      	movs	r3, #2
 80070c0:	76fb      	strb	r3, [r7, #27]
 80070c2:	e05f      	b.n	8007184 <UART_SetConfig+0x284>
 80070c4:	2304      	movs	r3, #4
 80070c6:	76fb      	strb	r3, [r7, #27]
 80070c8:	e05c      	b.n	8007184 <UART_SetConfig+0x284>
 80070ca:	2308      	movs	r3, #8
 80070cc:	76fb      	strb	r3, [r7, #27]
 80070ce:	e059      	b.n	8007184 <UART_SetConfig+0x284>
 80070d0:	2310      	movs	r3, #16
 80070d2:	76fb      	strb	r3, [r7, #27]
 80070d4:	bf00      	nop
 80070d6:	e055      	b.n	8007184 <UART_SetConfig+0x284>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a47      	ldr	r2, [pc, #284]	; (80071fc <UART_SetConfig+0x2fc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d124      	bne.n	800712c <UART_SetConfig+0x22c>
 80070e2:	4b42      	ldr	r3, [pc, #264]	; (80071ec <UART_SetConfig+0x2ec>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f0:	d012      	beq.n	8007118 <UART_SetConfig+0x218>
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f6:	d802      	bhi.n	80070fe <UART_SetConfig+0x1fe>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <UART_SetConfig+0x20c>
 80070fc:	e012      	b.n	8007124 <UART_SetConfig+0x224>
 80070fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007102:	d006      	beq.n	8007112 <UART_SetConfig+0x212>
 8007104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007108:	d009      	beq.n	800711e <UART_SetConfig+0x21e>
 800710a:	e00b      	b.n	8007124 <UART_SetConfig+0x224>
 800710c:	2300      	movs	r3, #0
 800710e:	76fb      	strb	r3, [r7, #27]
 8007110:	e038      	b.n	8007184 <UART_SetConfig+0x284>
 8007112:	2302      	movs	r3, #2
 8007114:	76fb      	strb	r3, [r7, #27]
 8007116:	e035      	b.n	8007184 <UART_SetConfig+0x284>
 8007118:	2304      	movs	r3, #4
 800711a:	76fb      	strb	r3, [r7, #27]
 800711c:	e032      	b.n	8007184 <UART_SetConfig+0x284>
 800711e:	2308      	movs	r3, #8
 8007120:	76fb      	strb	r3, [r7, #27]
 8007122:	e02f      	b.n	8007184 <UART_SetConfig+0x284>
 8007124:	2310      	movs	r3, #16
 8007126:	76fb      	strb	r3, [r7, #27]
 8007128:	bf00      	nop
 800712a:	e02b      	b.n	8007184 <UART_SetConfig+0x284>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2c      	ldr	r2, [pc, #176]	; (80071e4 <UART_SetConfig+0x2e4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d124      	bne.n	8007180 <UART_SetConfig+0x280>
 8007136:	4b2d      	ldr	r3, [pc, #180]	; (80071ec <UART_SetConfig+0x2ec>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007144:	d012      	beq.n	800716c <UART_SetConfig+0x26c>
 8007146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714a:	d802      	bhi.n	8007152 <UART_SetConfig+0x252>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <UART_SetConfig+0x260>
 8007150:	e012      	b.n	8007178 <UART_SetConfig+0x278>
 8007152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007156:	d006      	beq.n	8007166 <UART_SetConfig+0x266>
 8007158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800715c:	d009      	beq.n	8007172 <UART_SetConfig+0x272>
 800715e:	e00b      	b.n	8007178 <UART_SetConfig+0x278>
 8007160:	2300      	movs	r3, #0
 8007162:	76fb      	strb	r3, [r7, #27]
 8007164:	e00e      	b.n	8007184 <UART_SetConfig+0x284>
 8007166:	2302      	movs	r3, #2
 8007168:	76fb      	strb	r3, [r7, #27]
 800716a:	e00b      	b.n	8007184 <UART_SetConfig+0x284>
 800716c:	2304      	movs	r3, #4
 800716e:	76fb      	strb	r3, [r7, #27]
 8007170:	e008      	b.n	8007184 <UART_SetConfig+0x284>
 8007172:	2308      	movs	r3, #8
 8007174:	76fb      	strb	r3, [r7, #27]
 8007176:	e005      	b.n	8007184 <UART_SetConfig+0x284>
 8007178:	2310      	movs	r3, #16
 800717a:	76fb      	strb	r3, [r7, #27]
 800717c:	bf00      	nop
 800717e:	e001      	b.n	8007184 <UART_SetConfig+0x284>
 8007180:	2310      	movs	r3, #16
 8007182:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a16      	ldr	r2, [pc, #88]	; (80071e4 <UART_SetConfig+0x2e4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	f040 8087 	bne.w	800729e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007190:	7efb      	ldrb	r3, [r7, #27]
 8007192:	2b08      	cmp	r3, #8
 8007194:	d836      	bhi.n	8007204 <UART_SetConfig+0x304>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <UART_SetConfig+0x29c>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	08007205 	.word	0x08007205
 80071a4:	080071c9 	.word	0x080071c9
 80071a8:	08007205 	.word	0x08007205
 80071ac:	080071cf 	.word	0x080071cf
 80071b0:	08007205 	.word	0x08007205
 80071b4:	08007205 	.word	0x08007205
 80071b8:	08007205 	.word	0x08007205
 80071bc:	080071d7 	.word	0x080071d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c0:	f7fd fffc 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 80071c4:	6178      	str	r0, [r7, #20]
        break;
 80071c6:	e022      	b.n	800720e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c8:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <UART_SetConfig+0x300>)
 80071ca:	617b      	str	r3, [r7, #20]
        break;
 80071cc:	e01f      	b.n	800720e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ce:	f7fd ff5f 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 80071d2:	6178      	str	r0, [r7, #20]
        break;
 80071d4:	e01b      	b.n	800720e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071da:	617b      	str	r3, [r7, #20]
        break;
 80071dc:	e017      	b.n	800720e <UART_SetConfig+0x30e>
 80071de:	bf00      	nop
 80071e0:	efff69f3 	.word	0xefff69f3
 80071e4:	40008000 	.word	0x40008000
 80071e8:	40013800 	.word	0x40013800
 80071ec:	40021000 	.word	0x40021000
 80071f0:	40004400 	.word	0x40004400
 80071f4:	40004800 	.word	0x40004800
 80071f8:	40004c00 	.word	0x40004c00
 80071fc:	40005000 	.word	0x40005000
 8007200:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	76bb      	strb	r3, [r7, #26]
        break;
 800720c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80f1 	beq.w	80073f8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	4413      	add	r3, r2
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	429a      	cmp	r2, r3
 8007224:	d305      	bcc.n	8007232 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	429a      	cmp	r2, r3
 8007230:	d902      	bls.n	8007238 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	76bb      	strb	r3, [r7, #26]
 8007236:	e0df      	b.n	80073f8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	4619      	mov	r1, r3
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	f04f 0400 	mov.w	r4, #0
 8007248:	0214      	lsls	r4, r2, #8
 800724a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800724e:	020b      	lsls	r3, r1, #8
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6852      	ldr	r2, [r2, #4]
 8007254:	0852      	lsrs	r2, r2, #1
 8007256:	4611      	mov	r1, r2
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	eb13 0b01 	adds.w	fp, r3, r1
 8007260:	eb44 0c02 	adc.w	ip, r4, r2
 8007264:	4658      	mov	r0, fp
 8007266:	4661      	mov	r1, ip
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f04f 0400 	mov.w	r4, #0
 8007270:	461a      	mov	r2, r3
 8007272:	4623      	mov	r3, r4
 8007274:	f7f9 fd08 	bl	8000c88 <__aeabi_uldivmod>
 8007278:	4603      	mov	r3, r0
 800727a:	460c      	mov	r4, r1
 800727c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007284:	d308      	bcc.n	8007298 <UART_SetConfig+0x398>
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800728c:	d204      	bcs.n	8007298 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	e0af      	b.n	80073f8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	76bb      	strb	r3, [r7, #26]
 800729c:	e0ac      	b.n	80073f8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a6:	d15b      	bne.n	8007360 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80072a8:	7efb      	ldrb	r3, [r7, #27]
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d827      	bhi.n	80072fe <UART_SetConfig+0x3fe>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <UART_SetConfig+0x3b4>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072d9 	.word	0x080072d9
 80072b8:	080072e1 	.word	0x080072e1
 80072bc:	080072e9 	.word	0x080072e9
 80072c0:	080072ff 	.word	0x080072ff
 80072c4:	080072ef 	.word	0x080072ef
 80072c8:	080072ff 	.word	0x080072ff
 80072cc:	080072ff 	.word	0x080072ff
 80072d0:	080072ff 	.word	0x080072ff
 80072d4:	080072f7 	.word	0x080072f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d8:	f7fd ff70 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 80072dc:	6178      	str	r0, [r7, #20]
        break;
 80072de:	e013      	b.n	8007308 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e0:	f7fd ff82 	bl	80051e8 <HAL_RCC_GetPCLK2Freq>
 80072e4:	6178      	str	r0, [r7, #20]
        break;
 80072e6:	e00f      	b.n	8007308 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072e8:	4b49      	ldr	r3, [pc, #292]	; (8007410 <UART_SetConfig+0x510>)
 80072ea:	617b      	str	r3, [r7, #20]
        break;
 80072ec:	e00c      	b.n	8007308 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ee:	f7fd fecf 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 80072f2:	6178      	str	r0, [r7, #20]
        break;
 80072f4:	e008      	b.n	8007308 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fa:	617b      	str	r3, [r7, #20]
        break;
 80072fc:	e004      	b.n	8007308 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	76bb      	strb	r3, [r7, #26]
        break;
 8007306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d074      	beq.n	80073f8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	005a      	lsls	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	441a      	add	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	b29b      	uxth	r3, r3
 8007324:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b0f      	cmp	r3, #15
 800732a:	d916      	bls.n	800735a <UART_SetConfig+0x45a>
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007332:	d212      	bcs.n	800735a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f023 030f 	bic.w	r3, r3, #15
 800733c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	b29b      	uxth	r3, r3
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	b29a      	uxth	r2, r3
 800734a:	89fb      	ldrh	r3, [r7, #14]
 800734c:	4313      	orrs	r3, r2
 800734e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	89fa      	ldrh	r2, [r7, #14]
 8007356:	60da      	str	r2, [r3, #12]
 8007358:	e04e      	b.n	80073f8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	76bb      	strb	r3, [r7, #26]
 800735e:	e04b      	b.n	80073f8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007360:	7efb      	ldrb	r3, [r7, #27]
 8007362:	2b08      	cmp	r3, #8
 8007364:	d827      	bhi.n	80073b6 <UART_SetConfig+0x4b6>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <UART_SetConfig+0x46c>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	08007391 	.word	0x08007391
 8007370:	08007399 	.word	0x08007399
 8007374:	080073a1 	.word	0x080073a1
 8007378:	080073b7 	.word	0x080073b7
 800737c:	080073a7 	.word	0x080073a7
 8007380:	080073b7 	.word	0x080073b7
 8007384:	080073b7 	.word	0x080073b7
 8007388:	080073b7 	.word	0x080073b7
 800738c:	080073af 	.word	0x080073af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007390:	f7fd ff14 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8007394:	6178      	str	r0, [r7, #20]
        break;
 8007396:	e013      	b.n	80073c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007398:	f7fd ff26 	bl	80051e8 <HAL_RCC_GetPCLK2Freq>
 800739c:	6178      	str	r0, [r7, #20]
        break;
 800739e:	e00f      	b.n	80073c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a0:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <UART_SetConfig+0x510>)
 80073a2:	617b      	str	r3, [r7, #20]
        break;
 80073a4:	e00c      	b.n	80073c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073a6:	f7fd fe73 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 80073aa:	6178      	str	r0, [r7, #20]
        break;
 80073ac:	e008      	b.n	80073c0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073b2:	617b      	str	r3, [r7, #20]
        break;
 80073b4:	e004      	b.n	80073c0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	76bb      	strb	r3, [r7, #26]
        break;
 80073be:	bf00      	nop
    }

    if (pclk != 0U)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	085a      	lsrs	r2, r3, #1
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	441a      	add	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	b29b      	uxth	r3, r3
 80073da:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b0f      	cmp	r3, #15
 80073e0:	d908      	bls.n	80073f4 <UART_SetConfig+0x4f4>
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e8:	d204      	bcs.n	80073f4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	60da      	str	r2, [r3, #12]
 80073f2:	e001      	b.n	80073f8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007404:	7ebb      	ldrb	r3, [r7, #26]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007410:	00f42400 	.word	0x00f42400

08007414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	f003 0308 	and.w	r3, r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01a      	beq.n	800752a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007512:	d10a      	bne.n	800752a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  }
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af02      	add	r7, sp, #8
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007566:	f7fa ff43 	bl	80023f0 <HAL_GetTick>
 800756a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b08      	cmp	r3, #8
 8007578:	d10e      	bne.n	8007598 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800757a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f82a 	bl	80075e2 <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e020      	b.n	80075da <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d10e      	bne.n	80075c4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f814 	bl	80075e2 <UART_WaitOnFlagUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e00a      	b.n	80075da <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	603b      	str	r3, [r7, #0]
 80075ee:	4613      	mov	r3, r2
 80075f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f2:	e05d      	b.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d059      	beq.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fc:	f7fa fef8 	bl	80023f0 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <UART_WaitOnFlagUntilTimeout+0x30>
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d11b      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007620:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e042      	b.n	80076d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d02b      	beq.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007666:	d123      	bne.n	80076b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007670:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007680:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2220      	movs	r2, #32
 800769c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2220      	movs	r2, #32
 80076a2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e00f      	b.n	80076d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4013      	ands	r3, r2
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	429a      	cmp	r2, r3
 80076be:	bf0c      	ite	eq
 80076c0:	2301      	moveq	r3, #1
 80076c2:	2300      	movne	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d092      	beq.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80076dc:	bf00      	nop
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ee:	f3ef 8305 	mrs	r3, IPSR
 80076f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80076f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10f      	bne.n	800771a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076fa:	f3ef 8310 	mrs	r3, PRIMASK
 80076fe:	607b      	str	r3, [r7, #4]
  return(result);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007706:	f3ef 8311 	mrs	r3, BASEPRI
 800770a:	603b      	str	r3, [r7, #0]
  return(result);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <osKernelInitialize+0x3a>
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <osKernelInitialize+0x64>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d103      	bne.n	8007722 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800771a:	f06f 0305 	mvn.w	r3, #5
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	e00c      	b.n	800773c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <osKernelInitialize+0x64>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d105      	bne.n	8007736 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800772a:	4b08      	ldr	r3, [pc, #32]	; (800774c <osKernelInitialize+0x64>)
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	e002      	b.n	800773c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007736:	f04f 33ff 	mov.w	r3, #4294967295
 800773a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800773c:	68fb      	ldr	r3, [r7, #12]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20000208 	.word	0x20000208

08007750 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007756:	f3ef 8305 	mrs	r3, IPSR
 800775a:	60bb      	str	r3, [r7, #8]
  return(result);
 800775c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10f      	bne.n	8007782 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007762:	f3ef 8310 	mrs	r3, PRIMASK
 8007766:	607b      	str	r3, [r7, #4]
  return(result);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d105      	bne.n	800777a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800776e:	f3ef 8311 	mrs	r3, BASEPRI
 8007772:	603b      	str	r3, [r7, #0]
  return(result);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <osKernelStart+0x3a>
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <osKernelStart+0x68>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d103      	bne.n	800778a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007782:	f06f 0305 	mvn.w	r3, #5
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e010      	b.n	80077ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <osKernelStart+0x68>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d109      	bne.n	80077a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007792:	f7ff ffa1 	bl	80076d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007796:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <osKernelStart+0x68>)
 8007798:	2202      	movs	r2, #2
 800779a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800779c:	f001 f870 	bl	8008880 <vTaskStartScheduler>
      stat = osOK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e002      	b.n	80077ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295
 80077aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077ac:	68fb      	ldr	r3, [r7, #12]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000208 	.word	0x20000208

080077bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b090      	sub	sp, #64	; 0x40
 80077c0:	af04      	add	r7, sp, #16
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077cc:	f3ef 8305 	mrs	r3, IPSR
 80077d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80077d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 808f 	bne.w	80078f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077da:	f3ef 8310 	mrs	r3, PRIMASK
 80077de:	61bb      	str	r3, [r7, #24]
  return(result);
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d105      	bne.n	80077f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077e6:	f3ef 8311 	mrs	r3, BASEPRI
 80077ea:	617b      	str	r3, [r7, #20]
  return(result);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <osThreadNew+0x3e>
 80077f2:	4b44      	ldr	r3, [pc, #272]	; (8007904 <osThreadNew+0x148>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d07e      	beq.n	80078f8 <osThreadNew+0x13c>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d07b      	beq.n	80078f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007804:	2318      	movs	r3, #24
 8007806:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800780c:	f04f 33ff 	mov.w	r3, #4294967295
 8007810:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d045      	beq.n	80078a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <osThreadNew+0x6a>
        name = attr->name;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d008      	beq.n	800784c <osThreadNew+0x90>
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	2b38      	cmp	r3, #56	; 0x38
 800783e:	d805      	bhi.n	800784c <osThreadNew+0x90>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <osThreadNew+0x94>
        return (NULL);
 800784c:	2300      	movs	r3, #0
 800784e:	e054      	b.n	80078fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	089b      	lsrs	r3, r3, #2
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00e      	beq.n	8007886 <osThreadNew+0xca>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b5b      	cmp	r3, #91	; 0x5b
 800786e:	d90a      	bls.n	8007886 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <osThreadNew+0xca>
        mem = 1;
 8007880:	2301      	movs	r3, #1
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	e010      	b.n	80078a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10c      	bne.n	80078a8 <osThreadNew+0xec>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d108      	bne.n	80078a8 <osThreadNew+0xec>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d104      	bne.n	80078a8 <osThreadNew+0xec>
          mem = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	623b      	str	r3, [r7, #32]
 80078a2:	e001      	b.n	80078a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d110      	bne.n	80078d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fe09 	bl	80084dc <xTaskCreateStatic>
 80078ca:	4603      	mov	r3, r0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	e013      	b.n	80078f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d110      	bne.n	80078f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	b29a      	uxth	r2, r3
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fe51 	bl	8008590 <xTaskCreate>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d001      	beq.n	80078f8 <osThreadNew+0x13c>
          hTask = NULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078f8:	693b      	ldr	r3, [r7, #16]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3730      	adds	r7, #48	; 0x30
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000208 	.word	0x20000208

08007908 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007910:	f3ef 8305 	mrs	r3, IPSR
 8007914:	613b      	str	r3, [r7, #16]
  return(result);
 8007916:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10f      	bne.n	800793c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800791c:	f3ef 8310 	mrs	r3, PRIMASK
 8007920:	60fb      	str	r3, [r7, #12]
  return(result);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007928:	f3ef 8311 	mrs	r3, BASEPRI
 800792c:	60bb      	str	r3, [r7, #8]
  return(result);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <osDelay+0x3c>
 8007934:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <osDelay+0x58>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d103      	bne.n	8007944 <osDelay+0x3c>
    stat = osErrorISR;
 800793c:	f06f 0305 	mvn.w	r3, #5
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	e007      	b.n	8007954 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <osDelay+0x4c>
      vTaskDelay(ticks);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 ff62 	bl	8008818 <vTaskDelay>
    }
  }

  return (stat);
 8007954:	697b      	ldr	r3, [r7, #20]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000208 	.word	0x20000208

08007964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a07      	ldr	r2, [pc, #28]	; (8007990 <vApplicationGetIdleTaskMemory+0x2c>)
 8007974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4a06      	ldr	r2, [pc, #24]	; (8007994 <vApplicationGetIdleTaskMemory+0x30>)
 800797a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2280      	movs	r2, #128	; 0x80
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	2000020c 	.word	0x2000020c
 8007994:	20000268 	.word	0x20000268

08007998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80079a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4a06      	ldr	r2, [pc, #24]	; (80079c8 <vApplicationGetTimerTaskMemory+0x30>)
 80079ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b6:	601a      	str	r2, [r3, #0]
}
 80079b8:	bf00      	nop
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	20000468 	.word	0x20000468
 80079c8:	200004c4 	.word	0x200004c4

080079cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 0208 	add.w	r2, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f103 0208 	add.w	r2, r3, #8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f103 0208 	add.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d103      	bne.n	8007a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e00c      	b.n	8007aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3308      	adds	r3, #8
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	e002      	b.n	8007a9c <vListInsert+0x2e>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d2f6      	bcs.n	8007a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6892      	ldr	r2, [r2, #8]
 8007af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6852      	ldr	r2, [r2, #4]
 8007b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d103      	bne.n	8007b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60bb      	str	r3, [r7, #8]
 8007b5a:	e7fe      	b.n	8007b5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007b5c:	f002 f80e 	bl	8009b7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b68:	68f9      	ldr	r1, [r7, #12]
 8007b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b6c:	fb01 f303 	mul.w	r3, r1, r3
 8007b70:	441a      	add	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	441a      	add	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	22ff      	movs	r2, #255	; 0xff
 8007ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	22ff      	movs	r2, #255	; 0xff
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d114      	bne.n	8007bdc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01a      	beq.n	8007bf0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 f8de 	bl	8008d80 <xTaskRemoveFromEventList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d012      	beq.n	8007bf0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bca:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <xQueueGenericReset+0xcc>)
 8007bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	e009      	b.n	8007bf0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3310      	adds	r3, #16
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff fef3 	bl	80079cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3324      	adds	r3, #36	; 0x24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff feee 	bl	80079cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bf0:	f001 fff2 	bl	8009bd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bf4:	2301      	movs	r3, #1
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08e      	sub	sp, #56	; 0x38
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <xQueueGenericCreateStatic+0x28>
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2a:	e7fe      	b.n	8007c2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <xQueueGenericCreateStatic+0x42>
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
 8007c44:	e7fe      	b.n	8007c44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <xQueueGenericCreateStatic+0x4e>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <xQueueGenericCreateStatic+0x52>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <xQueueGenericCreateStatic+0x54>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d109      	bne.n	8007c70 <xQueueGenericCreateStatic+0x6c>
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	623b      	str	r3, [r7, #32]
 8007c6e:	e7fe      	b.n	8007c6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <xQueueGenericCreateStatic+0x78>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <xQueueGenericCreateStatic+0x7c>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e000      	b.n	8007c82 <xQueueGenericCreateStatic+0x7e>
 8007c80:	2300      	movs	r3, #0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d109      	bne.n	8007c9a <xQueueGenericCreateStatic+0x96>
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	e7fe      	b.n	8007c98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c9a:	2350      	movs	r3, #80	; 0x50
 8007c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b50      	cmp	r3, #80	; 0x50
 8007ca2:	d009      	beq.n	8007cb8 <xQueueGenericCreateStatic+0xb4>
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e7fe      	b.n	8007cb6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00d      	beq.n	8007ce0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ccc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f805 	bl	8007cea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3730      	adds	r7, #48	; 0x30
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d103      	bne.n	8007d06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	e002      	b.n	8007d0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d18:	2101      	movs	r1, #1
 8007d1a:	69b8      	ldr	r0, [r7, #24]
 8007d1c:	f7ff ff0a 	bl	8007b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	; 0x38
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <xQueueGenericSend+0x30>
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d5e:	e7fe      	b.n	8007d5e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <xQueueGenericSend+0x3e>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <xQueueGenericSend+0x42>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <xQueueGenericSend+0x44>
 8007d72:	2300      	movs	r3, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <xQueueGenericSend+0x5c>
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8a:	e7fe      	b.n	8007d8a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSend+0x6a>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <xQueueGenericSend+0x6e>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericSend+0x70>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <xQueueGenericSend+0x88>
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	623b      	str	r3, [r7, #32]
 8007db6:	e7fe      	b.n	8007db6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007db8:	f001 f998 	bl	80090ec <xTaskGetSchedulerState>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <xQueueGenericSend+0x98>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <xQueueGenericSend+0x9c>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <xQueueGenericSend+0x9e>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <xQueueGenericSend+0xb6>
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	e7fe      	b.n	8007de4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007de6:	f001 fec9 	bl	8009b7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d302      	bcc.n	8007dfc <xQueueGenericSend+0xcc>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d129      	bne.n	8007e50 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e02:	f000 f9ff 	bl	8008204 <prvCopyDataToQueue>
 8007e06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d010      	beq.n	8007e32 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	3324      	adds	r3, #36	; 0x24
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 ffb3 	bl	8008d80 <xTaskRemoveFromEventList>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d013      	beq.n	8007e48 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e20:	4b3f      	ldr	r3, [pc, #252]	; (8007f20 <xQueueGenericSend+0x1f0>)
 8007e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	e00a      	b.n	8007e48 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e38:	4b39      	ldr	r3, [pc, #228]	; (8007f20 <xQueueGenericSend+0x1f0>)
 8007e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e48:	f001 fec6 	bl	8009bd8 <vPortExitCritical>
				return pdPASS;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e063      	b.n	8007f18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d103      	bne.n	8007e5e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e56:	f001 febf 	bl	8009bd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e05c      	b.n	8007f18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e64:	f107 0314 	add.w	r3, r7, #20
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 ffeb 	bl	8008e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e72:	f001 feb1 	bl	8009bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e76:	f000 fd67 	bl	8008948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e7a:	f001 fe7f 	bl	8009b7c <vPortEnterCritical>
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e84:	b25b      	sxtb	r3, r3
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d103      	bne.n	8007e94 <xQueueGenericSend+0x164>
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d103      	bne.n	8007eaa <xQueueGenericSend+0x17a>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eaa:	f001 fe95 	bl	8009bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eae:	1d3a      	adds	r2, r7, #4
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 ffda 	bl	8008e70 <xTaskCheckForTimeOut>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d124      	bne.n	8007f0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec4:	f000 fa96 	bl	80083f4 <prvIsQueueFull>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d018      	beq.n	8007f00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	3310      	adds	r3, #16
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 ff04 	bl	8008ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ede:	f000 fa21 	bl	8008324 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ee2:	f000 fd3f 	bl	8008964 <xTaskResumeAll>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f47f af7c 	bne.w	8007de6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <xQueueGenericSend+0x1f0>)
 8007ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	e772      	b.n	8007de6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f02:	f000 fa0f 	bl	8008324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f06:	f000 fd2d 	bl	8008964 <xTaskResumeAll>
 8007f0a:	e76c      	b.n	8007de6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f0e:	f000 fa09 	bl	8008324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f12:	f000 fd27 	bl	8008964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3738      	adds	r7, #56	; 0x38
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	e000ed04 	.word	0xe000ed04

08007f24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08e      	sub	sp, #56	; 0x38
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d109      	bne.n	8007f50 <xQueueGenericSendFromISR+0x2c>
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f4e:	e7fe      	b.n	8007f4e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <xQueueGenericSendFromISR+0x3a>
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <xQueueGenericSendFromISR+0x3e>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <xQueueGenericSendFromISR+0x40>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <xQueueGenericSendFromISR+0x58>
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	623b      	str	r3, [r7, #32]
 8007f7a:	e7fe      	b.n	8007f7a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d103      	bne.n	8007f8a <xQueueGenericSendFromISR+0x66>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <xQueueGenericSendFromISR+0x6a>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <xQueueGenericSendFromISR+0x6c>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d109      	bne.n	8007fa8 <xQueueGenericSendFromISR+0x84>
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e7fe      	b.n	8007fa6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fa8:	f001 fec4 	bl	8009d34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007fac:	f3ef 8211 	mrs	r2, BASEPRI
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	61ba      	str	r2, [r7, #24]
 8007fc2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007fc4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d302      	bcc.n	8007fda <xQueueGenericSendFromISR+0xb6>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d12c      	bne.n	8008034 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fea:	f000 f90b 	bl	8008204 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff6:	d112      	bne.n	800801e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d016      	beq.n	800802e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	3324      	adds	r3, #36	; 0x24
 8008004:	4618      	mov	r0, r3
 8008006:	f000 febb 	bl	8008d80 <xTaskRemoveFromEventList>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00e      	beq.n	800802e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e007      	b.n	800802e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800801e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008022:	3301      	adds	r3, #1
 8008024:	b2db      	uxtb	r3, r3
 8008026:	b25a      	sxtb	r2, r3
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800802e:	2301      	movs	r3, #1
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008032:	e001      	b.n	8008038 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008034:	2300      	movs	r3, #0
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008044:	4618      	mov	r0, r3
 8008046:	3738      	adds	r7, #56	; 0x38
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08c      	sub	sp, #48	; 0x30
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008058:	2300      	movs	r3, #0
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d109      	bne.n	800807a <xQueueReceive+0x2e>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	623b      	str	r3, [r7, #32]
 8008078:	e7fe      	b.n	8008078 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d103      	bne.n	8008088 <xQueueReceive+0x3c>
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <xQueueReceive+0x40>
 8008088:	2301      	movs	r3, #1
 800808a:	e000      	b.n	800808e <xQueueReceive+0x42>
 800808c:	2300      	movs	r3, #0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <xQueueReceive+0x5a>
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	e7fe      	b.n	80080a4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080a6:	f001 f821 	bl	80090ec <xTaskGetSchedulerState>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <xQueueReceive+0x6a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <xQueueReceive+0x6e>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <xQueueReceive+0x70>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <xQueueReceive+0x88>
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	e7fe      	b.n	80080d2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080d4:	f001 fd52 	bl	8009b7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01f      	beq.n	8008124 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e8:	f000 f8f6 	bl	80082d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	1e5a      	subs	r2, r3, #1
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00f      	beq.n	800811c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	3310      	adds	r3, #16
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fe3d 	bl	8008d80 <xTaskRemoveFromEventList>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800810c:	4b3c      	ldr	r3, [pc, #240]	; (8008200 <xQueueReceive+0x1b4>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800811c:	f001 fd5c 	bl	8009bd8 <vPortExitCritical>
				return pdPASS;
 8008120:	2301      	movs	r3, #1
 8008122:	e069      	b.n	80081f8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800812a:	f001 fd55 	bl	8009bd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800812e:	2300      	movs	r3, #0
 8008130:	e062      	b.n	80081f8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008138:	f107 0310 	add.w	r3, r7, #16
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fe81 	bl	8008e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008146:	f001 fd47 	bl	8009bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800814a:	f000 fbfd 	bl	8008948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800814e:	f001 fd15 	bl	8009b7c <vPortEnterCritical>
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008158:	b25b      	sxtb	r3, r3
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815e:	d103      	bne.n	8008168 <xQueueReceive+0x11c>
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800816e:	b25b      	sxtb	r3, r3
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d103      	bne.n	800817e <xQueueReceive+0x132>
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800817e:	f001 fd2b 	bl	8009bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008182:	1d3a      	adds	r2, r7, #4
 8008184:	f107 0310 	add.w	r3, r7, #16
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fe70 	bl	8008e70 <xTaskCheckForTimeOut>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d123      	bne.n	80081de <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008198:	f000 f916 	bl	80083c8 <prvIsQueueEmpty>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d017      	beq.n	80081d2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	3324      	adds	r3, #36	; 0x24
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fd9a 	bl	8008ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b2:	f000 f8b7 	bl	8008324 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081b6:	f000 fbd5 	bl	8008964 <xTaskResumeAll>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d189      	bne.n	80080d4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80081c0:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <xQueueReceive+0x1b4>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	e780      	b.n	80080d4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d4:	f000 f8a6 	bl	8008324 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081d8:	f000 fbc4 	bl	8008964 <xTaskResumeAll>
 80081dc:	e77a      	b.n	80080d4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e0:	f000 f8a0 	bl	8008324 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081e4:	f000 fbbe 	bl	8008964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ea:	f000 f8ed 	bl	80083c8 <prvIsQueueEmpty>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f43f af6f 	beq.w	80080d4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3730      	adds	r7, #48	; 0x30
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10d      	bne.n	800823e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d14d      	bne.n	80082c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 ff7a 	bl	8009128 <xTaskPriorityDisinherit>
 8008234:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	609a      	str	r2, [r3, #8]
 800823c:	e043      	b.n	80082c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d119      	bne.n	8008278 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6858      	ldr	r0, [r3, #4]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	461a      	mov	r2, r3
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	f001 ffae 	bl	800a1b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d32b      	bcc.n	80082c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	e026      	b.n	80082c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68d8      	ldr	r0, [r3, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008280:	461a      	mov	r2, r3
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	f001 ff94 	bl	800a1b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	425b      	negs	r3, r3
 8008292:	441a      	add	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d207      	bcs.n	80082b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ac:	425b      	negs	r3, r3
 80082ae:	441a      	add	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d105      	bne.n	80082c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082ce:	697b      	ldr	r3, [r7, #20]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d018      	beq.n	800831c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	441a      	add	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	429a      	cmp	r2, r3
 8008302:	d303      	bcc.n	800830c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68d9      	ldr	r1, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	461a      	mov	r2, r3
 8008316:	6838      	ldr	r0, [r7, #0]
 8008318:	f001 ff4a 	bl	800a1b0 <memcpy>
	}
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800832c:	f001 fc26 	bl	8009b7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008336:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008338:	e011      	b.n	800835e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b00      	cmp	r3, #0
 8008340:	d012      	beq.n	8008368 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3324      	adds	r3, #36	; 0x24
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fd1a 	bl	8008d80 <xTaskRemoveFromEventList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008352:	f000 fded 	bl	8008f30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	3b01      	subs	r3, #1
 800835a:	b2db      	uxtb	r3, r3
 800835c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800835e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	dce9      	bgt.n	800833a <prvUnlockQueue+0x16>
 8008366:	e000      	b.n	800836a <prvUnlockQueue+0x46>
					break;
 8008368:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	22ff      	movs	r2, #255	; 0xff
 800836e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008372:	f001 fc31 	bl	8009bd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008376:	f001 fc01 	bl	8009b7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008380:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008382:	e011      	b.n	80083a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d012      	beq.n	80083b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3310      	adds	r3, #16
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fcf5 	bl	8008d80 <xTaskRemoveFromEventList>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800839c:	f000 fdc8 	bl	8008f30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dce9      	bgt.n	8008384 <prvUnlockQueue+0x60>
 80083b0:	e000      	b.n	80083b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	22ff      	movs	r2, #255	; 0xff
 80083b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083bc:	f001 fc0c 	bl	8009bd8 <vPortExitCritical>
}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083d0:	f001 fbd4 	bl	8009b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e001      	b.n	80083e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083e6:	f001 fbf7 	bl	8009bd8 <vPortExitCritical>

	return xReturn;
 80083ea:	68fb      	ldr	r3, [r7, #12]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083fc:	f001 fbbe 	bl	8009b7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008408:	429a      	cmp	r2, r3
 800840a:	d102      	bne.n	8008412 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e001      	b.n	8008416 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008416:	f001 fbdf 	bl	8009bd8 <vPortExitCritical>

	return xReturn;
 800841a:	68fb      	ldr	r3, [r7, #12]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e014      	b.n	800845e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008434:	4a0e      	ldr	r2, [pc, #56]	; (8008470 <vQueueAddToRegistry+0x4c>)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10b      	bne.n	8008458 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008440:	490b      	ldr	r1, [pc, #44]	; (8008470 <vQueueAddToRegistry+0x4c>)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800844a:	4a09      	ldr	r2, [pc, #36]	; (8008470 <vQueueAddToRegistry+0x4c>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008456:	e005      	b.n	8008464 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b07      	cmp	r3, #7
 8008462:	d9e7      	bls.n	8008434 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008464:	bf00      	nop
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	20001f20 	.word	0x20001f20

08008474 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008484:	f001 fb7a 	bl	8009b7c <vPortEnterCritical>
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800848e:	b25b      	sxtb	r3, r3
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008494:	d103      	bne.n	800849e <vQueueWaitForMessageRestricted+0x2a>
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084a4:	b25b      	sxtb	r3, r3
 80084a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084aa:	d103      	bne.n	80084b4 <vQueueWaitForMessageRestricted+0x40>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084b4:	f001 fb90 	bl	8009bd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	3324      	adds	r3, #36	; 0x24
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fc2f 	bl	8008d2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084ce:	6978      	ldr	r0, [r7, #20]
 80084d0:	f7ff ff28 	bl	8008324 <prvUnlockQueue>
	}
 80084d4:	bf00      	nop
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08e      	sub	sp, #56	; 0x38
 80084e0:	af04      	add	r7, sp, #16
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <xTaskCreateStatic+0x28>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	623b      	str	r3, [r7, #32]
 8008502:	e7fe      	b.n	8008502 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <xTaskCreateStatic+0x42>
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	e7fe      	b.n	800851c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800851e:	235c      	movs	r3, #92	; 0x5c
 8008520:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b5c      	cmp	r3, #92	; 0x5c
 8008526:	d009      	beq.n	800853c <xTaskCreateStatic+0x60>
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e7fe      	b.n	800853a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800853c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01e      	beq.n	8008582 <xTaskCreateStatic+0xa6>
 8008544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01b      	beq.n	8008582 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008552:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	2202      	movs	r2, #2
 8008558:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800855c:	2300      	movs	r3, #0
 800855e:	9303      	str	r3, [sp, #12]
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	9302      	str	r3, [sp, #8]
 8008564:	f107 0314 	add.w	r3, r7, #20
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f850 	bl	800861a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800857a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800857c:	f000 f8dc 	bl	8008738 <prvAddNewTaskToReadyList>
 8008580:	e001      	b.n	8008586 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008586:	697b      	ldr	r3, [r7, #20]
	}
 8008588:	4618      	mov	r0, r3
 800858a:	3728      	adds	r7, #40	; 0x28
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08c      	sub	sp, #48	; 0x30
 8008594:	af04      	add	r7, sp, #16
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	4613      	mov	r3, r2
 800859e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085a0:	88fb      	ldrh	r3, [r7, #6]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fc03 	bl	8009db0 <pvPortMalloc>
 80085aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00e      	beq.n	80085d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085b2:	205c      	movs	r0, #92	; 0x5c
 80085b4:	f001 fbfc 	bl	8009db0 <pvPortMalloc>
 80085b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30
 80085c6:	e005      	b.n	80085d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085c8:	6978      	ldr	r0, [r7, #20]
 80085ca:	f001 fcb3 	bl	8009f34 <vPortFree>
 80085ce:	e001      	b.n	80085d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d017      	beq.n	800860a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	2300      	movs	r3, #0
 80085e6:	9303      	str	r3, [sp, #12]
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	9302      	str	r3, [sp, #8]
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f80e 	bl	800861a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085fe:	69f8      	ldr	r0, [r7, #28]
 8008600:	f000 f89a 	bl	8008738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008604:	2301      	movs	r3, #1
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	e002      	b.n	8008610 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800860a:	f04f 33ff 	mov.w	r3, #4294967295
 800860e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008610:	69bb      	ldr	r3, [r7, #24]
	}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b088      	sub	sp, #32
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	461a      	mov	r2, r3
 8008632:	21a5      	movs	r1, #165	; 0xa5
 8008634:	f001 fdc7 	bl	800a1c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008642:	3b01      	subs	r3, #1
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <prvInitialiseNewTask+0x56>
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	e7fe      	b.n	800866e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d01f      	beq.n	80086b6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008676:	2300      	movs	r3, #0
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	e012      	b.n	80086a2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	7819      	ldrb	r1, [r3, #0]
 8008684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	4413      	add	r3, r2
 800868a:	3334      	adds	r3, #52	; 0x34
 800868c:	460a      	mov	r2, r1
 800868e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	4413      	add	r3, r2
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d006      	beq.n	80086aa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	3301      	adds	r3, #1
 80086a0:	61fb      	str	r3, [r7, #28]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	2b0f      	cmp	r3, #15
 80086a6:	d9e9      	bls.n	800867c <prvInitialiseNewTask+0x62>
 80086a8:	e000      	b.n	80086ac <prvInitialiseNewTask+0x92>
			{
				break;
 80086aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086b4:	e003      	b.n	80086be <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	2b37      	cmp	r3, #55	; 0x37
 80086c2:	d901      	bls.n	80086c8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086c4:	2337      	movs	r3, #55	; 0x37
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	2200      	movs	r2, #0
 80086d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff f994 	bl	8007a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	3318      	adds	r3, #24
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff f98f 	bl	8007a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	2200      	movs	r2, #0
 8008708:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	68f9      	ldr	r1, [r7, #12]
 8008716:	69b8      	ldr	r0, [r7, #24]
 8008718:	f001 f90c 	bl	8009934 <pxPortInitialiseStack>
 800871c:	4602      	mov	r2, r0
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800872e:	bf00      	nop
 8008730:	3720      	adds	r7, #32
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008740:	f001 fa1c 	bl	8009b7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008744:	4b2d      	ldr	r3, [pc, #180]	; (80087fc <prvAddNewTaskToReadyList+0xc4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a2c      	ldr	r2, [pc, #176]	; (80087fc <prvAddNewTaskToReadyList+0xc4>)
 800874c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800874e:	4b2c      	ldr	r3, [pc, #176]	; (8008800 <prvAddNewTaskToReadyList+0xc8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008756:	4a2a      	ldr	r2, [pc, #168]	; (8008800 <prvAddNewTaskToReadyList+0xc8>)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800875c:	4b27      	ldr	r3, [pc, #156]	; (80087fc <prvAddNewTaskToReadyList+0xc4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d110      	bne.n	8008786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008764:	f000 fc08 	bl	8008f78 <prvInitialiseTaskLists>
 8008768:	e00d      	b.n	8008786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800876a:	4b26      	ldr	r3, [pc, #152]	; (8008804 <prvAddNewTaskToReadyList+0xcc>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008772:	4b23      	ldr	r3, [pc, #140]	; (8008800 <prvAddNewTaskToReadyList+0xc8>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	429a      	cmp	r2, r3
 800877e:	d802      	bhi.n	8008786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008780:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <prvAddNewTaskToReadyList+0xc8>)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008786:	4b20      	ldr	r3, [pc, #128]	; (8008808 <prvAddNewTaskToReadyList+0xd0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <prvAddNewTaskToReadyList+0xd0>)
 800878e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008790:	4b1d      	ldr	r3, [pc, #116]	; (8008808 <prvAddNewTaskToReadyList+0xd0>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4b1b      	ldr	r3, [pc, #108]	; (800880c <prvAddNewTaskToReadyList+0xd4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d903      	bls.n	80087ac <prvAddNewTaskToReadyList+0x74>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	4a18      	ldr	r2, [pc, #96]	; (800880c <prvAddNewTaskToReadyList+0xd4>)
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4a15      	ldr	r2, [pc, #84]	; (8008810 <prvAddNewTaskToReadyList+0xd8>)
 80087ba:	441a      	add	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f7ff f92f 	bl	8007a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087c8:	f001 fa06 	bl	8009bd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087cc:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <prvAddNewTaskToReadyList+0xcc>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00e      	beq.n	80087f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <prvAddNewTaskToReadyList+0xc8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	429a      	cmp	r2, r3
 80087e0:	d207      	bcs.n	80087f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <prvAddNewTaskToReadyList+0xdc>)
 80087e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000d98 	.word	0x20000d98
 8008800:	200008c4 	.word	0x200008c4
 8008804:	20000da4 	.word	0x20000da4
 8008808:	20000db4 	.word	0x20000db4
 800880c:	20000da0 	.word	0x20000da0
 8008810:	200008c8 	.word	0x200008c8
 8008814:	e000ed04 	.word	0xe000ed04

08008818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d016      	beq.n	8008858 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800882a:	4b13      	ldr	r3, [pc, #76]	; (8008878 <vTaskDelay+0x60>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <vTaskDelay+0x2e>
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	60bb      	str	r3, [r7, #8]
 8008844:	e7fe      	b.n	8008844 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008846:	f000 f87f 	bl	8008948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fcd7 	bl	8009200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008852:	f000 f887 	bl	8008964 <xTaskResumeAll>
 8008856:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d107      	bne.n	800886e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800885e:	4b07      	ldr	r3, [pc, #28]	; (800887c <vTaskDelay+0x64>)
 8008860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20000dc0 	.word	0x20000dc0
 800887c:	e000ed04 	.word	0xe000ed04

08008880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	; 0x28
 8008884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008886:	2300      	movs	r3, #0
 8008888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800888a:	2300      	movs	r3, #0
 800888c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800888e:	463a      	mov	r2, r7
 8008890:	1d39      	adds	r1, r7, #4
 8008892:	f107 0308 	add.w	r3, r7, #8
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff f864 	bl	8007964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	9202      	str	r2, [sp, #8]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	2300      	movs	r3, #0
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	2300      	movs	r3, #0
 80088ac:	460a      	mov	r2, r1
 80088ae:	4920      	ldr	r1, [pc, #128]	; (8008930 <vTaskStartScheduler+0xb0>)
 80088b0:	4820      	ldr	r0, [pc, #128]	; (8008934 <vTaskStartScheduler+0xb4>)
 80088b2:	f7ff fe13 	bl	80084dc <xTaskCreateStatic>
 80088b6:	4602      	mov	r2, r0
 80088b8:	4b1f      	ldr	r3, [pc, #124]	; (8008938 <vTaskStartScheduler+0xb8>)
 80088ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088bc:	4b1e      	ldr	r3, [pc, #120]	; (8008938 <vTaskStartScheduler+0xb8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088c4:	2301      	movs	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	e001      	b.n	80088ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d102      	bne.n	80088da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088d4:	f000 fce8 	bl	80092a8 <xTimerCreateTimerTask>
 80088d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d115      	bne.n	800890c <vTaskStartScheduler+0x8c>
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088f2:	4b12      	ldr	r3, [pc, #72]	; (800893c <vTaskStartScheduler+0xbc>)
 80088f4:	f04f 32ff 	mov.w	r2, #4294967295
 80088f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088fa:	4b11      	ldr	r3, [pc, #68]	; (8008940 <vTaskStartScheduler+0xc0>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008900:	4b10      	ldr	r3, [pc, #64]	; (8008944 <vTaskStartScheduler+0xc4>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008906:	f001 f89b 	bl	8009a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800890a:	e00d      	b.n	8008928 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d109      	bne.n	8008928 <vTaskStartScheduler+0xa8>
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	e7fe      	b.n	8008926 <vTaskStartScheduler+0xa6>
}
 8008928:	bf00      	nop
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	0800dd8c 	.word	0x0800dd8c
 8008934:	08008f49 	.word	0x08008f49
 8008938:	20000dbc 	.word	0x20000dbc
 800893c:	20000db8 	.word	0x20000db8
 8008940:	20000da4 	.word	0x20000da4
 8008944:	20000d9c 	.word	0x20000d9c

08008948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800894c:	4b04      	ldr	r3, [pc, #16]	; (8008960 <vTaskSuspendAll+0x18>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	4a03      	ldr	r2, [pc, #12]	; (8008960 <vTaskSuspendAll+0x18>)
 8008954:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008956:	bf00      	nop
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	20000dc0 	.word	0x20000dc0

08008964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800896e:	2300      	movs	r3, #0
 8008970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008972:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <xTaskResumeAll+0x114>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <xTaskResumeAll+0x2a>
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	e7fe      	b.n	800898c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800898e:	f001 f8f5 	bl	8009b7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008992:	4b39      	ldr	r3, [pc, #228]	; (8008a78 <xTaskResumeAll+0x114>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3b01      	subs	r3, #1
 8008998:	4a37      	ldr	r2, [pc, #220]	; (8008a78 <xTaskResumeAll+0x114>)
 800899a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800899c:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <xTaskResumeAll+0x114>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d162      	bne.n	8008a6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089a4:	4b35      	ldr	r3, [pc, #212]	; (8008a7c <xTaskResumeAll+0x118>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d05e      	beq.n	8008a6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089ac:	e02f      	b.n	8008a0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ae:	4b34      	ldr	r3, [pc, #208]	; (8008a80 <xTaskResumeAll+0x11c>)
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3318      	adds	r3, #24
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff f890 	bl	8007ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff f88b 	bl	8007ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ce:	4b2d      	ldr	r3, [pc, #180]	; (8008a84 <xTaskResumeAll+0x120>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d903      	bls.n	80089de <xTaskResumeAll+0x7a>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	4a2a      	ldr	r2, [pc, #168]	; (8008a84 <xTaskResumeAll+0x120>)
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4a27      	ldr	r2, [pc, #156]	; (8008a88 <xTaskResumeAll+0x124>)
 80089ec:	441a      	add	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3304      	adds	r3, #4
 80089f2:	4619      	mov	r1, r3
 80089f4:	4610      	mov	r0, r2
 80089f6:	f7ff f816 	bl	8007a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fe:	4b23      	ldr	r3, [pc, #140]	; (8008a8c <xTaskResumeAll+0x128>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d302      	bcc.n	8008a0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008a08:	4b21      	ldr	r3, [pc, #132]	; (8008a90 <xTaskResumeAll+0x12c>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a0e:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <xTaskResumeAll+0x11c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1cb      	bne.n	80089ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a1c:	f000 fb46 	bl	80090ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a20:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <xTaskResumeAll+0x130>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d010      	beq.n	8008a4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a2c:	f000 f846 	bl	8008abc <xTaskIncrementTick>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008a36:	4b16      	ldr	r3, [pc, #88]	; (8008a90 <xTaskResumeAll+0x12c>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f1      	bne.n	8008a2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <xTaskResumeAll+0x130>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a4e:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <xTaskResumeAll+0x12c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a5a:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <xTaskResumeAll+0x134>)
 8008a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a6a:	f001 f8b5 	bl	8009bd8 <vPortExitCritical>

	return xAlreadyYielded;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000dc0 	.word	0x20000dc0
 8008a7c:	20000d98 	.word	0x20000d98
 8008a80:	20000d58 	.word	0x20000d58
 8008a84:	20000da0 	.word	0x20000da0
 8008a88:	200008c8 	.word	0x200008c8
 8008a8c:	200008c4 	.word	0x200008c4
 8008a90:	20000dac 	.word	0x20000dac
 8008a94:	20000da8 	.word	0x20000da8
 8008a98:	e000ed04 	.word	0xe000ed04

08008a9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <xTaskGetTickCount+0x1c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008aa8:	687b      	ldr	r3, [r7, #4]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	20000d9c 	.word	0x20000d9c

08008abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac6:	4b4e      	ldr	r3, [pc, #312]	; (8008c00 <xTaskIncrementTick+0x144>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f040 8088 	bne.w	8008be0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ad0:	4b4c      	ldr	r3, [pc, #304]	; (8008c04 <xTaskIncrementTick+0x148>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ad8:	4a4a      	ldr	r2, [pc, #296]	; (8008c04 <xTaskIncrementTick+0x148>)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d11f      	bne.n	8008b24 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ae4:	4b48      	ldr	r3, [pc, #288]	; (8008c08 <xTaskIncrementTick+0x14c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <xTaskIncrementTick+0x46>
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	e7fe      	b.n	8008b00 <xTaskIncrementTick+0x44>
 8008b02:	4b41      	ldr	r3, [pc, #260]	; (8008c08 <xTaskIncrementTick+0x14c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	4b40      	ldr	r3, [pc, #256]	; (8008c0c <xTaskIncrementTick+0x150>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a3e      	ldr	r2, [pc, #248]	; (8008c08 <xTaskIncrementTick+0x14c>)
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4a3e      	ldr	r2, [pc, #248]	; (8008c0c <xTaskIncrementTick+0x150>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <xTaskIncrementTick+0x154>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	4a3c      	ldr	r2, [pc, #240]	; (8008c10 <xTaskIncrementTick+0x154>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	f000 fac4 	bl	80090ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b24:	4b3b      	ldr	r3, [pc, #236]	; (8008c14 <xTaskIncrementTick+0x158>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d349      	bcc.n	8008bc2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b2e:	4b36      	ldr	r3, [pc, #216]	; (8008c08 <xTaskIncrementTick+0x14c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b38:	4b36      	ldr	r3, [pc, #216]	; (8008c14 <xTaskIncrementTick+0x158>)
 8008b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3e:	601a      	str	r2, [r3, #0]
					break;
 8008b40:	e03f      	b.n	8008bc2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b42:	4b31      	ldr	r3, [pc, #196]	; (8008c08 <xTaskIncrementTick+0x14c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d203      	bcs.n	8008b62 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b5a:	4a2e      	ldr	r2, [pc, #184]	; (8008c14 <xTaskIncrementTick+0x158>)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b60:	e02f      	b.n	8008bc2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe ffba 	bl	8007ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	3318      	adds	r3, #24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe ffb1 	bl	8007ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b82:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <xTaskIncrementTick+0x15c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d903      	bls.n	8008b92 <xTaskIncrementTick+0xd6>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	4a22      	ldr	r2, [pc, #136]	; (8008c18 <xTaskIncrementTick+0x15c>)
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4a1f      	ldr	r2, [pc, #124]	; (8008c1c <xTaskIncrementTick+0x160>)
 8008ba0:	441a      	add	r2, r3
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	4610      	mov	r0, r2
 8008baa:	f7fe ff3c 	bl	8007a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb2:	4b1b      	ldr	r3, [pc, #108]	; (8008c20 <xTaskIncrementTick+0x164>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d3b8      	bcc.n	8008b2e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bc0:	e7b5      	b.n	8008b2e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bc2:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <xTaskIncrementTick+0x164>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	4914      	ldr	r1, [pc, #80]	; (8008c1c <xTaskIncrementTick+0x160>)
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d907      	bls.n	8008bea <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	e004      	b.n	8008bea <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008be0:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <xTaskIncrementTick+0x168>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	4a0f      	ldr	r2, [pc, #60]	; (8008c24 <xTaskIncrementTick+0x168>)
 8008be8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <xTaskIncrementTick+0x16c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bf6:	697b      	ldr	r3, [r7, #20]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000dc0 	.word	0x20000dc0
 8008c04:	20000d9c 	.word	0x20000d9c
 8008c08:	20000d50 	.word	0x20000d50
 8008c0c:	20000d54 	.word	0x20000d54
 8008c10:	20000db0 	.word	0x20000db0
 8008c14:	20000db8 	.word	0x20000db8
 8008c18:	20000da0 	.word	0x20000da0
 8008c1c:	200008c8 	.word	0x200008c8
 8008c20:	200008c4 	.word	0x200008c4
 8008c24:	20000da8 	.word	0x20000da8
 8008c28:	20000dac 	.word	0x20000dac

08008c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c32:	4b27      	ldr	r3, [pc, #156]	; (8008cd0 <vTaskSwitchContext+0xa4>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c3a:	4b26      	ldr	r3, [pc, #152]	; (8008cd4 <vTaskSwitchContext+0xa8>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c40:	e040      	b.n	8008cc4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008c42:	4b24      	ldr	r3, [pc, #144]	; (8008cd4 <vTaskSwitchContext+0xa8>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c48:	4b23      	ldr	r3, [pc, #140]	; (8008cd8 <vTaskSwitchContext+0xac>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e00f      	b.n	8008c70 <vTaskSwitchContext+0x44>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <vTaskSwitchContext+0x3e>
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	e7fe      	b.n	8008c68 <vTaskSwitchContext+0x3c>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	491a      	ldr	r1, [pc, #104]	; (8008cdc <vTaskSwitchContext+0xb0>)
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4613      	mov	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0e5      	beq.n	8008c50 <vTaskSwitchContext+0x24>
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <vTaskSwitchContext+0xb0>)
 8008c90:	4413      	add	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d104      	bne.n	8008cb4 <vTaskSwitchContext+0x88>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	605a      	str	r2, [r3, #4]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	4a09      	ldr	r2, [pc, #36]	; (8008ce0 <vTaskSwitchContext+0xb4>)
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4a06      	ldr	r2, [pc, #24]	; (8008cd8 <vTaskSwitchContext+0xac>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6013      	str	r3, [r2, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	20000dc0 	.word	0x20000dc0
 8008cd4:	20000dac 	.word	0x20000dac
 8008cd8:	20000da0 	.word	0x20000da0
 8008cdc:	200008c8 	.word	0x200008c8
 8008ce0:	200008c4 	.word	0x200008c4

08008ce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <vTaskPlaceOnEventList+0x24>
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60fb      	str	r3, [r7, #12]
 8008d06:	e7fe      	b.n	8008d06 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <vTaskPlaceOnEventList+0x44>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3318      	adds	r3, #24
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fe feac 	bl	8007a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d16:	2101      	movs	r1, #1
 8008d18:	6838      	ldr	r0, [r7, #0]
 8008d1a:	f000 fa71 	bl	8009200 <prvAddCurrentTaskToDelayedList>
}
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200008c4 	.word	0x200008c4

08008d2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <vTaskPlaceOnEventListRestricted+0x26>
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	e7fe      	b.n	8008d50 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <vTaskPlaceOnEventListRestricted+0x50>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3318      	adds	r3, #24
 8008d58:	4619      	mov	r1, r3
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7fe fe63 	bl	8007a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008d66:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	68b8      	ldr	r0, [r7, #8]
 8008d70:	f000 fa46 	bl	8009200 <prvAddCurrentTaskToDelayedList>
	}
 8008d74:	bf00      	nop
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	200008c4 	.word	0x200008c4

08008d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d109      	bne.n	8008daa <xTaskRemoveFromEventList+0x2a>
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e7fe      	b.n	8008da8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3318      	adds	r3, #24
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fe96 	bl	8007ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db4:	4b1d      	ldr	r3, [pc, #116]	; (8008e2c <xTaskRemoveFromEventList+0xac>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d11d      	bne.n	8008df8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fe8d 	bl	8007ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dca:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <xTaskRemoveFromEventList+0xb0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d903      	bls.n	8008dda <xTaskRemoveFromEventList+0x5a>
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	4a16      	ldr	r2, [pc, #88]	; (8008e30 <xTaskRemoveFromEventList+0xb0>)
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <xTaskRemoveFromEventList+0xb4>)
 8008de8:	441a      	add	r2, r3
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7fe fe18 	bl	8007a26 <vListInsertEnd>
 8008df6:	e005      	b.n	8008e04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	3318      	adds	r3, #24
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	480e      	ldr	r0, [pc, #56]	; (8008e38 <xTaskRemoveFromEventList+0xb8>)
 8008e00:	f7fe fe11 	bl	8007a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e08:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <xTaskRemoveFromEventList+0xbc>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d905      	bls.n	8008e1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e12:	2301      	movs	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e16:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <xTaskRemoveFromEventList+0xc0>)
 8008e18:	2201      	movs	r2, #1
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	e001      	b.n	8008e22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e22:	697b      	ldr	r3, [r7, #20]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000dc0 	.word	0x20000dc0
 8008e30:	20000da0 	.word	0x20000da0
 8008e34:	200008c8 	.word	0x200008c8
 8008e38:	20000d58 	.word	0x20000d58
 8008e3c:	200008c4 	.word	0x200008c4
 8008e40:	20000dac 	.word	0x20000dac

08008e44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <vTaskInternalSetTimeOutState+0x24>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e54:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <vTaskInternalSetTimeOutState+0x28>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	605a      	str	r2, [r3, #4]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	20000db0 	.word	0x20000db0
 8008e6c:	20000d9c 	.word	0x20000d9c

08008e70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <xTaskCheckForTimeOut+0x24>
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	e7fe      	b.n	8008e92 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d109      	bne.n	8008eae <xTaskCheckForTimeOut+0x3e>
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e7fe      	b.n	8008eac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008eae:	f000 fe65 	bl	8009b7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eb2:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <xTaskCheckForTimeOut+0xb8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d102      	bne.n	8008ed2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61fb      	str	r3, [r7, #28]
 8008ed0:	e023      	b.n	8008f1a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <xTaskCheckForTimeOut+0xbc>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d007      	beq.n	8008eee <xTaskCheckForTimeOut+0x7e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d302      	bcc.n	8008eee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	61fb      	str	r3, [r7, #28]
 8008eec:	e015      	b.n	8008f1a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d20b      	bcs.n	8008f10 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff ff9d 	bl	8008e44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	61fb      	str	r3, [r7, #28]
 8008f0e:	e004      	b.n	8008f1a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f16:	2301      	movs	r3, #1
 8008f18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f1a:	f000 fe5d 	bl	8009bd8 <vPortExitCritical>

	return xReturn;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3720      	adds	r7, #32
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20000d9c 	.word	0x20000d9c
 8008f2c:	20000db0 	.word	0x20000db0

08008f30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f34:	4b03      	ldr	r3, [pc, #12]	; (8008f44 <vTaskMissedYield+0x14>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
}
 8008f3a:	bf00      	nop
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	20000dac 	.word	0x20000dac

08008f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f50:	f000 f852 	bl	8008ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <prvIdleTask+0x28>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d9f9      	bls.n	8008f50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <prvIdleTask+0x2c>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f6c:	e7f0      	b.n	8008f50 <prvIdleTask+0x8>
 8008f6e:	bf00      	nop
 8008f70:	200008c8 	.word	0x200008c8
 8008f74:	e000ed04 	.word	0xe000ed04

08008f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f7e:	2300      	movs	r3, #0
 8008f80:	607b      	str	r3, [r7, #4]
 8008f82:	e00c      	b.n	8008f9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4a12      	ldr	r2, [pc, #72]	; (8008fd8 <prvInitialiseTaskLists+0x60>)
 8008f90:	4413      	add	r3, r2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fd1a 	bl	80079cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	607b      	str	r3, [r7, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b37      	cmp	r3, #55	; 0x37
 8008fa2:	d9ef      	bls.n	8008f84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fa4:	480d      	ldr	r0, [pc, #52]	; (8008fdc <prvInitialiseTaskLists+0x64>)
 8008fa6:	f7fe fd11 	bl	80079cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008faa:	480d      	ldr	r0, [pc, #52]	; (8008fe0 <prvInitialiseTaskLists+0x68>)
 8008fac:	f7fe fd0e 	bl	80079cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fb0:	480c      	ldr	r0, [pc, #48]	; (8008fe4 <prvInitialiseTaskLists+0x6c>)
 8008fb2:	f7fe fd0b 	bl	80079cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fb6:	480c      	ldr	r0, [pc, #48]	; (8008fe8 <prvInitialiseTaskLists+0x70>)
 8008fb8:	f7fe fd08 	bl	80079cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fbc:	480b      	ldr	r0, [pc, #44]	; (8008fec <prvInitialiseTaskLists+0x74>)
 8008fbe:	f7fe fd05 	bl	80079cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <prvInitialiseTaskLists+0x78>)
 8008fc4:	4a05      	ldr	r2, [pc, #20]	; (8008fdc <prvInitialiseTaskLists+0x64>)
 8008fc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <prvInitialiseTaskLists+0x7c>)
 8008fca:	4a05      	ldr	r2, [pc, #20]	; (8008fe0 <prvInitialiseTaskLists+0x68>)
 8008fcc:	601a      	str	r2, [r3, #0]
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200008c8 	.word	0x200008c8
 8008fdc:	20000d28 	.word	0x20000d28
 8008fe0:	20000d3c 	.word	0x20000d3c
 8008fe4:	20000d58 	.word	0x20000d58
 8008fe8:	20000d6c 	.word	0x20000d6c
 8008fec:	20000d84 	.word	0x20000d84
 8008ff0:	20000d50 	.word	0x20000d50
 8008ff4:	20000d54 	.word	0x20000d54

08008ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ffe:	e019      	b.n	8009034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009000:	f000 fdbc 	bl	8009b7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009004:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <prvCheckTasksWaitingTermination+0x4c>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3304      	adds	r3, #4
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fd65 	bl	8007ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvCheckTasksWaitingTermination+0x50>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3b01      	subs	r3, #1
 800901c:	4a0a      	ldr	r2, [pc, #40]	; (8009048 <prvCheckTasksWaitingTermination+0x50>)
 800901e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009020:	4b0a      	ldr	r3, [pc, #40]	; (800904c <prvCheckTasksWaitingTermination+0x54>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3b01      	subs	r3, #1
 8009026:	4a09      	ldr	r2, [pc, #36]	; (800904c <prvCheckTasksWaitingTermination+0x54>)
 8009028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800902a:	f000 fdd5 	bl	8009bd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f80e 	bl	8009050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009034:	4b05      	ldr	r3, [pc, #20]	; (800904c <prvCheckTasksWaitingTermination+0x54>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e1      	bne.n	8009000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000d6c 	.word	0x20000d6c
 8009048:	20000d98 	.word	0x20000d98
 800904c:	20000d80 	.word	0x20000d80

08009050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800905e:	2b00      	cmp	r3, #0
 8009060:	d108      	bne.n	8009074 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	4618      	mov	r0, r3
 8009068:	f000 ff64 	bl	8009f34 <vPortFree>
				vPortFree( pxTCB );
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 ff61 	bl	8009f34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009072:	e017      	b.n	80090a4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800907a:	2b01      	cmp	r3, #1
 800907c:	d103      	bne.n	8009086 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 ff58 	bl	8009f34 <vPortFree>
	}
 8009084:	e00e      	b.n	80090a4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800908c:	2b02      	cmp	r3, #2
 800908e:	d009      	beq.n	80090a4 <prvDeleteTCB+0x54>
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e7fe      	b.n	80090a2 <prvDeleteTCB+0x52>
	}
 80090a4:	bf00      	nop
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b2:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <prvResetNextTaskUnblockTime+0x38>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090bc:	4b0a      	ldr	r3, [pc, #40]	; (80090e8 <prvResetNextTaskUnblockTime+0x3c>)
 80090be:	f04f 32ff 	mov.w	r2, #4294967295
 80090c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090c4:	e008      	b.n	80090d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <prvResetNextTaskUnblockTime+0x38>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4a04      	ldr	r2, [pc, #16]	; (80090e8 <prvResetNextTaskUnblockTime+0x3c>)
 80090d6:	6013      	str	r3, [r2, #0]
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	20000d50 	.word	0x20000d50
 80090e8:	20000db8 	.word	0x20000db8

080090ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090f2:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <xTaskGetSchedulerState+0x34>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090fa:	2301      	movs	r3, #1
 80090fc:	607b      	str	r3, [r7, #4]
 80090fe:	e008      	b.n	8009112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009100:	4b08      	ldr	r3, [pc, #32]	; (8009124 <xTaskGetSchedulerState+0x38>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d102      	bne.n	800910e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009108:	2302      	movs	r3, #2
 800910a:	607b      	str	r3, [r7, #4]
 800910c:	e001      	b.n	8009112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800910e:	2300      	movs	r3, #0
 8009110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009112:	687b      	ldr	r3, [r7, #4]
	}
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	20000da4 	.word	0x20000da4
 8009124:	20000dc0 	.word	0x20000dc0

08009128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d054      	beq.n	80091e8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800913e:	4b2d      	ldr	r3, [pc, #180]	; (80091f4 <xTaskPriorityDisinherit+0xcc>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	429a      	cmp	r2, r3
 8009146:	d009      	beq.n	800915c <xTaskPriorityDisinherit+0x34>
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	e7fe      	b.n	800915a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <xTaskPriorityDisinherit+0x50>
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	60bb      	str	r3, [r7, #8]
 8009176:	e7fe      	b.n	8009176 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917c:	1e5a      	subs	r2, r3, #1
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800918a:	429a      	cmp	r2, r3
 800918c:	d02c      	beq.n	80091e8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009192:	2b00      	cmp	r3, #0
 8009194:	d128      	bne.n	80091e8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	3304      	adds	r3, #4
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fca0 	bl	8007ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b8:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <xTaskPriorityDisinherit+0xd0>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d903      	bls.n	80091c8 <xTaskPriorityDisinherit+0xa0>
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	4a0c      	ldr	r2, [pc, #48]	; (80091f8 <xTaskPriorityDisinherit+0xd0>)
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4a09      	ldr	r2, [pc, #36]	; (80091fc <xTaskPriorityDisinherit+0xd4>)
 80091d6:	441a      	add	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	3304      	adds	r3, #4
 80091dc:	4619      	mov	r1, r3
 80091de:	4610      	mov	r0, r2
 80091e0:	f7fe fc21 	bl	8007a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091e4:	2301      	movs	r3, #1
 80091e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091e8:	697b      	ldr	r3, [r7, #20]
	}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	200008c4 	.word	0x200008c4
 80091f8:	20000da0 	.word	0x20000da0
 80091fc:	200008c8 	.word	0x200008c8

08009200 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800920a:	4b21      	ldr	r3, [pc, #132]	; (8009290 <prvAddCurrentTaskToDelayedList+0x90>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009210:	4b20      	ldr	r3, [pc, #128]	; (8009294 <prvAddCurrentTaskToDelayedList+0x94>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3304      	adds	r3, #4
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe fc62 	bl	8007ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009222:	d10a      	bne.n	800923a <prvAddCurrentTaskToDelayedList+0x3a>
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d007      	beq.n	800923a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800922a:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <prvAddCurrentTaskToDelayedList+0x94>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3304      	adds	r3, #4
 8009230:	4619      	mov	r1, r3
 8009232:	4819      	ldr	r0, [pc, #100]	; (8009298 <prvAddCurrentTaskToDelayedList+0x98>)
 8009234:	f7fe fbf7 	bl	8007a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009238:	e026      	b.n	8009288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4413      	add	r3, r2
 8009240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009242:	4b14      	ldr	r3, [pc, #80]	; (8009294 <prvAddCurrentTaskToDelayedList+0x94>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	429a      	cmp	r2, r3
 8009250:	d209      	bcs.n	8009266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	4b0f      	ldr	r3, [pc, #60]	; (8009294 <prvAddCurrentTaskToDelayedList+0x94>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f7fe fc05 	bl	8007a6e <vListInsert>
}
 8009264:	e010      	b.n	8009288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009266:	4b0e      	ldr	r3, [pc, #56]	; (80092a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <prvAddCurrentTaskToDelayedList+0x94>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f7fe fbfb 	bl	8007a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009278:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	429a      	cmp	r2, r3
 8009280:	d202      	bcs.n	8009288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009282:	4a08      	ldr	r2, [pc, #32]	; (80092a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	6013      	str	r3, [r2, #0]
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000d9c 	.word	0x20000d9c
 8009294:	200008c4 	.word	0x200008c4
 8009298:	20000d84 	.word	0x20000d84
 800929c:	20000d54 	.word	0x20000d54
 80092a0:	20000d50 	.word	0x20000d50
 80092a4:	20000db8 	.word	0x20000db8

080092a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08a      	sub	sp, #40	; 0x28
 80092ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092b2:	f000 faff 	bl	80098b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092b6:	4b1c      	ldr	r3, [pc, #112]	; (8009328 <xTimerCreateTimerTask+0x80>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d021      	beq.n	8009302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092c6:	1d3a      	adds	r2, r7, #4
 80092c8:	f107 0108 	add.w	r1, r7, #8
 80092cc:	f107 030c 	add.w	r3, r7, #12
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe fb61 	bl	8007998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	9202      	str	r2, [sp, #8]
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	2302      	movs	r3, #2
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	2300      	movs	r3, #0
 80092e6:	460a      	mov	r2, r1
 80092e8:	4910      	ldr	r1, [pc, #64]	; (800932c <xTimerCreateTimerTask+0x84>)
 80092ea:	4811      	ldr	r0, [pc, #68]	; (8009330 <xTimerCreateTimerTask+0x88>)
 80092ec:	f7ff f8f6 	bl	80084dc <xTaskCreateStatic>
 80092f0:	4602      	mov	r2, r0
 80092f2:	4b10      	ldr	r3, [pc, #64]	; (8009334 <xTimerCreateTimerTask+0x8c>)
 80092f4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092f6:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <xTimerCreateTimerTask+0x8c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092fe:	2301      	movs	r3, #1
 8009300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <xTimerCreateTimerTask+0x74>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	613b      	str	r3, [r7, #16]
 800931a:	e7fe      	b.n	800931a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800931c:	697b      	ldr	r3, [r7, #20]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000df4 	.word	0x20000df4
 800932c:	0800dd94 	.word	0x0800dd94
 8009330:	08009469 	.word	0x08009469
 8009334:	20000df8 	.word	0x20000df8

08009338 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009346:	2300      	movs	r3, #0
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <xTimerGenericCommand+0x2c>
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	623b      	str	r3, [r7, #32]
 8009362:	e7fe      	b.n	8009362 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009364:	4b19      	ldr	r3, [pc, #100]	; (80093cc <xTimerGenericCommand+0x94>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d02a      	beq.n	80093c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b05      	cmp	r3, #5
 800937c:	dc18      	bgt.n	80093b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800937e:	f7ff feb5 	bl	80090ec <xTaskGetSchedulerState>
 8009382:	4603      	mov	r3, r0
 8009384:	2b02      	cmp	r3, #2
 8009386:	d109      	bne.n	800939c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009388:	4b10      	ldr	r3, [pc, #64]	; (80093cc <xTimerGenericCommand+0x94>)
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	f107 0110 	add.w	r1, r7, #16
 8009390:	2300      	movs	r3, #0
 8009392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009394:	f7fe fccc 	bl	8007d30 <xQueueGenericSend>
 8009398:	6278      	str	r0, [r7, #36]	; 0x24
 800939a:	e012      	b.n	80093c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800939c:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <xTimerGenericCommand+0x94>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	f107 0110 	add.w	r1, r7, #16
 80093a4:	2300      	movs	r3, #0
 80093a6:	2200      	movs	r2, #0
 80093a8:	f7fe fcc2 	bl	8007d30 <xQueueGenericSend>
 80093ac:	6278      	str	r0, [r7, #36]	; 0x24
 80093ae:	e008      	b.n	80093c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093b0:	4b06      	ldr	r3, [pc, #24]	; (80093cc <xTimerGenericCommand+0x94>)
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	f107 0110 	add.w	r1, r7, #16
 80093b8:	2300      	movs	r3, #0
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	f7fe fdb2 	bl	8007f24 <xQueueGenericSendFromISR>
 80093c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3728      	adds	r7, #40	; 0x28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000df4 	.word	0x20000df4

080093d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af02      	add	r7, sp, #8
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093da:	4b22      	ldr	r3, [pc, #136]	; (8009464 <prvProcessExpiredTimer+0x94>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe fb79 	bl	8007ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d021      	beq.n	8009440 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	18d1      	adds	r1, r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	6978      	ldr	r0, [r7, #20]
 800940a:	f000 f8d1 	bl	80095b0 <prvInsertTimerInActiveList>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01e      	beq.n	8009452 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009414:	2300      	movs	r3, #0
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	2100      	movs	r1, #0
 800941e:	6978      	ldr	r0, [r7, #20]
 8009420:	f7ff ff8a 	bl	8009338 <xTimerGenericCommand>
 8009424:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d112      	bne.n	8009452 <prvProcessExpiredTimer+0x82>
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	e7fe      	b.n	800943e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009446:	f023 0301 	bic.w	r3, r3, #1
 800944a:	b2da      	uxtb	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	6978      	ldr	r0, [r7, #20]
 8009458:	4798      	blx	r3
}
 800945a:	bf00      	nop
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000dec 	.word	0x20000dec

08009468 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009470:	f107 0308 	add.w	r3, r7, #8
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f857 	bl	8009528 <prvGetNextExpireTime>
 800947a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4619      	mov	r1, r3
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f803 	bl	800948c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009486:	f000 f8d5 	bl	8009634 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800948a:	e7f1      	b.n	8009470 <prvTimerTask+0x8>

0800948c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009496:	f7ff fa57 	bl	8008948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800949a:	f107 0308 	add.w	r3, r7, #8
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 f866 	bl	8009570 <prvSampleTimeNow>
 80094a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d130      	bne.n	800950e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <prvProcessTimerOrBlockTask+0x3c>
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d806      	bhi.n	80094c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094ba:	f7ff fa53 	bl	8008964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff ff85 	bl	80093d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094c6:	e024      	b.n	8009512 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d008      	beq.n	80094e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <prvProcessTimerOrBlockTask+0x90>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <prvProcessTimerOrBlockTask+0x50>
 80094d8:	2301      	movs	r3, #1
 80094da:	e000      	b.n	80094de <prvProcessTimerOrBlockTask+0x52>
 80094dc:	2300      	movs	r3, #0
 80094de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094e0:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <prvProcessTimerOrBlockTask+0x94>)
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	f7fe ffc1 	bl	8008474 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094f2:	f7ff fa37 	bl	8008964 <xTaskResumeAll>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094fc:	4b09      	ldr	r3, [pc, #36]	; (8009524 <prvProcessTimerOrBlockTask+0x98>)
 80094fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	f3bf 8f6f 	isb	sy
}
 800950c:	e001      	b.n	8009512 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800950e:	f7ff fa29 	bl	8008964 <xTaskResumeAll>
}
 8009512:	bf00      	nop
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20000df0 	.word	0x20000df0
 8009520:	20000df4 	.word	0x20000df4
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009530:	4b0e      	ldr	r3, [pc, #56]	; (800956c <prvGetNextExpireTime+0x44>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <prvGetNextExpireTime+0x16>
 800953a:	2201      	movs	r2, #1
 800953c:	e000      	b.n	8009540 <prvGetNextExpireTime+0x18>
 800953e:	2200      	movs	r2, #0
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d105      	bne.n	8009558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <prvGetNextExpireTime+0x44>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	e001      	b.n	800955c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800955c:	68fb      	ldr	r3, [r7, #12]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20000dec 	.word	0x20000dec

08009570 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009578:	f7ff fa90 	bl	8008a9c <xTaskGetTickCount>
 800957c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800957e:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <prvSampleTimeNow+0x3c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	429a      	cmp	r2, r3
 8009586:	d205      	bcs.n	8009594 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009588:	f000 f930 	bl	80097ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	e002      	b.n	800959a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800959a:	4a04      	ldr	r2, [pc, #16]	; (80095ac <prvSampleTimeNow+0x3c>)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095a0:	68fb      	ldr	r3, [r7, #12]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20000dfc 	.word	0x20000dfc

080095b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d812      	bhi.n	80095fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d302      	bcc.n	80095ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	e01b      	b.n	8009622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095ea:	4b10      	ldr	r3, [pc, #64]	; (800962c <prvInsertTimerInActiveList+0x7c>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f7fe fa3a 	bl	8007a6e <vListInsert>
 80095fa:	e012      	b.n	8009622 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d206      	bcs.n	8009612 <prvInsertTimerInActiveList+0x62>
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d302      	bcc.n	8009612 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e007      	b.n	8009622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <prvInsertTimerInActiveList+0x80>)
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3304      	adds	r3, #4
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f7fe fa26 	bl	8007a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009622:	697b      	ldr	r3, [r7, #20]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000df0 	.word	0x20000df0
 8009630:	20000dec 	.word	0x20000dec

08009634 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08e      	sub	sp, #56	; 0x38
 8009638:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800963a:	e0c6      	b.n	80097ca <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	da17      	bge.n	8009672 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009642:	1d3b      	adds	r3, r7, #4
 8009644:	3304      	adds	r3, #4
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d109      	bne.n	8009662 <prvProcessReceivedCommands+0x2e>
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	e7fe      	b.n	8009660 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009668:	6850      	ldr	r0, [r2, #4]
 800966a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800966c:	6892      	ldr	r2, [r2, #8]
 800966e:	4611      	mov	r1, r2
 8009670:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f2c0 80a7 	blt.w	80097c8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	3304      	adds	r3, #4
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fa28 	bl	8007ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009690:	463b      	mov	r3, r7
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff ff6c 	bl	8009570 <prvSampleTimeNow>
 8009698:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b09      	cmp	r3, #9
 800969e:	f200 8094 	bhi.w	80097ca <prvProcessReceivedCommands+0x196>
 80096a2:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <prvProcessReceivedCommands+0x74>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d1 	.word	0x080096d1
 80096b0:	080096d1 	.word	0x080096d1
 80096b4:	08009743 	.word	0x08009743
 80096b8:	08009757 	.word	0x08009757
 80096bc:	0800979f 	.word	0x0800979f
 80096c0:	080096d1 	.word	0x080096d1
 80096c4:	080096d1 	.word	0x080096d1
 80096c8:	08009743 	.word	0x08009743
 80096cc:	08009757 	.word	0x08009757
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	18d1      	adds	r1, r2, r3
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f0:	f7ff ff5e 	bl	80095b0 <prvInsertTimerInActiveList>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d067      	beq.n	80097ca <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d05c      	beq.n	80097ca <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	441a      	add	r2, r3
 8009718:	2300      	movs	r3, #0
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2300      	movs	r3, #0
 800971e:	2100      	movs	r1, #0
 8009720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009722:	f7ff fe09 	bl	8009338 <xTimerGenericCommand>
 8009726:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d14d      	bne.n	80097ca <prvProcessReceivedCommands+0x196>
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	e7fe      	b.n	8009740 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009748:	f023 0301 	bic.w	r3, r3, #1
 800974c:	b2da      	uxtb	r2, r3
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009754:	e039      	b.n	80097ca <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800975c:	f043 0301 	orr.w	r3, r3, #1
 8009760:	b2da      	uxtb	r2, r3
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <prvProcessReceivedCommands+0x156>
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e7fe      	b.n	8009788 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	18d1      	adds	r1, r2, r3
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009798:	f7ff ff0a 	bl	80095b0 <prvInsertTimerInActiveList>
					break;
 800979c:	e015      	b.n	80097ca <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80097ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ae:	f000 fbc1 	bl	8009f34 <vPortFree>
 80097b2:	e00a      	b.n	80097ca <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ba:	f023 0301 	bic.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097c6:	e000      	b.n	80097ca <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097ca:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <prvProcessReceivedCommands+0x1b4>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	1d39      	adds	r1, r7, #4
 80097d0:	2200      	movs	r2, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fc3a 	bl	800804c <xQueueReceive>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f47f af2e 	bne.w	800963c <prvProcessReceivedCommands+0x8>
	}
}
 80097e0:	bf00      	nop
 80097e2:	3730      	adds	r7, #48	; 0x30
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000df4 	.word	0x20000df4

080097ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097f2:	e047      	b.n	8009884 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097f4:	4b2d      	ldr	r3, [pc, #180]	; (80098ac <prvSwitchTimerLists+0xc0>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fe:	4b2b      	ldr	r3, [pc, #172]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3304      	adds	r3, #4
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe f967 	bl	8007ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	d02d      	beq.n	8009884 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4413      	add	r3, r2
 8009830:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	429a      	cmp	r2, r3
 8009838:	d90e      	bls.n	8009858 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009846:	4b19      	ldr	r3, [pc, #100]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3304      	adds	r3, #4
 800984e:	4619      	mov	r1, r3
 8009850:	4610      	mov	r0, r2
 8009852:	f7fe f90c 	bl	8007a6e <vListInsert>
 8009856:	e015      	b.n	8009884 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009858:	2300      	movs	r3, #0
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	2300      	movs	r3, #0
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	2100      	movs	r1, #0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7ff fd68 	bl	8009338 <xTimerGenericCommand>
 8009868:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d109      	bne.n	8009884 <prvSwitchTimerLists+0x98>
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	603b      	str	r3, [r7, #0]
 8009882:	e7fe      	b.n	8009882 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009884:	4b09      	ldr	r3, [pc, #36]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1b2      	bne.n	80097f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800988e:	4b07      	ldr	r3, [pc, #28]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <prvSwitchTimerLists+0xc4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a04      	ldr	r2, [pc, #16]	; (80098ac <prvSwitchTimerLists+0xc0>)
 800989a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800989c:	4a04      	ldr	r2, [pc, #16]	; (80098b0 <prvSwitchTimerLists+0xc4>)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6013      	str	r3, [r2, #0]
}
 80098a2:	bf00      	nop
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20000dec 	.word	0x20000dec
 80098b0:	20000df0 	.word	0x20000df0

080098b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098ba:	f000 f95f 	bl	8009b7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098be:	4b15      	ldr	r3, [pc, #84]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d120      	bne.n	8009908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098c6:	4814      	ldr	r0, [pc, #80]	; (8009918 <prvCheckForValidListAndQueue+0x64>)
 80098c8:	f7fe f880 	bl	80079cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098cc:	4813      	ldr	r0, [pc, #76]	; (800991c <prvCheckForValidListAndQueue+0x68>)
 80098ce:	f7fe f87d 	bl	80079cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098d2:	4b13      	ldr	r3, [pc, #76]	; (8009920 <prvCheckForValidListAndQueue+0x6c>)
 80098d4:	4a10      	ldr	r2, [pc, #64]	; (8009918 <prvCheckForValidListAndQueue+0x64>)
 80098d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <prvCheckForValidListAndQueue+0x70>)
 80098da:	4a10      	ldr	r2, [pc, #64]	; (800991c <prvCheckForValidListAndQueue+0x68>)
 80098dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098de:	2300      	movs	r3, #0
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4b11      	ldr	r3, [pc, #68]	; (8009928 <prvCheckForValidListAndQueue+0x74>)
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <prvCheckForValidListAndQueue+0x78>)
 80098e6:	2110      	movs	r1, #16
 80098e8:	200a      	movs	r0, #10
 80098ea:	f7fe f98b 	bl	8007c04 <xQueueGenericCreateStatic>
 80098ee:	4602      	mov	r2, r0
 80098f0:	4b08      	ldr	r3, [pc, #32]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098f4:	4b07      	ldr	r3, [pc, #28]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	490b      	ldr	r1, [pc, #44]	; (8009930 <prvCheckForValidListAndQueue+0x7c>)
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fd8e 	bl	8008424 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009908:	f000 f966 	bl	8009bd8 <vPortExitCritical>
}
 800990c:	bf00      	nop
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20000df4 	.word	0x20000df4
 8009918:	20000dc4 	.word	0x20000dc4
 800991c:	20000dd8 	.word	0x20000dd8
 8009920:	20000dec 	.word	0x20000dec
 8009924:	20000df0 	.word	0x20000df0
 8009928:	20000ea0 	.word	0x20000ea0
 800992c:	20000e00 	.word	0x20000e00
 8009930:	0800dd9c 	.word	0x0800dd9c

08009934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3b04      	subs	r3, #4
 8009944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800994c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3b04      	subs	r3, #4
 8009952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f023 0201 	bic.w	r2, r3, #1
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3b04      	subs	r3, #4
 8009962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009964:	4a0c      	ldr	r2, [pc, #48]	; (8009998 <pxPortInitialiseStack+0x64>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b14      	subs	r3, #20
 800996e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3b04      	subs	r3, #4
 800997a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f06f 0202 	mvn.w	r2, #2
 8009982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3b20      	subs	r3, #32
 8009988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800998a:	68fb      	ldr	r3, [r7, #12]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	0800999d 	.word	0x0800999d

0800999c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099a6:	4b11      	ldr	r3, [pc, #68]	; (80099ec <prvTaskExitError+0x50>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d009      	beq.n	80099c4 <prvTaskExitError+0x28>
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e7fe      	b.n	80099c2 <prvTaskExitError+0x26>
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099d6:	bf00      	nop
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0fc      	beq.n	80099d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099de:	bf00      	nop
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	2000000c 	.word	0x2000000c

080099f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <pxCurrentTCBConst2>)
 80099f2:	6819      	ldr	r1, [r3, #0]
 80099f4:	6808      	ldr	r0, [r1, #0]
 80099f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fa:	f380 8809 	msr	PSP, r0
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f04f 0000 	mov.w	r0, #0
 8009a06:	f380 8811 	msr	BASEPRI, r0
 8009a0a:	4770      	bx	lr
 8009a0c:	f3af 8000 	nop.w

08009a10 <pxCurrentTCBConst2>:
 8009a10:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop

08009a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a18:	4808      	ldr	r0, [pc, #32]	; (8009a3c <prvPortStartFirstTask+0x24>)
 8009a1a:	6800      	ldr	r0, [r0, #0]
 8009a1c:	6800      	ldr	r0, [r0, #0]
 8009a1e:	f380 8808 	msr	MSP, r0
 8009a22:	f04f 0000 	mov.w	r0, #0
 8009a26:	f380 8814 	msr	CONTROL, r0
 8009a2a:	b662      	cpsie	i
 8009a2c:	b661      	cpsie	f
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	df00      	svc	0
 8009a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a3a:	bf00      	nop
 8009a3c:	e000ed08 	.word	0xe000ed08

08009a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a46:	4b44      	ldr	r3, [pc, #272]	; (8009b58 <xPortStartScheduler+0x118>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a44      	ldr	r2, [pc, #272]	; (8009b5c <xPortStartScheduler+0x11c>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d109      	bne.n	8009a64 <xPortStartScheduler+0x24>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	613b      	str	r3, [r7, #16]
 8009a62:	e7fe      	b.n	8009a62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a64:	4b3c      	ldr	r3, [pc, #240]	; (8009b58 <xPortStartScheduler+0x118>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a3d      	ldr	r2, [pc, #244]	; (8009b60 <xPortStartScheduler+0x120>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d109      	bne.n	8009a82 <xPortStartScheduler+0x42>
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	e7fe      	b.n	8009a80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a82:	4b38      	ldr	r3, [pc, #224]	; (8009b64 <xPortStartScheduler+0x124>)
 8009a84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	22ff      	movs	r2, #255	; 0xff
 8009a92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	4b30      	ldr	r3, [pc, #192]	; (8009b68 <xPortStartScheduler+0x128>)
 8009aa8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009aaa:	4b30      	ldr	r3, [pc, #192]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009aac:	2207      	movs	r2, #7
 8009aae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ab0:	e009      	b.n	8009ac6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009ab2:	4b2e      	ldr	r3, [pc, #184]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	4a2c      	ldr	r2, [pc, #176]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009aba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ac6:	78fb      	ldrb	r3, [r7, #3]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b80      	cmp	r3, #128	; 0x80
 8009ad0:	d0ef      	beq.n	8009ab2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ad2:	4b26      	ldr	r3, [pc, #152]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f1c3 0307 	rsb	r3, r3, #7
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d009      	beq.n	8009af2 <xPortStartScheduler+0xb2>
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60bb      	str	r3, [r7, #8]
 8009af0:	e7fe      	b.n	8009af0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009af2:	4b1e      	ldr	r3, [pc, #120]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	4a1c      	ldr	r2, [pc, #112]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009afa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009afc:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b04:	4a19      	ldr	r2, [pc, #100]	; (8009b6c <xPortStartScheduler+0x12c>)
 8009b06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b10:	4b17      	ldr	r3, [pc, #92]	; (8009b70 <xPortStartScheduler+0x130>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <xPortStartScheduler+0x130>)
 8009b16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b1c:	4b14      	ldr	r3, [pc, #80]	; (8009b70 <xPortStartScheduler+0x130>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a13      	ldr	r2, [pc, #76]	; (8009b70 <xPortStartScheduler+0x130>)
 8009b22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b28:	f000 f8d6 	bl	8009cd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b2c:	4b11      	ldr	r3, [pc, #68]	; (8009b74 <xPortStartScheduler+0x134>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b32:	f000 f8f5 	bl	8009d20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b36:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <xPortStartScheduler+0x138>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a0f      	ldr	r2, [pc, #60]	; (8009b78 <xPortStartScheduler+0x138>)
 8009b3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b42:	f7ff ff69 	bl	8009a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b46:	f7ff f871 	bl	8008c2c <vTaskSwitchContext>
	prvTaskExitError();
 8009b4a:	f7ff ff27 	bl	800999c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	e000ed00 	.word	0xe000ed00
 8009b5c:	410fc271 	.word	0x410fc271
 8009b60:	410fc270 	.word	0x410fc270
 8009b64:	e000e400 	.word	0xe000e400
 8009b68:	20000ef0 	.word	0x20000ef0
 8009b6c:	20000ef4 	.word	0x20000ef4
 8009b70:	e000ed20 	.word	0xe000ed20
 8009b74:	2000000c 	.word	0x2000000c
 8009b78:	e000ef34 	.word	0xe000ef34

08009b7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b94:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <vPortEnterCritical+0x54>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	4a0d      	ldr	r2, [pc, #52]	; (8009bd0 <vPortEnterCritical+0x54>)
 8009b9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <vPortEnterCritical+0x54>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d10e      	bne.n	8009bc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <vPortEnterCritical+0x58>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d009      	beq.n	8009bc4 <vPortEnterCritical+0x48>
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	603b      	str	r3, [r7, #0]
 8009bc2:	e7fe      	b.n	8009bc2 <vPortEnterCritical+0x46>
	}
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	2000000c 	.word	0x2000000c
 8009bd4:	e000ed04 	.word	0xe000ed04

08009bd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bde:	4b11      	ldr	r3, [pc, #68]	; (8009c24 <vPortExitCritical+0x4c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d109      	bne.n	8009bfa <vPortExitCritical+0x22>
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	607b      	str	r3, [r7, #4]
 8009bf8:	e7fe      	b.n	8009bf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009bfa:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <vPortExitCritical+0x4c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	4a08      	ldr	r2, [pc, #32]	; (8009c24 <vPortExitCritical+0x4c>)
 8009c02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c04:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <vPortExitCritical+0x4c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <vPortExitCritical+0x3e>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	2000000c 	.word	0x2000000c
	...

08009c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c30:	f3ef 8009 	mrs	r0, PSP
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	4b15      	ldr	r3, [pc, #84]	; (8009c90 <pxCurrentTCBConst>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	f01e 0f10 	tst.w	lr, #16
 8009c40:	bf08      	it	eq
 8009c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	6010      	str	r0, [r2, #0]
 8009c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c54:	f380 8811 	msr	BASEPRI, r0
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f7fe ffe4 	bl	8008c2c <vTaskSwitchContext>
 8009c64:	f04f 0000 	mov.w	r0, #0
 8009c68:	f380 8811 	msr	BASEPRI, r0
 8009c6c:	bc09      	pop	{r0, r3}
 8009c6e:	6819      	ldr	r1, [r3, #0]
 8009c70:	6808      	ldr	r0, [r1, #0]
 8009c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c76:	f01e 0f10 	tst.w	lr, #16
 8009c7a:	bf08      	it	eq
 8009c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c80:	f380 8809 	msr	PSP, r0
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w

08009c90 <pxCurrentTCBConst>:
 8009c90:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop

08009c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cb0:	f7fe ff04 	bl	8008abc <xTaskIncrementTick>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <SysTick_Handler+0x3c>)
 8009cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <vPortSetupTimerInterrupt+0x34>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ce2:	4b0b      	ldr	r3, [pc, #44]	; (8009d10 <vPortSetupTimerInterrupt+0x38>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ce8:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <vPortSetupTimerInterrupt+0x3c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a0a      	ldr	r2, [pc, #40]	; (8009d18 <vPortSetupTimerInterrupt+0x40>)
 8009cee:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf2:	099b      	lsrs	r3, r3, #6
 8009cf4:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <vPortSetupTimerInterrupt+0x44>)
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cfa:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <vPortSetupTimerInterrupt+0x34>)
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	601a      	str	r2, [r3, #0]
}
 8009d00:	bf00      	nop
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	e000e010 	.word	0xe000e010
 8009d10:	e000e018 	.word	0xe000e018
 8009d14:	20000000 	.word	0x20000000
 8009d18:	10624dd3 	.word	0x10624dd3
 8009d1c:	e000e014 	.word	0xe000e014

08009d20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d30 <vPortEnableVFP+0x10>
 8009d24:	6801      	ldr	r1, [r0, #0]
 8009d26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d2a:	6001      	str	r1, [r0, #0]
 8009d2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d2e:	bf00      	nop
 8009d30:	e000ed88 	.word	0xe000ed88

08009d34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d3a:	f3ef 8305 	mrs	r3, IPSR
 8009d3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b0f      	cmp	r3, #15
 8009d44:	d913      	bls.n	8009d6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d46:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <vPortValidateInterruptPriority+0x6c>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d50:	4b14      	ldr	r3, [pc, #80]	; (8009da4 <vPortValidateInterruptPriority+0x70>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	7afa      	ldrb	r2, [r7, #11]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d209      	bcs.n	8009d6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	607b      	str	r3, [r7, #4]
 8009d6c:	e7fe      	b.n	8009d6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d6e:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <vPortValidateInterruptPriority+0x74>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d76:	4b0d      	ldr	r3, [pc, #52]	; (8009dac <vPortValidateInterruptPriority+0x78>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d909      	bls.n	8009d92 <vPortValidateInterruptPriority+0x5e>
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	603b      	str	r3, [r7, #0]
 8009d90:	e7fe      	b.n	8009d90 <vPortValidateInterruptPriority+0x5c>
	}
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	e000e3f0 	.word	0xe000e3f0
 8009da4:	20000ef0 	.word	0x20000ef0
 8009da8:	e000ed0c 	.word	0xe000ed0c
 8009dac:	20000ef4 	.word	0x20000ef4

08009db0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08a      	sub	sp, #40	; 0x28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009db8:	2300      	movs	r3, #0
 8009dba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009dbc:	f7fe fdc4 	bl	8008948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dc0:	4b57      	ldr	r3, [pc, #348]	; (8009f20 <pvPortMalloc+0x170>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dc8:	f000 f90c 	bl	8009fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009dcc:	4b55      	ldr	r3, [pc, #340]	; (8009f24 <pvPortMalloc+0x174>)
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 808c 	bne.w	8009ef2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01c      	beq.n	8009e1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009de0:	2208      	movs	r2, #8
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d013      	beq.n	8009e1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f023 0307 	bic.w	r3, r3, #7
 8009df8:	3308      	adds	r3, #8
 8009dfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d009      	beq.n	8009e1a <pvPortMalloc+0x6a>
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	e7fe      	b.n	8009e18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d068      	beq.n	8009ef2 <pvPortMalloc+0x142>
 8009e20:	4b41      	ldr	r3, [pc, #260]	; (8009f28 <pvPortMalloc+0x178>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d863      	bhi.n	8009ef2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e2a:	4b40      	ldr	r3, [pc, #256]	; (8009f2c <pvPortMalloc+0x17c>)
 8009e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e2e:	4b3f      	ldr	r3, [pc, #252]	; (8009f2c <pvPortMalloc+0x17c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e34:	e004      	b.n	8009e40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d903      	bls.n	8009e52 <pvPortMalloc+0xa2>
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f1      	bne.n	8009e36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e52:	4b33      	ldr	r3, [pc, #204]	; (8009f20 <pvPortMalloc+0x170>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d04a      	beq.n	8009ef2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2208      	movs	r2, #8
 8009e62:	4413      	add	r3, r2
 8009e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	1ad2      	subs	r2, r2, r3
 8009e76:	2308      	movs	r3, #8
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d91e      	bls.n	8009ebc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d009      	beq.n	8009ea4 <pvPortMalloc+0xf4>
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	613b      	str	r3, [r7, #16]
 8009ea2:	e7fe      	b.n	8009ea2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	1ad2      	subs	r2, r2, r3
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009eb6:	69b8      	ldr	r0, [r7, #24]
 8009eb8:	f000 f8f6 	bl	800a0a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ebc:	4b1a      	ldr	r3, [pc, #104]	; (8009f28 <pvPortMalloc+0x178>)
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <pvPortMalloc+0x178>)
 8009ec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eca:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <pvPortMalloc+0x178>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <pvPortMalloc+0x180>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d203      	bcs.n	8009ede <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ed6:	4b14      	ldr	r3, [pc, #80]	; (8009f28 <pvPortMalloc+0x178>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a15      	ldr	r2, [pc, #84]	; (8009f30 <pvPortMalloc+0x180>)
 8009edc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	4b10      	ldr	r3, [pc, #64]	; (8009f24 <pvPortMalloc+0x174>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ef2:	f7fe fd37 	bl	8008964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d009      	beq.n	8009f14 <pvPortMalloc+0x164>
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e7fe      	b.n	8009f12 <pvPortMalloc+0x162>
	return pvReturn;
 8009f14:	69fb      	ldr	r3, [r7, #28]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3728      	adds	r7, #40	; 0x28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20001cac 	.word	0x20001cac
 8009f24:	20001cb8 	.word	0x20001cb8
 8009f28:	20001cb0 	.word	0x20001cb0
 8009f2c:	20001ca4 	.word	0x20001ca4
 8009f30:	20001cb4 	.word	0x20001cb4

08009f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d046      	beq.n	8009fd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f46:	2308      	movs	r3, #8
 8009f48:	425b      	negs	r3, r3
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	4b20      	ldr	r3, [pc, #128]	; (8009fdc <vPortFree+0xa8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <vPortFree+0x42>
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	e7fe      	b.n	8009f74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d009      	beq.n	8009f92 <vPortFree+0x5e>
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60bb      	str	r3, [r7, #8]
 8009f90:	e7fe      	b.n	8009f90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <vPortFree+0xa8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d019      	beq.n	8009fd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d115      	bne.n	8009fd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <vPortFree+0xa8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	401a      	ands	r2, r3
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fb8:	f7fe fcc6 	bl	8008948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <vPortFree+0xac>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <vPortFree+0xac>)
 8009fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fca:	6938      	ldr	r0, [r7, #16]
 8009fcc:	f000 f86c 	bl	800a0a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009fd0:	f7fe fcc8 	bl	8008964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fd4:	bf00      	nop
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20001cb8 	.word	0x20001cb8
 8009fe0:	20001cb0 	.word	0x20001cb0

08009fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fea:	f640 53ac 	movw	r3, #3500	; 0xdac
 8009fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ff0:	4b27      	ldr	r3, [pc, #156]	; (800a090 <prvHeapInit+0xac>)
 8009ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00c      	beq.n	800a018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3307      	adds	r3, #7
 800a002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	4a1f      	ldr	r2, [pc, #124]	; (800a090 <prvHeapInit+0xac>)
 800a014:	4413      	add	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a01c:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <prvHeapInit+0xb0>)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a022:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <prvHeapInit+0xb0>)
 800a024:	2200      	movs	r2, #0
 800a026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	4413      	add	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a030:	2208      	movs	r2, #8
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0307 	bic.w	r3, r3, #7
 800a03e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4a15      	ldr	r2, [pc, #84]	; (800a098 <prvHeapInit+0xb4>)
 800a044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a046:	4b14      	ldr	r3, [pc, #80]	; (800a098 <prvHeapInit+0xb4>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a04e:	4b12      	ldr	r3, [pc, #72]	; (800a098 <prvHeapInit+0xb4>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	1ad2      	subs	r2, r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a064:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <prvHeapInit+0xb4>)
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <prvHeapInit+0xb8>)
 800a072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <prvHeapInit+0xbc>)
 800a07a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a07c:	4b09      	ldr	r3, [pc, #36]	; (800a0a4 <prvHeapInit+0xc0>)
 800a07e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	20000ef8 	.word	0x20000ef8
 800a094:	20001ca4 	.word	0x20001ca4
 800a098:	20001cac 	.word	0x20001cac
 800a09c:	20001cb4 	.word	0x20001cb4
 800a0a0:	20001cb0 	.word	0x20001cb0
 800a0a4:	20001cb8 	.word	0x20001cb8

0800a0a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0b0:	4b28      	ldr	r3, [pc, #160]	; (800a154 <prvInsertBlockIntoFreeList+0xac>)
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e002      	b.n	800a0bc <prvInsertBlockIntoFreeList+0x14>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d8f7      	bhi.n	800a0b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d108      	bne.n	800a0ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	441a      	add	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d118      	bne.n	800a130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <prvInsertBlockIntoFreeList+0xb0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d00d      	beq.n	800a126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	441a      	add	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e008      	b.n	800a138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a126:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <prvInsertBlockIntoFreeList+0xb0>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e003      	b.n	800a138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d002      	beq.n	800a146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20001ca4 	.word	0x20001ca4
 800a158:	20001cac 	.word	0x20001cac

0800a15c <__errno>:
 800a15c:	4b01      	ldr	r3, [pc, #4]	; (800a164 <__errno+0x8>)
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20000010 	.word	0x20000010

0800a168 <__libc_init_array>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	4e0d      	ldr	r6, [pc, #52]	; (800a1a0 <__libc_init_array+0x38>)
 800a16c:	4c0d      	ldr	r4, [pc, #52]	; (800a1a4 <__libc_init_array+0x3c>)
 800a16e:	1ba4      	subs	r4, r4, r6
 800a170:	10a4      	asrs	r4, r4, #2
 800a172:	2500      	movs	r5, #0
 800a174:	42a5      	cmp	r5, r4
 800a176:	d109      	bne.n	800a18c <__libc_init_array+0x24>
 800a178:	4e0b      	ldr	r6, [pc, #44]	; (800a1a8 <__libc_init_array+0x40>)
 800a17a:	4c0c      	ldr	r4, [pc, #48]	; (800a1ac <__libc_init_array+0x44>)
 800a17c:	f003 fdae 	bl	800dcdc <_init>
 800a180:	1ba4      	subs	r4, r4, r6
 800a182:	10a4      	asrs	r4, r4, #2
 800a184:	2500      	movs	r5, #0
 800a186:	42a5      	cmp	r5, r4
 800a188:	d105      	bne.n	800a196 <__libc_init_array+0x2e>
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a190:	4798      	blx	r3
 800a192:	3501      	adds	r5, #1
 800a194:	e7ee      	b.n	800a174 <__libc_init_array+0xc>
 800a196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a19a:	4798      	blx	r3
 800a19c:	3501      	adds	r5, #1
 800a19e:	e7f2      	b.n	800a186 <__libc_init_array+0x1e>
 800a1a0:	0800e13c 	.word	0x0800e13c
 800a1a4:	0800e13c 	.word	0x0800e13c
 800a1a8:	0800e13c 	.word	0x0800e13c
 800a1ac:	0800e140 	.word	0x0800e140

0800a1b0 <memcpy>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	1e43      	subs	r3, r0, #1
 800a1b4:	440a      	add	r2, r1
 800a1b6:	4291      	cmp	r1, r2
 800a1b8:	d100      	bne.n	800a1bc <memcpy+0xc>
 800a1ba:	bd10      	pop	{r4, pc}
 800a1bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1c4:	e7f7      	b.n	800a1b6 <memcpy+0x6>

0800a1c6 <memset>:
 800a1c6:	4402      	add	r2, r0
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d100      	bne.n	800a1d0 <memset+0xa>
 800a1ce:	4770      	bx	lr
 800a1d0:	f803 1b01 	strb.w	r1, [r3], #1
 800a1d4:	e7f9      	b.n	800a1ca <memset+0x4>

0800a1d6 <__cvt>:
 800a1d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1da:	ec55 4b10 	vmov	r4, r5, d0
 800a1de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1e4:	2d00      	cmp	r5, #0
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	4691      	mov	r9, r2
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	bfb8      	it	lt
 800a1ee:	4622      	movlt	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	f027 0720 	bic.w	r7, r7, #32
 800a1f6:	bfbb      	ittet	lt
 800a1f8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1fc:	461d      	movlt	r5, r3
 800a1fe:	2300      	movge	r3, #0
 800a200:	232d      	movlt	r3, #45	; 0x2d
 800a202:	bfb8      	it	lt
 800a204:	4614      	movlt	r4, r2
 800a206:	2f46      	cmp	r7, #70	; 0x46
 800a208:	700b      	strb	r3, [r1, #0]
 800a20a:	d004      	beq.n	800a216 <__cvt+0x40>
 800a20c:	2f45      	cmp	r7, #69	; 0x45
 800a20e:	d100      	bne.n	800a212 <__cvt+0x3c>
 800a210:	3601      	adds	r6, #1
 800a212:	2102      	movs	r1, #2
 800a214:	e000      	b.n	800a218 <__cvt+0x42>
 800a216:	2103      	movs	r1, #3
 800a218:	ab03      	add	r3, sp, #12
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	ab02      	add	r3, sp, #8
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	4632      	mov	r2, r6
 800a222:	4653      	mov	r3, sl
 800a224:	ec45 4b10 	vmov	d0, r4, r5
 800a228:	f001 fd76 	bl	800bd18 <_dtoa_r>
 800a22c:	2f47      	cmp	r7, #71	; 0x47
 800a22e:	4680      	mov	r8, r0
 800a230:	d102      	bne.n	800a238 <__cvt+0x62>
 800a232:	f019 0f01 	tst.w	r9, #1
 800a236:	d026      	beq.n	800a286 <__cvt+0xb0>
 800a238:	2f46      	cmp	r7, #70	; 0x46
 800a23a:	eb08 0906 	add.w	r9, r8, r6
 800a23e:	d111      	bne.n	800a264 <__cvt+0x8e>
 800a240:	f898 3000 	ldrb.w	r3, [r8]
 800a244:	2b30      	cmp	r3, #48	; 0x30
 800a246:	d10a      	bne.n	800a25e <__cvt+0x88>
 800a248:	2200      	movs	r2, #0
 800a24a:	2300      	movs	r3, #0
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f6 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a254:	b918      	cbnz	r0, 800a25e <__cvt+0x88>
 800a256:	f1c6 0601 	rsb	r6, r6, #1
 800a25a:	f8ca 6000 	str.w	r6, [sl]
 800a25e:	f8da 3000 	ldr.w	r3, [sl]
 800a262:	4499      	add	r9, r3
 800a264:	2200      	movs	r2, #0
 800a266:	2300      	movs	r3, #0
 800a268:	4620      	mov	r0, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f6 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a270:	b938      	cbnz	r0, 800a282 <__cvt+0xac>
 800a272:	2230      	movs	r2, #48	; 0x30
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	454b      	cmp	r3, r9
 800a278:	d205      	bcs.n	800a286 <__cvt+0xb0>
 800a27a:	1c59      	adds	r1, r3, #1
 800a27c:	9103      	str	r1, [sp, #12]
 800a27e:	701a      	strb	r2, [r3, #0]
 800a280:	e7f8      	b.n	800a274 <__cvt+0x9e>
 800a282:	f8cd 900c 	str.w	r9, [sp, #12]
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a28a:	eba3 0308 	sub.w	r3, r3, r8
 800a28e:	4640      	mov	r0, r8
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	b004      	add	sp, #16
 800a294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a298 <__exponent>:
 800a298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29a:	2900      	cmp	r1, #0
 800a29c:	4604      	mov	r4, r0
 800a29e:	bfba      	itte	lt
 800a2a0:	4249      	neglt	r1, r1
 800a2a2:	232d      	movlt	r3, #45	; 0x2d
 800a2a4:	232b      	movge	r3, #43	; 0x2b
 800a2a6:	2909      	cmp	r1, #9
 800a2a8:	f804 2b02 	strb.w	r2, [r4], #2
 800a2ac:	7043      	strb	r3, [r0, #1]
 800a2ae:	dd20      	ble.n	800a2f2 <__exponent+0x5a>
 800a2b0:	f10d 0307 	add.w	r3, sp, #7
 800a2b4:	461f      	mov	r7, r3
 800a2b6:	260a      	movs	r6, #10
 800a2b8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a2bc:	fb06 1115 	mls	r1, r6, r5, r1
 800a2c0:	3130      	adds	r1, #48	; 0x30
 800a2c2:	2d09      	cmp	r5, #9
 800a2c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2c8:	f103 32ff 	add.w	r2, r3, #4294967295
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	dc09      	bgt.n	800a2e4 <__exponent+0x4c>
 800a2d0:	3130      	adds	r1, #48	; 0x30
 800a2d2:	3b02      	subs	r3, #2
 800a2d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a2d8:	42bb      	cmp	r3, r7
 800a2da:	4622      	mov	r2, r4
 800a2dc:	d304      	bcc.n	800a2e8 <__exponent+0x50>
 800a2de:	1a10      	subs	r0, r2, r0
 800a2e0:	b003      	add	sp, #12
 800a2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	e7e7      	b.n	800a2b8 <__exponent+0x20>
 800a2e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ec:	f804 2b01 	strb.w	r2, [r4], #1
 800a2f0:	e7f2      	b.n	800a2d8 <__exponent+0x40>
 800a2f2:	2330      	movs	r3, #48	; 0x30
 800a2f4:	4419      	add	r1, r3
 800a2f6:	7083      	strb	r3, [r0, #2]
 800a2f8:	1d02      	adds	r2, r0, #4
 800a2fa:	70c1      	strb	r1, [r0, #3]
 800a2fc:	e7ef      	b.n	800a2de <__exponent+0x46>
	...

0800a300 <_printf_float>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	b08d      	sub	sp, #52	; 0x34
 800a306:	460c      	mov	r4, r1
 800a308:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a30c:	4616      	mov	r6, r2
 800a30e:	461f      	mov	r7, r3
 800a310:	4605      	mov	r5, r0
 800a312:	f002 fde5 	bl	800cee0 <_localeconv_r>
 800a316:	6803      	ldr	r3, [r0, #0]
 800a318:	9304      	str	r3, [sp, #16]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7f5 ff58 	bl	80001d0 <strlen>
 800a320:	2300      	movs	r3, #0
 800a322:	930a      	str	r3, [sp, #40]	; 0x28
 800a324:	f8d8 3000 	ldr.w	r3, [r8]
 800a328:	9005      	str	r0, [sp, #20]
 800a32a:	3307      	adds	r3, #7
 800a32c:	f023 0307 	bic.w	r3, r3, #7
 800a330:	f103 0208 	add.w	r2, r3, #8
 800a334:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a338:	f8d4 b000 	ldr.w	fp, [r4]
 800a33c:	f8c8 2000 	str.w	r2, [r8]
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a348:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a34c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a350:	9307      	str	r3, [sp, #28]
 800a352:	f8cd 8018 	str.w	r8, [sp, #24]
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	4ba7      	ldr	r3, [pc, #668]	; (800a5f8 <_printf_float+0x2f8>)
 800a35c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a360:	f7f6 fbe4 	bl	8000b2c <__aeabi_dcmpun>
 800a364:	bb70      	cbnz	r0, 800a3c4 <_printf_float+0xc4>
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	4ba3      	ldr	r3, [pc, #652]	; (800a5f8 <_printf_float+0x2f8>)
 800a36c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a370:	f7f6 fbbe 	bl	8000af0 <__aeabi_dcmple>
 800a374:	bb30      	cbnz	r0, 800a3c4 <_printf_float+0xc4>
 800a376:	2200      	movs	r2, #0
 800a378:	2300      	movs	r3, #0
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	f7f6 fbad 	bl	8000adc <__aeabi_dcmplt>
 800a382:	b110      	cbz	r0, 800a38a <_printf_float+0x8a>
 800a384:	232d      	movs	r3, #45	; 0x2d
 800a386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a38a:	4a9c      	ldr	r2, [pc, #624]	; (800a5fc <_printf_float+0x2fc>)
 800a38c:	4b9c      	ldr	r3, [pc, #624]	; (800a600 <_printf_float+0x300>)
 800a38e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a392:	bf8c      	ite	hi
 800a394:	4690      	movhi	r8, r2
 800a396:	4698      	movls	r8, r3
 800a398:	2303      	movs	r3, #3
 800a39a:	f02b 0204 	bic.w	r2, fp, #4
 800a39e:	6123      	str	r3, [r4, #16]
 800a3a0:	6022      	str	r2, [r4, #0]
 800a3a2:	f04f 0900 	mov.w	r9, #0
 800a3a6:	9700      	str	r7, [sp, #0]
 800a3a8:	4633      	mov	r3, r6
 800a3aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f000 f9e6 	bl	800a780 <_printf_common>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	f040 808d 	bne.w	800a4d4 <_printf_float+0x1d4>
 800a3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a3be:	b00d      	add	sp, #52	; 0x34
 800a3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f6 fbae 	bl	8000b2c <__aeabi_dcmpun>
 800a3d0:	b110      	cbz	r0, 800a3d8 <_printf_float+0xd8>
 800a3d2:	4a8c      	ldr	r2, [pc, #560]	; (800a604 <_printf_float+0x304>)
 800a3d4:	4b8c      	ldr	r3, [pc, #560]	; (800a608 <_printf_float+0x308>)
 800a3d6:	e7da      	b.n	800a38e <_printf_float+0x8e>
 800a3d8:	6861      	ldr	r1, [r4, #4]
 800a3da:	1c4b      	adds	r3, r1, #1
 800a3dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a3e0:	a80a      	add	r0, sp, #40	; 0x28
 800a3e2:	d13e      	bne.n	800a462 <_printf_float+0x162>
 800a3e4:	2306      	movs	r3, #6
 800a3e6:	6063      	str	r3, [r4, #4]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a3ee:	ab09      	add	r3, sp, #36	; 0x24
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	ec49 8b10 	vmov	d0, r8, r9
 800a3f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3fa:	6022      	str	r2, [r4, #0]
 800a3fc:	f8cd a004 	str.w	sl, [sp, #4]
 800a400:	6861      	ldr	r1, [r4, #4]
 800a402:	4628      	mov	r0, r5
 800a404:	f7ff fee7 	bl	800a1d6 <__cvt>
 800a408:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a40c:	2b47      	cmp	r3, #71	; 0x47
 800a40e:	4680      	mov	r8, r0
 800a410:	d109      	bne.n	800a426 <_printf_float+0x126>
 800a412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a414:	1cd8      	adds	r0, r3, #3
 800a416:	db02      	blt.n	800a41e <_printf_float+0x11e>
 800a418:	6862      	ldr	r2, [r4, #4]
 800a41a:	4293      	cmp	r3, r2
 800a41c:	dd47      	ble.n	800a4ae <_printf_float+0x1ae>
 800a41e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a422:	fa5f fa8a 	uxtb.w	sl, sl
 800a426:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a42a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a42c:	d824      	bhi.n	800a478 <_printf_float+0x178>
 800a42e:	3901      	subs	r1, #1
 800a430:	4652      	mov	r2, sl
 800a432:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a436:	9109      	str	r1, [sp, #36]	; 0x24
 800a438:	f7ff ff2e 	bl	800a298 <__exponent>
 800a43c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a43e:	1813      	adds	r3, r2, r0
 800a440:	2a01      	cmp	r2, #1
 800a442:	4681      	mov	r9, r0
 800a444:	6123      	str	r3, [r4, #16]
 800a446:	dc02      	bgt.n	800a44e <_printf_float+0x14e>
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	07d1      	lsls	r1, r2, #31
 800a44c:	d501      	bpl.n	800a452 <_printf_float+0x152>
 800a44e:	3301      	adds	r3, #1
 800a450:	6123      	str	r3, [r4, #16]
 800a452:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0a5      	beq.n	800a3a6 <_printf_float+0xa6>
 800a45a:	232d      	movs	r3, #45	; 0x2d
 800a45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a460:	e7a1      	b.n	800a3a6 <_printf_float+0xa6>
 800a462:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a466:	f000 8177 	beq.w	800a758 <_printf_float+0x458>
 800a46a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a46e:	d1bb      	bne.n	800a3e8 <_printf_float+0xe8>
 800a470:	2900      	cmp	r1, #0
 800a472:	d1b9      	bne.n	800a3e8 <_printf_float+0xe8>
 800a474:	2301      	movs	r3, #1
 800a476:	e7b6      	b.n	800a3e6 <_printf_float+0xe6>
 800a478:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a47c:	d119      	bne.n	800a4b2 <_printf_float+0x1b2>
 800a47e:	2900      	cmp	r1, #0
 800a480:	6863      	ldr	r3, [r4, #4]
 800a482:	dd0c      	ble.n	800a49e <_printf_float+0x19e>
 800a484:	6121      	str	r1, [r4, #16]
 800a486:	b913      	cbnz	r3, 800a48e <_printf_float+0x18e>
 800a488:	6822      	ldr	r2, [r4, #0]
 800a48a:	07d2      	lsls	r2, r2, #31
 800a48c:	d502      	bpl.n	800a494 <_printf_float+0x194>
 800a48e:	3301      	adds	r3, #1
 800a490:	440b      	add	r3, r1
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	65a3      	str	r3, [r4, #88]	; 0x58
 800a498:	f04f 0900 	mov.w	r9, #0
 800a49c:	e7d9      	b.n	800a452 <_printf_float+0x152>
 800a49e:	b913      	cbnz	r3, 800a4a6 <_printf_float+0x1a6>
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	07d0      	lsls	r0, r2, #31
 800a4a4:	d501      	bpl.n	800a4aa <_printf_float+0x1aa>
 800a4a6:	3302      	adds	r3, #2
 800a4a8:	e7f3      	b.n	800a492 <_printf_float+0x192>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e7f1      	b.n	800a492 <_printf_float+0x192>
 800a4ae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a4b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	db05      	blt.n	800a4c6 <_printf_float+0x1c6>
 800a4ba:	6822      	ldr	r2, [r4, #0]
 800a4bc:	6123      	str	r3, [r4, #16]
 800a4be:	07d1      	lsls	r1, r2, #31
 800a4c0:	d5e8      	bpl.n	800a494 <_printf_float+0x194>
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	e7e5      	b.n	800a492 <_printf_float+0x192>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfd4      	ite	le
 800a4ca:	f1c3 0302 	rsble	r3, r3, #2
 800a4ce:	2301      	movgt	r3, #1
 800a4d0:	4413      	add	r3, r2
 800a4d2:	e7de      	b.n	800a492 <_printf_float+0x192>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	055a      	lsls	r2, r3, #21
 800a4d8:	d407      	bmi.n	800a4ea <_printf_float+0x1ea>
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	4642      	mov	r2, r8
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	47b8      	blx	r7
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d12b      	bne.n	800a540 <_printf_float+0x240>
 800a4e8:	e767      	b.n	800a3ba <_printf_float+0xba>
 800a4ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a4ee:	f240 80dc 	bls.w	800a6aa <_printf_float+0x3aa>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4fa:	f7f6 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d033      	beq.n	800a56a <_printf_float+0x26a>
 800a502:	2301      	movs	r3, #1
 800a504:	4a41      	ldr	r2, [pc, #260]	; (800a60c <_printf_float+0x30c>)
 800a506:	4631      	mov	r1, r6
 800a508:	4628      	mov	r0, r5
 800a50a:	47b8      	blx	r7
 800a50c:	3001      	adds	r0, #1
 800a50e:	f43f af54 	beq.w	800a3ba <_printf_float+0xba>
 800a512:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a516:	429a      	cmp	r2, r3
 800a518:	db02      	blt.n	800a520 <_printf_float+0x220>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	07d8      	lsls	r0, r3, #31
 800a51e:	d50f      	bpl.n	800a540 <_printf_float+0x240>
 800a520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	f43f af45 	beq.w	800a3ba <_printf_float+0xba>
 800a530:	f04f 0800 	mov.w	r8, #0
 800a534:	f104 091a 	add.w	r9, r4, #26
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	3b01      	subs	r3, #1
 800a53c:	4543      	cmp	r3, r8
 800a53e:	dc09      	bgt.n	800a554 <_printf_float+0x254>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	079b      	lsls	r3, r3, #30
 800a544:	f100 8103 	bmi.w	800a74e <_printf_float+0x44e>
 800a548:	68e0      	ldr	r0, [r4, #12]
 800a54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a54c:	4298      	cmp	r0, r3
 800a54e:	bfb8      	it	lt
 800a550:	4618      	movlt	r0, r3
 800a552:	e734      	b.n	800a3be <_printf_float+0xbe>
 800a554:	2301      	movs	r3, #1
 800a556:	464a      	mov	r2, r9
 800a558:	4631      	mov	r1, r6
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b8      	blx	r7
 800a55e:	3001      	adds	r0, #1
 800a560:	f43f af2b 	beq.w	800a3ba <_printf_float+0xba>
 800a564:	f108 0801 	add.w	r8, r8, #1
 800a568:	e7e6      	b.n	800a538 <_printf_float+0x238>
 800a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dc2b      	bgt.n	800a5c8 <_printf_float+0x2c8>
 800a570:	2301      	movs	r3, #1
 800a572:	4a26      	ldr	r2, [pc, #152]	; (800a60c <_printf_float+0x30c>)
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af1d 	beq.w	800a3ba <_printf_float+0xba>
 800a580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a582:	b923      	cbnz	r3, 800a58e <_printf_float+0x28e>
 800a584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a586:	b913      	cbnz	r3, 800a58e <_printf_float+0x28e>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	07d9      	lsls	r1, r3, #31
 800a58c:	d5d8      	bpl.n	800a540 <_printf_float+0x240>
 800a58e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a592:	4631      	mov	r1, r6
 800a594:	4628      	mov	r0, r5
 800a596:	47b8      	blx	r7
 800a598:	3001      	adds	r0, #1
 800a59a:	f43f af0e 	beq.w	800a3ba <_printf_float+0xba>
 800a59e:	f04f 0900 	mov.w	r9, #0
 800a5a2:	f104 0a1a 	add.w	sl, r4, #26
 800a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a8:	425b      	negs	r3, r3
 800a5aa:	454b      	cmp	r3, r9
 800a5ac:	dc01      	bgt.n	800a5b2 <_printf_float+0x2b2>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	e794      	b.n	800a4dc <_printf_float+0x1dc>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4652      	mov	r2, sl
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b8      	blx	r7
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f43f aefc 	beq.w	800a3ba <_printf_float+0xba>
 800a5c2:	f109 0901 	add.w	r9, r9, #1
 800a5c6:	e7ee      	b.n	800a5a6 <_printf_float+0x2a6>
 800a5c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	bfa8      	it	ge
 800a5d0:	461a      	movge	r2, r3
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	4691      	mov	r9, r2
 800a5d6:	dd07      	ble.n	800a5e8 <_printf_float+0x2e8>
 800a5d8:	4613      	mov	r3, r2
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4642      	mov	r2, r8
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f aee9 	beq.w	800a3ba <_printf_float+0xba>
 800a5e8:	f104 031a 	add.w	r3, r4, #26
 800a5ec:	f04f 0b00 	mov.w	fp, #0
 800a5f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5f4:	9306      	str	r3, [sp, #24]
 800a5f6:	e015      	b.n	800a624 <_printf_float+0x324>
 800a5f8:	7fefffff 	.word	0x7fefffff
 800a5fc:	0800de80 	.word	0x0800de80
 800a600:	0800de7c 	.word	0x0800de7c
 800a604:	0800de88 	.word	0x0800de88
 800a608:	0800de84 	.word	0x0800de84
 800a60c:	0800de8c 	.word	0x0800de8c
 800a610:	2301      	movs	r3, #1
 800a612:	9a06      	ldr	r2, [sp, #24]
 800a614:	4631      	mov	r1, r6
 800a616:	4628      	mov	r0, r5
 800a618:	47b8      	blx	r7
 800a61a:	3001      	adds	r0, #1
 800a61c:	f43f aecd 	beq.w	800a3ba <_printf_float+0xba>
 800a620:	f10b 0b01 	add.w	fp, fp, #1
 800a624:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a628:	ebaa 0309 	sub.w	r3, sl, r9
 800a62c:	455b      	cmp	r3, fp
 800a62e:	dcef      	bgt.n	800a610 <_printf_float+0x310>
 800a630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a634:	429a      	cmp	r2, r3
 800a636:	44d0      	add	r8, sl
 800a638:	db15      	blt.n	800a666 <_printf_float+0x366>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	07da      	lsls	r2, r3, #31
 800a63e:	d412      	bmi.n	800a666 <_printf_float+0x366>
 800a640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a642:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a644:	eba3 020a 	sub.w	r2, r3, sl
 800a648:	eba3 0a01 	sub.w	sl, r3, r1
 800a64c:	4592      	cmp	sl, r2
 800a64e:	bfa8      	it	ge
 800a650:	4692      	movge	sl, r2
 800a652:	f1ba 0f00 	cmp.w	sl, #0
 800a656:	dc0e      	bgt.n	800a676 <_printf_float+0x376>
 800a658:	f04f 0800 	mov.w	r8, #0
 800a65c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a660:	f104 091a 	add.w	r9, r4, #26
 800a664:	e019      	b.n	800a69a <_printf_float+0x39a>
 800a666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a66a:	4631      	mov	r1, r6
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b8      	blx	r7
 800a670:	3001      	adds	r0, #1
 800a672:	d1e5      	bne.n	800a640 <_printf_float+0x340>
 800a674:	e6a1      	b.n	800a3ba <_printf_float+0xba>
 800a676:	4653      	mov	r3, sl
 800a678:	4642      	mov	r2, r8
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	d1e9      	bne.n	800a658 <_printf_float+0x358>
 800a684:	e699      	b.n	800a3ba <_printf_float+0xba>
 800a686:	2301      	movs	r3, #1
 800a688:	464a      	mov	r2, r9
 800a68a:	4631      	mov	r1, r6
 800a68c:	4628      	mov	r0, r5
 800a68e:	47b8      	blx	r7
 800a690:	3001      	adds	r0, #1
 800a692:	f43f ae92 	beq.w	800a3ba <_printf_float+0xba>
 800a696:	f108 0801 	add.w	r8, r8, #1
 800a69a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a69e:	1a9b      	subs	r3, r3, r2
 800a6a0:	eba3 030a 	sub.w	r3, r3, sl
 800a6a4:	4543      	cmp	r3, r8
 800a6a6:	dcee      	bgt.n	800a686 <_printf_float+0x386>
 800a6a8:	e74a      	b.n	800a540 <_printf_float+0x240>
 800a6aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ac:	2a01      	cmp	r2, #1
 800a6ae:	dc01      	bgt.n	800a6b4 <_printf_float+0x3b4>
 800a6b0:	07db      	lsls	r3, r3, #31
 800a6b2:	d53a      	bpl.n	800a72a <_printf_float+0x42a>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b8      	blx	r7
 800a6be:	3001      	adds	r0, #1
 800a6c0:	f43f ae7b 	beq.w	800a3ba <_printf_float+0xba>
 800a6c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	47b8      	blx	r7
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	f108 0801 	add.w	r8, r8, #1
 800a6d4:	f43f ae71 	beq.w	800a3ba <_printf_float+0xba>
 800a6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f103 3aff 	add.w	sl, r3, #4294967295
 800a6e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f7f6 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ea:	b9c8      	cbnz	r0, 800a720 <_printf_float+0x420>
 800a6ec:	4653      	mov	r3, sl
 800a6ee:	4642      	mov	r2, r8
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b8      	blx	r7
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d10e      	bne.n	800a718 <_printf_float+0x418>
 800a6fa:	e65e      	b.n	800a3ba <_printf_float+0xba>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4652      	mov	r2, sl
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	f43f ae57 	beq.w	800a3ba <_printf_float+0xba>
 800a70c:	f108 0801 	add.w	r8, r8, #1
 800a710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a712:	3b01      	subs	r3, #1
 800a714:	4543      	cmp	r3, r8
 800a716:	dcf1      	bgt.n	800a6fc <_printf_float+0x3fc>
 800a718:	464b      	mov	r3, r9
 800a71a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a71e:	e6de      	b.n	800a4de <_printf_float+0x1de>
 800a720:	f04f 0800 	mov.w	r8, #0
 800a724:	f104 0a1a 	add.w	sl, r4, #26
 800a728:	e7f2      	b.n	800a710 <_printf_float+0x410>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e7df      	b.n	800a6ee <_printf_float+0x3ee>
 800a72e:	2301      	movs	r3, #1
 800a730:	464a      	mov	r2, r9
 800a732:	4631      	mov	r1, r6
 800a734:	4628      	mov	r0, r5
 800a736:	47b8      	blx	r7
 800a738:	3001      	adds	r0, #1
 800a73a:	f43f ae3e 	beq.w	800a3ba <_printf_float+0xba>
 800a73e:	f108 0801 	add.w	r8, r8, #1
 800a742:	68e3      	ldr	r3, [r4, #12]
 800a744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a746:	1a9b      	subs	r3, r3, r2
 800a748:	4543      	cmp	r3, r8
 800a74a:	dcf0      	bgt.n	800a72e <_printf_float+0x42e>
 800a74c:	e6fc      	b.n	800a548 <_printf_float+0x248>
 800a74e:	f04f 0800 	mov.w	r8, #0
 800a752:	f104 0919 	add.w	r9, r4, #25
 800a756:	e7f4      	b.n	800a742 <_printf_float+0x442>
 800a758:	2900      	cmp	r1, #0
 800a75a:	f43f ae8b 	beq.w	800a474 <_printf_float+0x174>
 800a75e:	2300      	movs	r3, #0
 800a760:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a764:	ab09      	add	r3, sp, #36	; 0x24
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	ec49 8b10 	vmov	d0, r8, r9
 800a76c:	6022      	str	r2, [r4, #0]
 800a76e:	f8cd a004 	str.w	sl, [sp, #4]
 800a772:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a776:	4628      	mov	r0, r5
 800a778:	f7ff fd2d 	bl	800a1d6 <__cvt>
 800a77c:	4680      	mov	r8, r0
 800a77e:	e648      	b.n	800a412 <_printf_float+0x112>

0800a780 <_printf_common>:
 800a780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	4691      	mov	r9, r2
 800a786:	461f      	mov	r7, r3
 800a788:	688a      	ldr	r2, [r1, #8]
 800a78a:	690b      	ldr	r3, [r1, #16]
 800a78c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a790:	4293      	cmp	r3, r2
 800a792:	bfb8      	it	lt
 800a794:	4613      	movlt	r3, r2
 800a796:	f8c9 3000 	str.w	r3, [r9]
 800a79a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	b112      	cbz	r2, 800a7aa <_printf_common+0x2a>
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	f8c9 3000 	str.w	r3, [r9]
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	0699      	lsls	r1, r3, #26
 800a7ae:	bf42      	ittt	mi
 800a7b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a7b4:	3302      	addmi	r3, #2
 800a7b6:	f8c9 3000 	strmi.w	r3, [r9]
 800a7ba:	6825      	ldr	r5, [r4, #0]
 800a7bc:	f015 0506 	ands.w	r5, r5, #6
 800a7c0:	d107      	bne.n	800a7d2 <_printf_common+0x52>
 800a7c2:	f104 0a19 	add.w	sl, r4, #25
 800a7c6:	68e3      	ldr	r3, [r4, #12]
 800a7c8:	f8d9 2000 	ldr.w	r2, [r9]
 800a7cc:	1a9b      	subs	r3, r3, r2
 800a7ce:	42ab      	cmp	r3, r5
 800a7d0:	dc28      	bgt.n	800a824 <_printf_common+0xa4>
 800a7d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	3300      	adds	r3, #0
 800a7da:	bf18      	it	ne
 800a7dc:	2301      	movne	r3, #1
 800a7de:	0692      	lsls	r2, r2, #26
 800a7e0:	d42d      	bmi.n	800a83e <_printf_common+0xbe>
 800a7e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	47c0      	blx	r8
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d020      	beq.n	800a832 <_printf_common+0xb2>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	68e5      	ldr	r5, [r4, #12]
 800a7f4:	f8d9 2000 	ldr.w	r2, [r9]
 800a7f8:	f003 0306 	and.w	r3, r3, #6
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	bf08      	it	eq
 800a800:	1aad      	subeq	r5, r5, r2
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	6922      	ldr	r2, [r4, #16]
 800a806:	bf0c      	ite	eq
 800a808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a80c:	2500      	movne	r5, #0
 800a80e:	4293      	cmp	r3, r2
 800a810:	bfc4      	itt	gt
 800a812:	1a9b      	subgt	r3, r3, r2
 800a814:	18ed      	addgt	r5, r5, r3
 800a816:	f04f 0900 	mov.w	r9, #0
 800a81a:	341a      	adds	r4, #26
 800a81c:	454d      	cmp	r5, r9
 800a81e:	d11a      	bne.n	800a856 <_printf_common+0xd6>
 800a820:	2000      	movs	r0, #0
 800a822:	e008      	b.n	800a836 <_printf_common+0xb6>
 800a824:	2301      	movs	r3, #1
 800a826:	4652      	mov	r2, sl
 800a828:	4639      	mov	r1, r7
 800a82a:	4630      	mov	r0, r6
 800a82c:	47c0      	blx	r8
 800a82e:	3001      	adds	r0, #1
 800a830:	d103      	bne.n	800a83a <_printf_common+0xba>
 800a832:	f04f 30ff 	mov.w	r0, #4294967295
 800a836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83a:	3501      	adds	r5, #1
 800a83c:	e7c3      	b.n	800a7c6 <_printf_common+0x46>
 800a83e:	18e1      	adds	r1, r4, r3
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	2030      	movs	r0, #48	; 0x30
 800a844:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a848:	4422      	add	r2, r4
 800a84a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a84e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a852:	3302      	adds	r3, #2
 800a854:	e7c5      	b.n	800a7e2 <_printf_common+0x62>
 800a856:	2301      	movs	r3, #1
 800a858:	4622      	mov	r2, r4
 800a85a:	4639      	mov	r1, r7
 800a85c:	4630      	mov	r0, r6
 800a85e:	47c0      	blx	r8
 800a860:	3001      	adds	r0, #1
 800a862:	d0e6      	beq.n	800a832 <_printf_common+0xb2>
 800a864:	f109 0901 	add.w	r9, r9, #1
 800a868:	e7d8      	b.n	800a81c <_printf_common+0x9c>
	...

0800a86c <_printf_i>:
 800a86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a870:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a874:	460c      	mov	r4, r1
 800a876:	7e09      	ldrb	r1, [r1, #24]
 800a878:	b085      	sub	sp, #20
 800a87a:	296e      	cmp	r1, #110	; 0x6e
 800a87c:	4617      	mov	r7, r2
 800a87e:	4606      	mov	r6, r0
 800a880:	4698      	mov	r8, r3
 800a882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a884:	f000 80b3 	beq.w	800a9ee <_printf_i+0x182>
 800a888:	d822      	bhi.n	800a8d0 <_printf_i+0x64>
 800a88a:	2963      	cmp	r1, #99	; 0x63
 800a88c:	d036      	beq.n	800a8fc <_printf_i+0x90>
 800a88e:	d80a      	bhi.n	800a8a6 <_printf_i+0x3a>
 800a890:	2900      	cmp	r1, #0
 800a892:	f000 80b9 	beq.w	800aa08 <_printf_i+0x19c>
 800a896:	2958      	cmp	r1, #88	; 0x58
 800a898:	f000 8083 	beq.w	800a9a2 <_printf_i+0x136>
 800a89c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a8a4:	e032      	b.n	800a90c <_printf_i+0xa0>
 800a8a6:	2964      	cmp	r1, #100	; 0x64
 800a8a8:	d001      	beq.n	800a8ae <_printf_i+0x42>
 800a8aa:	2969      	cmp	r1, #105	; 0x69
 800a8ac:	d1f6      	bne.n	800a89c <_printf_i+0x30>
 800a8ae:	6820      	ldr	r0, [r4, #0]
 800a8b0:	6813      	ldr	r3, [r2, #0]
 800a8b2:	0605      	lsls	r5, r0, #24
 800a8b4:	f103 0104 	add.w	r1, r3, #4
 800a8b8:	d52a      	bpl.n	800a910 <_printf_i+0xa4>
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6011      	str	r1, [r2, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da03      	bge.n	800a8ca <_printf_i+0x5e>
 800a8c2:	222d      	movs	r2, #45	; 0x2d
 800a8c4:	425b      	negs	r3, r3
 800a8c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a8ca:	486f      	ldr	r0, [pc, #444]	; (800aa88 <_printf_i+0x21c>)
 800a8cc:	220a      	movs	r2, #10
 800a8ce:	e039      	b.n	800a944 <_printf_i+0xd8>
 800a8d0:	2973      	cmp	r1, #115	; 0x73
 800a8d2:	f000 809d 	beq.w	800aa10 <_printf_i+0x1a4>
 800a8d6:	d808      	bhi.n	800a8ea <_printf_i+0x7e>
 800a8d8:	296f      	cmp	r1, #111	; 0x6f
 800a8da:	d020      	beq.n	800a91e <_printf_i+0xb2>
 800a8dc:	2970      	cmp	r1, #112	; 0x70
 800a8de:	d1dd      	bne.n	800a89c <_printf_i+0x30>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	f043 0320 	orr.w	r3, r3, #32
 800a8e6:	6023      	str	r3, [r4, #0]
 800a8e8:	e003      	b.n	800a8f2 <_printf_i+0x86>
 800a8ea:	2975      	cmp	r1, #117	; 0x75
 800a8ec:	d017      	beq.n	800a91e <_printf_i+0xb2>
 800a8ee:	2978      	cmp	r1, #120	; 0x78
 800a8f0:	d1d4      	bne.n	800a89c <_printf_i+0x30>
 800a8f2:	2378      	movs	r3, #120	; 0x78
 800a8f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8f8:	4864      	ldr	r0, [pc, #400]	; (800aa8c <_printf_i+0x220>)
 800a8fa:	e055      	b.n	800a9a8 <_printf_i+0x13c>
 800a8fc:	6813      	ldr	r3, [r2, #0]
 800a8fe:	1d19      	adds	r1, r3, #4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6011      	str	r1, [r2, #0]
 800a904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a90c:	2301      	movs	r3, #1
 800a90e:	e08c      	b.n	800aa2a <_printf_i+0x1be>
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	6011      	str	r1, [r2, #0]
 800a914:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a918:	bf18      	it	ne
 800a91a:	b21b      	sxthne	r3, r3
 800a91c:	e7cf      	b.n	800a8be <_printf_i+0x52>
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	6825      	ldr	r5, [r4, #0]
 800a922:	1d18      	adds	r0, r3, #4
 800a924:	6010      	str	r0, [r2, #0]
 800a926:	0628      	lsls	r0, r5, #24
 800a928:	d501      	bpl.n	800a92e <_printf_i+0xc2>
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	e002      	b.n	800a934 <_printf_i+0xc8>
 800a92e:	0668      	lsls	r0, r5, #25
 800a930:	d5fb      	bpl.n	800a92a <_printf_i+0xbe>
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	4854      	ldr	r0, [pc, #336]	; (800aa88 <_printf_i+0x21c>)
 800a936:	296f      	cmp	r1, #111	; 0x6f
 800a938:	bf14      	ite	ne
 800a93a:	220a      	movne	r2, #10
 800a93c:	2208      	moveq	r2, #8
 800a93e:	2100      	movs	r1, #0
 800a940:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a944:	6865      	ldr	r5, [r4, #4]
 800a946:	60a5      	str	r5, [r4, #8]
 800a948:	2d00      	cmp	r5, #0
 800a94a:	f2c0 8095 	blt.w	800aa78 <_printf_i+0x20c>
 800a94e:	6821      	ldr	r1, [r4, #0]
 800a950:	f021 0104 	bic.w	r1, r1, #4
 800a954:	6021      	str	r1, [r4, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d13d      	bne.n	800a9d6 <_printf_i+0x16a>
 800a95a:	2d00      	cmp	r5, #0
 800a95c:	f040 808e 	bne.w	800aa7c <_printf_i+0x210>
 800a960:	4665      	mov	r5, ip
 800a962:	2a08      	cmp	r2, #8
 800a964:	d10b      	bne.n	800a97e <_printf_i+0x112>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	07db      	lsls	r3, r3, #31
 800a96a:	d508      	bpl.n	800a97e <_printf_i+0x112>
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	6862      	ldr	r2, [r4, #4]
 800a970:	429a      	cmp	r2, r3
 800a972:	bfde      	ittt	le
 800a974:	2330      	movle	r3, #48	; 0x30
 800a976:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a97a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a97e:	ebac 0305 	sub.w	r3, ip, r5
 800a982:	6123      	str	r3, [r4, #16]
 800a984:	f8cd 8000 	str.w	r8, [sp]
 800a988:	463b      	mov	r3, r7
 800a98a:	aa03      	add	r2, sp, #12
 800a98c:	4621      	mov	r1, r4
 800a98e:	4630      	mov	r0, r6
 800a990:	f7ff fef6 	bl	800a780 <_printf_common>
 800a994:	3001      	adds	r0, #1
 800a996:	d14d      	bne.n	800aa34 <_printf_i+0x1c8>
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	b005      	add	sp, #20
 800a99e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a2:	4839      	ldr	r0, [pc, #228]	; (800aa88 <_printf_i+0x21c>)
 800a9a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a9a8:	6813      	ldr	r3, [r2, #0]
 800a9aa:	6821      	ldr	r1, [r4, #0]
 800a9ac:	1d1d      	adds	r5, r3, #4
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6015      	str	r5, [r2, #0]
 800a9b2:	060a      	lsls	r2, r1, #24
 800a9b4:	d50b      	bpl.n	800a9ce <_printf_i+0x162>
 800a9b6:	07ca      	lsls	r2, r1, #31
 800a9b8:	bf44      	itt	mi
 800a9ba:	f041 0120 	orrmi.w	r1, r1, #32
 800a9be:	6021      	strmi	r1, [r4, #0]
 800a9c0:	b91b      	cbnz	r3, 800a9ca <_printf_i+0x15e>
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	f022 0220 	bic.w	r2, r2, #32
 800a9c8:	6022      	str	r2, [r4, #0]
 800a9ca:	2210      	movs	r2, #16
 800a9cc:	e7b7      	b.n	800a93e <_printf_i+0xd2>
 800a9ce:	064d      	lsls	r5, r1, #25
 800a9d0:	bf48      	it	mi
 800a9d2:	b29b      	uxthmi	r3, r3
 800a9d4:	e7ef      	b.n	800a9b6 <_printf_i+0x14a>
 800a9d6:	4665      	mov	r5, ip
 800a9d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9dc:	fb02 3311 	mls	r3, r2, r1, r3
 800a9e0:	5cc3      	ldrb	r3, [r0, r3]
 800a9e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	d1f5      	bne.n	800a9d8 <_printf_i+0x16c>
 800a9ec:	e7b9      	b.n	800a962 <_printf_i+0xf6>
 800a9ee:	6813      	ldr	r3, [r2, #0]
 800a9f0:	6825      	ldr	r5, [r4, #0]
 800a9f2:	6961      	ldr	r1, [r4, #20]
 800a9f4:	1d18      	adds	r0, r3, #4
 800a9f6:	6010      	str	r0, [r2, #0]
 800a9f8:	0628      	lsls	r0, r5, #24
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	d501      	bpl.n	800aa02 <_printf_i+0x196>
 800a9fe:	6019      	str	r1, [r3, #0]
 800aa00:	e002      	b.n	800aa08 <_printf_i+0x19c>
 800aa02:	066a      	lsls	r2, r5, #25
 800aa04:	d5fb      	bpl.n	800a9fe <_printf_i+0x192>
 800aa06:	8019      	strh	r1, [r3, #0]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	6123      	str	r3, [r4, #16]
 800aa0c:	4665      	mov	r5, ip
 800aa0e:	e7b9      	b.n	800a984 <_printf_i+0x118>
 800aa10:	6813      	ldr	r3, [r2, #0]
 800aa12:	1d19      	adds	r1, r3, #4
 800aa14:	6011      	str	r1, [r2, #0]
 800aa16:	681d      	ldr	r5, [r3, #0]
 800aa18:	6862      	ldr	r2, [r4, #4]
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7f5 fbdf 	bl	80001e0 <memchr>
 800aa22:	b108      	cbz	r0, 800aa28 <_printf_i+0x1bc>
 800aa24:	1b40      	subs	r0, r0, r5
 800aa26:	6060      	str	r0, [r4, #4]
 800aa28:	6863      	ldr	r3, [r4, #4]
 800aa2a:	6123      	str	r3, [r4, #16]
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa32:	e7a7      	b.n	800a984 <_printf_i+0x118>
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	462a      	mov	r2, r5
 800aa38:	4639      	mov	r1, r7
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	47c0      	blx	r8
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d0aa      	beq.n	800a998 <_printf_i+0x12c>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	079b      	lsls	r3, r3, #30
 800aa46:	d413      	bmi.n	800aa70 <_printf_i+0x204>
 800aa48:	68e0      	ldr	r0, [r4, #12]
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	4298      	cmp	r0, r3
 800aa4e:	bfb8      	it	lt
 800aa50:	4618      	movlt	r0, r3
 800aa52:	e7a3      	b.n	800a99c <_printf_i+0x130>
 800aa54:	2301      	movs	r3, #1
 800aa56:	464a      	mov	r2, r9
 800aa58:	4639      	mov	r1, r7
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	47c0      	blx	r8
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d09a      	beq.n	800a998 <_printf_i+0x12c>
 800aa62:	3501      	adds	r5, #1
 800aa64:	68e3      	ldr	r3, [r4, #12]
 800aa66:	9a03      	ldr	r2, [sp, #12]
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	42ab      	cmp	r3, r5
 800aa6c:	dcf2      	bgt.n	800aa54 <_printf_i+0x1e8>
 800aa6e:	e7eb      	b.n	800aa48 <_printf_i+0x1dc>
 800aa70:	2500      	movs	r5, #0
 800aa72:	f104 0919 	add.w	r9, r4, #25
 800aa76:	e7f5      	b.n	800aa64 <_printf_i+0x1f8>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1ac      	bne.n	800a9d6 <_printf_i+0x16a>
 800aa7c:	7803      	ldrb	r3, [r0, #0]
 800aa7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa86:	e76c      	b.n	800a962 <_printf_i+0xf6>
 800aa88:	0800de8e 	.word	0x0800de8e
 800aa8c:	0800de9f 	.word	0x0800de9f

0800aa90 <_scanf_float>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	469a      	mov	sl, r3
 800aa96:	688b      	ldr	r3, [r1, #8]
 800aa98:	4616      	mov	r6, r2
 800aa9a:	1e5a      	subs	r2, r3, #1
 800aa9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	bf83      	ittte	hi
 800aaa4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800aaa8:	189b      	addhi	r3, r3, r2
 800aaaa:	9301      	strhi	r3, [sp, #4]
 800aaac:	2300      	movls	r3, #0
 800aaae:	bf86      	itte	hi
 800aab0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aab4:	608b      	strhi	r3, [r1, #8]
 800aab6:	9301      	strls	r3, [sp, #4]
 800aab8:	680b      	ldr	r3, [r1, #0]
 800aaba:	4688      	mov	r8, r1
 800aabc:	f04f 0b00 	mov.w	fp, #0
 800aac0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aac4:	f848 3b1c 	str.w	r3, [r8], #28
 800aac8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800aacc:	4607      	mov	r7, r0
 800aace:	460c      	mov	r4, r1
 800aad0:	4645      	mov	r5, r8
 800aad2:	465a      	mov	r2, fp
 800aad4:	46d9      	mov	r9, fp
 800aad6:	f8cd b008 	str.w	fp, [sp, #8]
 800aada:	68a1      	ldr	r1, [r4, #8]
 800aadc:	b181      	cbz	r1, 800ab00 <_scanf_float+0x70>
 800aade:	6833      	ldr	r3, [r6, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b49      	cmp	r3, #73	; 0x49
 800aae4:	d071      	beq.n	800abca <_scanf_float+0x13a>
 800aae6:	d84d      	bhi.n	800ab84 <_scanf_float+0xf4>
 800aae8:	2b39      	cmp	r3, #57	; 0x39
 800aaea:	d840      	bhi.n	800ab6e <_scanf_float+0xde>
 800aaec:	2b31      	cmp	r3, #49	; 0x31
 800aaee:	f080 8088 	bcs.w	800ac02 <_scanf_float+0x172>
 800aaf2:	2b2d      	cmp	r3, #45	; 0x2d
 800aaf4:	f000 8090 	beq.w	800ac18 <_scanf_float+0x188>
 800aaf8:	d815      	bhi.n	800ab26 <_scanf_float+0x96>
 800aafa:	2b2b      	cmp	r3, #43	; 0x2b
 800aafc:	f000 808c 	beq.w	800ac18 <_scanf_float+0x188>
 800ab00:	f1b9 0f00 	cmp.w	r9, #0
 800ab04:	d003      	beq.n	800ab0e <_scanf_float+0x7e>
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	3a01      	subs	r2, #1
 800ab10:	2a01      	cmp	r2, #1
 800ab12:	f200 80ea 	bhi.w	800acea <_scanf_float+0x25a>
 800ab16:	4545      	cmp	r5, r8
 800ab18:	f200 80dc 	bhi.w	800acd4 <_scanf_float+0x244>
 800ab1c:	2601      	movs	r6, #1
 800ab1e:	4630      	mov	r0, r6
 800ab20:	b007      	add	sp, #28
 800ab22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab26:	2b2e      	cmp	r3, #46	; 0x2e
 800ab28:	f000 809f 	beq.w	800ac6a <_scanf_float+0x1da>
 800ab2c:	2b30      	cmp	r3, #48	; 0x30
 800ab2e:	d1e7      	bne.n	800ab00 <_scanf_float+0x70>
 800ab30:	6820      	ldr	r0, [r4, #0]
 800ab32:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ab36:	d064      	beq.n	800ac02 <_scanf_float+0x172>
 800ab38:	9b01      	ldr	r3, [sp, #4]
 800ab3a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ab3e:	6020      	str	r0, [r4, #0]
 800ab40:	f109 0901 	add.w	r9, r9, #1
 800ab44:	b11b      	cbz	r3, 800ab4e <_scanf_float+0xbe>
 800ab46:	3b01      	subs	r3, #1
 800ab48:	3101      	adds	r1, #1
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	60a1      	str	r1, [r4, #8]
 800ab4e:	68a3      	ldr	r3, [r4, #8]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	60a3      	str	r3, [r4, #8]
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	3301      	adds	r3, #1
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	6873      	ldr	r3, [r6, #4]
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	6073      	str	r3, [r6, #4]
 800ab62:	f340 80ac 	ble.w	800acbe <_scanf_float+0x22e>
 800ab66:	6833      	ldr	r3, [r6, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	6033      	str	r3, [r6, #0]
 800ab6c:	e7b5      	b.n	800aada <_scanf_float+0x4a>
 800ab6e:	2b45      	cmp	r3, #69	; 0x45
 800ab70:	f000 8085 	beq.w	800ac7e <_scanf_float+0x1ee>
 800ab74:	2b46      	cmp	r3, #70	; 0x46
 800ab76:	d06a      	beq.n	800ac4e <_scanf_float+0x1be>
 800ab78:	2b41      	cmp	r3, #65	; 0x41
 800ab7a:	d1c1      	bne.n	800ab00 <_scanf_float+0x70>
 800ab7c:	2a01      	cmp	r2, #1
 800ab7e:	d1bf      	bne.n	800ab00 <_scanf_float+0x70>
 800ab80:	2202      	movs	r2, #2
 800ab82:	e046      	b.n	800ac12 <_scanf_float+0x182>
 800ab84:	2b65      	cmp	r3, #101	; 0x65
 800ab86:	d07a      	beq.n	800ac7e <_scanf_float+0x1ee>
 800ab88:	d818      	bhi.n	800abbc <_scanf_float+0x12c>
 800ab8a:	2b54      	cmp	r3, #84	; 0x54
 800ab8c:	d066      	beq.n	800ac5c <_scanf_float+0x1cc>
 800ab8e:	d811      	bhi.n	800abb4 <_scanf_float+0x124>
 800ab90:	2b4e      	cmp	r3, #78	; 0x4e
 800ab92:	d1b5      	bne.n	800ab00 <_scanf_float+0x70>
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	d146      	bne.n	800ac26 <_scanf_float+0x196>
 800ab98:	f1b9 0f00 	cmp.w	r9, #0
 800ab9c:	d145      	bne.n	800ac2a <_scanf_float+0x19a>
 800ab9e:	6821      	ldr	r1, [r4, #0]
 800aba0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800aba4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800aba8:	d13f      	bne.n	800ac2a <_scanf_float+0x19a>
 800abaa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800abae:	6021      	str	r1, [r4, #0]
 800abb0:	2201      	movs	r2, #1
 800abb2:	e02e      	b.n	800ac12 <_scanf_float+0x182>
 800abb4:	2b59      	cmp	r3, #89	; 0x59
 800abb6:	d01e      	beq.n	800abf6 <_scanf_float+0x166>
 800abb8:	2b61      	cmp	r3, #97	; 0x61
 800abba:	e7de      	b.n	800ab7a <_scanf_float+0xea>
 800abbc:	2b6e      	cmp	r3, #110	; 0x6e
 800abbe:	d0e9      	beq.n	800ab94 <_scanf_float+0x104>
 800abc0:	d815      	bhi.n	800abee <_scanf_float+0x15e>
 800abc2:	2b66      	cmp	r3, #102	; 0x66
 800abc4:	d043      	beq.n	800ac4e <_scanf_float+0x1be>
 800abc6:	2b69      	cmp	r3, #105	; 0x69
 800abc8:	d19a      	bne.n	800ab00 <_scanf_float+0x70>
 800abca:	f1bb 0f00 	cmp.w	fp, #0
 800abce:	d138      	bne.n	800ac42 <_scanf_float+0x1b2>
 800abd0:	f1b9 0f00 	cmp.w	r9, #0
 800abd4:	d197      	bne.n	800ab06 <_scanf_float+0x76>
 800abd6:	6821      	ldr	r1, [r4, #0]
 800abd8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800abdc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800abe0:	d195      	bne.n	800ab0e <_scanf_float+0x7e>
 800abe2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800abe6:	6021      	str	r1, [r4, #0]
 800abe8:	f04f 0b01 	mov.w	fp, #1
 800abec:	e011      	b.n	800ac12 <_scanf_float+0x182>
 800abee:	2b74      	cmp	r3, #116	; 0x74
 800abf0:	d034      	beq.n	800ac5c <_scanf_float+0x1cc>
 800abf2:	2b79      	cmp	r3, #121	; 0x79
 800abf4:	d184      	bne.n	800ab00 <_scanf_float+0x70>
 800abf6:	f1bb 0f07 	cmp.w	fp, #7
 800abfa:	d181      	bne.n	800ab00 <_scanf_float+0x70>
 800abfc:	f04f 0b08 	mov.w	fp, #8
 800ac00:	e007      	b.n	800ac12 <_scanf_float+0x182>
 800ac02:	eb12 0f0b 	cmn.w	r2, fp
 800ac06:	f47f af7b 	bne.w	800ab00 <_scanf_float+0x70>
 800ac0a:	6821      	ldr	r1, [r4, #0]
 800ac0c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ac10:	6021      	str	r1, [r4, #0]
 800ac12:	702b      	strb	r3, [r5, #0]
 800ac14:	3501      	adds	r5, #1
 800ac16:	e79a      	b.n	800ab4e <_scanf_float+0xbe>
 800ac18:	6821      	ldr	r1, [r4, #0]
 800ac1a:	0608      	lsls	r0, r1, #24
 800ac1c:	f57f af70 	bpl.w	800ab00 <_scanf_float+0x70>
 800ac20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac24:	e7f4      	b.n	800ac10 <_scanf_float+0x180>
 800ac26:	2a02      	cmp	r2, #2
 800ac28:	d047      	beq.n	800acba <_scanf_float+0x22a>
 800ac2a:	f1bb 0f01 	cmp.w	fp, #1
 800ac2e:	d003      	beq.n	800ac38 <_scanf_float+0x1a8>
 800ac30:	f1bb 0f04 	cmp.w	fp, #4
 800ac34:	f47f af64 	bne.w	800ab00 <_scanf_float+0x70>
 800ac38:	f10b 0b01 	add.w	fp, fp, #1
 800ac3c:	fa5f fb8b 	uxtb.w	fp, fp
 800ac40:	e7e7      	b.n	800ac12 <_scanf_float+0x182>
 800ac42:	f1bb 0f03 	cmp.w	fp, #3
 800ac46:	d0f7      	beq.n	800ac38 <_scanf_float+0x1a8>
 800ac48:	f1bb 0f05 	cmp.w	fp, #5
 800ac4c:	e7f2      	b.n	800ac34 <_scanf_float+0x1a4>
 800ac4e:	f1bb 0f02 	cmp.w	fp, #2
 800ac52:	f47f af55 	bne.w	800ab00 <_scanf_float+0x70>
 800ac56:	f04f 0b03 	mov.w	fp, #3
 800ac5a:	e7da      	b.n	800ac12 <_scanf_float+0x182>
 800ac5c:	f1bb 0f06 	cmp.w	fp, #6
 800ac60:	f47f af4e 	bne.w	800ab00 <_scanf_float+0x70>
 800ac64:	f04f 0b07 	mov.w	fp, #7
 800ac68:	e7d3      	b.n	800ac12 <_scanf_float+0x182>
 800ac6a:	6821      	ldr	r1, [r4, #0]
 800ac6c:	0588      	lsls	r0, r1, #22
 800ac6e:	f57f af47 	bpl.w	800ab00 <_scanf_float+0x70>
 800ac72:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ac76:	6021      	str	r1, [r4, #0]
 800ac78:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac7c:	e7c9      	b.n	800ac12 <_scanf_float+0x182>
 800ac7e:	6821      	ldr	r1, [r4, #0]
 800ac80:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ac84:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ac88:	d006      	beq.n	800ac98 <_scanf_float+0x208>
 800ac8a:	0548      	lsls	r0, r1, #21
 800ac8c:	f57f af38 	bpl.w	800ab00 <_scanf_float+0x70>
 800ac90:	f1b9 0f00 	cmp.w	r9, #0
 800ac94:	f43f af3b 	beq.w	800ab0e <_scanf_float+0x7e>
 800ac98:	0588      	lsls	r0, r1, #22
 800ac9a:	bf58      	it	pl
 800ac9c:	9802      	ldrpl	r0, [sp, #8]
 800ac9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800aca2:	bf58      	it	pl
 800aca4:	eba9 0000 	subpl.w	r0, r9, r0
 800aca8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800acac:	bf58      	it	pl
 800acae:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800acb2:	6021      	str	r1, [r4, #0]
 800acb4:	f04f 0900 	mov.w	r9, #0
 800acb8:	e7ab      	b.n	800ac12 <_scanf_float+0x182>
 800acba:	2203      	movs	r2, #3
 800acbc:	e7a9      	b.n	800ac12 <_scanf_float+0x182>
 800acbe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800acc2:	9205      	str	r2, [sp, #20]
 800acc4:	4631      	mov	r1, r6
 800acc6:	4638      	mov	r0, r7
 800acc8:	4798      	blx	r3
 800acca:	9a05      	ldr	r2, [sp, #20]
 800accc:	2800      	cmp	r0, #0
 800acce:	f43f af04 	beq.w	800aada <_scanf_float+0x4a>
 800acd2:	e715      	b.n	800ab00 <_scanf_float+0x70>
 800acd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800acdc:	4632      	mov	r2, r6
 800acde:	4638      	mov	r0, r7
 800ace0:	4798      	blx	r3
 800ace2:	6923      	ldr	r3, [r4, #16]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	6123      	str	r3, [r4, #16]
 800ace8:	e715      	b.n	800ab16 <_scanf_float+0x86>
 800acea:	f10b 33ff 	add.w	r3, fp, #4294967295
 800acee:	2b06      	cmp	r3, #6
 800acf0:	d80a      	bhi.n	800ad08 <_scanf_float+0x278>
 800acf2:	f1bb 0f02 	cmp.w	fp, #2
 800acf6:	d968      	bls.n	800adca <_scanf_float+0x33a>
 800acf8:	f1ab 0b03 	sub.w	fp, fp, #3
 800acfc:	fa5f fb8b 	uxtb.w	fp, fp
 800ad00:	eba5 0b0b 	sub.w	fp, r5, fp
 800ad04:	455d      	cmp	r5, fp
 800ad06:	d14b      	bne.n	800ada0 <_scanf_float+0x310>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	05da      	lsls	r2, r3, #23
 800ad0c:	d51f      	bpl.n	800ad4e <_scanf_float+0x2be>
 800ad0e:	055b      	lsls	r3, r3, #21
 800ad10:	d468      	bmi.n	800ade4 <_scanf_float+0x354>
 800ad12:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	2965      	cmp	r1, #101	; 0x65
 800ad1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad1e:	f105 3bff 	add.w	fp, r5, #4294967295
 800ad22:	6123      	str	r3, [r4, #16]
 800ad24:	d00d      	beq.n	800ad42 <_scanf_float+0x2b2>
 800ad26:	2945      	cmp	r1, #69	; 0x45
 800ad28:	d00b      	beq.n	800ad42 <_scanf_float+0x2b2>
 800ad2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad2e:	4632      	mov	r2, r6
 800ad30:	4638      	mov	r0, r7
 800ad32:	4798      	blx	r3
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	f1a5 0b02 	sub.w	fp, r5, #2
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad46:	4632      	mov	r2, r6
 800ad48:	4638      	mov	r0, r7
 800ad4a:	4798      	blx	r3
 800ad4c:	465d      	mov	r5, fp
 800ad4e:	6826      	ldr	r6, [r4, #0]
 800ad50:	f016 0610 	ands.w	r6, r6, #16
 800ad54:	d17a      	bne.n	800ae4c <_scanf_float+0x3bc>
 800ad56:	702e      	strb	r6, [r5, #0]
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad62:	d142      	bne.n	800adea <_scanf_float+0x35a>
 800ad64:	9b02      	ldr	r3, [sp, #8]
 800ad66:	eba9 0303 	sub.w	r3, r9, r3
 800ad6a:	425a      	negs	r2, r3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d149      	bne.n	800ae04 <_scanf_float+0x374>
 800ad70:	2200      	movs	r2, #0
 800ad72:	4641      	mov	r1, r8
 800ad74:	4638      	mov	r0, r7
 800ad76:	f000 fea3 	bl	800bac0 <_strtod_r>
 800ad7a:	6825      	ldr	r5, [r4, #0]
 800ad7c:	f8da 3000 	ldr.w	r3, [sl]
 800ad80:	f015 0f02 	tst.w	r5, #2
 800ad84:	f103 0204 	add.w	r2, r3, #4
 800ad88:	ec59 8b10 	vmov	r8, r9, d0
 800ad8c:	f8ca 2000 	str.w	r2, [sl]
 800ad90:	d043      	beq.n	800ae1a <_scanf_float+0x38a>
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	e9c3 8900 	strd	r8, r9, [r3]
 800ad98:	68e3      	ldr	r3, [r4, #12]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	60e3      	str	r3, [r4, #12]
 800ad9e:	e6be      	b.n	800ab1e <_scanf_float+0x8e>
 800ada0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ada4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ada8:	4632      	mov	r2, r6
 800adaa:	4638      	mov	r0, r7
 800adac:	4798      	blx	r3
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	e7a6      	b.n	800ad04 <_scanf_float+0x274>
 800adb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800adbe:	4632      	mov	r2, r6
 800adc0:	4638      	mov	r0, r7
 800adc2:	4798      	blx	r3
 800adc4:	6923      	ldr	r3, [r4, #16]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	6123      	str	r3, [r4, #16]
 800adca:	4545      	cmp	r5, r8
 800adcc:	d8f3      	bhi.n	800adb6 <_scanf_float+0x326>
 800adce:	e6a5      	b.n	800ab1c <_scanf_float+0x8c>
 800add0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800add4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800add8:	4632      	mov	r2, r6
 800adda:	4638      	mov	r0, r7
 800addc:	4798      	blx	r3
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	6123      	str	r3, [r4, #16]
 800ade4:	4545      	cmp	r5, r8
 800ade6:	d8f3      	bhi.n	800add0 <_scanf_float+0x340>
 800ade8:	e698      	b.n	800ab1c <_scanf_float+0x8c>
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0bf      	beq.n	800ad70 <_scanf_float+0x2e0>
 800adf0:	9904      	ldr	r1, [sp, #16]
 800adf2:	230a      	movs	r3, #10
 800adf4:	4632      	mov	r2, r6
 800adf6:	3101      	adds	r1, #1
 800adf8:	4638      	mov	r0, r7
 800adfa:	f000 feed 	bl	800bbd8 <_strtol_r>
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	9d04      	ldr	r5, [sp, #16]
 800ae02:	1ac2      	subs	r2, r0, r3
 800ae04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ae08:	429d      	cmp	r5, r3
 800ae0a:	bf28      	it	cs
 800ae0c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ae10:	490f      	ldr	r1, [pc, #60]	; (800ae50 <_scanf_float+0x3c0>)
 800ae12:	4628      	mov	r0, r5
 800ae14:	f000 f824 	bl	800ae60 <siprintf>
 800ae18:	e7aa      	b.n	800ad70 <_scanf_float+0x2e0>
 800ae1a:	f015 0504 	ands.w	r5, r5, #4
 800ae1e:	d1b8      	bne.n	800ad92 <_scanf_float+0x302>
 800ae20:	681f      	ldr	r7, [r3, #0]
 800ae22:	ee10 2a10 	vmov	r2, s0
 800ae26:	464b      	mov	r3, r9
 800ae28:	ee10 0a10 	vmov	r0, s0
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 fe7d 	bl	8000b2c <__aeabi_dcmpun>
 800ae32:	b128      	cbz	r0, 800ae40 <_scanf_float+0x3b0>
 800ae34:	4628      	mov	r0, r5
 800ae36:	f000 f80d 	bl	800ae54 <nanf>
 800ae3a:	ed87 0a00 	vstr	s0, [r7]
 800ae3e:	e7ab      	b.n	800ad98 <_scanf_float+0x308>
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 fed0 	bl	8000be8 <__aeabi_d2f>
 800ae48:	6038      	str	r0, [r7, #0]
 800ae4a:	e7a5      	b.n	800ad98 <_scanf_float+0x308>
 800ae4c:	2600      	movs	r6, #0
 800ae4e:	e666      	b.n	800ab1e <_scanf_float+0x8e>
 800ae50:	0800deb0 	.word	0x0800deb0

0800ae54 <nanf>:
 800ae54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae5c <nanf+0x8>
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	7fc00000 	.word	0x7fc00000

0800ae60 <siprintf>:
 800ae60:	b40e      	push	{r1, r2, r3}
 800ae62:	b500      	push	{lr}
 800ae64:	b09c      	sub	sp, #112	; 0x70
 800ae66:	ab1d      	add	r3, sp, #116	; 0x74
 800ae68:	9002      	str	r0, [sp, #8]
 800ae6a:	9006      	str	r0, [sp, #24]
 800ae6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae70:	4809      	ldr	r0, [pc, #36]	; (800ae98 <siprintf+0x38>)
 800ae72:	9107      	str	r1, [sp, #28]
 800ae74:	9104      	str	r1, [sp, #16]
 800ae76:	4909      	ldr	r1, [pc, #36]	; (800ae9c <siprintf+0x3c>)
 800ae78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae7c:	9105      	str	r1, [sp, #20]
 800ae7e:	6800      	ldr	r0, [r0, #0]
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	a902      	add	r1, sp, #8
 800ae84:	f002 fd64 	bl	800d950 <_svfiprintf_r>
 800ae88:	9b02      	ldr	r3, [sp, #8]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	b01c      	add	sp, #112	; 0x70
 800ae90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae94:	b003      	add	sp, #12
 800ae96:	4770      	bx	lr
 800ae98:	20000010 	.word	0x20000010
 800ae9c:	ffff0208 	.word	0xffff0208

0800aea0 <sulp>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	4604      	mov	r4, r0
 800aea4:	460d      	mov	r5, r1
 800aea6:	ec45 4b10 	vmov	d0, r4, r5
 800aeaa:	4616      	mov	r6, r2
 800aeac:	f002 fb0c 	bl	800d4c8 <__ulp>
 800aeb0:	ec51 0b10 	vmov	r0, r1, d0
 800aeb4:	b17e      	cbz	r6, 800aed6 <sulp+0x36>
 800aeb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aeba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	dd09      	ble.n	800aed6 <sulp+0x36>
 800aec2:	051b      	lsls	r3, r3, #20
 800aec4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aec8:	2400      	movs	r4, #0
 800aeca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aece:	4622      	mov	r2, r4
 800aed0:	462b      	mov	r3, r5
 800aed2:	f7f5 fb91 	bl	80005f8 <__aeabi_dmul>
 800aed6:	bd70      	pop	{r4, r5, r6, pc}

0800aed8 <_strtod_l>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	461f      	mov	r7, r3
 800aede:	b0a1      	sub	sp, #132	; 0x84
 800aee0:	2300      	movs	r3, #0
 800aee2:	4681      	mov	r9, r0
 800aee4:	4638      	mov	r0, r7
 800aee6:	460e      	mov	r6, r1
 800aee8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeea:	931c      	str	r3, [sp, #112]	; 0x70
 800aeec:	f001 fff5 	bl	800ceda <__localeconv_l>
 800aef0:	4680      	mov	r8, r0
 800aef2:	6800      	ldr	r0, [r0, #0]
 800aef4:	f7f5 f96c 	bl	80001d0 <strlen>
 800aef8:	f04f 0a00 	mov.w	sl, #0
 800aefc:	4604      	mov	r4, r0
 800aefe:	f04f 0b00 	mov.w	fp, #0
 800af02:	961b      	str	r6, [sp, #108]	; 0x6c
 800af04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af06:	781a      	ldrb	r2, [r3, #0]
 800af08:	2a0d      	cmp	r2, #13
 800af0a:	d832      	bhi.n	800af72 <_strtod_l+0x9a>
 800af0c:	2a09      	cmp	r2, #9
 800af0e:	d236      	bcs.n	800af7e <_strtod_l+0xa6>
 800af10:	2a00      	cmp	r2, #0
 800af12:	d03e      	beq.n	800af92 <_strtod_l+0xba>
 800af14:	2300      	movs	r3, #0
 800af16:	930d      	str	r3, [sp, #52]	; 0x34
 800af18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800af1a:	782b      	ldrb	r3, [r5, #0]
 800af1c:	2b30      	cmp	r3, #48	; 0x30
 800af1e:	f040 80ac 	bne.w	800b07a <_strtod_l+0x1a2>
 800af22:	786b      	ldrb	r3, [r5, #1]
 800af24:	2b58      	cmp	r3, #88	; 0x58
 800af26:	d001      	beq.n	800af2c <_strtod_l+0x54>
 800af28:	2b78      	cmp	r3, #120	; 0x78
 800af2a:	d167      	bne.n	800affc <_strtod_l+0x124>
 800af2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	ab1c      	add	r3, sp, #112	; 0x70
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	9702      	str	r7, [sp, #8]
 800af36:	ab1d      	add	r3, sp, #116	; 0x74
 800af38:	4a88      	ldr	r2, [pc, #544]	; (800b15c <_strtod_l+0x284>)
 800af3a:	a91b      	add	r1, sp, #108	; 0x6c
 800af3c:	4648      	mov	r0, r9
 800af3e:	f001 fcf2 	bl	800c926 <__gethex>
 800af42:	f010 0407 	ands.w	r4, r0, #7
 800af46:	4606      	mov	r6, r0
 800af48:	d005      	beq.n	800af56 <_strtod_l+0x7e>
 800af4a:	2c06      	cmp	r4, #6
 800af4c:	d12b      	bne.n	800afa6 <_strtod_l+0xce>
 800af4e:	3501      	adds	r5, #1
 800af50:	2300      	movs	r3, #0
 800af52:	951b      	str	r5, [sp, #108]	; 0x6c
 800af54:	930d      	str	r3, [sp, #52]	; 0x34
 800af56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f040 859a 	bne.w	800ba92 <_strtod_l+0xbba>
 800af5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af60:	b1e3      	cbz	r3, 800af9c <_strtod_l+0xc4>
 800af62:	4652      	mov	r2, sl
 800af64:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af68:	ec43 2b10 	vmov	d0, r2, r3
 800af6c:	b021      	add	sp, #132	; 0x84
 800af6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af72:	2a2b      	cmp	r2, #43	; 0x2b
 800af74:	d015      	beq.n	800afa2 <_strtod_l+0xca>
 800af76:	2a2d      	cmp	r2, #45	; 0x2d
 800af78:	d004      	beq.n	800af84 <_strtod_l+0xac>
 800af7a:	2a20      	cmp	r2, #32
 800af7c:	d1ca      	bne.n	800af14 <_strtod_l+0x3c>
 800af7e:	3301      	adds	r3, #1
 800af80:	931b      	str	r3, [sp, #108]	; 0x6c
 800af82:	e7bf      	b.n	800af04 <_strtod_l+0x2c>
 800af84:	2201      	movs	r2, #1
 800af86:	920d      	str	r2, [sp, #52]	; 0x34
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	921b      	str	r2, [sp, #108]	; 0x6c
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1c2      	bne.n	800af18 <_strtod_l+0x40>
 800af92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af94:	961b      	str	r6, [sp, #108]	; 0x6c
 800af96:	2b00      	cmp	r3, #0
 800af98:	f040 8579 	bne.w	800ba8e <_strtod_l+0xbb6>
 800af9c:	4652      	mov	r2, sl
 800af9e:	465b      	mov	r3, fp
 800afa0:	e7e2      	b.n	800af68 <_strtod_l+0x90>
 800afa2:	2200      	movs	r2, #0
 800afa4:	e7ef      	b.n	800af86 <_strtod_l+0xae>
 800afa6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afa8:	b13a      	cbz	r2, 800afba <_strtod_l+0xe2>
 800afaa:	2135      	movs	r1, #53	; 0x35
 800afac:	a81e      	add	r0, sp, #120	; 0x78
 800afae:	f002 fb83 	bl	800d6b8 <__copybits>
 800afb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afb4:	4648      	mov	r0, r9
 800afb6:	f001 ffef 	bl	800cf98 <_Bfree>
 800afba:	3c01      	subs	r4, #1
 800afbc:	2c04      	cmp	r4, #4
 800afbe:	d806      	bhi.n	800afce <_strtod_l+0xf6>
 800afc0:	e8df f004 	tbb	[pc, r4]
 800afc4:	1714030a 	.word	0x1714030a
 800afc8:	0a          	.byte	0x0a
 800afc9:	00          	.byte	0x00
 800afca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800afce:	0730      	lsls	r0, r6, #28
 800afd0:	d5c1      	bpl.n	800af56 <_strtod_l+0x7e>
 800afd2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800afd6:	e7be      	b.n	800af56 <_strtod_l+0x7e>
 800afd8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800afdc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afe2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afe6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800afea:	e7f0      	b.n	800afce <_strtod_l+0xf6>
 800afec:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b160 <_strtod_l+0x288>
 800aff0:	e7ed      	b.n	800afce <_strtod_l+0xf6>
 800aff2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aff6:	f04f 3aff 	mov.w	sl, #4294967295
 800affa:	e7e8      	b.n	800afce <_strtod_l+0xf6>
 800affc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	921b      	str	r2, [sp, #108]	; 0x6c
 800b002:	785b      	ldrb	r3, [r3, #1]
 800b004:	2b30      	cmp	r3, #48	; 0x30
 800b006:	d0f9      	beq.n	800affc <_strtod_l+0x124>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0a4      	beq.n	800af56 <_strtod_l+0x7e>
 800b00c:	2301      	movs	r3, #1
 800b00e:	2500      	movs	r5, #0
 800b010:	9306      	str	r3, [sp, #24]
 800b012:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b014:	9308      	str	r3, [sp, #32]
 800b016:	9507      	str	r5, [sp, #28]
 800b018:	9505      	str	r5, [sp, #20]
 800b01a:	220a      	movs	r2, #10
 800b01c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b01e:	7807      	ldrb	r7, [r0, #0]
 800b020:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b024:	b2d9      	uxtb	r1, r3
 800b026:	2909      	cmp	r1, #9
 800b028:	d929      	bls.n	800b07e <_strtod_l+0x1a6>
 800b02a:	4622      	mov	r2, r4
 800b02c:	f8d8 1000 	ldr.w	r1, [r8]
 800b030:	f002 fd96 	bl	800db60 <strncmp>
 800b034:	2800      	cmp	r0, #0
 800b036:	d031      	beq.n	800b09c <_strtod_l+0x1c4>
 800b038:	2000      	movs	r0, #0
 800b03a:	9c05      	ldr	r4, [sp, #20]
 800b03c:	9004      	str	r0, [sp, #16]
 800b03e:	463b      	mov	r3, r7
 800b040:	4602      	mov	r2, r0
 800b042:	2b65      	cmp	r3, #101	; 0x65
 800b044:	d001      	beq.n	800b04a <_strtod_l+0x172>
 800b046:	2b45      	cmp	r3, #69	; 0x45
 800b048:	d114      	bne.n	800b074 <_strtod_l+0x19c>
 800b04a:	b924      	cbnz	r4, 800b056 <_strtod_l+0x17e>
 800b04c:	b910      	cbnz	r0, 800b054 <_strtod_l+0x17c>
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d09e      	beq.n	800af92 <_strtod_l+0xba>
 800b054:	2400      	movs	r4, #0
 800b056:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b058:	1c73      	adds	r3, r6, #1
 800b05a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b05c:	7873      	ldrb	r3, [r6, #1]
 800b05e:	2b2b      	cmp	r3, #43	; 0x2b
 800b060:	d078      	beq.n	800b154 <_strtod_l+0x27c>
 800b062:	2b2d      	cmp	r3, #45	; 0x2d
 800b064:	d070      	beq.n	800b148 <_strtod_l+0x270>
 800b066:	f04f 0c00 	mov.w	ip, #0
 800b06a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b06e:	2f09      	cmp	r7, #9
 800b070:	d97c      	bls.n	800b16c <_strtod_l+0x294>
 800b072:	961b      	str	r6, [sp, #108]	; 0x6c
 800b074:	f04f 0e00 	mov.w	lr, #0
 800b078:	e09a      	b.n	800b1b0 <_strtod_l+0x2d8>
 800b07a:	2300      	movs	r3, #0
 800b07c:	e7c7      	b.n	800b00e <_strtod_l+0x136>
 800b07e:	9905      	ldr	r1, [sp, #20]
 800b080:	2908      	cmp	r1, #8
 800b082:	bfdd      	ittte	le
 800b084:	9907      	ldrle	r1, [sp, #28]
 800b086:	fb02 3301 	mlale	r3, r2, r1, r3
 800b08a:	9307      	strle	r3, [sp, #28]
 800b08c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b090:	9b05      	ldr	r3, [sp, #20]
 800b092:	3001      	adds	r0, #1
 800b094:	3301      	adds	r3, #1
 800b096:	9305      	str	r3, [sp, #20]
 800b098:	901b      	str	r0, [sp, #108]	; 0x6c
 800b09a:	e7bf      	b.n	800b01c <_strtod_l+0x144>
 800b09c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b09e:	191a      	adds	r2, r3, r4
 800b0a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0a2:	9a05      	ldr	r2, [sp, #20]
 800b0a4:	5d1b      	ldrb	r3, [r3, r4]
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	d037      	beq.n	800b11a <_strtod_l+0x242>
 800b0aa:	9c05      	ldr	r4, [sp, #20]
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b0b2:	2909      	cmp	r1, #9
 800b0b4:	d913      	bls.n	800b0de <_strtod_l+0x206>
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	9104      	str	r1, [sp, #16]
 800b0ba:	e7c2      	b.n	800b042 <_strtod_l+0x16a>
 800b0bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0c2:	785b      	ldrb	r3, [r3, #1]
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	2b30      	cmp	r3, #48	; 0x30
 800b0c8:	d0f8      	beq.n	800b0bc <_strtod_l+0x1e4>
 800b0ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b0ce:	2a08      	cmp	r2, #8
 800b0d0:	f200 84e4 	bhi.w	800ba9c <_strtod_l+0xbc4>
 800b0d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b0d6:	9208      	str	r2, [sp, #32]
 800b0d8:	4602      	mov	r2, r0
 800b0da:	2000      	movs	r0, #0
 800b0dc:	4604      	mov	r4, r0
 800b0de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b0e2:	f100 0101 	add.w	r1, r0, #1
 800b0e6:	d012      	beq.n	800b10e <_strtod_l+0x236>
 800b0e8:	440a      	add	r2, r1
 800b0ea:	eb00 0c04 	add.w	ip, r0, r4
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	270a      	movs	r7, #10
 800b0f2:	458c      	cmp	ip, r1
 800b0f4:	d113      	bne.n	800b11e <_strtod_l+0x246>
 800b0f6:	1821      	adds	r1, r4, r0
 800b0f8:	2908      	cmp	r1, #8
 800b0fa:	f104 0401 	add.w	r4, r4, #1
 800b0fe:	4404      	add	r4, r0
 800b100:	dc19      	bgt.n	800b136 <_strtod_l+0x25e>
 800b102:	9b07      	ldr	r3, [sp, #28]
 800b104:	210a      	movs	r1, #10
 800b106:	fb01 e303 	mla	r3, r1, r3, lr
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	2100      	movs	r1, #0
 800b10e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b110:	1c58      	adds	r0, r3, #1
 800b112:	901b      	str	r0, [sp, #108]	; 0x6c
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	4608      	mov	r0, r1
 800b118:	e7c9      	b.n	800b0ae <_strtod_l+0x1d6>
 800b11a:	9805      	ldr	r0, [sp, #20]
 800b11c:	e7d3      	b.n	800b0c6 <_strtod_l+0x1ee>
 800b11e:	2908      	cmp	r1, #8
 800b120:	f101 0101 	add.w	r1, r1, #1
 800b124:	dc03      	bgt.n	800b12e <_strtod_l+0x256>
 800b126:	9b07      	ldr	r3, [sp, #28]
 800b128:	437b      	muls	r3, r7
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	e7e1      	b.n	800b0f2 <_strtod_l+0x21a>
 800b12e:	2910      	cmp	r1, #16
 800b130:	bfd8      	it	le
 800b132:	437d      	mulle	r5, r7
 800b134:	e7dd      	b.n	800b0f2 <_strtod_l+0x21a>
 800b136:	2c10      	cmp	r4, #16
 800b138:	bfdc      	itt	le
 800b13a:	210a      	movle	r1, #10
 800b13c:	fb01 e505 	mlale	r5, r1, r5, lr
 800b140:	e7e4      	b.n	800b10c <_strtod_l+0x234>
 800b142:	2301      	movs	r3, #1
 800b144:	9304      	str	r3, [sp, #16]
 800b146:	e781      	b.n	800b04c <_strtod_l+0x174>
 800b148:	f04f 0c01 	mov.w	ip, #1
 800b14c:	1cb3      	adds	r3, r6, #2
 800b14e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b150:	78b3      	ldrb	r3, [r6, #2]
 800b152:	e78a      	b.n	800b06a <_strtod_l+0x192>
 800b154:	f04f 0c00 	mov.w	ip, #0
 800b158:	e7f8      	b.n	800b14c <_strtod_l+0x274>
 800b15a:	bf00      	nop
 800b15c:	0800deb8 	.word	0x0800deb8
 800b160:	7ff00000 	.word	0x7ff00000
 800b164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b166:	1c5f      	adds	r7, r3, #1
 800b168:	971b      	str	r7, [sp, #108]	; 0x6c
 800b16a:	785b      	ldrb	r3, [r3, #1]
 800b16c:	2b30      	cmp	r3, #48	; 0x30
 800b16e:	d0f9      	beq.n	800b164 <_strtod_l+0x28c>
 800b170:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b174:	2f08      	cmp	r7, #8
 800b176:	f63f af7d 	bhi.w	800b074 <_strtod_l+0x19c>
 800b17a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b17e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b180:	930a      	str	r3, [sp, #40]	; 0x28
 800b182:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b184:	1c5f      	adds	r7, r3, #1
 800b186:	971b      	str	r7, [sp, #108]	; 0x6c
 800b188:	785b      	ldrb	r3, [r3, #1]
 800b18a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b18e:	f1b8 0f09 	cmp.w	r8, #9
 800b192:	d937      	bls.n	800b204 <_strtod_l+0x32c>
 800b194:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b196:	1a7f      	subs	r7, r7, r1
 800b198:	2f08      	cmp	r7, #8
 800b19a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b19e:	dc37      	bgt.n	800b210 <_strtod_l+0x338>
 800b1a0:	45be      	cmp	lr, r7
 800b1a2:	bfa8      	it	ge
 800b1a4:	46be      	movge	lr, r7
 800b1a6:	f1bc 0f00 	cmp.w	ip, #0
 800b1aa:	d001      	beq.n	800b1b0 <_strtod_l+0x2d8>
 800b1ac:	f1ce 0e00 	rsb	lr, lr, #0
 800b1b0:	2c00      	cmp	r4, #0
 800b1b2:	d151      	bne.n	800b258 <_strtod_l+0x380>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	f47f aece 	bne.w	800af56 <_strtod_l+0x7e>
 800b1ba:	9a06      	ldr	r2, [sp, #24]
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	f47f aeca 	bne.w	800af56 <_strtod_l+0x7e>
 800b1c2:	9a04      	ldr	r2, [sp, #16]
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	f47f aee4 	bne.w	800af92 <_strtod_l+0xba>
 800b1ca:	2b4e      	cmp	r3, #78	; 0x4e
 800b1cc:	d027      	beq.n	800b21e <_strtod_l+0x346>
 800b1ce:	dc21      	bgt.n	800b214 <_strtod_l+0x33c>
 800b1d0:	2b49      	cmp	r3, #73	; 0x49
 800b1d2:	f47f aede 	bne.w	800af92 <_strtod_l+0xba>
 800b1d6:	49a0      	ldr	r1, [pc, #640]	; (800b458 <_strtod_l+0x580>)
 800b1d8:	a81b      	add	r0, sp, #108	; 0x6c
 800b1da:	f001 fdd7 	bl	800cd8c <__match>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f43f aed7 	beq.w	800af92 <_strtod_l+0xba>
 800b1e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1e6:	499d      	ldr	r1, [pc, #628]	; (800b45c <_strtod_l+0x584>)
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	a81b      	add	r0, sp, #108	; 0x6c
 800b1ec:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1ee:	f001 fdcd 	bl	800cd8c <__match>
 800b1f2:	b910      	cbnz	r0, 800b1fa <_strtod_l+0x322>
 800b1f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b470 <_strtod_l+0x598>
 800b1fe:	f04f 0a00 	mov.w	sl, #0
 800b202:	e6a8      	b.n	800af56 <_strtod_l+0x7e>
 800b204:	210a      	movs	r1, #10
 800b206:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b20a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b20e:	e7b8      	b.n	800b182 <_strtod_l+0x2aa>
 800b210:	46be      	mov	lr, r7
 800b212:	e7c8      	b.n	800b1a6 <_strtod_l+0x2ce>
 800b214:	2b69      	cmp	r3, #105	; 0x69
 800b216:	d0de      	beq.n	800b1d6 <_strtod_l+0x2fe>
 800b218:	2b6e      	cmp	r3, #110	; 0x6e
 800b21a:	f47f aeba 	bne.w	800af92 <_strtod_l+0xba>
 800b21e:	4990      	ldr	r1, [pc, #576]	; (800b460 <_strtod_l+0x588>)
 800b220:	a81b      	add	r0, sp, #108	; 0x6c
 800b222:	f001 fdb3 	bl	800cd8c <__match>
 800b226:	2800      	cmp	r0, #0
 800b228:	f43f aeb3 	beq.w	800af92 <_strtod_l+0xba>
 800b22c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	2b28      	cmp	r3, #40	; 0x28
 800b232:	d10e      	bne.n	800b252 <_strtod_l+0x37a>
 800b234:	aa1e      	add	r2, sp, #120	; 0x78
 800b236:	498b      	ldr	r1, [pc, #556]	; (800b464 <_strtod_l+0x58c>)
 800b238:	a81b      	add	r0, sp, #108	; 0x6c
 800b23a:	f001 fdbb 	bl	800cdb4 <__hexnan>
 800b23e:	2805      	cmp	r0, #5
 800b240:	d107      	bne.n	800b252 <_strtod_l+0x37a>
 800b242:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b244:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b248:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b24c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b250:	e681      	b.n	800af56 <_strtod_l+0x7e>
 800b252:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b478 <_strtod_l+0x5a0>
 800b256:	e7d2      	b.n	800b1fe <_strtod_l+0x326>
 800b258:	ebae 0302 	sub.w	r3, lr, r2
 800b25c:	9306      	str	r3, [sp, #24]
 800b25e:	9b05      	ldr	r3, [sp, #20]
 800b260:	9807      	ldr	r0, [sp, #28]
 800b262:	2b00      	cmp	r3, #0
 800b264:	bf08      	it	eq
 800b266:	4623      	moveq	r3, r4
 800b268:	2c10      	cmp	r4, #16
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	46a0      	mov	r8, r4
 800b26e:	bfa8      	it	ge
 800b270:	f04f 0810 	movge.w	r8, #16
 800b274:	f7f5 f946 	bl	8000504 <__aeabi_ui2d>
 800b278:	2c09      	cmp	r4, #9
 800b27a:	4682      	mov	sl, r0
 800b27c:	468b      	mov	fp, r1
 800b27e:	dc13      	bgt.n	800b2a8 <_strtod_l+0x3d0>
 800b280:	9b06      	ldr	r3, [sp, #24]
 800b282:	2b00      	cmp	r3, #0
 800b284:	f43f ae67 	beq.w	800af56 <_strtod_l+0x7e>
 800b288:	9b06      	ldr	r3, [sp, #24]
 800b28a:	dd7a      	ble.n	800b382 <_strtod_l+0x4aa>
 800b28c:	2b16      	cmp	r3, #22
 800b28e:	dc61      	bgt.n	800b354 <_strtod_l+0x47c>
 800b290:	4a75      	ldr	r2, [pc, #468]	; (800b468 <_strtod_l+0x590>)
 800b292:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b296:	e9de 0100 	ldrd	r0, r1, [lr]
 800b29a:	4652      	mov	r2, sl
 800b29c:	465b      	mov	r3, fp
 800b29e:	f7f5 f9ab 	bl	80005f8 <__aeabi_dmul>
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	468b      	mov	fp, r1
 800b2a6:	e656      	b.n	800af56 <_strtod_l+0x7e>
 800b2a8:	4b6f      	ldr	r3, [pc, #444]	; (800b468 <_strtod_l+0x590>)
 800b2aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2b2:	f7f5 f9a1 	bl	80005f8 <__aeabi_dmul>
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	460f      	mov	r7, r1
 800b2bc:	f7f5 f922 	bl	8000504 <__aeabi_ui2d>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	f7f4 ffe0 	bl	800028c <__adddf3>
 800b2cc:	2c0f      	cmp	r4, #15
 800b2ce:	4682      	mov	sl, r0
 800b2d0:	468b      	mov	fp, r1
 800b2d2:	ddd5      	ble.n	800b280 <_strtod_l+0x3a8>
 800b2d4:	9b06      	ldr	r3, [sp, #24]
 800b2d6:	eba4 0808 	sub.w	r8, r4, r8
 800b2da:	4498      	add	r8, r3
 800b2dc:	f1b8 0f00 	cmp.w	r8, #0
 800b2e0:	f340 8096 	ble.w	800b410 <_strtod_l+0x538>
 800b2e4:	f018 030f 	ands.w	r3, r8, #15
 800b2e8:	d00a      	beq.n	800b300 <_strtod_l+0x428>
 800b2ea:	495f      	ldr	r1, [pc, #380]	; (800b468 <_strtod_l+0x590>)
 800b2ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2f8:	f7f5 f97e 	bl	80005f8 <__aeabi_dmul>
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	468b      	mov	fp, r1
 800b300:	f038 080f 	bics.w	r8, r8, #15
 800b304:	d073      	beq.n	800b3ee <_strtod_l+0x516>
 800b306:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b30a:	dd47      	ble.n	800b39c <_strtod_l+0x4c4>
 800b30c:	2400      	movs	r4, #0
 800b30e:	46a0      	mov	r8, r4
 800b310:	9407      	str	r4, [sp, #28]
 800b312:	9405      	str	r4, [sp, #20]
 800b314:	2322      	movs	r3, #34	; 0x22
 800b316:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b470 <_strtod_l+0x598>
 800b31a:	f8c9 3000 	str.w	r3, [r9]
 800b31e:	f04f 0a00 	mov.w	sl, #0
 800b322:	9b07      	ldr	r3, [sp, #28]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f43f ae16 	beq.w	800af56 <_strtod_l+0x7e>
 800b32a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b32c:	4648      	mov	r0, r9
 800b32e:	f001 fe33 	bl	800cf98 <_Bfree>
 800b332:	9905      	ldr	r1, [sp, #20]
 800b334:	4648      	mov	r0, r9
 800b336:	f001 fe2f 	bl	800cf98 <_Bfree>
 800b33a:	4641      	mov	r1, r8
 800b33c:	4648      	mov	r0, r9
 800b33e:	f001 fe2b 	bl	800cf98 <_Bfree>
 800b342:	9907      	ldr	r1, [sp, #28]
 800b344:	4648      	mov	r0, r9
 800b346:	f001 fe27 	bl	800cf98 <_Bfree>
 800b34a:	4621      	mov	r1, r4
 800b34c:	4648      	mov	r0, r9
 800b34e:	f001 fe23 	bl	800cf98 <_Bfree>
 800b352:	e600      	b.n	800af56 <_strtod_l+0x7e>
 800b354:	9a06      	ldr	r2, [sp, #24]
 800b356:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b35a:	4293      	cmp	r3, r2
 800b35c:	dbba      	blt.n	800b2d4 <_strtod_l+0x3fc>
 800b35e:	4d42      	ldr	r5, [pc, #264]	; (800b468 <_strtod_l+0x590>)
 800b360:	f1c4 040f 	rsb	r4, r4, #15
 800b364:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b368:	4652      	mov	r2, sl
 800b36a:	465b      	mov	r3, fp
 800b36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b370:	f7f5 f942 	bl	80005f8 <__aeabi_dmul>
 800b374:	9b06      	ldr	r3, [sp, #24]
 800b376:	1b1c      	subs	r4, r3, r4
 800b378:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b37c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b380:	e78d      	b.n	800b29e <_strtod_l+0x3c6>
 800b382:	f113 0f16 	cmn.w	r3, #22
 800b386:	dba5      	blt.n	800b2d4 <_strtod_l+0x3fc>
 800b388:	4a37      	ldr	r2, [pc, #220]	; (800b468 <_strtod_l+0x590>)
 800b38a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b38e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b392:	4650      	mov	r0, sl
 800b394:	4659      	mov	r1, fp
 800b396:	f7f5 fa59 	bl	800084c <__aeabi_ddiv>
 800b39a:	e782      	b.n	800b2a2 <_strtod_l+0x3ca>
 800b39c:	2300      	movs	r3, #0
 800b39e:	4e33      	ldr	r6, [pc, #204]	; (800b46c <_strtod_l+0x594>)
 800b3a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3a4:	4650      	mov	r0, sl
 800b3a6:	4659      	mov	r1, fp
 800b3a8:	461d      	mov	r5, r3
 800b3aa:	f1b8 0f01 	cmp.w	r8, #1
 800b3ae:	dc21      	bgt.n	800b3f4 <_strtod_l+0x51c>
 800b3b0:	b10b      	cbz	r3, 800b3b6 <_strtod_l+0x4de>
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	468b      	mov	fp, r1
 800b3b6:	4b2d      	ldr	r3, [pc, #180]	; (800b46c <_strtod_l+0x594>)
 800b3b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	465b      	mov	r3, fp
 800b3c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b3c8:	f7f5 f916 	bl	80005f8 <__aeabi_dmul>
 800b3cc:	4b28      	ldr	r3, [pc, #160]	; (800b470 <_strtod_l+0x598>)
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	400b      	ands	r3, r1
 800b3d2:	4928      	ldr	r1, [pc, #160]	; (800b474 <_strtod_l+0x59c>)
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	4682      	mov	sl, r0
 800b3d8:	d898      	bhi.n	800b30c <_strtod_l+0x434>
 800b3da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3de:	428b      	cmp	r3, r1
 800b3e0:	bf86      	itte	hi
 800b3e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b47c <_strtod_l+0x5a4>
 800b3e6:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	e077      	b.n	800b4e4 <_strtod_l+0x60c>
 800b3f4:	f018 0f01 	tst.w	r8, #1
 800b3f8:	d006      	beq.n	800b408 <_strtod_l+0x530>
 800b3fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f5 f8f9 	bl	80005f8 <__aeabi_dmul>
 800b406:	2301      	movs	r3, #1
 800b408:	3501      	adds	r5, #1
 800b40a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b40e:	e7cc      	b.n	800b3aa <_strtod_l+0x4d2>
 800b410:	d0ed      	beq.n	800b3ee <_strtod_l+0x516>
 800b412:	f1c8 0800 	rsb	r8, r8, #0
 800b416:	f018 020f 	ands.w	r2, r8, #15
 800b41a:	d00a      	beq.n	800b432 <_strtod_l+0x55a>
 800b41c:	4b12      	ldr	r3, [pc, #72]	; (800b468 <_strtod_l+0x590>)
 800b41e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f5 fa0f 	bl	800084c <__aeabi_ddiv>
 800b42e:	4682      	mov	sl, r0
 800b430:	468b      	mov	fp, r1
 800b432:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b436:	d0da      	beq.n	800b3ee <_strtod_l+0x516>
 800b438:	f1b8 0f1f 	cmp.w	r8, #31
 800b43c:	dd20      	ble.n	800b480 <_strtod_l+0x5a8>
 800b43e:	2400      	movs	r4, #0
 800b440:	46a0      	mov	r8, r4
 800b442:	9407      	str	r4, [sp, #28]
 800b444:	9405      	str	r4, [sp, #20]
 800b446:	2322      	movs	r3, #34	; 0x22
 800b448:	f04f 0a00 	mov.w	sl, #0
 800b44c:	f04f 0b00 	mov.w	fp, #0
 800b450:	f8c9 3000 	str.w	r3, [r9]
 800b454:	e765      	b.n	800b322 <_strtod_l+0x44a>
 800b456:	bf00      	nop
 800b458:	0800de81 	.word	0x0800de81
 800b45c:	0800df0b 	.word	0x0800df0b
 800b460:	0800de89 	.word	0x0800de89
 800b464:	0800decc 	.word	0x0800decc
 800b468:	0800df48 	.word	0x0800df48
 800b46c:	0800df20 	.word	0x0800df20
 800b470:	7ff00000 	.word	0x7ff00000
 800b474:	7ca00000 	.word	0x7ca00000
 800b478:	fff80000 	.word	0xfff80000
 800b47c:	7fefffff 	.word	0x7fefffff
 800b480:	f018 0310 	ands.w	r3, r8, #16
 800b484:	bf18      	it	ne
 800b486:	236a      	movne	r3, #106	; 0x6a
 800b488:	4da0      	ldr	r5, [pc, #640]	; (800b70c <_strtod_l+0x834>)
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	4650      	mov	r0, sl
 800b48e:	4659      	mov	r1, fp
 800b490:	2300      	movs	r3, #0
 800b492:	f1b8 0f00 	cmp.w	r8, #0
 800b496:	f300 810a 	bgt.w	800b6ae <_strtod_l+0x7d6>
 800b49a:	b10b      	cbz	r3, 800b4a0 <_strtod_l+0x5c8>
 800b49c:	4682      	mov	sl, r0
 800b49e:	468b      	mov	fp, r1
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	b1bb      	cbz	r3, 800b4d4 <_strtod_l+0x5fc>
 800b4a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b4a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	4659      	mov	r1, fp
 800b4b0:	dd10      	ble.n	800b4d4 <_strtod_l+0x5fc>
 800b4b2:	2b1f      	cmp	r3, #31
 800b4b4:	f340 8107 	ble.w	800b6c6 <_strtod_l+0x7ee>
 800b4b8:	2b34      	cmp	r3, #52	; 0x34
 800b4ba:	bfde      	ittt	le
 800b4bc:	3b20      	suble	r3, #32
 800b4be:	f04f 32ff 	movle.w	r2, #4294967295
 800b4c2:	fa02 f303 	lslle.w	r3, r2, r3
 800b4c6:	f04f 0a00 	mov.w	sl, #0
 800b4ca:	bfcc      	ite	gt
 800b4cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b4d0:	ea03 0b01 	andle.w	fp, r3, r1
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4650      	mov	r0, sl
 800b4da:	4659      	mov	r1, fp
 800b4dc:	f7f5 faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d1ac      	bne.n	800b43e <_strtod_l+0x566>
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	9a05      	ldr	r2, [sp, #20]
 800b4ea:	9908      	ldr	r1, [sp, #32]
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	4648      	mov	r0, r9
 800b4f0:	f001 fda4 	bl	800d03c <__s2b>
 800b4f4:	9007      	str	r0, [sp, #28]
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f43f af08 	beq.w	800b30c <_strtod_l+0x434>
 800b4fc:	9a06      	ldr	r2, [sp, #24]
 800b4fe:	9b06      	ldr	r3, [sp, #24]
 800b500:	2a00      	cmp	r2, #0
 800b502:	f1c3 0300 	rsb	r3, r3, #0
 800b506:	bfa8      	it	ge
 800b508:	2300      	movge	r3, #0
 800b50a:	930e      	str	r3, [sp, #56]	; 0x38
 800b50c:	2400      	movs	r4, #0
 800b50e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b512:	9316      	str	r3, [sp, #88]	; 0x58
 800b514:	46a0      	mov	r8, r4
 800b516:	9b07      	ldr	r3, [sp, #28]
 800b518:	4648      	mov	r0, r9
 800b51a:	6859      	ldr	r1, [r3, #4]
 800b51c:	f001 fd08 	bl	800cf30 <_Balloc>
 800b520:	9005      	str	r0, [sp, #20]
 800b522:	2800      	cmp	r0, #0
 800b524:	f43f aef6 	beq.w	800b314 <_strtod_l+0x43c>
 800b528:	9b07      	ldr	r3, [sp, #28]
 800b52a:	691a      	ldr	r2, [r3, #16]
 800b52c:	3202      	adds	r2, #2
 800b52e:	f103 010c 	add.w	r1, r3, #12
 800b532:	0092      	lsls	r2, r2, #2
 800b534:	300c      	adds	r0, #12
 800b536:	f7fe fe3b 	bl	800a1b0 <memcpy>
 800b53a:	aa1e      	add	r2, sp, #120	; 0x78
 800b53c:	a91d      	add	r1, sp, #116	; 0x74
 800b53e:	ec4b ab10 	vmov	d0, sl, fp
 800b542:	4648      	mov	r0, r9
 800b544:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b548:	f002 f834 	bl	800d5b4 <__d2b>
 800b54c:	901c      	str	r0, [sp, #112]	; 0x70
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f aee0 	beq.w	800b314 <_strtod_l+0x43c>
 800b554:	2101      	movs	r1, #1
 800b556:	4648      	mov	r0, r9
 800b558:	f001 fdfc 	bl	800d154 <__i2b>
 800b55c:	4680      	mov	r8, r0
 800b55e:	2800      	cmp	r0, #0
 800b560:	f43f aed8 	beq.w	800b314 <_strtod_l+0x43c>
 800b564:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b566:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b568:	2e00      	cmp	r6, #0
 800b56a:	bfab      	itete	ge
 800b56c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b56e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b570:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b572:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b574:	bfac      	ite	ge
 800b576:	18f7      	addge	r7, r6, r3
 800b578:	1b9d      	sublt	r5, r3, r6
 800b57a:	9b04      	ldr	r3, [sp, #16]
 800b57c:	1af6      	subs	r6, r6, r3
 800b57e:	4416      	add	r6, r2
 800b580:	4b63      	ldr	r3, [pc, #396]	; (800b710 <_strtod_l+0x838>)
 800b582:	3e01      	subs	r6, #1
 800b584:	429e      	cmp	r6, r3
 800b586:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b58a:	f280 80af 	bge.w	800b6ec <_strtod_l+0x814>
 800b58e:	1b9b      	subs	r3, r3, r6
 800b590:	2b1f      	cmp	r3, #31
 800b592:	eba2 0203 	sub.w	r2, r2, r3
 800b596:	f04f 0101 	mov.w	r1, #1
 800b59a:	f300 809b 	bgt.w	800b6d4 <_strtod_l+0x7fc>
 800b59e:	fa01 f303 	lsl.w	r3, r1, r3
 800b5a2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5a8:	18be      	adds	r6, r7, r2
 800b5aa:	9b04      	ldr	r3, [sp, #16]
 800b5ac:	42b7      	cmp	r7, r6
 800b5ae:	4415      	add	r5, r2
 800b5b0:	441d      	add	r5, r3
 800b5b2:	463b      	mov	r3, r7
 800b5b4:	bfa8      	it	ge
 800b5b6:	4633      	movge	r3, r6
 800b5b8:	42ab      	cmp	r3, r5
 800b5ba:	bfa8      	it	ge
 800b5bc:	462b      	movge	r3, r5
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bfc2      	ittt	gt
 800b5c2:	1af6      	subgt	r6, r6, r3
 800b5c4:	1aed      	subgt	r5, r5, r3
 800b5c6:	1aff      	subgt	r7, r7, r3
 800b5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ca:	b1bb      	cbz	r3, 800b5fc <_strtod_l+0x724>
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4648      	mov	r0, r9
 800b5d2:	f001 fe5f 	bl	800d294 <__pow5mult>
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	f43f ae9b 	beq.w	800b314 <_strtod_l+0x43c>
 800b5de:	4601      	mov	r1, r0
 800b5e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b5e2:	4648      	mov	r0, r9
 800b5e4:	f001 fdbf 	bl	800d166 <__multiply>
 800b5e8:	900c      	str	r0, [sp, #48]	; 0x30
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	f43f ae92 	beq.w	800b314 <_strtod_l+0x43c>
 800b5f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5f2:	4648      	mov	r0, r9
 800b5f4:	f001 fcd0 	bl	800cf98 <_Bfree>
 800b5f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5fa:	931c      	str	r3, [sp, #112]	; 0x70
 800b5fc:	2e00      	cmp	r6, #0
 800b5fe:	dc7a      	bgt.n	800b6f6 <_strtod_l+0x81e>
 800b600:	9b06      	ldr	r3, [sp, #24]
 800b602:	2b00      	cmp	r3, #0
 800b604:	dd08      	ble.n	800b618 <_strtod_l+0x740>
 800b606:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b608:	9905      	ldr	r1, [sp, #20]
 800b60a:	4648      	mov	r0, r9
 800b60c:	f001 fe42 	bl	800d294 <__pow5mult>
 800b610:	9005      	str	r0, [sp, #20]
 800b612:	2800      	cmp	r0, #0
 800b614:	f43f ae7e 	beq.w	800b314 <_strtod_l+0x43c>
 800b618:	2d00      	cmp	r5, #0
 800b61a:	dd08      	ble.n	800b62e <_strtod_l+0x756>
 800b61c:	462a      	mov	r2, r5
 800b61e:	9905      	ldr	r1, [sp, #20]
 800b620:	4648      	mov	r0, r9
 800b622:	f001 fe85 	bl	800d330 <__lshift>
 800b626:	9005      	str	r0, [sp, #20]
 800b628:	2800      	cmp	r0, #0
 800b62a:	f43f ae73 	beq.w	800b314 <_strtod_l+0x43c>
 800b62e:	2f00      	cmp	r7, #0
 800b630:	dd08      	ble.n	800b644 <_strtod_l+0x76c>
 800b632:	4641      	mov	r1, r8
 800b634:	463a      	mov	r2, r7
 800b636:	4648      	mov	r0, r9
 800b638:	f001 fe7a 	bl	800d330 <__lshift>
 800b63c:	4680      	mov	r8, r0
 800b63e:	2800      	cmp	r0, #0
 800b640:	f43f ae68 	beq.w	800b314 <_strtod_l+0x43c>
 800b644:	9a05      	ldr	r2, [sp, #20]
 800b646:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b648:	4648      	mov	r0, r9
 800b64a:	f001 fedf 	bl	800d40c <__mdiff>
 800b64e:	4604      	mov	r4, r0
 800b650:	2800      	cmp	r0, #0
 800b652:	f43f ae5f 	beq.w	800b314 <_strtod_l+0x43c>
 800b656:	68c3      	ldr	r3, [r0, #12]
 800b658:	930c      	str	r3, [sp, #48]	; 0x30
 800b65a:	2300      	movs	r3, #0
 800b65c:	60c3      	str	r3, [r0, #12]
 800b65e:	4641      	mov	r1, r8
 800b660:	f001 feba 	bl	800d3d8 <__mcmp>
 800b664:	2800      	cmp	r0, #0
 800b666:	da55      	bge.n	800b714 <_strtod_l+0x83c>
 800b668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b66a:	b9e3      	cbnz	r3, 800b6a6 <_strtod_l+0x7ce>
 800b66c:	f1ba 0f00 	cmp.w	sl, #0
 800b670:	d119      	bne.n	800b6a6 <_strtod_l+0x7ce>
 800b672:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b676:	b9b3      	cbnz	r3, 800b6a6 <_strtod_l+0x7ce>
 800b678:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b67c:	0d1b      	lsrs	r3, r3, #20
 800b67e:	051b      	lsls	r3, r3, #20
 800b680:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b684:	d90f      	bls.n	800b6a6 <_strtod_l+0x7ce>
 800b686:	6963      	ldr	r3, [r4, #20]
 800b688:	b913      	cbnz	r3, 800b690 <_strtod_l+0x7b8>
 800b68a:	6923      	ldr	r3, [r4, #16]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	dd0a      	ble.n	800b6a6 <_strtod_l+0x7ce>
 800b690:	4621      	mov	r1, r4
 800b692:	2201      	movs	r2, #1
 800b694:	4648      	mov	r0, r9
 800b696:	f001 fe4b 	bl	800d330 <__lshift>
 800b69a:	4641      	mov	r1, r8
 800b69c:	4604      	mov	r4, r0
 800b69e:	f001 fe9b 	bl	800d3d8 <__mcmp>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	dc67      	bgt.n	800b776 <_strtod_l+0x89e>
 800b6a6:	9b04      	ldr	r3, [sp, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d171      	bne.n	800b790 <_strtod_l+0x8b8>
 800b6ac:	e63d      	b.n	800b32a <_strtod_l+0x452>
 800b6ae:	f018 0f01 	tst.w	r8, #1
 800b6b2:	d004      	beq.n	800b6be <_strtod_l+0x7e6>
 800b6b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6b8:	f7f4 ff9e 	bl	80005f8 <__aeabi_dmul>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6c2:	3508      	adds	r5, #8
 800b6c4:	e6e5      	b.n	800b492 <_strtod_l+0x5ba>
 800b6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ce:	ea03 0a0a 	and.w	sl, r3, sl
 800b6d2:	e6ff      	b.n	800b4d4 <_strtod_l+0x5fc>
 800b6d4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6d8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6dc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6e0:	36e2      	adds	r6, #226	; 0xe2
 800b6e2:	fa01 f306 	lsl.w	r3, r1, r6
 800b6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6e8:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6ea:	e75d      	b.n	800b5a8 <_strtod_l+0x6d0>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6f4:	e758      	b.n	800b5a8 <_strtod_l+0x6d0>
 800b6f6:	4632      	mov	r2, r6
 800b6f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6fa:	4648      	mov	r0, r9
 800b6fc:	f001 fe18 	bl	800d330 <__lshift>
 800b700:	901c      	str	r0, [sp, #112]	; 0x70
 800b702:	2800      	cmp	r0, #0
 800b704:	f47f af7c 	bne.w	800b600 <_strtod_l+0x728>
 800b708:	e604      	b.n	800b314 <_strtod_l+0x43c>
 800b70a:	bf00      	nop
 800b70c:	0800dee0 	.word	0x0800dee0
 800b710:	fffffc02 	.word	0xfffffc02
 800b714:	465d      	mov	r5, fp
 800b716:	f040 8086 	bne.w	800b826 <_strtod_l+0x94e>
 800b71a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b71c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b720:	b32a      	cbz	r2, 800b76e <_strtod_l+0x896>
 800b722:	4aaf      	ldr	r2, [pc, #700]	; (800b9e0 <_strtod_l+0xb08>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d153      	bne.n	800b7d0 <_strtod_l+0x8f8>
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	4650      	mov	r0, sl
 800b72c:	b1d3      	cbz	r3, 800b764 <_strtod_l+0x88c>
 800b72e:	4aad      	ldr	r2, [pc, #692]	; (800b9e4 <_strtod_l+0xb0c>)
 800b730:	402a      	ands	r2, r5
 800b732:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b736:	f04f 31ff 	mov.w	r1, #4294967295
 800b73a:	d816      	bhi.n	800b76a <_strtod_l+0x892>
 800b73c:	0d12      	lsrs	r2, r2, #20
 800b73e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b742:	fa01 f303 	lsl.w	r3, r1, r3
 800b746:	4298      	cmp	r0, r3
 800b748:	d142      	bne.n	800b7d0 <_strtod_l+0x8f8>
 800b74a:	4ba7      	ldr	r3, [pc, #668]	; (800b9e8 <_strtod_l+0xb10>)
 800b74c:	429d      	cmp	r5, r3
 800b74e:	d102      	bne.n	800b756 <_strtod_l+0x87e>
 800b750:	3001      	adds	r0, #1
 800b752:	f43f addf 	beq.w	800b314 <_strtod_l+0x43c>
 800b756:	4ba3      	ldr	r3, [pc, #652]	; (800b9e4 <_strtod_l+0xb0c>)
 800b758:	402b      	ands	r3, r5
 800b75a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b75e:	f04f 0a00 	mov.w	sl, #0
 800b762:	e7a0      	b.n	800b6a6 <_strtod_l+0x7ce>
 800b764:	f04f 33ff 	mov.w	r3, #4294967295
 800b768:	e7ed      	b.n	800b746 <_strtod_l+0x86e>
 800b76a:	460b      	mov	r3, r1
 800b76c:	e7eb      	b.n	800b746 <_strtod_l+0x86e>
 800b76e:	bb7b      	cbnz	r3, 800b7d0 <_strtod_l+0x8f8>
 800b770:	f1ba 0f00 	cmp.w	sl, #0
 800b774:	d12c      	bne.n	800b7d0 <_strtod_l+0x8f8>
 800b776:	9904      	ldr	r1, [sp, #16]
 800b778:	4a9a      	ldr	r2, [pc, #616]	; (800b9e4 <_strtod_l+0xb0c>)
 800b77a:	465b      	mov	r3, fp
 800b77c:	b1f1      	cbz	r1, 800b7bc <_strtod_l+0x8e4>
 800b77e:	ea02 010b 	and.w	r1, r2, fp
 800b782:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b786:	dc19      	bgt.n	800b7bc <_strtod_l+0x8e4>
 800b788:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b78c:	f77f ae5b 	ble.w	800b446 <_strtod_l+0x56e>
 800b790:	4a96      	ldr	r2, [pc, #600]	; (800b9ec <_strtod_l+0xb14>)
 800b792:	2300      	movs	r3, #0
 800b794:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b798:	4650      	mov	r0, sl
 800b79a:	4659      	mov	r1, fp
 800b79c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	4682      	mov	sl, r0
 800b7a6:	468b      	mov	fp, r1
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	f47f adbe 	bne.w	800b32a <_strtod_l+0x452>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f47f adbb 	bne.w	800b32a <_strtod_l+0x452>
 800b7b4:	2322      	movs	r3, #34	; 0x22
 800b7b6:	f8c9 3000 	str.w	r3, [r9]
 800b7ba:	e5b6      	b.n	800b32a <_strtod_l+0x452>
 800b7bc:	4013      	ands	r3, r2
 800b7be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7c2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7ca:	f04f 3aff 	mov.w	sl, #4294967295
 800b7ce:	e76a      	b.n	800b6a6 <_strtod_l+0x7ce>
 800b7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d2:	b193      	cbz	r3, 800b7fa <_strtod_l+0x922>
 800b7d4:	422b      	tst	r3, r5
 800b7d6:	f43f af66 	beq.w	800b6a6 <_strtod_l+0x7ce>
 800b7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7dc:	9a04      	ldr	r2, [sp, #16]
 800b7de:	4650      	mov	r0, sl
 800b7e0:	4659      	mov	r1, fp
 800b7e2:	b173      	cbz	r3, 800b802 <_strtod_l+0x92a>
 800b7e4:	f7ff fb5c 	bl	800aea0 <sulp>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7f0:	f7f4 fd4c 	bl	800028c <__adddf3>
 800b7f4:	4682      	mov	sl, r0
 800b7f6:	468b      	mov	fp, r1
 800b7f8:	e755      	b.n	800b6a6 <_strtod_l+0x7ce>
 800b7fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7fc:	ea13 0f0a 	tst.w	r3, sl
 800b800:	e7e9      	b.n	800b7d6 <_strtod_l+0x8fe>
 800b802:	f7ff fb4d 	bl	800aea0 <sulp>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b80e:	f7f4 fd3b 	bl	8000288 <__aeabi_dsub>
 800b812:	2200      	movs	r2, #0
 800b814:	2300      	movs	r3, #0
 800b816:	4682      	mov	sl, r0
 800b818:	468b      	mov	fp, r1
 800b81a:	f7f5 f955 	bl	8000ac8 <__aeabi_dcmpeq>
 800b81e:	2800      	cmp	r0, #0
 800b820:	f47f ae11 	bne.w	800b446 <_strtod_l+0x56e>
 800b824:	e73f      	b.n	800b6a6 <_strtod_l+0x7ce>
 800b826:	4641      	mov	r1, r8
 800b828:	4620      	mov	r0, r4
 800b82a:	f001 ff12 	bl	800d652 <__ratio>
 800b82e:	ec57 6b10 	vmov	r6, r7, d0
 800b832:	2200      	movs	r2, #0
 800b834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b838:	ee10 0a10 	vmov	r0, s0
 800b83c:	4639      	mov	r1, r7
 800b83e:	f7f5 f957 	bl	8000af0 <__aeabi_dcmple>
 800b842:	2800      	cmp	r0, #0
 800b844:	d077      	beq.n	800b936 <_strtod_l+0xa5e>
 800b846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d04a      	beq.n	800b8e2 <_strtod_l+0xa0a>
 800b84c:	4b68      	ldr	r3, [pc, #416]	; (800b9f0 <_strtod_l+0xb18>)
 800b84e:	2200      	movs	r2, #0
 800b850:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b854:	4f66      	ldr	r7, [pc, #408]	; (800b9f0 <_strtod_l+0xb18>)
 800b856:	2600      	movs	r6, #0
 800b858:	4b62      	ldr	r3, [pc, #392]	; (800b9e4 <_strtod_l+0xb0c>)
 800b85a:	402b      	ands	r3, r5
 800b85c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b85e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b860:	4b64      	ldr	r3, [pc, #400]	; (800b9f4 <_strtod_l+0xb1c>)
 800b862:	429a      	cmp	r2, r3
 800b864:	f040 80ce 	bne.w	800ba04 <_strtod_l+0xb2c>
 800b868:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b86c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b870:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b874:	ec4b ab10 	vmov	d0, sl, fp
 800b878:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b87c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b880:	f001 fe22 	bl	800d4c8 <__ulp>
 800b884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b888:	ec53 2b10 	vmov	r2, r3, d0
 800b88c:	f7f4 feb4 	bl	80005f8 <__aeabi_dmul>
 800b890:	4652      	mov	r2, sl
 800b892:	465b      	mov	r3, fp
 800b894:	f7f4 fcfa 	bl	800028c <__adddf3>
 800b898:	460b      	mov	r3, r1
 800b89a:	4952      	ldr	r1, [pc, #328]	; (800b9e4 <_strtod_l+0xb0c>)
 800b89c:	4a56      	ldr	r2, [pc, #344]	; (800b9f8 <_strtod_l+0xb20>)
 800b89e:	4019      	ands	r1, r3
 800b8a0:	4291      	cmp	r1, r2
 800b8a2:	4682      	mov	sl, r0
 800b8a4:	d95b      	bls.n	800b95e <_strtod_l+0xa86>
 800b8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d103      	bne.n	800b8b8 <_strtod_l+0x9e0>
 800b8b0:	9b08      	ldr	r3, [sp, #32]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	f43f ad2e 	beq.w	800b314 <_strtod_l+0x43c>
 800b8b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b9e8 <_strtod_l+0xb10>
 800b8bc:	f04f 3aff 	mov.w	sl, #4294967295
 800b8c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8c2:	4648      	mov	r0, r9
 800b8c4:	f001 fb68 	bl	800cf98 <_Bfree>
 800b8c8:	9905      	ldr	r1, [sp, #20]
 800b8ca:	4648      	mov	r0, r9
 800b8cc:	f001 fb64 	bl	800cf98 <_Bfree>
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	4648      	mov	r0, r9
 800b8d4:	f001 fb60 	bl	800cf98 <_Bfree>
 800b8d8:	4621      	mov	r1, r4
 800b8da:	4648      	mov	r0, r9
 800b8dc:	f001 fb5c 	bl	800cf98 <_Bfree>
 800b8e0:	e619      	b.n	800b516 <_strtod_l+0x63e>
 800b8e2:	f1ba 0f00 	cmp.w	sl, #0
 800b8e6:	d11a      	bne.n	800b91e <_strtod_l+0xa46>
 800b8e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8ec:	b9eb      	cbnz	r3, 800b92a <_strtod_l+0xa52>
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	4b3f      	ldr	r3, [pc, #252]	; (800b9f0 <_strtod_l+0xb18>)
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	4639      	mov	r1, r7
 800b8f6:	f7f5 f8f1 	bl	8000adc <__aeabi_dcmplt>
 800b8fa:	b9c8      	cbnz	r0, 800b930 <_strtod_l+0xa58>
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	2200      	movs	r2, #0
 800b902:	4b3e      	ldr	r3, [pc, #248]	; (800b9fc <_strtod_l+0xb24>)
 800b904:	f7f4 fe78 	bl	80005f8 <__aeabi_dmul>
 800b908:	4606      	mov	r6, r0
 800b90a:	460f      	mov	r7, r1
 800b90c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b910:	9618      	str	r6, [sp, #96]	; 0x60
 800b912:	9319      	str	r3, [sp, #100]	; 0x64
 800b914:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b918:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b91c:	e79c      	b.n	800b858 <_strtod_l+0x980>
 800b91e:	f1ba 0f01 	cmp.w	sl, #1
 800b922:	d102      	bne.n	800b92a <_strtod_l+0xa52>
 800b924:	2d00      	cmp	r5, #0
 800b926:	f43f ad8e 	beq.w	800b446 <_strtod_l+0x56e>
 800b92a:	2200      	movs	r2, #0
 800b92c:	4b34      	ldr	r3, [pc, #208]	; (800ba00 <_strtod_l+0xb28>)
 800b92e:	e78f      	b.n	800b850 <_strtod_l+0x978>
 800b930:	2600      	movs	r6, #0
 800b932:	4f32      	ldr	r7, [pc, #200]	; (800b9fc <_strtod_l+0xb24>)
 800b934:	e7ea      	b.n	800b90c <_strtod_l+0xa34>
 800b936:	4b31      	ldr	r3, [pc, #196]	; (800b9fc <_strtod_l+0xb24>)
 800b938:	4630      	mov	r0, r6
 800b93a:	4639      	mov	r1, r7
 800b93c:	2200      	movs	r2, #0
 800b93e:	f7f4 fe5b 	bl	80005f8 <__aeabi_dmul>
 800b942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	b933      	cbnz	r3, 800b958 <_strtod_l+0xa80>
 800b94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b94e:	9010      	str	r0, [sp, #64]	; 0x40
 800b950:	9311      	str	r3, [sp, #68]	; 0x44
 800b952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b956:	e7df      	b.n	800b918 <_strtod_l+0xa40>
 800b958:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b95c:	e7f9      	b.n	800b952 <_strtod_l+0xa7a>
 800b95e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b962:	9b04      	ldr	r3, [sp, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1ab      	bne.n	800b8c0 <_strtod_l+0x9e8>
 800b968:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b96c:	0d1b      	lsrs	r3, r3, #20
 800b96e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b970:	051b      	lsls	r3, r3, #20
 800b972:	429a      	cmp	r2, r3
 800b974:	465d      	mov	r5, fp
 800b976:	d1a3      	bne.n	800b8c0 <_strtod_l+0x9e8>
 800b978:	4639      	mov	r1, r7
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7f5 f8ec 	bl	8000b58 <__aeabi_d2iz>
 800b980:	f7f4 fdd0 	bl	8000524 <__aeabi_i2d>
 800b984:	460b      	mov	r3, r1
 800b986:	4602      	mov	r2, r0
 800b988:	4639      	mov	r1, r7
 800b98a:	4630      	mov	r0, r6
 800b98c:	f7f4 fc7c 	bl	8000288 <__aeabi_dsub>
 800b990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b992:	4606      	mov	r6, r0
 800b994:	460f      	mov	r7, r1
 800b996:	b933      	cbnz	r3, 800b9a6 <_strtod_l+0xace>
 800b998:	f1ba 0f00 	cmp.w	sl, #0
 800b99c:	d103      	bne.n	800b9a6 <_strtod_l+0xace>
 800b99e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	d06d      	beq.n	800ba82 <_strtod_l+0xbaa>
 800b9a6:	a30a      	add	r3, pc, #40	; (adr r3, 800b9d0 <_strtod_l+0xaf8>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	f7f5 f894 	bl	8000adc <__aeabi_dcmplt>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f47f acb8 	bne.w	800b32a <_strtod_l+0x452>
 800b9ba:	a307      	add	r3, pc, #28	; (adr r3, 800b9d8 <_strtod_l+0xb00>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f5 f8a8 	bl	8000b18 <__aeabi_dcmpgt>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	f43f af79 	beq.w	800b8c0 <_strtod_l+0x9e8>
 800b9ce:	e4ac      	b.n	800b32a <_strtod_l+0x452>
 800b9d0:	94a03595 	.word	0x94a03595
 800b9d4:	3fdfffff 	.word	0x3fdfffff
 800b9d8:	35afe535 	.word	0x35afe535
 800b9dc:	3fe00000 	.word	0x3fe00000
 800b9e0:	000fffff 	.word	0x000fffff
 800b9e4:	7ff00000 	.word	0x7ff00000
 800b9e8:	7fefffff 	.word	0x7fefffff
 800b9ec:	39500000 	.word	0x39500000
 800b9f0:	3ff00000 	.word	0x3ff00000
 800b9f4:	7fe00000 	.word	0x7fe00000
 800b9f8:	7c9fffff 	.word	0x7c9fffff
 800b9fc:	3fe00000 	.word	0x3fe00000
 800ba00:	bff00000 	.word	0xbff00000
 800ba04:	9b04      	ldr	r3, [sp, #16]
 800ba06:	b333      	cbz	r3, 800ba56 <_strtod_l+0xb7e>
 800ba08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba0e:	d822      	bhi.n	800ba56 <_strtod_l+0xb7e>
 800ba10:	a327      	add	r3, pc, #156	; (adr r3, 800bab0 <_strtod_l+0xbd8>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	4630      	mov	r0, r6
 800ba18:	4639      	mov	r1, r7
 800ba1a:	f7f5 f869 	bl	8000af0 <__aeabi_dcmple>
 800ba1e:	b1a0      	cbz	r0, 800ba4a <_strtod_l+0xb72>
 800ba20:	4639      	mov	r1, r7
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7f5 f8c0 	bl	8000ba8 <__aeabi_d2uiz>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	bf08      	it	eq
 800ba2c:	2001      	moveq	r0, #1
 800ba2e:	f7f4 fd69 	bl	8000504 <__aeabi_ui2d>
 800ba32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba34:	4606      	mov	r6, r0
 800ba36:	460f      	mov	r7, r1
 800ba38:	bb03      	cbnz	r3, 800ba7c <_strtod_l+0xba4>
 800ba3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba3e:	9012      	str	r0, [sp, #72]	; 0x48
 800ba40:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ba46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba4e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba52:	1a9b      	subs	r3, r3, r2
 800ba54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba56:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ba5a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ba5e:	f001 fd33 	bl	800d4c8 <__ulp>
 800ba62:	4650      	mov	r0, sl
 800ba64:	ec53 2b10 	vmov	r2, r3, d0
 800ba68:	4659      	mov	r1, fp
 800ba6a:	f7f4 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ba6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba72:	f7f4 fc0b 	bl	800028c <__adddf3>
 800ba76:	4682      	mov	sl, r0
 800ba78:	468b      	mov	fp, r1
 800ba7a:	e772      	b.n	800b962 <_strtod_l+0xa8a>
 800ba7c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ba80:	e7df      	b.n	800ba42 <_strtod_l+0xb6a>
 800ba82:	a30d      	add	r3, pc, #52	; (adr r3, 800bab8 <_strtod_l+0xbe0>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f7f5 f828 	bl	8000adc <__aeabi_dcmplt>
 800ba8c:	e79c      	b.n	800b9c8 <_strtod_l+0xaf0>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	930d      	str	r3, [sp, #52]	; 0x34
 800ba92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	f7ff ba61 	b.w	800af5e <_strtod_l+0x86>
 800ba9c:	2b65      	cmp	r3, #101	; 0x65
 800ba9e:	f04f 0200 	mov.w	r2, #0
 800baa2:	f43f ab4e 	beq.w	800b142 <_strtod_l+0x26a>
 800baa6:	2101      	movs	r1, #1
 800baa8:	4614      	mov	r4, r2
 800baaa:	9104      	str	r1, [sp, #16]
 800baac:	f7ff bacb 	b.w	800b046 <_strtod_l+0x16e>
 800bab0:	ffc00000 	.word	0xffc00000
 800bab4:	41dfffff 	.word	0x41dfffff
 800bab8:	94a03595 	.word	0x94a03595
 800babc:	3fcfffff 	.word	0x3fcfffff

0800bac0 <_strtod_r>:
 800bac0:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <_strtod_r+0x18>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	b410      	push	{r4}
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	4c04      	ldr	r4, [pc, #16]	; (800badc <_strtod_r+0x1c>)
 800baca:	2b00      	cmp	r3, #0
 800bacc:	bf08      	it	eq
 800bace:	4623      	moveq	r3, r4
 800bad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bad4:	f7ff ba00 	b.w	800aed8 <_strtod_l>
 800bad8:	20000010 	.word	0x20000010
 800badc:	20000074 	.word	0x20000074

0800bae0 <_strtol_l.isra.0>:
 800bae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae4:	4680      	mov	r8, r0
 800bae6:	4689      	mov	r9, r1
 800bae8:	4692      	mov	sl, r2
 800baea:	461e      	mov	r6, r3
 800baec:	460f      	mov	r7, r1
 800baee:	463d      	mov	r5, r7
 800baf0:	9808      	ldr	r0, [sp, #32]
 800baf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baf6:	f001 f9ed 	bl	800ced4 <__locale_ctype_ptr_l>
 800bafa:	4420      	add	r0, r4
 800bafc:	7843      	ldrb	r3, [r0, #1]
 800bafe:	f013 0308 	ands.w	r3, r3, #8
 800bb02:	d132      	bne.n	800bb6a <_strtol_l.isra.0+0x8a>
 800bb04:	2c2d      	cmp	r4, #45	; 0x2d
 800bb06:	d132      	bne.n	800bb6e <_strtol_l.isra.0+0x8e>
 800bb08:	787c      	ldrb	r4, [r7, #1]
 800bb0a:	1cbd      	adds	r5, r7, #2
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	2e00      	cmp	r6, #0
 800bb10:	d05d      	beq.n	800bbce <_strtol_l.isra.0+0xee>
 800bb12:	2e10      	cmp	r6, #16
 800bb14:	d109      	bne.n	800bb2a <_strtol_l.isra.0+0x4a>
 800bb16:	2c30      	cmp	r4, #48	; 0x30
 800bb18:	d107      	bne.n	800bb2a <_strtol_l.isra.0+0x4a>
 800bb1a:	782b      	ldrb	r3, [r5, #0]
 800bb1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb20:	2b58      	cmp	r3, #88	; 0x58
 800bb22:	d14f      	bne.n	800bbc4 <_strtol_l.isra.0+0xe4>
 800bb24:	786c      	ldrb	r4, [r5, #1]
 800bb26:	2610      	movs	r6, #16
 800bb28:	3502      	adds	r5, #2
 800bb2a:	2a00      	cmp	r2, #0
 800bb2c:	bf14      	ite	ne
 800bb2e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bb32:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bb36:	2700      	movs	r7, #0
 800bb38:	fbb1 fcf6 	udiv	ip, r1, r6
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bb42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bb46:	2b09      	cmp	r3, #9
 800bb48:	d817      	bhi.n	800bb7a <_strtol_l.isra.0+0x9a>
 800bb4a:	461c      	mov	r4, r3
 800bb4c:	42a6      	cmp	r6, r4
 800bb4e:	dd23      	ble.n	800bb98 <_strtol_l.isra.0+0xb8>
 800bb50:	1c7b      	adds	r3, r7, #1
 800bb52:	d007      	beq.n	800bb64 <_strtol_l.isra.0+0x84>
 800bb54:	4584      	cmp	ip, r0
 800bb56:	d31c      	bcc.n	800bb92 <_strtol_l.isra.0+0xb2>
 800bb58:	d101      	bne.n	800bb5e <_strtol_l.isra.0+0x7e>
 800bb5a:	45a6      	cmp	lr, r4
 800bb5c:	db19      	blt.n	800bb92 <_strtol_l.isra.0+0xb2>
 800bb5e:	fb00 4006 	mla	r0, r0, r6, r4
 800bb62:	2701      	movs	r7, #1
 800bb64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb68:	e7eb      	b.n	800bb42 <_strtol_l.isra.0+0x62>
 800bb6a:	462f      	mov	r7, r5
 800bb6c:	e7bf      	b.n	800baee <_strtol_l.isra.0+0xe>
 800bb6e:	2c2b      	cmp	r4, #43	; 0x2b
 800bb70:	bf04      	itt	eq
 800bb72:	1cbd      	addeq	r5, r7, #2
 800bb74:	787c      	ldrbeq	r4, [r7, #1]
 800bb76:	461a      	mov	r2, r3
 800bb78:	e7c9      	b.n	800bb0e <_strtol_l.isra.0+0x2e>
 800bb7a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bb7e:	2b19      	cmp	r3, #25
 800bb80:	d801      	bhi.n	800bb86 <_strtol_l.isra.0+0xa6>
 800bb82:	3c37      	subs	r4, #55	; 0x37
 800bb84:	e7e2      	b.n	800bb4c <_strtol_l.isra.0+0x6c>
 800bb86:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bb8a:	2b19      	cmp	r3, #25
 800bb8c:	d804      	bhi.n	800bb98 <_strtol_l.isra.0+0xb8>
 800bb8e:	3c57      	subs	r4, #87	; 0x57
 800bb90:	e7dc      	b.n	800bb4c <_strtol_l.isra.0+0x6c>
 800bb92:	f04f 37ff 	mov.w	r7, #4294967295
 800bb96:	e7e5      	b.n	800bb64 <_strtol_l.isra.0+0x84>
 800bb98:	1c7b      	adds	r3, r7, #1
 800bb9a:	d108      	bne.n	800bbae <_strtol_l.isra.0+0xce>
 800bb9c:	2322      	movs	r3, #34	; 0x22
 800bb9e:	f8c8 3000 	str.w	r3, [r8]
 800bba2:	4608      	mov	r0, r1
 800bba4:	f1ba 0f00 	cmp.w	sl, #0
 800bba8:	d107      	bne.n	800bbba <_strtol_l.isra.0+0xda>
 800bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbae:	b102      	cbz	r2, 800bbb2 <_strtol_l.isra.0+0xd2>
 800bbb0:	4240      	negs	r0, r0
 800bbb2:	f1ba 0f00 	cmp.w	sl, #0
 800bbb6:	d0f8      	beq.n	800bbaa <_strtol_l.isra.0+0xca>
 800bbb8:	b10f      	cbz	r7, 800bbbe <_strtol_l.isra.0+0xde>
 800bbba:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbbe:	f8ca 9000 	str.w	r9, [sl]
 800bbc2:	e7f2      	b.n	800bbaa <_strtol_l.isra.0+0xca>
 800bbc4:	2430      	movs	r4, #48	; 0x30
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	d1af      	bne.n	800bb2a <_strtol_l.isra.0+0x4a>
 800bbca:	2608      	movs	r6, #8
 800bbcc:	e7ad      	b.n	800bb2a <_strtol_l.isra.0+0x4a>
 800bbce:	2c30      	cmp	r4, #48	; 0x30
 800bbd0:	d0a3      	beq.n	800bb1a <_strtol_l.isra.0+0x3a>
 800bbd2:	260a      	movs	r6, #10
 800bbd4:	e7a9      	b.n	800bb2a <_strtol_l.isra.0+0x4a>
	...

0800bbd8 <_strtol_r>:
 800bbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbda:	4c06      	ldr	r4, [pc, #24]	; (800bbf4 <_strtol_r+0x1c>)
 800bbdc:	4d06      	ldr	r5, [pc, #24]	; (800bbf8 <_strtol_r+0x20>)
 800bbde:	6824      	ldr	r4, [r4, #0]
 800bbe0:	6a24      	ldr	r4, [r4, #32]
 800bbe2:	2c00      	cmp	r4, #0
 800bbe4:	bf08      	it	eq
 800bbe6:	462c      	moveq	r4, r5
 800bbe8:	9400      	str	r4, [sp, #0]
 800bbea:	f7ff ff79 	bl	800bae0 <_strtol_l.isra.0>
 800bbee:	b003      	add	sp, #12
 800bbf0:	bd30      	pop	{r4, r5, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20000010 	.word	0x20000010
 800bbf8:	20000074 	.word	0x20000074

0800bbfc <quorem>:
 800bbfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	6903      	ldr	r3, [r0, #16]
 800bc02:	690c      	ldr	r4, [r1, #16]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	4680      	mov	r8, r0
 800bc08:	f2c0 8082 	blt.w	800bd10 <quorem+0x114>
 800bc0c:	3c01      	subs	r4, #1
 800bc0e:	f101 0714 	add.w	r7, r1, #20
 800bc12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bc16:	f100 0614 	add.w	r6, r0, #20
 800bc1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bc1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bc22:	eb06 030c 	add.w	r3, r6, ip
 800bc26:	3501      	adds	r5, #1
 800bc28:	eb07 090c 	add.w	r9, r7, ip
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	fbb0 f5f5 	udiv	r5, r0, r5
 800bc32:	b395      	cbz	r5, 800bc9a <quorem+0x9e>
 800bc34:	f04f 0a00 	mov.w	sl, #0
 800bc38:	4638      	mov	r0, r7
 800bc3a:	46b6      	mov	lr, r6
 800bc3c:	46d3      	mov	fp, sl
 800bc3e:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc42:	b293      	uxth	r3, r2
 800bc44:	fb05 a303 	mla	r3, r5, r3, sl
 800bc48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	ebab 0303 	sub.w	r3, fp, r3
 800bc52:	0c12      	lsrs	r2, r2, #16
 800bc54:	f8de b000 	ldr.w	fp, [lr]
 800bc58:	fb05 a202 	mla	r2, r5, r2, sl
 800bc5c:	fa13 f38b 	uxtah	r3, r3, fp
 800bc60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bc64:	fa1f fb82 	uxth.w	fp, r2
 800bc68:	f8de 2000 	ldr.w	r2, [lr]
 800bc6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bc70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc7a:	4581      	cmp	r9, r0
 800bc7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bc80:	f84e 3b04 	str.w	r3, [lr], #4
 800bc84:	d2db      	bcs.n	800bc3e <quorem+0x42>
 800bc86:	f856 300c 	ldr.w	r3, [r6, ip]
 800bc8a:	b933      	cbnz	r3, 800bc9a <quorem+0x9e>
 800bc8c:	9b01      	ldr	r3, [sp, #4]
 800bc8e:	3b04      	subs	r3, #4
 800bc90:	429e      	cmp	r6, r3
 800bc92:	461a      	mov	r2, r3
 800bc94:	d330      	bcc.n	800bcf8 <quorem+0xfc>
 800bc96:	f8c8 4010 	str.w	r4, [r8, #16]
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	f001 fb9c 	bl	800d3d8 <__mcmp>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	db25      	blt.n	800bcf0 <quorem+0xf4>
 800bca4:	3501      	adds	r5, #1
 800bca6:	4630      	mov	r0, r6
 800bca8:	f04f 0c00 	mov.w	ip, #0
 800bcac:	f857 2b04 	ldr.w	r2, [r7], #4
 800bcb0:	f8d0 e000 	ldr.w	lr, [r0]
 800bcb4:	b293      	uxth	r3, r2
 800bcb6:	ebac 0303 	sub.w	r3, ip, r3
 800bcba:	0c12      	lsrs	r2, r2, #16
 800bcbc:	fa13 f38e 	uxtah	r3, r3, lr
 800bcc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcce:	45b9      	cmp	r9, r7
 800bcd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcd4:	f840 3b04 	str.w	r3, [r0], #4
 800bcd8:	d2e8      	bcs.n	800bcac <quorem+0xb0>
 800bcda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bcde:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bce2:	b92a      	cbnz	r2, 800bcf0 <quorem+0xf4>
 800bce4:	3b04      	subs	r3, #4
 800bce6:	429e      	cmp	r6, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	d30b      	bcc.n	800bd04 <quorem+0x108>
 800bcec:	f8c8 4010 	str.w	r4, [r8, #16]
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	b003      	add	sp, #12
 800bcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf8:	6812      	ldr	r2, [r2, #0]
 800bcfa:	3b04      	subs	r3, #4
 800bcfc:	2a00      	cmp	r2, #0
 800bcfe:	d1ca      	bne.n	800bc96 <quorem+0x9a>
 800bd00:	3c01      	subs	r4, #1
 800bd02:	e7c5      	b.n	800bc90 <quorem+0x94>
 800bd04:	6812      	ldr	r2, [r2, #0]
 800bd06:	3b04      	subs	r3, #4
 800bd08:	2a00      	cmp	r2, #0
 800bd0a:	d1ef      	bne.n	800bcec <quorem+0xf0>
 800bd0c:	3c01      	subs	r4, #1
 800bd0e:	e7ea      	b.n	800bce6 <quorem+0xea>
 800bd10:	2000      	movs	r0, #0
 800bd12:	e7ee      	b.n	800bcf2 <quorem+0xf6>
 800bd14:	0000      	movs	r0, r0
	...

0800bd18 <_dtoa_r>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	ec57 6b10 	vmov	r6, r7, d0
 800bd20:	b097      	sub	sp, #92	; 0x5c
 800bd22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd24:	9106      	str	r1, [sp, #24]
 800bd26:	4604      	mov	r4, r0
 800bd28:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd2a:	9312      	str	r3, [sp, #72]	; 0x48
 800bd2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd30:	e9cd 6700 	strd	r6, r7, [sp]
 800bd34:	b93d      	cbnz	r5, 800bd46 <_dtoa_r+0x2e>
 800bd36:	2010      	movs	r0, #16
 800bd38:	f001 f8e0 	bl	800cefc <malloc>
 800bd3c:	6260      	str	r0, [r4, #36]	; 0x24
 800bd3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd42:	6005      	str	r5, [r0, #0]
 800bd44:	60c5      	str	r5, [r0, #12]
 800bd46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd48:	6819      	ldr	r1, [r3, #0]
 800bd4a:	b151      	cbz	r1, 800bd62 <_dtoa_r+0x4a>
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	604a      	str	r2, [r1, #4]
 800bd50:	2301      	movs	r3, #1
 800bd52:	4093      	lsls	r3, r2
 800bd54:	608b      	str	r3, [r1, #8]
 800bd56:	4620      	mov	r0, r4
 800bd58:	f001 f91e 	bl	800cf98 <_Bfree>
 800bd5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	1e3b      	subs	r3, r7, #0
 800bd64:	bfbb      	ittet	lt
 800bd66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd6a:	9301      	strlt	r3, [sp, #4]
 800bd6c:	2300      	movge	r3, #0
 800bd6e:	2201      	movlt	r2, #1
 800bd70:	bfac      	ite	ge
 800bd72:	f8c8 3000 	strge.w	r3, [r8]
 800bd76:	f8c8 2000 	strlt.w	r2, [r8]
 800bd7a:	4baf      	ldr	r3, [pc, #700]	; (800c038 <_dtoa_r+0x320>)
 800bd7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd80:	ea33 0308 	bics.w	r3, r3, r8
 800bd84:	d114      	bne.n	800bdb0 <_dtoa_r+0x98>
 800bd86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd88:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	9b00      	ldr	r3, [sp, #0]
 800bd90:	b923      	cbnz	r3, 800bd9c <_dtoa_r+0x84>
 800bd92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bd96:	2800      	cmp	r0, #0
 800bd98:	f000 8542 	beq.w	800c820 <_dtoa_r+0xb08>
 800bd9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c04c <_dtoa_r+0x334>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 8544 	beq.w	800c830 <_dtoa_r+0xb18>
 800bda8:	f10b 0303 	add.w	r3, fp, #3
 800bdac:	f000 bd3e 	b.w	800c82c <_dtoa_r+0xb14>
 800bdb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdc0:	4681      	mov	r9, r0
 800bdc2:	b168      	cbz	r0, 800bde0 <_dtoa_r+0xc8>
 800bdc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	6013      	str	r3, [r2, #0]
 800bdca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 8524 	beq.w	800c81a <_dtoa_r+0xb02>
 800bdd2:	4b9a      	ldr	r3, [pc, #616]	; (800c03c <_dtoa_r+0x324>)
 800bdd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdd6:	f103 3bff 	add.w	fp, r3, #4294967295
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	f000 bd28 	b.w	800c830 <_dtoa_r+0xb18>
 800bde0:	aa14      	add	r2, sp, #80	; 0x50
 800bde2:	a915      	add	r1, sp, #84	; 0x54
 800bde4:	ec47 6b10 	vmov	d0, r6, r7
 800bde8:	4620      	mov	r0, r4
 800bdea:	f001 fbe3 	bl	800d5b4 <__d2b>
 800bdee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bdf2:	9004      	str	r0, [sp, #16]
 800bdf4:	2d00      	cmp	r5, #0
 800bdf6:	d07c      	beq.n	800bef2 <_dtoa_r+0x1da>
 800bdf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdfc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800be00:	46b2      	mov	sl, r6
 800be02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800be06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800be0e:	2200      	movs	r2, #0
 800be10:	4b8b      	ldr	r3, [pc, #556]	; (800c040 <_dtoa_r+0x328>)
 800be12:	4650      	mov	r0, sl
 800be14:	4659      	mov	r1, fp
 800be16:	f7f4 fa37 	bl	8000288 <__aeabi_dsub>
 800be1a:	a381      	add	r3, pc, #516	; (adr r3, 800c020 <_dtoa_r+0x308>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fbea 	bl	80005f8 <__aeabi_dmul>
 800be24:	a380      	add	r3, pc, #512	; (adr r3, 800c028 <_dtoa_r+0x310>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fa2f 	bl	800028c <__adddf3>
 800be2e:	4606      	mov	r6, r0
 800be30:	4628      	mov	r0, r5
 800be32:	460f      	mov	r7, r1
 800be34:	f7f4 fb76 	bl	8000524 <__aeabi_i2d>
 800be38:	a37d      	add	r3, pc, #500	; (adr r3, 800c030 <_dtoa_r+0x318>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4630      	mov	r0, r6
 800be48:	4639      	mov	r1, r7
 800be4a:	f7f4 fa1f 	bl	800028c <__adddf3>
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	f7f4 fe81 	bl	8000b58 <__aeabi_d2iz>
 800be56:	2200      	movs	r2, #0
 800be58:	4682      	mov	sl, r0
 800be5a:	2300      	movs	r3, #0
 800be5c:	4630      	mov	r0, r6
 800be5e:	4639      	mov	r1, r7
 800be60:	f7f4 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800be64:	b148      	cbz	r0, 800be7a <_dtoa_r+0x162>
 800be66:	4650      	mov	r0, sl
 800be68:	f7f4 fb5c 	bl	8000524 <__aeabi_i2d>
 800be6c:	4632      	mov	r2, r6
 800be6e:	463b      	mov	r3, r7
 800be70:	f7f4 fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800be74:	b908      	cbnz	r0, 800be7a <_dtoa_r+0x162>
 800be76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be7a:	f1ba 0f16 	cmp.w	sl, #22
 800be7e:	d859      	bhi.n	800bf34 <_dtoa_r+0x21c>
 800be80:	4970      	ldr	r1, [pc, #448]	; (800c044 <_dtoa_r+0x32c>)
 800be82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800be86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be8e:	f7f4 fe43 	bl	8000b18 <__aeabi_dcmpgt>
 800be92:	2800      	cmp	r0, #0
 800be94:	d050      	beq.n	800bf38 <_dtoa_r+0x220>
 800be96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be9a:	2300      	movs	r3, #0
 800be9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800be9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bea0:	1b5d      	subs	r5, r3, r5
 800bea2:	f1b5 0801 	subs.w	r8, r5, #1
 800bea6:	bf49      	itett	mi
 800bea8:	f1c5 0301 	rsbmi	r3, r5, #1
 800beac:	2300      	movpl	r3, #0
 800beae:	9305      	strmi	r3, [sp, #20]
 800beb0:	f04f 0800 	movmi.w	r8, #0
 800beb4:	bf58      	it	pl
 800beb6:	9305      	strpl	r3, [sp, #20]
 800beb8:	f1ba 0f00 	cmp.w	sl, #0
 800bebc:	db3e      	blt.n	800bf3c <_dtoa_r+0x224>
 800bebe:	2300      	movs	r3, #0
 800bec0:	44d0      	add	r8, sl
 800bec2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bec6:	9307      	str	r3, [sp, #28]
 800bec8:	9b06      	ldr	r3, [sp, #24]
 800beca:	2b09      	cmp	r3, #9
 800becc:	f200 8090 	bhi.w	800bff0 <_dtoa_r+0x2d8>
 800bed0:	2b05      	cmp	r3, #5
 800bed2:	bfc4      	itt	gt
 800bed4:	3b04      	subgt	r3, #4
 800bed6:	9306      	strgt	r3, [sp, #24]
 800bed8:	9b06      	ldr	r3, [sp, #24]
 800beda:	f1a3 0302 	sub.w	r3, r3, #2
 800bede:	bfcc      	ite	gt
 800bee0:	2500      	movgt	r5, #0
 800bee2:	2501      	movle	r5, #1
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	f200 808f 	bhi.w	800c008 <_dtoa_r+0x2f0>
 800beea:	e8df f003 	tbb	[pc, r3]
 800beee:	7f7d      	.short	0x7f7d
 800bef0:	7131      	.short	0x7131
 800bef2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bef6:	441d      	add	r5, r3
 800bef8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800befc:	2820      	cmp	r0, #32
 800befe:	dd13      	ble.n	800bf28 <_dtoa_r+0x210>
 800bf00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bf04:	9b00      	ldr	r3, [sp, #0]
 800bf06:	fa08 f800 	lsl.w	r8, r8, r0
 800bf0a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bf0e:	fa23 f000 	lsr.w	r0, r3, r0
 800bf12:	ea48 0000 	orr.w	r0, r8, r0
 800bf16:	f7f4 faf5 	bl	8000504 <__aeabi_ui2d>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4682      	mov	sl, r0
 800bf1e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bf22:	3d01      	subs	r5, #1
 800bf24:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf26:	e772      	b.n	800be0e <_dtoa_r+0xf6>
 800bf28:	9b00      	ldr	r3, [sp, #0]
 800bf2a:	f1c0 0020 	rsb	r0, r0, #32
 800bf2e:	fa03 f000 	lsl.w	r0, r3, r0
 800bf32:	e7f0      	b.n	800bf16 <_dtoa_r+0x1fe>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e7b1      	b.n	800be9c <_dtoa_r+0x184>
 800bf38:	900f      	str	r0, [sp, #60]	; 0x3c
 800bf3a:	e7b0      	b.n	800be9e <_dtoa_r+0x186>
 800bf3c:	9b05      	ldr	r3, [sp, #20]
 800bf3e:	eba3 030a 	sub.w	r3, r3, sl
 800bf42:	9305      	str	r3, [sp, #20]
 800bf44:	f1ca 0300 	rsb	r3, sl, #0
 800bf48:	9307      	str	r3, [sp, #28]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	930e      	str	r3, [sp, #56]	; 0x38
 800bf4e:	e7bb      	b.n	800bec8 <_dtoa_r+0x1b0>
 800bf50:	2301      	movs	r3, #1
 800bf52:	930a      	str	r3, [sp, #40]	; 0x28
 800bf54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dd59      	ble.n	800c00e <_dtoa_r+0x2f6>
 800bf5a:	9302      	str	r3, [sp, #8]
 800bf5c:	4699      	mov	r9, r3
 800bf5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf60:	2200      	movs	r2, #0
 800bf62:	6072      	str	r2, [r6, #4]
 800bf64:	2204      	movs	r2, #4
 800bf66:	f102 0014 	add.w	r0, r2, #20
 800bf6a:	4298      	cmp	r0, r3
 800bf6c:	6871      	ldr	r1, [r6, #4]
 800bf6e:	d953      	bls.n	800c018 <_dtoa_r+0x300>
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 ffdd 	bl	800cf30 <_Balloc>
 800bf76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf78:	6030      	str	r0, [r6, #0]
 800bf7a:	f1b9 0f0e 	cmp.w	r9, #14
 800bf7e:	f8d3 b000 	ldr.w	fp, [r3]
 800bf82:	f200 80e6 	bhi.w	800c152 <_dtoa_r+0x43a>
 800bf86:	2d00      	cmp	r5, #0
 800bf88:	f000 80e3 	beq.w	800c152 <_dtoa_r+0x43a>
 800bf8c:	ed9d 7b00 	vldr	d7, [sp]
 800bf90:	f1ba 0f00 	cmp.w	sl, #0
 800bf94:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bf98:	dd74      	ble.n	800c084 <_dtoa_r+0x36c>
 800bf9a:	4a2a      	ldr	r2, [pc, #168]	; (800c044 <_dtoa_r+0x32c>)
 800bf9c:	f00a 030f 	and.w	r3, sl, #15
 800bfa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfa4:	ed93 7b00 	vldr	d7, [r3]
 800bfa8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bfac:	06f0      	lsls	r0, r6, #27
 800bfae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bfb2:	d565      	bpl.n	800c080 <_dtoa_r+0x368>
 800bfb4:	4b24      	ldr	r3, [pc, #144]	; (800c048 <_dtoa_r+0x330>)
 800bfb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfbe:	f7f4 fc45 	bl	800084c <__aeabi_ddiv>
 800bfc2:	e9cd 0100 	strd	r0, r1, [sp]
 800bfc6:	f006 060f 	and.w	r6, r6, #15
 800bfca:	2503      	movs	r5, #3
 800bfcc:	4f1e      	ldr	r7, [pc, #120]	; (800c048 <_dtoa_r+0x330>)
 800bfce:	e04c      	b.n	800c06a <_dtoa_r+0x352>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfd6:	4453      	add	r3, sl
 800bfd8:	f103 0901 	add.w	r9, r3, #1
 800bfdc:	9302      	str	r3, [sp, #8]
 800bfde:	464b      	mov	r3, r9
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	bfb8      	it	lt
 800bfe4:	2301      	movlt	r3, #1
 800bfe6:	e7ba      	b.n	800bf5e <_dtoa_r+0x246>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e7b2      	b.n	800bf52 <_dtoa_r+0x23a>
 800bfec:	2300      	movs	r3, #0
 800bfee:	e7f0      	b.n	800bfd2 <_dtoa_r+0x2ba>
 800bff0:	2501      	movs	r5, #1
 800bff2:	2300      	movs	r3, #0
 800bff4:	9306      	str	r3, [sp, #24]
 800bff6:	950a      	str	r5, [sp, #40]	; 0x28
 800bff8:	f04f 33ff 	mov.w	r3, #4294967295
 800bffc:	9302      	str	r3, [sp, #8]
 800bffe:	4699      	mov	r9, r3
 800c000:	2200      	movs	r2, #0
 800c002:	2312      	movs	r3, #18
 800c004:	920b      	str	r2, [sp, #44]	; 0x2c
 800c006:	e7aa      	b.n	800bf5e <_dtoa_r+0x246>
 800c008:	2301      	movs	r3, #1
 800c00a:	930a      	str	r3, [sp, #40]	; 0x28
 800c00c:	e7f4      	b.n	800bff8 <_dtoa_r+0x2e0>
 800c00e:	2301      	movs	r3, #1
 800c010:	9302      	str	r3, [sp, #8]
 800c012:	4699      	mov	r9, r3
 800c014:	461a      	mov	r2, r3
 800c016:	e7f5      	b.n	800c004 <_dtoa_r+0x2ec>
 800c018:	3101      	adds	r1, #1
 800c01a:	6071      	str	r1, [r6, #4]
 800c01c:	0052      	lsls	r2, r2, #1
 800c01e:	e7a2      	b.n	800bf66 <_dtoa_r+0x24e>
 800c020:	636f4361 	.word	0x636f4361
 800c024:	3fd287a7 	.word	0x3fd287a7
 800c028:	8b60c8b3 	.word	0x8b60c8b3
 800c02c:	3fc68a28 	.word	0x3fc68a28
 800c030:	509f79fb 	.word	0x509f79fb
 800c034:	3fd34413 	.word	0x3fd34413
 800c038:	7ff00000 	.word	0x7ff00000
 800c03c:	0800de8d 	.word	0x0800de8d
 800c040:	3ff80000 	.word	0x3ff80000
 800c044:	0800df48 	.word	0x0800df48
 800c048:	0800df20 	.word	0x0800df20
 800c04c:	0800df11 	.word	0x0800df11
 800c050:	07f1      	lsls	r1, r6, #31
 800c052:	d508      	bpl.n	800c066 <_dtoa_r+0x34e>
 800c054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c05c:	f7f4 facc 	bl	80005f8 <__aeabi_dmul>
 800c060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c064:	3501      	adds	r5, #1
 800c066:	1076      	asrs	r6, r6, #1
 800c068:	3708      	adds	r7, #8
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d1f0      	bne.n	800c050 <_dtoa_r+0x338>
 800c06e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c072:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c076:	f7f4 fbe9 	bl	800084c <__aeabi_ddiv>
 800c07a:	e9cd 0100 	strd	r0, r1, [sp]
 800c07e:	e01a      	b.n	800c0b6 <_dtoa_r+0x39e>
 800c080:	2502      	movs	r5, #2
 800c082:	e7a3      	b.n	800bfcc <_dtoa_r+0x2b4>
 800c084:	f000 80a0 	beq.w	800c1c8 <_dtoa_r+0x4b0>
 800c088:	f1ca 0600 	rsb	r6, sl, #0
 800c08c:	4b9f      	ldr	r3, [pc, #636]	; (800c30c <_dtoa_r+0x5f4>)
 800c08e:	4fa0      	ldr	r7, [pc, #640]	; (800c310 <_dtoa_r+0x5f8>)
 800c090:	f006 020f 	and.w	r2, r6, #15
 800c094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0a0:	f7f4 faaa 	bl	80005f8 <__aeabi_dmul>
 800c0a4:	e9cd 0100 	strd	r0, r1, [sp]
 800c0a8:	1136      	asrs	r6, r6, #4
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	2502      	movs	r5, #2
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	d17f      	bne.n	800c1b2 <_dtoa_r+0x49a>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1e1      	bne.n	800c07a <_dtoa_r+0x362>
 800c0b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 8087 	beq.w	800c1cc <_dtoa_r+0x4b4>
 800c0be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4b93      	ldr	r3, [pc, #588]	; (800c314 <_dtoa_r+0x5fc>)
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	f7f4 fd07 	bl	8000adc <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d07c      	beq.n	800c1cc <_dtoa_r+0x4b4>
 800c0d2:	f1b9 0f00 	cmp.w	r9, #0
 800c0d6:	d079      	beq.n	800c1cc <_dtoa_r+0x4b4>
 800c0d8:	9b02      	ldr	r3, [sp, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dd35      	ble.n	800c14a <_dtoa_r+0x432>
 800c0de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c0e2:	9308      	str	r3, [sp, #32]
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4b8b      	ldr	r3, [pc, #556]	; (800c318 <_dtoa_r+0x600>)
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f7f4 fa84 	bl	80005f8 <__aeabi_dmul>
 800c0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c0f4:	9f02      	ldr	r7, [sp, #8]
 800c0f6:	3501      	adds	r5, #1
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f7f4 fa13 	bl	8000524 <__aeabi_i2d>
 800c0fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c102:	f7f4 fa79 	bl	80005f8 <__aeabi_dmul>
 800c106:	2200      	movs	r2, #0
 800c108:	4b84      	ldr	r3, [pc, #528]	; (800c31c <_dtoa_r+0x604>)
 800c10a:	f7f4 f8bf 	bl	800028c <__adddf3>
 800c10e:	4605      	mov	r5, r0
 800c110:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c114:	2f00      	cmp	r7, #0
 800c116:	d15d      	bne.n	800c1d4 <_dtoa_r+0x4bc>
 800c118:	2200      	movs	r2, #0
 800c11a:	4b81      	ldr	r3, [pc, #516]	; (800c320 <_dtoa_r+0x608>)
 800c11c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c120:	f7f4 f8b2 	bl	8000288 <__aeabi_dsub>
 800c124:	462a      	mov	r2, r5
 800c126:	4633      	mov	r3, r6
 800c128:	e9cd 0100 	strd	r0, r1, [sp]
 800c12c:	f7f4 fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 800c130:	2800      	cmp	r0, #0
 800c132:	f040 8288 	bne.w	800c646 <_dtoa_r+0x92e>
 800c136:	462a      	mov	r2, r5
 800c138:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c13c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c140:	f7f4 fccc 	bl	8000adc <__aeabi_dcmplt>
 800c144:	2800      	cmp	r0, #0
 800c146:	f040 827c 	bne.w	800c642 <_dtoa_r+0x92a>
 800c14a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c14e:	e9cd 2300 	strd	r2, r3, [sp]
 800c152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c154:	2b00      	cmp	r3, #0
 800c156:	f2c0 8150 	blt.w	800c3fa <_dtoa_r+0x6e2>
 800c15a:	f1ba 0f0e 	cmp.w	sl, #14
 800c15e:	f300 814c 	bgt.w	800c3fa <_dtoa_r+0x6e2>
 800c162:	4b6a      	ldr	r3, [pc, #424]	; (800c30c <_dtoa_r+0x5f4>)
 800c164:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c168:	ed93 7b00 	vldr	d7, [r3]
 800c16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c174:	f280 80d8 	bge.w	800c328 <_dtoa_r+0x610>
 800c178:	f1b9 0f00 	cmp.w	r9, #0
 800c17c:	f300 80d4 	bgt.w	800c328 <_dtoa_r+0x610>
 800c180:	f040 825e 	bne.w	800c640 <_dtoa_r+0x928>
 800c184:	2200      	movs	r2, #0
 800c186:	4b66      	ldr	r3, [pc, #408]	; (800c320 <_dtoa_r+0x608>)
 800c188:	ec51 0b17 	vmov	r0, r1, d7
 800c18c:	f7f4 fa34 	bl	80005f8 <__aeabi_dmul>
 800c190:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c194:	f7f4 fcb6 	bl	8000b04 <__aeabi_dcmpge>
 800c198:	464f      	mov	r7, r9
 800c19a:	464e      	mov	r6, r9
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f040 8234 	bne.w	800c60a <_dtoa_r+0x8f2>
 800c1a2:	2331      	movs	r3, #49	; 0x31
 800c1a4:	f10b 0501 	add.w	r5, fp, #1
 800c1a8:	f88b 3000 	strb.w	r3, [fp]
 800c1ac:	f10a 0a01 	add.w	sl, sl, #1
 800c1b0:	e22f      	b.n	800c612 <_dtoa_r+0x8fa>
 800c1b2:	07f2      	lsls	r2, r6, #31
 800c1b4:	d505      	bpl.n	800c1c2 <_dtoa_r+0x4aa>
 800c1b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ba:	f7f4 fa1d 	bl	80005f8 <__aeabi_dmul>
 800c1be:	3501      	adds	r5, #1
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	1076      	asrs	r6, r6, #1
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	e772      	b.n	800c0ae <_dtoa_r+0x396>
 800c1c8:	2502      	movs	r5, #2
 800c1ca:	e774      	b.n	800c0b6 <_dtoa_r+0x39e>
 800c1cc:	f8cd a020 	str.w	sl, [sp, #32]
 800c1d0:	464f      	mov	r7, r9
 800c1d2:	e791      	b.n	800c0f8 <_dtoa_r+0x3e0>
 800c1d4:	4b4d      	ldr	r3, [pc, #308]	; (800c30c <_dtoa_r+0x5f4>)
 800c1d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d047      	beq.n	800c274 <_dtoa_r+0x55c>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	494e      	ldr	r1, [pc, #312]	; (800c324 <_dtoa_r+0x60c>)
 800c1ec:	f7f4 fb2e 	bl	800084c <__aeabi_ddiv>
 800c1f0:	462a      	mov	r2, r5
 800c1f2:	4633      	mov	r3, r6
 800c1f4:	f7f4 f848 	bl	8000288 <__aeabi_dsub>
 800c1f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c1fc:	465d      	mov	r5, fp
 800c1fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c202:	f7f4 fca9 	bl	8000b58 <__aeabi_d2iz>
 800c206:	4606      	mov	r6, r0
 800c208:	f7f4 f98c 	bl	8000524 <__aeabi_i2d>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c214:	f7f4 f838 	bl	8000288 <__aeabi_dsub>
 800c218:	3630      	adds	r6, #48	; 0x30
 800c21a:	f805 6b01 	strb.w	r6, [r5], #1
 800c21e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c222:	e9cd 0100 	strd	r0, r1, [sp]
 800c226:	f7f4 fc59 	bl	8000adc <__aeabi_dcmplt>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d163      	bne.n	800c2f6 <_dtoa_r+0x5de>
 800c22e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c232:	2000      	movs	r0, #0
 800c234:	4937      	ldr	r1, [pc, #220]	; (800c314 <_dtoa_r+0x5fc>)
 800c236:	f7f4 f827 	bl	8000288 <__aeabi_dsub>
 800c23a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c23e:	f7f4 fc4d 	bl	8000adc <__aeabi_dcmplt>
 800c242:	2800      	cmp	r0, #0
 800c244:	f040 80b7 	bne.w	800c3b6 <_dtoa_r+0x69e>
 800c248:	eba5 030b 	sub.w	r3, r5, fp
 800c24c:	429f      	cmp	r7, r3
 800c24e:	f77f af7c 	ble.w	800c14a <_dtoa_r+0x432>
 800c252:	2200      	movs	r2, #0
 800c254:	4b30      	ldr	r3, [pc, #192]	; (800c318 <_dtoa_r+0x600>)
 800c256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	2200      	movs	r2, #0
 800c260:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c264:	4b2c      	ldr	r3, [pc, #176]	; (800c318 <_dtoa_r+0x600>)
 800c266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c26a:	f7f4 f9c5 	bl	80005f8 <__aeabi_dmul>
 800c26e:	e9cd 0100 	strd	r0, r1, [sp]
 800c272:	e7c4      	b.n	800c1fe <_dtoa_r+0x4e6>
 800c274:	462a      	mov	r2, r5
 800c276:	4633      	mov	r3, r6
 800c278:	f7f4 f9be 	bl	80005f8 <__aeabi_dmul>
 800c27c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c280:	eb0b 0507 	add.w	r5, fp, r7
 800c284:	465e      	mov	r6, fp
 800c286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c28a:	f7f4 fc65 	bl	8000b58 <__aeabi_d2iz>
 800c28e:	4607      	mov	r7, r0
 800c290:	f7f4 f948 	bl	8000524 <__aeabi_i2d>
 800c294:	3730      	adds	r7, #48	; 0x30
 800c296:	4602      	mov	r2, r0
 800c298:	460b      	mov	r3, r1
 800c29a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c29e:	f7f3 fff3 	bl	8000288 <__aeabi_dsub>
 800c2a2:	f806 7b01 	strb.w	r7, [r6], #1
 800c2a6:	42ae      	cmp	r6, r5
 800c2a8:	e9cd 0100 	strd	r0, r1, [sp]
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	d126      	bne.n	800c300 <_dtoa_r+0x5e8>
 800c2b2:	4b1c      	ldr	r3, [pc, #112]	; (800c324 <_dtoa_r+0x60c>)
 800c2b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2b8:	f7f3 ffe8 	bl	800028c <__adddf3>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c4:	f7f4 fc28 	bl	8000b18 <__aeabi_dcmpgt>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d174      	bne.n	800c3b6 <_dtoa_r+0x69e>
 800c2cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	4914      	ldr	r1, [pc, #80]	; (800c324 <_dtoa_r+0x60c>)
 800c2d4:	f7f3 ffd8 	bl	8000288 <__aeabi_dsub>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2e0:	f7f4 fbfc 	bl	8000adc <__aeabi_dcmplt>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f43f af30 	beq.w	800c14a <_dtoa_r+0x432>
 800c2ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2ee:	2b30      	cmp	r3, #48	; 0x30
 800c2f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800c2f4:	d002      	beq.n	800c2fc <_dtoa_r+0x5e4>
 800c2f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c2fa:	e04a      	b.n	800c392 <_dtoa_r+0x67a>
 800c2fc:	4615      	mov	r5, r2
 800c2fe:	e7f4      	b.n	800c2ea <_dtoa_r+0x5d2>
 800c300:	4b05      	ldr	r3, [pc, #20]	; (800c318 <_dtoa_r+0x600>)
 800c302:	f7f4 f979 	bl	80005f8 <__aeabi_dmul>
 800c306:	e9cd 0100 	strd	r0, r1, [sp]
 800c30a:	e7bc      	b.n	800c286 <_dtoa_r+0x56e>
 800c30c:	0800df48 	.word	0x0800df48
 800c310:	0800df20 	.word	0x0800df20
 800c314:	3ff00000 	.word	0x3ff00000
 800c318:	40240000 	.word	0x40240000
 800c31c:	401c0000 	.word	0x401c0000
 800c320:	40140000 	.word	0x40140000
 800c324:	3fe00000 	.word	0x3fe00000
 800c328:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c32c:	465d      	mov	r5, fp
 800c32e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c332:	4630      	mov	r0, r6
 800c334:	4639      	mov	r1, r7
 800c336:	f7f4 fa89 	bl	800084c <__aeabi_ddiv>
 800c33a:	f7f4 fc0d 	bl	8000b58 <__aeabi_d2iz>
 800c33e:	4680      	mov	r8, r0
 800c340:	f7f4 f8f0 	bl	8000524 <__aeabi_i2d>
 800c344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c348:	f7f4 f956 	bl	80005f8 <__aeabi_dmul>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	4630      	mov	r0, r6
 800c352:	4639      	mov	r1, r7
 800c354:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c358:	f7f3 ff96 	bl	8000288 <__aeabi_dsub>
 800c35c:	f805 6b01 	strb.w	r6, [r5], #1
 800c360:	eba5 060b 	sub.w	r6, r5, fp
 800c364:	45b1      	cmp	r9, r6
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	d139      	bne.n	800c3e0 <_dtoa_r+0x6c8>
 800c36c:	f7f3 ff8e 	bl	800028c <__adddf3>
 800c370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c374:	4606      	mov	r6, r0
 800c376:	460f      	mov	r7, r1
 800c378:	f7f4 fbce 	bl	8000b18 <__aeabi_dcmpgt>
 800c37c:	b9c8      	cbnz	r0, 800c3b2 <_dtoa_r+0x69a>
 800c37e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f4 fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c38a:	b110      	cbz	r0, 800c392 <_dtoa_r+0x67a>
 800c38c:	f018 0f01 	tst.w	r8, #1
 800c390:	d10f      	bne.n	800c3b2 <_dtoa_r+0x69a>
 800c392:	9904      	ldr	r1, [sp, #16]
 800c394:	4620      	mov	r0, r4
 800c396:	f000 fdff 	bl	800cf98 <_Bfree>
 800c39a:	2300      	movs	r3, #0
 800c39c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c39e:	702b      	strb	r3, [r5, #0]
 800c3a0:	f10a 0301 	add.w	r3, sl, #1
 800c3a4:	6013      	str	r3, [r2, #0]
 800c3a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f000 8241 	beq.w	800c830 <_dtoa_r+0xb18>
 800c3ae:	601d      	str	r5, [r3, #0]
 800c3b0:	e23e      	b.n	800c830 <_dtoa_r+0xb18>
 800c3b2:	f8cd a020 	str.w	sl, [sp, #32]
 800c3b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3ba:	2a39      	cmp	r2, #57	; 0x39
 800c3bc:	f105 33ff 	add.w	r3, r5, #4294967295
 800c3c0:	d108      	bne.n	800c3d4 <_dtoa_r+0x6bc>
 800c3c2:	459b      	cmp	fp, r3
 800c3c4:	d10a      	bne.n	800c3dc <_dtoa_r+0x6c4>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	9308      	str	r3, [sp, #32]
 800c3cc:	2330      	movs	r3, #48	; 0x30
 800c3ce:	f88b 3000 	strb.w	r3, [fp]
 800c3d2:	465b      	mov	r3, fp
 800c3d4:	781a      	ldrb	r2, [r3, #0]
 800c3d6:	3201      	adds	r2, #1
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	e78c      	b.n	800c2f6 <_dtoa_r+0x5de>
 800c3dc:	461d      	mov	r5, r3
 800c3de:	e7ea      	b.n	800c3b6 <_dtoa_r+0x69e>
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4b9b      	ldr	r3, [pc, #620]	; (800c650 <_dtoa_r+0x938>)
 800c3e4:	f7f4 f908 	bl	80005f8 <__aeabi_dmul>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	460f      	mov	r7, r1
 800c3f0:	f7f4 fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d09a      	beq.n	800c32e <_dtoa_r+0x616>
 800c3f8:	e7cb      	b.n	800c392 <_dtoa_r+0x67a>
 800c3fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3fc:	2a00      	cmp	r2, #0
 800c3fe:	f000 808b 	beq.w	800c518 <_dtoa_r+0x800>
 800c402:	9a06      	ldr	r2, [sp, #24]
 800c404:	2a01      	cmp	r2, #1
 800c406:	dc6e      	bgt.n	800c4e6 <_dtoa_r+0x7ce>
 800c408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	d067      	beq.n	800c4de <_dtoa_r+0x7c6>
 800c40e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c412:	9f07      	ldr	r7, [sp, #28]
 800c414:	9d05      	ldr	r5, [sp, #20]
 800c416:	9a05      	ldr	r2, [sp, #20]
 800c418:	2101      	movs	r1, #1
 800c41a:	441a      	add	r2, r3
 800c41c:	4620      	mov	r0, r4
 800c41e:	9205      	str	r2, [sp, #20]
 800c420:	4498      	add	r8, r3
 800c422:	f000 fe97 	bl	800d154 <__i2b>
 800c426:	4606      	mov	r6, r0
 800c428:	2d00      	cmp	r5, #0
 800c42a:	dd0c      	ble.n	800c446 <_dtoa_r+0x72e>
 800c42c:	f1b8 0f00 	cmp.w	r8, #0
 800c430:	dd09      	ble.n	800c446 <_dtoa_r+0x72e>
 800c432:	4545      	cmp	r5, r8
 800c434:	9a05      	ldr	r2, [sp, #20]
 800c436:	462b      	mov	r3, r5
 800c438:	bfa8      	it	ge
 800c43a:	4643      	movge	r3, r8
 800c43c:	1ad2      	subs	r2, r2, r3
 800c43e:	9205      	str	r2, [sp, #20]
 800c440:	1aed      	subs	r5, r5, r3
 800c442:	eba8 0803 	sub.w	r8, r8, r3
 800c446:	9b07      	ldr	r3, [sp, #28]
 800c448:	b1eb      	cbz	r3, 800c486 <_dtoa_r+0x76e>
 800c44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d067      	beq.n	800c520 <_dtoa_r+0x808>
 800c450:	b18f      	cbz	r7, 800c476 <_dtoa_r+0x75e>
 800c452:	4631      	mov	r1, r6
 800c454:	463a      	mov	r2, r7
 800c456:	4620      	mov	r0, r4
 800c458:	f000 ff1c 	bl	800d294 <__pow5mult>
 800c45c:	9a04      	ldr	r2, [sp, #16]
 800c45e:	4601      	mov	r1, r0
 800c460:	4606      	mov	r6, r0
 800c462:	4620      	mov	r0, r4
 800c464:	f000 fe7f 	bl	800d166 <__multiply>
 800c468:	9904      	ldr	r1, [sp, #16]
 800c46a:	9008      	str	r0, [sp, #32]
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fd93 	bl	800cf98 <_Bfree>
 800c472:	9b08      	ldr	r3, [sp, #32]
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	9b07      	ldr	r3, [sp, #28]
 800c478:	1bda      	subs	r2, r3, r7
 800c47a:	d004      	beq.n	800c486 <_dtoa_r+0x76e>
 800c47c:	9904      	ldr	r1, [sp, #16]
 800c47e:	4620      	mov	r0, r4
 800c480:	f000 ff08 	bl	800d294 <__pow5mult>
 800c484:	9004      	str	r0, [sp, #16]
 800c486:	2101      	movs	r1, #1
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 fe63 	bl	800d154 <__i2b>
 800c48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c490:	4607      	mov	r7, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	f000 81d0 	beq.w	800c838 <_dtoa_r+0xb20>
 800c498:	461a      	mov	r2, r3
 800c49a:	4601      	mov	r1, r0
 800c49c:	4620      	mov	r0, r4
 800c49e:	f000 fef9 	bl	800d294 <__pow5mult>
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	4607      	mov	r7, r0
 800c4a8:	dc40      	bgt.n	800c52c <_dtoa_r+0x814>
 800c4aa:	9b00      	ldr	r3, [sp, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d139      	bne.n	800c524 <_dtoa_r+0x80c>
 800c4b0:	9b01      	ldr	r3, [sp, #4]
 800c4b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d136      	bne.n	800c528 <_dtoa_r+0x810>
 800c4ba:	9b01      	ldr	r3, [sp, #4]
 800c4bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4c0:	0d1b      	lsrs	r3, r3, #20
 800c4c2:	051b      	lsls	r3, r3, #20
 800c4c4:	b12b      	cbz	r3, 800c4d2 <_dtoa_r+0x7ba>
 800c4c6:	9b05      	ldr	r3, [sp, #20]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	f108 0801 	add.w	r8, r8, #1
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	9307      	str	r3, [sp, #28]
 800c4d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d12a      	bne.n	800c530 <_dtoa_r+0x818>
 800c4da:	2001      	movs	r0, #1
 800c4dc:	e030      	b.n	800c540 <_dtoa_r+0x828>
 800c4de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4e4:	e795      	b.n	800c412 <_dtoa_r+0x6fa>
 800c4e6:	9b07      	ldr	r3, [sp, #28]
 800c4e8:	f109 37ff 	add.w	r7, r9, #4294967295
 800c4ec:	42bb      	cmp	r3, r7
 800c4ee:	bfbf      	itttt	lt
 800c4f0:	9b07      	ldrlt	r3, [sp, #28]
 800c4f2:	9707      	strlt	r7, [sp, #28]
 800c4f4:	1afa      	sublt	r2, r7, r3
 800c4f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c4f8:	bfbb      	ittet	lt
 800c4fa:	189b      	addlt	r3, r3, r2
 800c4fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c4fe:	1bdf      	subge	r7, r3, r7
 800c500:	2700      	movlt	r7, #0
 800c502:	f1b9 0f00 	cmp.w	r9, #0
 800c506:	bfb5      	itete	lt
 800c508:	9b05      	ldrlt	r3, [sp, #20]
 800c50a:	9d05      	ldrge	r5, [sp, #20]
 800c50c:	eba3 0509 	sublt.w	r5, r3, r9
 800c510:	464b      	movge	r3, r9
 800c512:	bfb8      	it	lt
 800c514:	2300      	movlt	r3, #0
 800c516:	e77e      	b.n	800c416 <_dtoa_r+0x6fe>
 800c518:	9f07      	ldr	r7, [sp, #28]
 800c51a:	9d05      	ldr	r5, [sp, #20]
 800c51c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c51e:	e783      	b.n	800c428 <_dtoa_r+0x710>
 800c520:	9a07      	ldr	r2, [sp, #28]
 800c522:	e7ab      	b.n	800c47c <_dtoa_r+0x764>
 800c524:	2300      	movs	r3, #0
 800c526:	e7d4      	b.n	800c4d2 <_dtoa_r+0x7ba>
 800c528:	9b00      	ldr	r3, [sp, #0]
 800c52a:	e7d2      	b.n	800c4d2 <_dtoa_r+0x7ba>
 800c52c:	2300      	movs	r3, #0
 800c52e:	9307      	str	r3, [sp, #28]
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c536:	6918      	ldr	r0, [r3, #16]
 800c538:	f000 fdbe 	bl	800d0b8 <__hi0bits>
 800c53c:	f1c0 0020 	rsb	r0, r0, #32
 800c540:	4440      	add	r0, r8
 800c542:	f010 001f 	ands.w	r0, r0, #31
 800c546:	d047      	beq.n	800c5d8 <_dtoa_r+0x8c0>
 800c548:	f1c0 0320 	rsb	r3, r0, #32
 800c54c:	2b04      	cmp	r3, #4
 800c54e:	dd3b      	ble.n	800c5c8 <_dtoa_r+0x8b0>
 800c550:	9b05      	ldr	r3, [sp, #20]
 800c552:	f1c0 001c 	rsb	r0, r0, #28
 800c556:	4403      	add	r3, r0
 800c558:	9305      	str	r3, [sp, #20]
 800c55a:	4405      	add	r5, r0
 800c55c:	4480      	add	r8, r0
 800c55e:	9b05      	ldr	r3, [sp, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	dd05      	ble.n	800c570 <_dtoa_r+0x858>
 800c564:	461a      	mov	r2, r3
 800c566:	9904      	ldr	r1, [sp, #16]
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 fee1 	bl	800d330 <__lshift>
 800c56e:	9004      	str	r0, [sp, #16]
 800c570:	f1b8 0f00 	cmp.w	r8, #0
 800c574:	dd05      	ble.n	800c582 <_dtoa_r+0x86a>
 800c576:	4639      	mov	r1, r7
 800c578:	4642      	mov	r2, r8
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 fed8 	bl	800d330 <__lshift>
 800c580:	4607      	mov	r7, r0
 800c582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c584:	b353      	cbz	r3, 800c5dc <_dtoa_r+0x8c4>
 800c586:	4639      	mov	r1, r7
 800c588:	9804      	ldr	r0, [sp, #16]
 800c58a:	f000 ff25 	bl	800d3d8 <__mcmp>
 800c58e:	2800      	cmp	r0, #0
 800c590:	da24      	bge.n	800c5dc <_dtoa_r+0x8c4>
 800c592:	2300      	movs	r3, #0
 800c594:	220a      	movs	r2, #10
 800c596:	9904      	ldr	r1, [sp, #16]
 800c598:	4620      	mov	r0, r4
 800c59a:	f000 fd14 	bl	800cfc6 <__multadd>
 800c59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5a0:	9004      	str	r0, [sp, #16]
 800c5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f000 814d 	beq.w	800c846 <_dtoa_r+0xb2e>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	220a      	movs	r2, #10
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 fd07 	bl	800cfc6 <__multadd>
 800c5b8:	9b02      	ldr	r3, [sp, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	4606      	mov	r6, r0
 800c5be:	dc4f      	bgt.n	800c660 <_dtoa_r+0x948>
 800c5c0:	9b06      	ldr	r3, [sp, #24]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	dd4c      	ble.n	800c660 <_dtoa_r+0x948>
 800c5c6:	e011      	b.n	800c5ec <_dtoa_r+0x8d4>
 800c5c8:	d0c9      	beq.n	800c55e <_dtoa_r+0x846>
 800c5ca:	9a05      	ldr	r2, [sp, #20]
 800c5cc:	331c      	adds	r3, #28
 800c5ce:	441a      	add	r2, r3
 800c5d0:	9205      	str	r2, [sp, #20]
 800c5d2:	441d      	add	r5, r3
 800c5d4:	4498      	add	r8, r3
 800c5d6:	e7c2      	b.n	800c55e <_dtoa_r+0x846>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	e7f6      	b.n	800c5ca <_dtoa_r+0x8b2>
 800c5dc:	f1b9 0f00 	cmp.w	r9, #0
 800c5e0:	dc38      	bgt.n	800c654 <_dtoa_r+0x93c>
 800c5e2:	9b06      	ldr	r3, [sp, #24]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	dd35      	ble.n	800c654 <_dtoa_r+0x93c>
 800c5e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5ec:	9b02      	ldr	r3, [sp, #8]
 800c5ee:	b963      	cbnz	r3, 800c60a <_dtoa_r+0x8f2>
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	2205      	movs	r2, #5
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f000 fce6 	bl	800cfc6 <__multadd>
 800c5fa:	4601      	mov	r1, r0
 800c5fc:	4607      	mov	r7, r0
 800c5fe:	9804      	ldr	r0, [sp, #16]
 800c600:	f000 feea 	bl	800d3d8 <__mcmp>
 800c604:	2800      	cmp	r0, #0
 800c606:	f73f adcc 	bgt.w	800c1a2 <_dtoa_r+0x48a>
 800c60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c60c:	465d      	mov	r5, fp
 800c60e:	ea6f 0a03 	mvn.w	sl, r3
 800c612:	f04f 0900 	mov.w	r9, #0
 800c616:	4639      	mov	r1, r7
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fcbd 	bl	800cf98 <_Bfree>
 800c61e:	2e00      	cmp	r6, #0
 800c620:	f43f aeb7 	beq.w	800c392 <_dtoa_r+0x67a>
 800c624:	f1b9 0f00 	cmp.w	r9, #0
 800c628:	d005      	beq.n	800c636 <_dtoa_r+0x91e>
 800c62a:	45b1      	cmp	r9, r6
 800c62c:	d003      	beq.n	800c636 <_dtoa_r+0x91e>
 800c62e:	4649      	mov	r1, r9
 800c630:	4620      	mov	r0, r4
 800c632:	f000 fcb1 	bl	800cf98 <_Bfree>
 800c636:	4631      	mov	r1, r6
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 fcad 	bl	800cf98 <_Bfree>
 800c63e:	e6a8      	b.n	800c392 <_dtoa_r+0x67a>
 800c640:	2700      	movs	r7, #0
 800c642:	463e      	mov	r6, r7
 800c644:	e7e1      	b.n	800c60a <_dtoa_r+0x8f2>
 800c646:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c64a:	463e      	mov	r6, r7
 800c64c:	e5a9      	b.n	800c1a2 <_dtoa_r+0x48a>
 800c64e:	bf00      	nop
 800c650:	40240000 	.word	0x40240000
 800c654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c656:	f8cd 9008 	str.w	r9, [sp, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f000 80fa 	beq.w	800c854 <_dtoa_r+0xb3c>
 800c660:	2d00      	cmp	r5, #0
 800c662:	dd05      	ble.n	800c670 <_dtoa_r+0x958>
 800c664:	4631      	mov	r1, r6
 800c666:	462a      	mov	r2, r5
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 fe61 	bl	800d330 <__lshift>
 800c66e:	4606      	mov	r6, r0
 800c670:	9b07      	ldr	r3, [sp, #28]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d04c      	beq.n	800c710 <_dtoa_r+0x9f8>
 800c676:	6871      	ldr	r1, [r6, #4]
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 fc59 	bl	800cf30 <_Balloc>
 800c67e:	6932      	ldr	r2, [r6, #16]
 800c680:	3202      	adds	r2, #2
 800c682:	4605      	mov	r5, r0
 800c684:	0092      	lsls	r2, r2, #2
 800c686:	f106 010c 	add.w	r1, r6, #12
 800c68a:	300c      	adds	r0, #12
 800c68c:	f7fd fd90 	bl	800a1b0 <memcpy>
 800c690:	2201      	movs	r2, #1
 800c692:	4629      	mov	r1, r5
 800c694:	4620      	mov	r0, r4
 800c696:	f000 fe4b 	bl	800d330 <__lshift>
 800c69a:	9b00      	ldr	r3, [sp, #0]
 800c69c:	f8cd b014 	str.w	fp, [sp, #20]
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	46b1      	mov	r9, r6
 800c6a6:	9307      	str	r3, [sp, #28]
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	9804      	ldr	r0, [sp, #16]
 800c6ae:	f7ff faa5 	bl	800bbfc <quorem>
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c6ba:	9804      	ldr	r0, [sp, #16]
 800c6bc:	f000 fe8c 	bl	800d3d8 <__mcmp>
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	9000      	str	r0, [sp, #0]
 800c6c4:	4639      	mov	r1, r7
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 fea0 	bl	800d40c <__mdiff>
 800c6cc:	68c3      	ldr	r3, [r0, #12]
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	bb03      	cbnz	r3, 800c714 <_dtoa_r+0x9fc>
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	9008      	str	r0, [sp, #32]
 800c6d6:	9804      	ldr	r0, [sp, #16]
 800c6d8:	f000 fe7e 	bl	800d3d8 <__mcmp>
 800c6dc:	9a08      	ldr	r2, [sp, #32]
 800c6de:	4603      	mov	r3, r0
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	9308      	str	r3, [sp, #32]
 800c6e6:	f000 fc57 	bl	800cf98 <_Bfree>
 800c6ea:	9b08      	ldr	r3, [sp, #32]
 800c6ec:	b9a3      	cbnz	r3, 800c718 <_dtoa_r+0xa00>
 800c6ee:	9a06      	ldr	r2, [sp, #24]
 800c6f0:	b992      	cbnz	r2, 800c718 <_dtoa_r+0xa00>
 800c6f2:	9a07      	ldr	r2, [sp, #28]
 800c6f4:	b982      	cbnz	r2, 800c718 <_dtoa_r+0xa00>
 800c6f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6fa:	d029      	beq.n	800c750 <_dtoa_r+0xa38>
 800c6fc:	9b00      	ldr	r3, [sp, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	dd01      	ble.n	800c706 <_dtoa_r+0x9ee>
 800c702:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c706:	9b05      	ldr	r3, [sp, #20]
 800c708:	1c5d      	adds	r5, r3, #1
 800c70a:	f883 8000 	strb.w	r8, [r3]
 800c70e:	e782      	b.n	800c616 <_dtoa_r+0x8fe>
 800c710:	4630      	mov	r0, r6
 800c712:	e7c2      	b.n	800c69a <_dtoa_r+0x982>
 800c714:	2301      	movs	r3, #1
 800c716:	e7e3      	b.n	800c6e0 <_dtoa_r+0x9c8>
 800c718:	9a00      	ldr	r2, [sp, #0]
 800c71a:	2a00      	cmp	r2, #0
 800c71c:	db04      	blt.n	800c728 <_dtoa_r+0xa10>
 800c71e:	d125      	bne.n	800c76c <_dtoa_r+0xa54>
 800c720:	9a06      	ldr	r2, [sp, #24]
 800c722:	bb1a      	cbnz	r2, 800c76c <_dtoa_r+0xa54>
 800c724:	9a07      	ldr	r2, [sp, #28]
 800c726:	bb0a      	cbnz	r2, 800c76c <_dtoa_r+0xa54>
 800c728:	2b00      	cmp	r3, #0
 800c72a:	ddec      	ble.n	800c706 <_dtoa_r+0x9ee>
 800c72c:	2201      	movs	r2, #1
 800c72e:	9904      	ldr	r1, [sp, #16]
 800c730:	4620      	mov	r0, r4
 800c732:	f000 fdfd 	bl	800d330 <__lshift>
 800c736:	4639      	mov	r1, r7
 800c738:	9004      	str	r0, [sp, #16]
 800c73a:	f000 fe4d 	bl	800d3d8 <__mcmp>
 800c73e:	2800      	cmp	r0, #0
 800c740:	dc03      	bgt.n	800c74a <_dtoa_r+0xa32>
 800c742:	d1e0      	bne.n	800c706 <_dtoa_r+0x9ee>
 800c744:	f018 0f01 	tst.w	r8, #1
 800c748:	d0dd      	beq.n	800c706 <_dtoa_r+0x9ee>
 800c74a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c74e:	d1d8      	bne.n	800c702 <_dtoa_r+0x9ea>
 800c750:	9b05      	ldr	r3, [sp, #20]
 800c752:	9a05      	ldr	r2, [sp, #20]
 800c754:	1c5d      	adds	r5, r3, #1
 800c756:	2339      	movs	r3, #57	; 0x39
 800c758:	7013      	strb	r3, [r2, #0]
 800c75a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c75e:	2b39      	cmp	r3, #57	; 0x39
 800c760:	f105 32ff 	add.w	r2, r5, #4294967295
 800c764:	d04f      	beq.n	800c806 <_dtoa_r+0xaee>
 800c766:	3301      	adds	r3, #1
 800c768:	7013      	strb	r3, [r2, #0]
 800c76a:	e754      	b.n	800c616 <_dtoa_r+0x8fe>
 800c76c:	9a05      	ldr	r2, [sp, #20]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f102 0501 	add.w	r5, r2, #1
 800c774:	dd06      	ble.n	800c784 <_dtoa_r+0xa6c>
 800c776:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c77a:	d0e9      	beq.n	800c750 <_dtoa_r+0xa38>
 800c77c:	f108 0801 	add.w	r8, r8, #1
 800c780:	9b05      	ldr	r3, [sp, #20]
 800c782:	e7c2      	b.n	800c70a <_dtoa_r+0x9f2>
 800c784:	9a02      	ldr	r2, [sp, #8]
 800c786:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c78a:	eba5 030b 	sub.w	r3, r5, fp
 800c78e:	4293      	cmp	r3, r2
 800c790:	d021      	beq.n	800c7d6 <_dtoa_r+0xabe>
 800c792:	2300      	movs	r3, #0
 800c794:	220a      	movs	r2, #10
 800c796:	9904      	ldr	r1, [sp, #16]
 800c798:	4620      	mov	r0, r4
 800c79a:	f000 fc14 	bl	800cfc6 <__multadd>
 800c79e:	45b1      	cmp	r9, r6
 800c7a0:	9004      	str	r0, [sp, #16]
 800c7a2:	f04f 0300 	mov.w	r3, #0
 800c7a6:	f04f 020a 	mov.w	r2, #10
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	d105      	bne.n	800c7bc <_dtoa_r+0xaa4>
 800c7b0:	f000 fc09 	bl	800cfc6 <__multadd>
 800c7b4:	4681      	mov	r9, r0
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	9505      	str	r5, [sp, #20]
 800c7ba:	e776      	b.n	800c6aa <_dtoa_r+0x992>
 800c7bc:	f000 fc03 	bl	800cfc6 <__multadd>
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	4681      	mov	r9, r0
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	220a      	movs	r2, #10
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f000 fbfc 	bl	800cfc6 <__multadd>
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	e7f2      	b.n	800c7b8 <_dtoa_r+0xaa0>
 800c7d2:	f04f 0900 	mov.w	r9, #0
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	9904      	ldr	r1, [sp, #16]
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f000 fda8 	bl	800d330 <__lshift>
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	9004      	str	r0, [sp, #16]
 800c7e4:	f000 fdf8 	bl	800d3d8 <__mcmp>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	dcb6      	bgt.n	800c75a <_dtoa_r+0xa42>
 800c7ec:	d102      	bne.n	800c7f4 <_dtoa_r+0xadc>
 800c7ee:	f018 0f01 	tst.w	r8, #1
 800c7f2:	d1b2      	bne.n	800c75a <_dtoa_r+0xa42>
 800c7f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7f8:	2b30      	cmp	r3, #48	; 0x30
 800c7fa:	f105 32ff 	add.w	r2, r5, #4294967295
 800c7fe:	f47f af0a 	bne.w	800c616 <_dtoa_r+0x8fe>
 800c802:	4615      	mov	r5, r2
 800c804:	e7f6      	b.n	800c7f4 <_dtoa_r+0xadc>
 800c806:	4593      	cmp	fp, r2
 800c808:	d105      	bne.n	800c816 <_dtoa_r+0xafe>
 800c80a:	2331      	movs	r3, #49	; 0x31
 800c80c:	f10a 0a01 	add.w	sl, sl, #1
 800c810:	f88b 3000 	strb.w	r3, [fp]
 800c814:	e6ff      	b.n	800c616 <_dtoa_r+0x8fe>
 800c816:	4615      	mov	r5, r2
 800c818:	e79f      	b.n	800c75a <_dtoa_r+0xa42>
 800c81a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c880 <_dtoa_r+0xb68>
 800c81e:	e007      	b.n	800c830 <_dtoa_r+0xb18>
 800c820:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c822:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c884 <_dtoa_r+0xb6c>
 800c826:	b11b      	cbz	r3, 800c830 <_dtoa_r+0xb18>
 800c828:	f10b 0308 	add.w	r3, fp, #8
 800c82c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	4658      	mov	r0, fp
 800c832:	b017      	add	sp, #92	; 0x5c
 800c834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c838:	9b06      	ldr	r3, [sp, #24]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	f77f ae35 	ble.w	800c4aa <_dtoa_r+0x792>
 800c840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c842:	9307      	str	r3, [sp, #28]
 800c844:	e649      	b.n	800c4da <_dtoa_r+0x7c2>
 800c846:	9b02      	ldr	r3, [sp, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	dc03      	bgt.n	800c854 <_dtoa_r+0xb3c>
 800c84c:	9b06      	ldr	r3, [sp, #24]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	f73f aecc 	bgt.w	800c5ec <_dtoa_r+0x8d4>
 800c854:	465d      	mov	r5, fp
 800c856:	4639      	mov	r1, r7
 800c858:	9804      	ldr	r0, [sp, #16]
 800c85a:	f7ff f9cf 	bl	800bbfc <quorem>
 800c85e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c862:	f805 8b01 	strb.w	r8, [r5], #1
 800c866:	9a02      	ldr	r2, [sp, #8]
 800c868:	eba5 030b 	sub.w	r3, r5, fp
 800c86c:	429a      	cmp	r2, r3
 800c86e:	ddb0      	ble.n	800c7d2 <_dtoa_r+0xaba>
 800c870:	2300      	movs	r3, #0
 800c872:	220a      	movs	r2, #10
 800c874:	9904      	ldr	r1, [sp, #16]
 800c876:	4620      	mov	r0, r4
 800c878:	f000 fba5 	bl	800cfc6 <__multadd>
 800c87c:	9004      	str	r0, [sp, #16]
 800c87e:	e7ea      	b.n	800c856 <_dtoa_r+0xb3e>
 800c880:	0800de8c 	.word	0x0800de8c
 800c884:	0800df08 	.word	0x0800df08

0800c888 <rshift>:
 800c888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c88a:	6906      	ldr	r6, [r0, #16]
 800c88c:	114b      	asrs	r3, r1, #5
 800c88e:	429e      	cmp	r6, r3
 800c890:	f100 0414 	add.w	r4, r0, #20
 800c894:	dd30      	ble.n	800c8f8 <rshift+0x70>
 800c896:	f011 011f 	ands.w	r1, r1, #31
 800c89a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c89e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c8a2:	d108      	bne.n	800c8b6 <rshift+0x2e>
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	42b2      	cmp	r2, r6
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	d211      	bcs.n	800c8d0 <rshift+0x48>
 800c8ac:	f852 3b04 	ldr.w	r3, [r2], #4
 800c8b0:	f841 3b04 	str.w	r3, [r1], #4
 800c8b4:	e7f7      	b.n	800c8a6 <rshift+0x1e>
 800c8b6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c8ba:	f1c1 0c20 	rsb	ip, r1, #32
 800c8be:	40cd      	lsrs	r5, r1
 800c8c0:	3204      	adds	r2, #4
 800c8c2:	4623      	mov	r3, r4
 800c8c4:	42b2      	cmp	r2, r6
 800c8c6:	4617      	mov	r7, r2
 800c8c8:	d30c      	bcc.n	800c8e4 <rshift+0x5c>
 800c8ca:	601d      	str	r5, [r3, #0]
 800c8cc:	b105      	cbz	r5, 800c8d0 <rshift+0x48>
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	1b1a      	subs	r2, r3, r4
 800c8d2:	42a3      	cmp	r3, r4
 800c8d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8d8:	bf08      	it	eq
 800c8da:	2300      	moveq	r3, #0
 800c8dc:	6102      	str	r2, [r0, #16]
 800c8de:	bf08      	it	eq
 800c8e0:	6143      	streq	r3, [r0, #20]
 800c8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e4:	683f      	ldr	r7, [r7, #0]
 800c8e6:	fa07 f70c 	lsl.w	r7, r7, ip
 800c8ea:	433d      	orrs	r5, r7
 800c8ec:	f843 5b04 	str.w	r5, [r3], #4
 800c8f0:	f852 5b04 	ldr.w	r5, [r2], #4
 800c8f4:	40cd      	lsrs	r5, r1
 800c8f6:	e7e5      	b.n	800c8c4 <rshift+0x3c>
 800c8f8:	4623      	mov	r3, r4
 800c8fa:	e7e9      	b.n	800c8d0 <rshift+0x48>

0800c8fc <__hexdig_fun>:
 800c8fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c900:	2b09      	cmp	r3, #9
 800c902:	d802      	bhi.n	800c90a <__hexdig_fun+0xe>
 800c904:	3820      	subs	r0, #32
 800c906:	b2c0      	uxtb	r0, r0
 800c908:	4770      	bx	lr
 800c90a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c90e:	2b05      	cmp	r3, #5
 800c910:	d801      	bhi.n	800c916 <__hexdig_fun+0x1a>
 800c912:	3847      	subs	r0, #71	; 0x47
 800c914:	e7f7      	b.n	800c906 <__hexdig_fun+0xa>
 800c916:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c91a:	2b05      	cmp	r3, #5
 800c91c:	d801      	bhi.n	800c922 <__hexdig_fun+0x26>
 800c91e:	3827      	subs	r0, #39	; 0x27
 800c920:	e7f1      	b.n	800c906 <__hexdig_fun+0xa>
 800c922:	2000      	movs	r0, #0
 800c924:	4770      	bx	lr

0800c926 <__gethex>:
 800c926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92a:	b08b      	sub	sp, #44	; 0x2c
 800c92c:	468a      	mov	sl, r1
 800c92e:	9002      	str	r0, [sp, #8]
 800c930:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c932:	9306      	str	r3, [sp, #24]
 800c934:	4690      	mov	r8, r2
 800c936:	f000 fad0 	bl	800ceda <__localeconv_l>
 800c93a:	6803      	ldr	r3, [r0, #0]
 800c93c:	9303      	str	r3, [sp, #12]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f3 fc46 	bl	80001d0 <strlen>
 800c944:	9b03      	ldr	r3, [sp, #12]
 800c946:	9001      	str	r0, [sp, #4]
 800c948:	4403      	add	r3, r0
 800c94a:	f04f 0b00 	mov.w	fp, #0
 800c94e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c952:	9307      	str	r3, [sp, #28]
 800c954:	f8da 3000 	ldr.w	r3, [sl]
 800c958:	3302      	adds	r3, #2
 800c95a:	461f      	mov	r7, r3
 800c95c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c960:	2830      	cmp	r0, #48	; 0x30
 800c962:	d06c      	beq.n	800ca3e <__gethex+0x118>
 800c964:	f7ff ffca 	bl	800c8fc <__hexdig_fun>
 800c968:	4604      	mov	r4, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d16a      	bne.n	800ca44 <__gethex+0x11e>
 800c96e:	9a01      	ldr	r2, [sp, #4]
 800c970:	9903      	ldr	r1, [sp, #12]
 800c972:	4638      	mov	r0, r7
 800c974:	f001 f8f4 	bl	800db60 <strncmp>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d166      	bne.n	800ca4a <__gethex+0x124>
 800c97c:	9b01      	ldr	r3, [sp, #4]
 800c97e:	5cf8      	ldrb	r0, [r7, r3]
 800c980:	18fe      	adds	r6, r7, r3
 800c982:	f7ff ffbb 	bl	800c8fc <__hexdig_fun>
 800c986:	2800      	cmp	r0, #0
 800c988:	d062      	beq.n	800ca50 <__gethex+0x12a>
 800c98a:	4633      	mov	r3, r6
 800c98c:	7818      	ldrb	r0, [r3, #0]
 800c98e:	2830      	cmp	r0, #48	; 0x30
 800c990:	461f      	mov	r7, r3
 800c992:	f103 0301 	add.w	r3, r3, #1
 800c996:	d0f9      	beq.n	800c98c <__gethex+0x66>
 800c998:	f7ff ffb0 	bl	800c8fc <__hexdig_fun>
 800c99c:	fab0 f580 	clz	r5, r0
 800c9a0:	096d      	lsrs	r5, r5, #5
 800c9a2:	4634      	mov	r4, r6
 800c9a4:	f04f 0b01 	mov.w	fp, #1
 800c9a8:	463a      	mov	r2, r7
 800c9aa:	4616      	mov	r6, r2
 800c9ac:	3201      	adds	r2, #1
 800c9ae:	7830      	ldrb	r0, [r6, #0]
 800c9b0:	f7ff ffa4 	bl	800c8fc <__hexdig_fun>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d1f8      	bne.n	800c9aa <__gethex+0x84>
 800c9b8:	9a01      	ldr	r2, [sp, #4]
 800c9ba:	9903      	ldr	r1, [sp, #12]
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f001 f8cf 	bl	800db60 <strncmp>
 800c9c2:	b950      	cbnz	r0, 800c9da <__gethex+0xb4>
 800c9c4:	b954      	cbnz	r4, 800c9dc <__gethex+0xb6>
 800c9c6:	9b01      	ldr	r3, [sp, #4]
 800c9c8:	18f4      	adds	r4, r6, r3
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	4616      	mov	r6, r2
 800c9ce:	3201      	adds	r2, #1
 800c9d0:	7830      	ldrb	r0, [r6, #0]
 800c9d2:	f7ff ff93 	bl	800c8fc <__hexdig_fun>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d1f8      	bne.n	800c9cc <__gethex+0xa6>
 800c9da:	b10c      	cbz	r4, 800c9e0 <__gethex+0xba>
 800c9dc:	1ba4      	subs	r4, r4, r6
 800c9de:	00a4      	lsls	r4, r4, #2
 800c9e0:	7833      	ldrb	r3, [r6, #0]
 800c9e2:	2b50      	cmp	r3, #80	; 0x50
 800c9e4:	d001      	beq.n	800c9ea <__gethex+0xc4>
 800c9e6:	2b70      	cmp	r3, #112	; 0x70
 800c9e8:	d140      	bne.n	800ca6c <__gethex+0x146>
 800c9ea:	7873      	ldrb	r3, [r6, #1]
 800c9ec:	2b2b      	cmp	r3, #43	; 0x2b
 800c9ee:	d031      	beq.n	800ca54 <__gethex+0x12e>
 800c9f0:	2b2d      	cmp	r3, #45	; 0x2d
 800c9f2:	d033      	beq.n	800ca5c <__gethex+0x136>
 800c9f4:	1c71      	adds	r1, r6, #1
 800c9f6:	f04f 0900 	mov.w	r9, #0
 800c9fa:	7808      	ldrb	r0, [r1, #0]
 800c9fc:	f7ff ff7e 	bl	800c8fc <__hexdig_fun>
 800ca00:	1e43      	subs	r3, r0, #1
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b18      	cmp	r3, #24
 800ca06:	d831      	bhi.n	800ca6c <__gethex+0x146>
 800ca08:	f1a0 0210 	sub.w	r2, r0, #16
 800ca0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca10:	f7ff ff74 	bl	800c8fc <__hexdig_fun>
 800ca14:	1e43      	subs	r3, r0, #1
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b18      	cmp	r3, #24
 800ca1a:	d922      	bls.n	800ca62 <__gethex+0x13c>
 800ca1c:	f1b9 0f00 	cmp.w	r9, #0
 800ca20:	d000      	beq.n	800ca24 <__gethex+0xfe>
 800ca22:	4252      	negs	r2, r2
 800ca24:	4414      	add	r4, r2
 800ca26:	f8ca 1000 	str.w	r1, [sl]
 800ca2a:	b30d      	cbz	r5, 800ca70 <__gethex+0x14a>
 800ca2c:	f1bb 0f00 	cmp.w	fp, #0
 800ca30:	bf0c      	ite	eq
 800ca32:	2706      	moveq	r7, #6
 800ca34:	2700      	movne	r7, #0
 800ca36:	4638      	mov	r0, r7
 800ca38:	b00b      	add	sp, #44	; 0x2c
 800ca3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3e:	f10b 0b01 	add.w	fp, fp, #1
 800ca42:	e78a      	b.n	800c95a <__gethex+0x34>
 800ca44:	2500      	movs	r5, #0
 800ca46:	462c      	mov	r4, r5
 800ca48:	e7ae      	b.n	800c9a8 <__gethex+0x82>
 800ca4a:	463e      	mov	r6, r7
 800ca4c:	2501      	movs	r5, #1
 800ca4e:	e7c7      	b.n	800c9e0 <__gethex+0xba>
 800ca50:	4604      	mov	r4, r0
 800ca52:	e7fb      	b.n	800ca4c <__gethex+0x126>
 800ca54:	f04f 0900 	mov.w	r9, #0
 800ca58:	1cb1      	adds	r1, r6, #2
 800ca5a:	e7ce      	b.n	800c9fa <__gethex+0xd4>
 800ca5c:	f04f 0901 	mov.w	r9, #1
 800ca60:	e7fa      	b.n	800ca58 <__gethex+0x132>
 800ca62:	230a      	movs	r3, #10
 800ca64:	fb03 0202 	mla	r2, r3, r2, r0
 800ca68:	3a10      	subs	r2, #16
 800ca6a:	e7cf      	b.n	800ca0c <__gethex+0xe6>
 800ca6c:	4631      	mov	r1, r6
 800ca6e:	e7da      	b.n	800ca26 <__gethex+0x100>
 800ca70:	1bf3      	subs	r3, r6, r7
 800ca72:	3b01      	subs	r3, #1
 800ca74:	4629      	mov	r1, r5
 800ca76:	2b07      	cmp	r3, #7
 800ca78:	dc49      	bgt.n	800cb0e <__gethex+0x1e8>
 800ca7a:	9802      	ldr	r0, [sp, #8]
 800ca7c:	f000 fa58 	bl	800cf30 <_Balloc>
 800ca80:	9b01      	ldr	r3, [sp, #4]
 800ca82:	f100 0914 	add.w	r9, r0, #20
 800ca86:	f04f 0b00 	mov.w	fp, #0
 800ca8a:	f1c3 0301 	rsb	r3, r3, #1
 800ca8e:	4605      	mov	r5, r0
 800ca90:	f8cd 9010 	str.w	r9, [sp, #16]
 800ca94:	46da      	mov	sl, fp
 800ca96:	9308      	str	r3, [sp, #32]
 800ca98:	42b7      	cmp	r7, r6
 800ca9a:	d33b      	bcc.n	800cb14 <__gethex+0x1ee>
 800ca9c:	9804      	ldr	r0, [sp, #16]
 800ca9e:	f840 ab04 	str.w	sl, [r0], #4
 800caa2:	eba0 0009 	sub.w	r0, r0, r9
 800caa6:	1080      	asrs	r0, r0, #2
 800caa8:	6128      	str	r0, [r5, #16]
 800caaa:	0147      	lsls	r7, r0, #5
 800caac:	4650      	mov	r0, sl
 800caae:	f000 fb03 	bl	800d0b8 <__hi0bits>
 800cab2:	f8d8 6000 	ldr.w	r6, [r8]
 800cab6:	1a3f      	subs	r7, r7, r0
 800cab8:	42b7      	cmp	r7, r6
 800caba:	dd64      	ble.n	800cb86 <__gethex+0x260>
 800cabc:	1bbf      	subs	r7, r7, r6
 800cabe:	4639      	mov	r1, r7
 800cac0:	4628      	mov	r0, r5
 800cac2:	f000 fe13 	bl	800d6ec <__any_on>
 800cac6:	4682      	mov	sl, r0
 800cac8:	b178      	cbz	r0, 800caea <__gethex+0x1c4>
 800caca:	1e7b      	subs	r3, r7, #1
 800cacc:	1159      	asrs	r1, r3, #5
 800cace:	f003 021f 	and.w	r2, r3, #31
 800cad2:	f04f 0a01 	mov.w	sl, #1
 800cad6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cada:	fa0a f202 	lsl.w	r2, sl, r2
 800cade:	420a      	tst	r2, r1
 800cae0:	d003      	beq.n	800caea <__gethex+0x1c4>
 800cae2:	4553      	cmp	r3, sl
 800cae4:	dc46      	bgt.n	800cb74 <__gethex+0x24e>
 800cae6:	f04f 0a02 	mov.w	sl, #2
 800caea:	4639      	mov	r1, r7
 800caec:	4628      	mov	r0, r5
 800caee:	f7ff fecb 	bl	800c888 <rshift>
 800caf2:	443c      	add	r4, r7
 800caf4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800caf8:	42a3      	cmp	r3, r4
 800cafa:	da52      	bge.n	800cba2 <__gethex+0x27c>
 800cafc:	4629      	mov	r1, r5
 800cafe:	9802      	ldr	r0, [sp, #8]
 800cb00:	f000 fa4a 	bl	800cf98 <_Bfree>
 800cb04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb06:	2300      	movs	r3, #0
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	27a3      	movs	r7, #163	; 0xa3
 800cb0c:	e793      	b.n	800ca36 <__gethex+0x110>
 800cb0e:	3101      	adds	r1, #1
 800cb10:	105b      	asrs	r3, r3, #1
 800cb12:	e7b0      	b.n	800ca76 <__gethex+0x150>
 800cb14:	1e73      	subs	r3, r6, #1
 800cb16:	9305      	str	r3, [sp, #20]
 800cb18:	9a07      	ldr	r2, [sp, #28]
 800cb1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d018      	beq.n	800cb54 <__gethex+0x22e>
 800cb22:	f1bb 0f20 	cmp.w	fp, #32
 800cb26:	d107      	bne.n	800cb38 <__gethex+0x212>
 800cb28:	9b04      	ldr	r3, [sp, #16]
 800cb2a:	f8c3 a000 	str.w	sl, [r3]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	f04f 0a00 	mov.w	sl, #0
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	46d3      	mov	fp, sl
 800cb38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb3c:	f7ff fede 	bl	800c8fc <__hexdig_fun>
 800cb40:	f000 000f 	and.w	r0, r0, #15
 800cb44:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb48:	ea4a 0a00 	orr.w	sl, sl, r0
 800cb4c:	f10b 0b04 	add.w	fp, fp, #4
 800cb50:	9b05      	ldr	r3, [sp, #20]
 800cb52:	e00d      	b.n	800cb70 <__gethex+0x24a>
 800cb54:	9b05      	ldr	r3, [sp, #20]
 800cb56:	9a08      	ldr	r2, [sp, #32]
 800cb58:	4413      	add	r3, r2
 800cb5a:	42bb      	cmp	r3, r7
 800cb5c:	d3e1      	bcc.n	800cb22 <__gethex+0x1fc>
 800cb5e:	4618      	mov	r0, r3
 800cb60:	9a01      	ldr	r2, [sp, #4]
 800cb62:	9903      	ldr	r1, [sp, #12]
 800cb64:	9309      	str	r3, [sp, #36]	; 0x24
 800cb66:	f000 fffb 	bl	800db60 <strncmp>
 800cb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d1d8      	bne.n	800cb22 <__gethex+0x1fc>
 800cb70:	461e      	mov	r6, r3
 800cb72:	e791      	b.n	800ca98 <__gethex+0x172>
 800cb74:	1eb9      	subs	r1, r7, #2
 800cb76:	4628      	mov	r0, r5
 800cb78:	f000 fdb8 	bl	800d6ec <__any_on>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d0b2      	beq.n	800cae6 <__gethex+0x1c0>
 800cb80:	f04f 0a03 	mov.w	sl, #3
 800cb84:	e7b1      	b.n	800caea <__gethex+0x1c4>
 800cb86:	da09      	bge.n	800cb9c <__gethex+0x276>
 800cb88:	1bf7      	subs	r7, r6, r7
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	463a      	mov	r2, r7
 800cb8e:	9802      	ldr	r0, [sp, #8]
 800cb90:	f000 fbce 	bl	800d330 <__lshift>
 800cb94:	1be4      	subs	r4, r4, r7
 800cb96:	4605      	mov	r5, r0
 800cb98:	f100 0914 	add.w	r9, r0, #20
 800cb9c:	f04f 0a00 	mov.w	sl, #0
 800cba0:	e7a8      	b.n	800caf4 <__gethex+0x1ce>
 800cba2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cba6:	42a0      	cmp	r0, r4
 800cba8:	dd6a      	ble.n	800cc80 <__gethex+0x35a>
 800cbaa:	1b04      	subs	r4, r0, r4
 800cbac:	42a6      	cmp	r6, r4
 800cbae:	dc2e      	bgt.n	800cc0e <__gethex+0x2e8>
 800cbb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d022      	beq.n	800cbfe <__gethex+0x2d8>
 800cbb8:	2b03      	cmp	r3, #3
 800cbba:	d024      	beq.n	800cc06 <__gethex+0x2e0>
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d115      	bne.n	800cbec <__gethex+0x2c6>
 800cbc0:	42a6      	cmp	r6, r4
 800cbc2:	d113      	bne.n	800cbec <__gethex+0x2c6>
 800cbc4:	2e01      	cmp	r6, #1
 800cbc6:	dc0b      	bgt.n	800cbe0 <__gethex+0x2ba>
 800cbc8:	9a06      	ldr	r2, [sp, #24]
 800cbca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbce:	6013      	str	r3, [r2, #0]
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	612b      	str	r3, [r5, #16]
 800cbd4:	f8c9 3000 	str.w	r3, [r9]
 800cbd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbda:	2762      	movs	r7, #98	; 0x62
 800cbdc:	601d      	str	r5, [r3, #0]
 800cbde:	e72a      	b.n	800ca36 <__gethex+0x110>
 800cbe0:	1e71      	subs	r1, r6, #1
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f000 fd82 	bl	800d6ec <__any_on>
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d1ed      	bne.n	800cbc8 <__gethex+0x2a2>
 800cbec:	4629      	mov	r1, r5
 800cbee:	9802      	ldr	r0, [sp, #8]
 800cbf0:	f000 f9d2 	bl	800cf98 <_Bfree>
 800cbf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	2750      	movs	r7, #80	; 0x50
 800cbfc:	e71b      	b.n	800ca36 <__gethex+0x110>
 800cbfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0e1      	beq.n	800cbc8 <__gethex+0x2a2>
 800cc04:	e7f2      	b.n	800cbec <__gethex+0x2c6>
 800cc06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1dd      	bne.n	800cbc8 <__gethex+0x2a2>
 800cc0c:	e7ee      	b.n	800cbec <__gethex+0x2c6>
 800cc0e:	1e67      	subs	r7, r4, #1
 800cc10:	f1ba 0f00 	cmp.w	sl, #0
 800cc14:	d131      	bne.n	800cc7a <__gethex+0x354>
 800cc16:	b127      	cbz	r7, 800cc22 <__gethex+0x2fc>
 800cc18:	4639      	mov	r1, r7
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 fd66 	bl	800d6ec <__any_on>
 800cc20:	4682      	mov	sl, r0
 800cc22:	117a      	asrs	r2, r7, #5
 800cc24:	2301      	movs	r3, #1
 800cc26:	f007 071f 	and.w	r7, r7, #31
 800cc2a:	fa03 f707 	lsl.w	r7, r3, r7
 800cc2e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800cc32:	4621      	mov	r1, r4
 800cc34:	421f      	tst	r7, r3
 800cc36:	4628      	mov	r0, r5
 800cc38:	bf18      	it	ne
 800cc3a:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc3e:	1b36      	subs	r6, r6, r4
 800cc40:	f7ff fe22 	bl	800c888 <rshift>
 800cc44:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cc48:	2702      	movs	r7, #2
 800cc4a:	f1ba 0f00 	cmp.w	sl, #0
 800cc4e:	d048      	beq.n	800cce2 <__gethex+0x3bc>
 800cc50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d015      	beq.n	800cc84 <__gethex+0x35e>
 800cc58:	2b03      	cmp	r3, #3
 800cc5a:	d017      	beq.n	800cc8c <__gethex+0x366>
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d109      	bne.n	800cc74 <__gethex+0x34e>
 800cc60:	f01a 0f02 	tst.w	sl, #2
 800cc64:	d006      	beq.n	800cc74 <__gethex+0x34e>
 800cc66:	f8d9 3000 	ldr.w	r3, [r9]
 800cc6a:	ea4a 0a03 	orr.w	sl, sl, r3
 800cc6e:	f01a 0f01 	tst.w	sl, #1
 800cc72:	d10e      	bne.n	800cc92 <__gethex+0x36c>
 800cc74:	f047 0710 	orr.w	r7, r7, #16
 800cc78:	e033      	b.n	800cce2 <__gethex+0x3bc>
 800cc7a:	f04f 0a01 	mov.w	sl, #1
 800cc7e:	e7d0      	b.n	800cc22 <__gethex+0x2fc>
 800cc80:	2701      	movs	r7, #1
 800cc82:	e7e2      	b.n	800cc4a <__gethex+0x324>
 800cc84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc86:	f1c3 0301 	rsb	r3, r3, #1
 800cc8a:	9315      	str	r3, [sp, #84]	; 0x54
 800cc8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0f0      	beq.n	800cc74 <__gethex+0x34e>
 800cc92:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cc96:	f105 0314 	add.w	r3, r5, #20
 800cc9a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cc9e:	eb03 010a 	add.w	r1, r3, sl
 800cca2:	f04f 0c00 	mov.w	ip, #0
 800cca6:	4618      	mov	r0, r3
 800cca8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ccb0:	d01c      	beq.n	800ccec <__gethex+0x3c6>
 800ccb2:	3201      	adds	r2, #1
 800ccb4:	6002      	str	r2, [r0, #0]
 800ccb6:	2f02      	cmp	r7, #2
 800ccb8:	f105 0314 	add.w	r3, r5, #20
 800ccbc:	d138      	bne.n	800cd30 <__gethex+0x40a>
 800ccbe:	f8d8 2000 	ldr.w	r2, [r8]
 800ccc2:	3a01      	subs	r2, #1
 800ccc4:	42b2      	cmp	r2, r6
 800ccc6:	d10a      	bne.n	800ccde <__gethex+0x3b8>
 800ccc8:	1171      	asrs	r1, r6, #5
 800ccca:	2201      	movs	r2, #1
 800cccc:	f006 061f 	and.w	r6, r6, #31
 800ccd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccd4:	fa02 f606 	lsl.w	r6, r2, r6
 800ccd8:	421e      	tst	r6, r3
 800ccda:	bf18      	it	ne
 800ccdc:	4617      	movne	r7, r2
 800ccde:	f047 0720 	orr.w	r7, r7, #32
 800cce2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cce4:	601d      	str	r5, [r3, #0]
 800cce6:	9b06      	ldr	r3, [sp, #24]
 800cce8:	601c      	str	r4, [r3, #0]
 800ccea:	e6a4      	b.n	800ca36 <__gethex+0x110>
 800ccec:	4299      	cmp	r1, r3
 800ccee:	f843 cc04 	str.w	ip, [r3, #-4]
 800ccf2:	d8d8      	bhi.n	800cca6 <__gethex+0x380>
 800ccf4:	68ab      	ldr	r3, [r5, #8]
 800ccf6:	4599      	cmp	r9, r3
 800ccf8:	db12      	blt.n	800cd20 <__gethex+0x3fa>
 800ccfa:	6869      	ldr	r1, [r5, #4]
 800ccfc:	9802      	ldr	r0, [sp, #8]
 800ccfe:	3101      	adds	r1, #1
 800cd00:	f000 f916 	bl	800cf30 <_Balloc>
 800cd04:	692a      	ldr	r2, [r5, #16]
 800cd06:	3202      	adds	r2, #2
 800cd08:	f105 010c 	add.w	r1, r5, #12
 800cd0c:	4683      	mov	fp, r0
 800cd0e:	0092      	lsls	r2, r2, #2
 800cd10:	300c      	adds	r0, #12
 800cd12:	f7fd fa4d 	bl	800a1b0 <memcpy>
 800cd16:	4629      	mov	r1, r5
 800cd18:	9802      	ldr	r0, [sp, #8]
 800cd1a:	f000 f93d 	bl	800cf98 <_Bfree>
 800cd1e:	465d      	mov	r5, fp
 800cd20:	692b      	ldr	r3, [r5, #16]
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cd28:	612a      	str	r2, [r5, #16]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	615a      	str	r2, [r3, #20]
 800cd2e:	e7c2      	b.n	800ccb6 <__gethex+0x390>
 800cd30:	692a      	ldr	r2, [r5, #16]
 800cd32:	454a      	cmp	r2, r9
 800cd34:	dd0b      	ble.n	800cd4e <__gethex+0x428>
 800cd36:	2101      	movs	r1, #1
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f7ff fda5 	bl	800c888 <rshift>
 800cd3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd42:	3401      	adds	r4, #1
 800cd44:	42a3      	cmp	r3, r4
 800cd46:	f6ff aed9 	blt.w	800cafc <__gethex+0x1d6>
 800cd4a:	2701      	movs	r7, #1
 800cd4c:	e7c7      	b.n	800ccde <__gethex+0x3b8>
 800cd4e:	f016 061f 	ands.w	r6, r6, #31
 800cd52:	d0fa      	beq.n	800cd4a <__gethex+0x424>
 800cd54:	449a      	add	sl, r3
 800cd56:	f1c6 0620 	rsb	r6, r6, #32
 800cd5a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cd5e:	f000 f9ab 	bl	800d0b8 <__hi0bits>
 800cd62:	42b0      	cmp	r0, r6
 800cd64:	dbe7      	blt.n	800cd36 <__gethex+0x410>
 800cd66:	e7f0      	b.n	800cd4a <__gethex+0x424>

0800cd68 <L_shift>:
 800cd68:	f1c2 0208 	rsb	r2, r2, #8
 800cd6c:	0092      	lsls	r2, r2, #2
 800cd6e:	b570      	push	{r4, r5, r6, lr}
 800cd70:	f1c2 0620 	rsb	r6, r2, #32
 800cd74:	6843      	ldr	r3, [r0, #4]
 800cd76:	6804      	ldr	r4, [r0, #0]
 800cd78:	fa03 f506 	lsl.w	r5, r3, r6
 800cd7c:	432c      	orrs	r4, r5
 800cd7e:	40d3      	lsrs	r3, r2
 800cd80:	6004      	str	r4, [r0, #0]
 800cd82:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd86:	4288      	cmp	r0, r1
 800cd88:	d3f4      	bcc.n	800cd74 <L_shift+0xc>
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}

0800cd8c <__match>:
 800cd8c:	b530      	push	{r4, r5, lr}
 800cd8e:	6803      	ldr	r3, [r0, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd96:	b914      	cbnz	r4, 800cd9e <__match+0x12>
 800cd98:	6003      	str	r3, [r0, #0]
 800cd9a:	2001      	movs	r0, #1
 800cd9c:	bd30      	pop	{r4, r5, pc}
 800cd9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cda6:	2d19      	cmp	r5, #25
 800cda8:	bf98      	it	ls
 800cdaa:	3220      	addls	r2, #32
 800cdac:	42a2      	cmp	r2, r4
 800cdae:	d0f0      	beq.n	800cd92 <__match+0x6>
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	e7f3      	b.n	800cd9c <__match+0x10>

0800cdb4 <__hexnan>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	680b      	ldr	r3, [r1, #0]
 800cdba:	6801      	ldr	r1, [r0, #0]
 800cdbc:	115f      	asrs	r7, r3, #5
 800cdbe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cdc2:	f013 031f 	ands.w	r3, r3, #31
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	bf18      	it	ne
 800cdca:	3704      	addne	r7, #4
 800cdcc:	2500      	movs	r5, #0
 800cdce:	1f3e      	subs	r6, r7, #4
 800cdd0:	4682      	mov	sl, r0
 800cdd2:	4690      	mov	r8, r2
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	f847 5c04 	str.w	r5, [r7, #-4]
 800cdda:	46b1      	mov	r9, r6
 800cddc:	4634      	mov	r4, r6
 800cdde:	9502      	str	r5, [sp, #8]
 800cde0:	46ab      	mov	fp, r5
 800cde2:	784a      	ldrb	r2, [r1, #1]
 800cde4:	1c4b      	adds	r3, r1, #1
 800cde6:	9303      	str	r3, [sp, #12]
 800cde8:	b342      	cbz	r2, 800ce3c <__hexnan+0x88>
 800cdea:	4610      	mov	r0, r2
 800cdec:	9105      	str	r1, [sp, #20]
 800cdee:	9204      	str	r2, [sp, #16]
 800cdf0:	f7ff fd84 	bl	800c8fc <__hexdig_fun>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d143      	bne.n	800ce80 <__hexnan+0xcc>
 800cdf8:	9a04      	ldr	r2, [sp, #16]
 800cdfa:	9905      	ldr	r1, [sp, #20]
 800cdfc:	2a20      	cmp	r2, #32
 800cdfe:	d818      	bhi.n	800ce32 <__hexnan+0x7e>
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	459b      	cmp	fp, r3
 800ce04:	dd13      	ble.n	800ce2e <__hexnan+0x7a>
 800ce06:	454c      	cmp	r4, r9
 800ce08:	d206      	bcs.n	800ce18 <__hexnan+0x64>
 800ce0a:	2d07      	cmp	r5, #7
 800ce0c:	dc04      	bgt.n	800ce18 <__hexnan+0x64>
 800ce0e:	462a      	mov	r2, r5
 800ce10:	4649      	mov	r1, r9
 800ce12:	4620      	mov	r0, r4
 800ce14:	f7ff ffa8 	bl	800cd68 <L_shift>
 800ce18:	4544      	cmp	r4, r8
 800ce1a:	d944      	bls.n	800cea6 <__hexnan+0xf2>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f1a4 0904 	sub.w	r9, r4, #4
 800ce22:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce26:	f8cd b008 	str.w	fp, [sp, #8]
 800ce2a:	464c      	mov	r4, r9
 800ce2c:	461d      	mov	r5, r3
 800ce2e:	9903      	ldr	r1, [sp, #12]
 800ce30:	e7d7      	b.n	800cde2 <__hexnan+0x2e>
 800ce32:	2a29      	cmp	r2, #41	; 0x29
 800ce34:	d14a      	bne.n	800cecc <__hexnan+0x118>
 800ce36:	3102      	adds	r1, #2
 800ce38:	f8ca 1000 	str.w	r1, [sl]
 800ce3c:	f1bb 0f00 	cmp.w	fp, #0
 800ce40:	d044      	beq.n	800cecc <__hexnan+0x118>
 800ce42:	454c      	cmp	r4, r9
 800ce44:	d206      	bcs.n	800ce54 <__hexnan+0xa0>
 800ce46:	2d07      	cmp	r5, #7
 800ce48:	dc04      	bgt.n	800ce54 <__hexnan+0xa0>
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f7ff ff8a 	bl	800cd68 <L_shift>
 800ce54:	4544      	cmp	r4, r8
 800ce56:	d928      	bls.n	800ceaa <__hexnan+0xf6>
 800ce58:	4643      	mov	r3, r8
 800ce5a:	f854 2b04 	ldr.w	r2, [r4], #4
 800ce5e:	f843 2b04 	str.w	r2, [r3], #4
 800ce62:	42a6      	cmp	r6, r4
 800ce64:	d2f9      	bcs.n	800ce5a <__hexnan+0xa6>
 800ce66:	2200      	movs	r2, #0
 800ce68:	f843 2b04 	str.w	r2, [r3], #4
 800ce6c:	429e      	cmp	r6, r3
 800ce6e:	d2fb      	bcs.n	800ce68 <__hexnan+0xb4>
 800ce70:	6833      	ldr	r3, [r6, #0]
 800ce72:	b91b      	cbnz	r3, 800ce7c <__hexnan+0xc8>
 800ce74:	4546      	cmp	r6, r8
 800ce76:	d127      	bne.n	800cec8 <__hexnan+0x114>
 800ce78:	2301      	movs	r3, #1
 800ce7a:	6033      	str	r3, [r6, #0]
 800ce7c:	2005      	movs	r0, #5
 800ce7e:	e026      	b.n	800cece <__hexnan+0x11a>
 800ce80:	3501      	adds	r5, #1
 800ce82:	2d08      	cmp	r5, #8
 800ce84:	f10b 0b01 	add.w	fp, fp, #1
 800ce88:	dd06      	ble.n	800ce98 <__hexnan+0xe4>
 800ce8a:	4544      	cmp	r4, r8
 800ce8c:	d9cf      	bls.n	800ce2e <__hexnan+0x7a>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce94:	2501      	movs	r5, #1
 800ce96:	3c04      	subs	r4, #4
 800ce98:	6822      	ldr	r2, [r4, #0]
 800ce9a:	f000 000f 	and.w	r0, r0, #15
 800ce9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cea2:	6020      	str	r0, [r4, #0]
 800cea4:	e7c3      	b.n	800ce2e <__hexnan+0x7a>
 800cea6:	2508      	movs	r5, #8
 800cea8:	e7c1      	b.n	800ce2e <__hexnan+0x7a>
 800ceaa:	9b01      	ldr	r3, [sp, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0df      	beq.n	800ce70 <__hexnan+0xbc>
 800ceb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb4:	f1c3 0320 	rsb	r3, r3, #32
 800ceb8:	fa22 f303 	lsr.w	r3, r2, r3
 800cebc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cec0:	401a      	ands	r2, r3
 800cec2:	f847 2c04 	str.w	r2, [r7, #-4]
 800cec6:	e7d3      	b.n	800ce70 <__hexnan+0xbc>
 800cec8:	3e04      	subs	r6, #4
 800ceca:	e7d1      	b.n	800ce70 <__hexnan+0xbc>
 800cecc:	2004      	movs	r0, #4
 800cece:	b007      	add	sp, #28
 800ced0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ced4 <__locale_ctype_ptr_l>:
 800ced4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ced8:	4770      	bx	lr

0800ceda <__localeconv_l>:
 800ceda:	30f0      	adds	r0, #240	; 0xf0
 800cedc:	4770      	bx	lr
	...

0800cee0 <_localeconv_r>:
 800cee0:	4b04      	ldr	r3, [pc, #16]	; (800cef4 <_localeconv_r+0x14>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6a18      	ldr	r0, [r3, #32]
 800cee6:	4b04      	ldr	r3, [pc, #16]	; (800cef8 <_localeconv_r+0x18>)
 800cee8:	2800      	cmp	r0, #0
 800ceea:	bf08      	it	eq
 800ceec:	4618      	moveq	r0, r3
 800ceee:	30f0      	adds	r0, #240	; 0xf0
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	20000010 	.word	0x20000010
 800cef8:	20000074 	.word	0x20000074

0800cefc <malloc>:
 800cefc:	4b02      	ldr	r3, [pc, #8]	; (800cf08 <malloc+0xc>)
 800cefe:	4601      	mov	r1, r0
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	f000 bc71 	b.w	800d7e8 <_malloc_r>
 800cf06:	bf00      	nop
 800cf08:	20000010 	.word	0x20000010

0800cf0c <__ascii_mbtowc>:
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	b901      	cbnz	r1, 800cf12 <__ascii_mbtowc+0x6>
 800cf10:	a901      	add	r1, sp, #4
 800cf12:	b142      	cbz	r2, 800cf26 <__ascii_mbtowc+0x1a>
 800cf14:	b14b      	cbz	r3, 800cf2a <__ascii_mbtowc+0x1e>
 800cf16:	7813      	ldrb	r3, [r2, #0]
 800cf18:	600b      	str	r3, [r1, #0]
 800cf1a:	7812      	ldrb	r2, [r2, #0]
 800cf1c:	1c10      	adds	r0, r2, #0
 800cf1e:	bf18      	it	ne
 800cf20:	2001      	movne	r0, #1
 800cf22:	b002      	add	sp, #8
 800cf24:	4770      	bx	lr
 800cf26:	4610      	mov	r0, r2
 800cf28:	e7fb      	b.n	800cf22 <__ascii_mbtowc+0x16>
 800cf2a:	f06f 0001 	mvn.w	r0, #1
 800cf2e:	e7f8      	b.n	800cf22 <__ascii_mbtowc+0x16>

0800cf30 <_Balloc>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf34:	4604      	mov	r4, r0
 800cf36:	460e      	mov	r6, r1
 800cf38:	b93d      	cbnz	r5, 800cf4a <_Balloc+0x1a>
 800cf3a:	2010      	movs	r0, #16
 800cf3c:	f7ff ffde 	bl	800cefc <malloc>
 800cf40:	6260      	str	r0, [r4, #36]	; 0x24
 800cf42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf46:	6005      	str	r5, [r0, #0]
 800cf48:	60c5      	str	r5, [r0, #12]
 800cf4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cf4c:	68eb      	ldr	r3, [r5, #12]
 800cf4e:	b183      	cbz	r3, 800cf72 <_Balloc+0x42>
 800cf50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cf58:	b9b8      	cbnz	r0, 800cf8a <_Balloc+0x5a>
 800cf5a:	2101      	movs	r1, #1
 800cf5c:	fa01 f506 	lsl.w	r5, r1, r6
 800cf60:	1d6a      	adds	r2, r5, #5
 800cf62:	0092      	lsls	r2, r2, #2
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 fbe2 	bl	800d72e <_calloc_r>
 800cf6a:	b160      	cbz	r0, 800cf86 <_Balloc+0x56>
 800cf6c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cf70:	e00e      	b.n	800cf90 <_Balloc+0x60>
 800cf72:	2221      	movs	r2, #33	; 0x21
 800cf74:	2104      	movs	r1, #4
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 fbd9 	bl	800d72e <_calloc_r>
 800cf7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf7e:	60e8      	str	r0, [r5, #12]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1e4      	bne.n	800cf50 <_Balloc+0x20>
 800cf86:	2000      	movs	r0, #0
 800cf88:	bd70      	pop	{r4, r5, r6, pc}
 800cf8a:	6802      	ldr	r2, [r0, #0]
 800cf8c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cf90:	2300      	movs	r3, #0
 800cf92:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf96:	e7f7      	b.n	800cf88 <_Balloc+0x58>

0800cf98 <_Bfree>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	b93c      	cbnz	r4, 800cfb2 <_Bfree+0x1a>
 800cfa2:	2010      	movs	r0, #16
 800cfa4:	f7ff ffaa 	bl	800cefc <malloc>
 800cfa8:	6270      	str	r0, [r6, #36]	; 0x24
 800cfaa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfae:	6004      	str	r4, [r0, #0]
 800cfb0:	60c4      	str	r4, [r0, #12]
 800cfb2:	b13d      	cbz	r5, 800cfc4 <_Bfree+0x2c>
 800cfb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cfb6:	686a      	ldr	r2, [r5, #4]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfbe:	6029      	str	r1, [r5, #0]
 800cfc0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}

0800cfc6 <__multadd>:
 800cfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfca:	690d      	ldr	r5, [r1, #16]
 800cfcc:	461f      	mov	r7, r3
 800cfce:	4606      	mov	r6, r0
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	f101 0c14 	add.w	ip, r1, #20
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f8dc 0000 	ldr.w	r0, [ip]
 800cfdc:	b281      	uxth	r1, r0
 800cfde:	fb02 7101 	mla	r1, r2, r1, r7
 800cfe2:	0c0f      	lsrs	r7, r1, #16
 800cfe4:	0c00      	lsrs	r0, r0, #16
 800cfe6:	fb02 7000 	mla	r0, r2, r0, r7
 800cfea:	b289      	uxth	r1, r1
 800cfec:	3301      	adds	r3, #1
 800cfee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cff2:	429d      	cmp	r5, r3
 800cff4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cff8:	f84c 1b04 	str.w	r1, [ip], #4
 800cffc:	dcec      	bgt.n	800cfd8 <__multadd+0x12>
 800cffe:	b1d7      	cbz	r7, 800d036 <__multadd+0x70>
 800d000:	68a3      	ldr	r3, [r4, #8]
 800d002:	42ab      	cmp	r3, r5
 800d004:	dc12      	bgt.n	800d02c <__multadd+0x66>
 800d006:	6861      	ldr	r1, [r4, #4]
 800d008:	4630      	mov	r0, r6
 800d00a:	3101      	adds	r1, #1
 800d00c:	f7ff ff90 	bl	800cf30 <_Balloc>
 800d010:	6922      	ldr	r2, [r4, #16]
 800d012:	3202      	adds	r2, #2
 800d014:	f104 010c 	add.w	r1, r4, #12
 800d018:	4680      	mov	r8, r0
 800d01a:	0092      	lsls	r2, r2, #2
 800d01c:	300c      	adds	r0, #12
 800d01e:	f7fd f8c7 	bl	800a1b0 <memcpy>
 800d022:	4621      	mov	r1, r4
 800d024:	4630      	mov	r0, r6
 800d026:	f7ff ffb7 	bl	800cf98 <_Bfree>
 800d02a:	4644      	mov	r4, r8
 800d02c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d030:	3501      	adds	r5, #1
 800d032:	615f      	str	r7, [r3, #20]
 800d034:	6125      	str	r5, [r4, #16]
 800d036:	4620      	mov	r0, r4
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d03c <__s2b>:
 800d03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d040:	460c      	mov	r4, r1
 800d042:	4615      	mov	r5, r2
 800d044:	461f      	mov	r7, r3
 800d046:	2209      	movs	r2, #9
 800d048:	3308      	adds	r3, #8
 800d04a:	4606      	mov	r6, r0
 800d04c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d050:	2100      	movs	r1, #0
 800d052:	2201      	movs	r2, #1
 800d054:	429a      	cmp	r2, r3
 800d056:	db20      	blt.n	800d09a <__s2b+0x5e>
 800d058:	4630      	mov	r0, r6
 800d05a:	f7ff ff69 	bl	800cf30 <_Balloc>
 800d05e:	9b08      	ldr	r3, [sp, #32]
 800d060:	6143      	str	r3, [r0, #20]
 800d062:	2d09      	cmp	r5, #9
 800d064:	f04f 0301 	mov.w	r3, #1
 800d068:	6103      	str	r3, [r0, #16]
 800d06a:	dd19      	ble.n	800d0a0 <__s2b+0x64>
 800d06c:	f104 0809 	add.w	r8, r4, #9
 800d070:	46c1      	mov	r9, r8
 800d072:	442c      	add	r4, r5
 800d074:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d078:	4601      	mov	r1, r0
 800d07a:	3b30      	subs	r3, #48	; 0x30
 800d07c:	220a      	movs	r2, #10
 800d07e:	4630      	mov	r0, r6
 800d080:	f7ff ffa1 	bl	800cfc6 <__multadd>
 800d084:	45a1      	cmp	r9, r4
 800d086:	d1f5      	bne.n	800d074 <__s2b+0x38>
 800d088:	eb08 0405 	add.w	r4, r8, r5
 800d08c:	3c08      	subs	r4, #8
 800d08e:	1b2d      	subs	r5, r5, r4
 800d090:	1963      	adds	r3, r4, r5
 800d092:	42bb      	cmp	r3, r7
 800d094:	db07      	blt.n	800d0a6 <__s2b+0x6a>
 800d096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d09a:	0052      	lsls	r2, r2, #1
 800d09c:	3101      	adds	r1, #1
 800d09e:	e7d9      	b.n	800d054 <__s2b+0x18>
 800d0a0:	340a      	adds	r4, #10
 800d0a2:	2509      	movs	r5, #9
 800d0a4:	e7f3      	b.n	800d08e <__s2b+0x52>
 800d0a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	3b30      	subs	r3, #48	; 0x30
 800d0ae:	220a      	movs	r2, #10
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f7ff ff88 	bl	800cfc6 <__multadd>
 800d0b6:	e7eb      	b.n	800d090 <__s2b+0x54>

0800d0b8 <__hi0bits>:
 800d0b8:	0c02      	lsrs	r2, r0, #16
 800d0ba:	0412      	lsls	r2, r2, #16
 800d0bc:	4603      	mov	r3, r0
 800d0be:	b9b2      	cbnz	r2, 800d0ee <__hi0bits+0x36>
 800d0c0:	0403      	lsls	r3, r0, #16
 800d0c2:	2010      	movs	r0, #16
 800d0c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d0c8:	bf04      	itt	eq
 800d0ca:	021b      	lsleq	r3, r3, #8
 800d0cc:	3008      	addeq	r0, #8
 800d0ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d0d2:	bf04      	itt	eq
 800d0d4:	011b      	lsleq	r3, r3, #4
 800d0d6:	3004      	addeq	r0, #4
 800d0d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d0dc:	bf04      	itt	eq
 800d0de:	009b      	lsleq	r3, r3, #2
 800d0e0:	3002      	addeq	r0, #2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	db06      	blt.n	800d0f4 <__hi0bits+0x3c>
 800d0e6:	005b      	lsls	r3, r3, #1
 800d0e8:	d503      	bpl.n	800d0f2 <__hi0bits+0x3a>
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	4770      	bx	lr
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	e7e8      	b.n	800d0c4 <__hi0bits+0xc>
 800d0f2:	2020      	movs	r0, #32
 800d0f4:	4770      	bx	lr

0800d0f6 <__lo0bits>:
 800d0f6:	6803      	ldr	r3, [r0, #0]
 800d0f8:	f013 0207 	ands.w	r2, r3, #7
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	d00b      	beq.n	800d118 <__lo0bits+0x22>
 800d100:	07da      	lsls	r2, r3, #31
 800d102:	d423      	bmi.n	800d14c <__lo0bits+0x56>
 800d104:	0798      	lsls	r0, r3, #30
 800d106:	bf49      	itett	mi
 800d108:	085b      	lsrmi	r3, r3, #1
 800d10a:	089b      	lsrpl	r3, r3, #2
 800d10c:	2001      	movmi	r0, #1
 800d10e:	600b      	strmi	r3, [r1, #0]
 800d110:	bf5c      	itt	pl
 800d112:	600b      	strpl	r3, [r1, #0]
 800d114:	2002      	movpl	r0, #2
 800d116:	4770      	bx	lr
 800d118:	b298      	uxth	r0, r3
 800d11a:	b9a8      	cbnz	r0, 800d148 <__lo0bits+0x52>
 800d11c:	0c1b      	lsrs	r3, r3, #16
 800d11e:	2010      	movs	r0, #16
 800d120:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d124:	bf04      	itt	eq
 800d126:	0a1b      	lsreq	r3, r3, #8
 800d128:	3008      	addeq	r0, #8
 800d12a:	071a      	lsls	r2, r3, #28
 800d12c:	bf04      	itt	eq
 800d12e:	091b      	lsreq	r3, r3, #4
 800d130:	3004      	addeq	r0, #4
 800d132:	079a      	lsls	r2, r3, #30
 800d134:	bf04      	itt	eq
 800d136:	089b      	lsreq	r3, r3, #2
 800d138:	3002      	addeq	r0, #2
 800d13a:	07da      	lsls	r2, r3, #31
 800d13c:	d402      	bmi.n	800d144 <__lo0bits+0x4e>
 800d13e:	085b      	lsrs	r3, r3, #1
 800d140:	d006      	beq.n	800d150 <__lo0bits+0x5a>
 800d142:	3001      	adds	r0, #1
 800d144:	600b      	str	r3, [r1, #0]
 800d146:	4770      	bx	lr
 800d148:	4610      	mov	r0, r2
 800d14a:	e7e9      	b.n	800d120 <__lo0bits+0x2a>
 800d14c:	2000      	movs	r0, #0
 800d14e:	4770      	bx	lr
 800d150:	2020      	movs	r0, #32
 800d152:	4770      	bx	lr

0800d154 <__i2b>:
 800d154:	b510      	push	{r4, lr}
 800d156:	460c      	mov	r4, r1
 800d158:	2101      	movs	r1, #1
 800d15a:	f7ff fee9 	bl	800cf30 <_Balloc>
 800d15e:	2201      	movs	r2, #1
 800d160:	6144      	str	r4, [r0, #20]
 800d162:	6102      	str	r2, [r0, #16]
 800d164:	bd10      	pop	{r4, pc}

0800d166 <__multiply>:
 800d166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16a:	4614      	mov	r4, r2
 800d16c:	690a      	ldr	r2, [r1, #16]
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	429a      	cmp	r2, r3
 800d172:	bfb8      	it	lt
 800d174:	460b      	movlt	r3, r1
 800d176:	4688      	mov	r8, r1
 800d178:	bfbc      	itt	lt
 800d17a:	46a0      	movlt	r8, r4
 800d17c:	461c      	movlt	r4, r3
 800d17e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d182:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d18a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d18e:	eb07 0609 	add.w	r6, r7, r9
 800d192:	42b3      	cmp	r3, r6
 800d194:	bfb8      	it	lt
 800d196:	3101      	addlt	r1, #1
 800d198:	f7ff feca 	bl	800cf30 <_Balloc>
 800d19c:	f100 0514 	add.w	r5, r0, #20
 800d1a0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d1a4:	462b      	mov	r3, r5
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	4573      	cmp	r3, lr
 800d1aa:	d316      	bcc.n	800d1da <__multiply+0x74>
 800d1ac:	f104 0214 	add.w	r2, r4, #20
 800d1b0:	f108 0114 	add.w	r1, r8, #20
 800d1b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d1b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	9b00      	ldr	r3, [sp, #0]
 800d1c0:	9201      	str	r2, [sp, #4]
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d80c      	bhi.n	800d1e0 <__multiply+0x7a>
 800d1c6:	2e00      	cmp	r6, #0
 800d1c8:	dd03      	ble.n	800d1d2 <__multiply+0x6c>
 800d1ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d05d      	beq.n	800d28e <__multiply+0x128>
 800d1d2:	6106      	str	r6, [r0, #16]
 800d1d4:	b003      	add	sp, #12
 800d1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1da:	f843 2b04 	str.w	r2, [r3], #4
 800d1de:	e7e3      	b.n	800d1a8 <__multiply+0x42>
 800d1e0:	f8b2 b000 	ldrh.w	fp, [r2]
 800d1e4:	f1bb 0f00 	cmp.w	fp, #0
 800d1e8:	d023      	beq.n	800d232 <__multiply+0xcc>
 800d1ea:	4689      	mov	r9, r1
 800d1ec:	46ac      	mov	ip, r5
 800d1ee:	f04f 0800 	mov.w	r8, #0
 800d1f2:	f859 4b04 	ldr.w	r4, [r9], #4
 800d1f6:	f8dc a000 	ldr.w	sl, [ip]
 800d1fa:	b2a3      	uxth	r3, r4
 800d1fc:	fa1f fa8a 	uxth.w	sl, sl
 800d200:	fb0b a303 	mla	r3, fp, r3, sl
 800d204:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d208:	f8dc 4000 	ldr.w	r4, [ip]
 800d20c:	4443      	add	r3, r8
 800d20e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d212:	fb0b 840a 	mla	r4, fp, sl, r8
 800d216:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d21a:	46e2      	mov	sl, ip
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d222:	454f      	cmp	r7, r9
 800d224:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d228:	f84a 3b04 	str.w	r3, [sl], #4
 800d22c:	d82b      	bhi.n	800d286 <__multiply+0x120>
 800d22e:	f8cc 8004 	str.w	r8, [ip, #4]
 800d232:	9b01      	ldr	r3, [sp, #4]
 800d234:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d238:	3204      	adds	r2, #4
 800d23a:	f1ba 0f00 	cmp.w	sl, #0
 800d23e:	d020      	beq.n	800d282 <__multiply+0x11c>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	4689      	mov	r9, r1
 800d244:	46a8      	mov	r8, r5
 800d246:	f04f 0b00 	mov.w	fp, #0
 800d24a:	f8b9 c000 	ldrh.w	ip, [r9]
 800d24e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d252:	fb0a 440c 	mla	r4, sl, ip, r4
 800d256:	445c      	add	r4, fp
 800d258:	46c4      	mov	ip, r8
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d260:	f84c 3b04 	str.w	r3, [ip], #4
 800d264:	f859 3b04 	ldr.w	r3, [r9], #4
 800d268:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d26c:	0c1b      	lsrs	r3, r3, #16
 800d26e:	fb0a b303 	mla	r3, sl, r3, fp
 800d272:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d276:	454f      	cmp	r7, r9
 800d278:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d27c:	d805      	bhi.n	800d28a <__multiply+0x124>
 800d27e:	f8c8 3004 	str.w	r3, [r8, #4]
 800d282:	3504      	adds	r5, #4
 800d284:	e79b      	b.n	800d1be <__multiply+0x58>
 800d286:	46d4      	mov	ip, sl
 800d288:	e7b3      	b.n	800d1f2 <__multiply+0x8c>
 800d28a:	46e0      	mov	r8, ip
 800d28c:	e7dd      	b.n	800d24a <__multiply+0xe4>
 800d28e:	3e01      	subs	r6, #1
 800d290:	e799      	b.n	800d1c6 <__multiply+0x60>
	...

0800d294 <__pow5mult>:
 800d294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d298:	4615      	mov	r5, r2
 800d29a:	f012 0203 	ands.w	r2, r2, #3
 800d29e:	4606      	mov	r6, r0
 800d2a0:	460f      	mov	r7, r1
 800d2a2:	d007      	beq.n	800d2b4 <__pow5mult+0x20>
 800d2a4:	3a01      	subs	r2, #1
 800d2a6:	4c21      	ldr	r4, [pc, #132]	; (800d32c <__pow5mult+0x98>)
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2ae:	f7ff fe8a 	bl	800cfc6 <__multadd>
 800d2b2:	4607      	mov	r7, r0
 800d2b4:	10ad      	asrs	r5, r5, #2
 800d2b6:	d035      	beq.n	800d324 <__pow5mult+0x90>
 800d2b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2ba:	b93c      	cbnz	r4, 800d2cc <__pow5mult+0x38>
 800d2bc:	2010      	movs	r0, #16
 800d2be:	f7ff fe1d 	bl	800cefc <malloc>
 800d2c2:	6270      	str	r0, [r6, #36]	; 0x24
 800d2c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2c8:	6004      	str	r4, [r0, #0]
 800d2ca:	60c4      	str	r4, [r0, #12]
 800d2cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2d4:	b94c      	cbnz	r4, 800d2ea <__pow5mult+0x56>
 800d2d6:	f240 2171 	movw	r1, #625	; 0x271
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f7ff ff3a 	bl	800d154 <__i2b>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	f04f 0800 	mov.w	r8, #0
 800d2ee:	07eb      	lsls	r3, r5, #31
 800d2f0:	d50a      	bpl.n	800d308 <__pow5mult+0x74>
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ff35 	bl	800d166 <__multiply>
 800d2fc:	4639      	mov	r1, r7
 800d2fe:	4681      	mov	r9, r0
 800d300:	4630      	mov	r0, r6
 800d302:	f7ff fe49 	bl	800cf98 <_Bfree>
 800d306:	464f      	mov	r7, r9
 800d308:	106d      	asrs	r5, r5, #1
 800d30a:	d00b      	beq.n	800d324 <__pow5mult+0x90>
 800d30c:	6820      	ldr	r0, [r4, #0]
 800d30e:	b938      	cbnz	r0, 800d320 <__pow5mult+0x8c>
 800d310:	4622      	mov	r2, r4
 800d312:	4621      	mov	r1, r4
 800d314:	4630      	mov	r0, r6
 800d316:	f7ff ff26 	bl	800d166 <__multiply>
 800d31a:	6020      	str	r0, [r4, #0]
 800d31c:	f8c0 8000 	str.w	r8, [r0]
 800d320:	4604      	mov	r4, r0
 800d322:	e7e4      	b.n	800d2ee <__pow5mult+0x5a>
 800d324:	4638      	mov	r0, r7
 800d326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32a:	bf00      	nop
 800d32c:	0800e010 	.word	0x0800e010

0800d330 <__lshift>:
 800d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	460c      	mov	r4, r1
 800d336:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	6849      	ldr	r1, [r1, #4]
 800d33e:	eb0a 0903 	add.w	r9, sl, r3
 800d342:	68a3      	ldr	r3, [r4, #8]
 800d344:	4607      	mov	r7, r0
 800d346:	4616      	mov	r6, r2
 800d348:	f109 0501 	add.w	r5, r9, #1
 800d34c:	42ab      	cmp	r3, r5
 800d34e:	db32      	blt.n	800d3b6 <__lshift+0x86>
 800d350:	4638      	mov	r0, r7
 800d352:	f7ff fded 	bl	800cf30 <_Balloc>
 800d356:	2300      	movs	r3, #0
 800d358:	4680      	mov	r8, r0
 800d35a:	f100 0114 	add.w	r1, r0, #20
 800d35e:	461a      	mov	r2, r3
 800d360:	4553      	cmp	r3, sl
 800d362:	db2b      	blt.n	800d3bc <__lshift+0x8c>
 800d364:	6920      	ldr	r0, [r4, #16]
 800d366:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d36a:	f104 0314 	add.w	r3, r4, #20
 800d36e:	f016 021f 	ands.w	r2, r6, #31
 800d372:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d376:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d37a:	d025      	beq.n	800d3c8 <__lshift+0x98>
 800d37c:	f1c2 0e20 	rsb	lr, r2, #32
 800d380:	2000      	movs	r0, #0
 800d382:	681e      	ldr	r6, [r3, #0]
 800d384:	468a      	mov	sl, r1
 800d386:	4096      	lsls	r6, r2
 800d388:	4330      	orrs	r0, r6
 800d38a:	f84a 0b04 	str.w	r0, [sl], #4
 800d38e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d392:	459c      	cmp	ip, r3
 800d394:	fa20 f00e 	lsr.w	r0, r0, lr
 800d398:	d814      	bhi.n	800d3c4 <__lshift+0x94>
 800d39a:	6048      	str	r0, [r1, #4]
 800d39c:	b108      	cbz	r0, 800d3a2 <__lshift+0x72>
 800d39e:	f109 0502 	add.w	r5, r9, #2
 800d3a2:	3d01      	subs	r5, #1
 800d3a4:	4638      	mov	r0, r7
 800d3a6:	f8c8 5010 	str.w	r5, [r8, #16]
 800d3aa:	4621      	mov	r1, r4
 800d3ac:	f7ff fdf4 	bl	800cf98 <_Bfree>
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b6:	3101      	adds	r1, #1
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	e7c7      	b.n	800d34c <__lshift+0x1c>
 800d3bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	e7cd      	b.n	800d360 <__lshift+0x30>
 800d3c4:	4651      	mov	r1, sl
 800d3c6:	e7dc      	b.n	800d382 <__lshift+0x52>
 800d3c8:	3904      	subs	r1, #4
 800d3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3d2:	459c      	cmp	ip, r3
 800d3d4:	d8f9      	bhi.n	800d3ca <__lshift+0x9a>
 800d3d6:	e7e4      	b.n	800d3a2 <__lshift+0x72>

0800d3d8 <__mcmp>:
 800d3d8:	6903      	ldr	r3, [r0, #16]
 800d3da:	690a      	ldr	r2, [r1, #16]
 800d3dc:	1a9b      	subs	r3, r3, r2
 800d3de:	b530      	push	{r4, r5, lr}
 800d3e0:	d10c      	bne.n	800d3fc <__mcmp+0x24>
 800d3e2:	0092      	lsls	r2, r2, #2
 800d3e4:	3014      	adds	r0, #20
 800d3e6:	3114      	adds	r1, #20
 800d3e8:	1884      	adds	r4, r0, r2
 800d3ea:	4411      	add	r1, r2
 800d3ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3f4:	4295      	cmp	r5, r2
 800d3f6:	d003      	beq.n	800d400 <__mcmp+0x28>
 800d3f8:	d305      	bcc.n	800d406 <__mcmp+0x2e>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	bd30      	pop	{r4, r5, pc}
 800d400:	42a0      	cmp	r0, r4
 800d402:	d3f3      	bcc.n	800d3ec <__mcmp+0x14>
 800d404:	e7fa      	b.n	800d3fc <__mcmp+0x24>
 800d406:	f04f 33ff 	mov.w	r3, #4294967295
 800d40a:	e7f7      	b.n	800d3fc <__mcmp+0x24>

0800d40c <__mdiff>:
 800d40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d410:	460d      	mov	r5, r1
 800d412:	4607      	mov	r7, r0
 800d414:	4611      	mov	r1, r2
 800d416:	4628      	mov	r0, r5
 800d418:	4614      	mov	r4, r2
 800d41a:	f7ff ffdd 	bl	800d3d8 <__mcmp>
 800d41e:	1e06      	subs	r6, r0, #0
 800d420:	d108      	bne.n	800d434 <__mdiff+0x28>
 800d422:	4631      	mov	r1, r6
 800d424:	4638      	mov	r0, r7
 800d426:	f7ff fd83 	bl	800cf30 <_Balloc>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d434:	bfa4      	itt	ge
 800d436:	4623      	movge	r3, r4
 800d438:	462c      	movge	r4, r5
 800d43a:	4638      	mov	r0, r7
 800d43c:	6861      	ldr	r1, [r4, #4]
 800d43e:	bfa6      	itte	ge
 800d440:	461d      	movge	r5, r3
 800d442:	2600      	movge	r6, #0
 800d444:	2601      	movlt	r6, #1
 800d446:	f7ff fd73 	bl	800cf30 <_Balloc>
 800d44a:	692b      	ldr	r3, [r5, #16]
 800d44c:	60c6      	str	r6, [r0, #12]
 800d44e:	6926      	ldr	r6, [r4, #16]
 800d450:	f105 0914 	add.w	r9, r5, #20
 800d454:	f104 0214 	add.w	r2, r4, #20
 800d458:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d45c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d460:	f100 0514 	add.w	r5, r0, #20
 800d464:	f04f 0e00 	mov.w	lr, #0
 800d468:	f852 ab04 	ldr.w	sl, [r2], #4
 800d46c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d470:	fa1e f18a 	uxtah	r1, lr, sl
 800d474:	b2a3      	uxth	r3, r4
 800d476:	1ac9      	subs	r1, r1, r3
 800d478:	0c23      	lsrs	r3, r4, #16
 800d47a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d47e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d482:	b289      	uxth	r1, r1
 800d484:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d488:	45c8      	cmp	r8, r9
 800d48a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d48e:	4694      	mov	ip, r2
 800d490:	f845 3b04 	str.w	r3, [r5], #4
 800d494:	d8e8      	bhi.n	800d468 <__mdiff+0x5c>
 800d496:	45bc      	cmp	ip, r7
 800d498:	d304      	bcc.n	800d4a4 <__mdiff+0x98>
 800d49a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d49e:	b183      	cbz	r3, 800d4c2 <__mdiff+0xb6>
 800d4a0:	6106      	str	r6, [r0, #16]
 800d4a2:	e7c5      	b.n	800d430 <__mdiff+0x24>
 800d4a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d4a8:	fa1e f381 	uxtah	r3, lr, r1
 800d4ac:	141a      	asrs	r2, r3, #16
 800d4ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d4bc:	f845 3b04 	str.w	r3, [r5], #4
 800d4c0:	e7e9      	b.n	800d496 <__mdiff+0x8a>
 800d4c2:	3e01      	subs	r6, #1
 800d4c4:	e7e9      	b.n	800d49a <__mdiff+0x8e>
	...

0800d4c8 <__ulp>:
 800d4c8:	4b12      	ldr	r3, [pc, #72]	; (800d514 <__ulp+0x4c>)
 800d4ca:	ee10 2a90 	vmov	r2, s1
 800d4ce:	401a      	ands	r2, r3
 800d4d0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	dd04      	ble.n	800d4e2 <__ulp+0x1a>
 800d4d8:	2000      	movs	r0, #0
 800d4da:	4619      	mov	r1, r3
 800d4dc:	ec41 0b10 	vmov	d0, r0, r1
 800d4e0:	4770      	bx	lr
 800d4e2:	425b      	negs	r3, r3
 800d4e4:	151b      	asrs	r3, r3, #20
 800d4e6:	2b13      	cmp	r3, #19
 800d4e8:	f04f 0000 	mov.w	r0, #0
 800d4ec:	f04f 0100 	mov.w	r1, #0
 800d4f0:	dc04      	bgt.n	800d4fc <__ulp+0x34>
 800d4f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d4f6:	fa42 f103 	asr.w	r1, r2, r3
 800d4fa:	e7ef      	b.n	800d4dc <__ulp+0x14>
 800d4fc:	3b14      	subs	r3, #20
 800d4fe:	2b1e      	cmp	r3, #30
 800d500:	f04f 0201 	mov.w	r2, #1
 800d504:	bfda      	itte	le
 800d506:	f1c3 031f 	rsble	r3, r3, #31
 800d50a:	fa02 f303 	lslle.w	r3, r2, r3
 800d50e:	4613      	movgt	r3, r2
 800d510:	4618      	mov	r0, r3
 800d512:	e7e3      	b.n	800d4dc <__ulp+0x14>
 800d514:	7ff00000 	.word	0x7ff00000

0800d518 <__b2d>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	6905      	ldr	r5, [r0, #16]
 800d51c:	f100 0714 	add.w	r7, r0, #20
 800d520:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d524:	1f2e      	subs	r6, r5, #4
 800d526:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d52a:	4620      	mov	r0, r4
 800d52c:	f7ff fdc4 	bl	800d0b8 <__hi0bits>
 800d530:	f1c0 0320 	rsb	r3, r0, #32
 800d534:	280a      	cmp	r0, #10
 800d536:	600b      	str	r3, [r1, #0]
 800d538:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d5b0 <__b2d+0x98>
 800d53c:	dc14      	bgt.n	800d568 <__b2d+0x50>
 800d53e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d542:	fa24 f10e 	lsr.w	r1, r4, lr
 800d546:	42b7      	cmp	r7, r6
 800d548:	ea41 030c 	orr.w	r3, r1, ip
 800d54c:	bf34      	ite	cc
 800d54e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d552:	2100      	movcs	r1, #0
 800d554:	3015      	adds	r0, #21
 800d556:	fa04 f000 	lsl.w	r0, r4, r0
 800d55a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d55e:	ea40 0201 	orr.w	r2, r0, r1
 800d562:	ec43 2b10 	vmov	d0, r2, r3
 800d566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d568:	42b7      	cmp	r7, r6
 800d56a:	bf3a      	itte	cc
 800d56c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d570:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d574:	2100      	movcs	r1, #0
 800d576:	380b      	subs	r0, #11
 800d578:	d015      	beq.n	800d5a6 <__b2d+0x8e>
 800d57a:	4084      	lsls	r4, r0
 800d57c:	f1c0 0520 	rsb	r5, r0, #32
 800d580:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d584:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d588:	42be      	cmp	r6, r7
 800d58a:	fa21 fc05 	lsr.w	ip, r1, r5
 800d58e:	ea44 030c 	orr.w	r3, r4, ip
 800d592:	bf8c      	ite	hi
 800d594:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d598:	2400      	movls	r4, #0
 800d59a:	fa01 f000 	lsl.w	r0, r1, r0
 800d59e:	40ec      	lsrs	r4, r5
 800d5a0:	ea40 0204 	orr.w	r2, r0, r4
 800d5a4:	e7dd      	b.n	800d562 <__b2d+0x4a>
 800d5a6:	ea44 030c 	orr.w	r3, r4, ip
 800d5aa:	460a      	mov	r2, r1
 800d5ac:	e7d9      	b.n	800d562 <__b2d+0x4a>
 800d5ae:	bf00      	nop
 800d5b0:	3ff00000 	.word	0x3ff00000

0800d5b4 <__d2b>:
 800d5b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5b8:	460e      	mov	r6, r1
 800d5ba:	2101      	movs	r1, #1
 800d5bc:	ec59 8b10 	vmov	r8, r9, d0
 800d5c0:	4615      	mov	r5, r2
 800d5c2:	f7ff fcb5 	bl	800cf30 <_Balloc>
 800d5c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d5ca:	4607      	mov	r7, r0
 800d5cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5d0:	bb34      	cbnz	r4, 800d620 <__d2b+0x6c>
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	f1b8 0300 	subs.w	r3, r8, #0
 800d5d8:	d027      	beq.n	800d62a <__d2b+0x76>
 800d5da:	a802      	add	r0, sp, #8
 800d5dc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d5e0:	f7ff fd89 	bl	800d0f6 <__lo0bits>
 800d5e4:	9900      	ldr	r1, [sp, #0]
 800d5e6:	b1f0      	cbz	r0, 800d626 <__d2b+0x72>
 800d5e8:	9a01      	ldr	r2, [sp, #4]
 800d5ea:	f1c0 0320 	rsb	r3, r0, #32
 800d5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f2:	430b      	orrs	r3, r1
 800d5f4:	40c2      	lsrs	r2, r0
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	9201      	str	r2, [sp, #4]
 800d5fa:	9b01      	ldr	r3, [sp, #4]
 800d5fc:	61bb      	str	r3, [r7, #24]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	bf14      	ite	ne
 800d602:	2102      	movne	r1, #2
 800d604:	2101      	moveq	r1, #1
 800d606:	6139      	str	r1, [r7, #16]
 800d608:	b1c4      	cbz	r4, 800d63c <__d2b+0x88>
 800d60a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d60e:	4404      	add	r4, r0
 800d610:	6034      	str	r4, [r6, #0]
 800d612:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d616:	6028      	str	r0, [r5, #0]
 800d618:	4638      	mov	r0, r7
 800d61a:	b003      	add	sp, #12
 800d61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d624:	e7d5      	b.n	800d5d2 <__d2b+0x1e>
 800d626:	6179      	str	r1, [r7, #20]
 800d628:	e7e7      	b.n	800d5fa <__d2b+0x46>
 800d62a:	a801      	add	r0, sp, #4
 800d62c:	f7ff fd63 	bl	800d0f6 <__lo0bits>
 800d630:	9b01      	ldr	r3, [sp, #4]
 800d632:	617b      	str	r3, [r7, #20]
 800d634:	2101      	movs	r1, #1
 800d636:	6139      	str	r1, [r7, #16]
 800d638:	3020      	adds	r0, #32
 800d63a:	e7e5      	b.n	800d608 <__d2b+0x54>
 800d63c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d644:	6030      	str	r0, [r6, #0]
 800d646:	6918      	ldr	r0, [r3, #16]
 800d648:	f7ff fd36 	bl	800d0b8 <__hi0bits>
 800d64c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d650:	e7e1      	b.n	800d616 <__d2b+0x62>

0800d652 <__ratio>:
 800d652:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d656:	4688      	mov	r8, r1
 800d658:	4669      	mov	r1, sp
 800d65a:	4681      	mov	r9, r0
 800d65c:	f7ff ff5c 	bl	800d518 <__b2d>
 800d660:	a901      	add	r1, sp, #4
 800d662:	4640      	mov	r0, r8
 800d664:	ec57 6b10 	vmov	r6, r7, d0
 800d668:	f7ff ff56 	bl	800d518 <__b2d>
 800d66c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d670:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d674:	eba3 0c02 	sub.w	ip, r3, r2
 800d678:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d67c:	1a9b      	subs	r3, r3, r2
 800d67e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d682:	ec5b ab10 	vmov	sl, fp, d0
 800d686:	2b00      	cmp	r3, #0
 800d688:	bfce      	itee	gt
 800d68a:	463a      	movgt	r2, r7
 800d68c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d690:	465a      	movle	r2, fp
 800d692:	4659      	mov	r1, fp
 800d694:	463d      	mov	r5, r7
 800d696:	bfd4      	ite	le
 800d698:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d69c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	ee10 2a10 	vmov	r2, s0
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	f7f3 f8cf 	bl	800084c <__aeabi_ddiv>
 800d6ae:	ec41 0b10 	vmov	d0, r0, r1
 800d6b2:	b003      	add	sp, #12
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6b8 <__copybits>:
 800d6b8:	3901      	subs	r1, #1
 800d6ba:	b510      	push	{r4, lr}
 800d6bc:	1149      	asrs	r1, r1, #5
 800d6be:	6914      	ldr	r4, [r2, #16]
 800d6c0:	3101      	adds	r1, #1
 800d6c2:	f102 0314 	add.w	r3, r2, #20
 800d6c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6ce:	42a3      	cmp	r3, r4
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	d303      	bcc.n	800d6dc <__copybits+0x24>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	428a      	cmp	r2, r1
 800d6d8:	d305      	bcc.n	800d6e6 <__copybits+0x2e>
 800d6da:	bd10      	pop	{r4, pc}
 800d6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e0:	f840 2b04 	str.w	r2, [r0], #4
 800d6e4:	e7f3      	b.n	800d6ce <__copybits+0x16>
 800d6e6:	f842 3b04 	str.w	r3, [r2], #4
 800d6ea:	e7f4      	b.n	800d6d6 <__copybits+0x1e>

0800d6ec <__any_on>:
 800d6ec:	f100 0214 	add.w	r2, r0, #20
 800d6f0:	6900      	ldr	r0, [r0, #16]
 800d6f2:	114b      	asrs	r3, r1, #5
 800d6f4:	4298      	cmp	r0, r3
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	db11      	blt.n	800d71e <__any_on+0x32>
 800d6fa:	dd0a      	ble.n	800d712 <__any_on+0x26>
 800d6fc:	f011 011f 	ands.w	r1, r1, #31
 800d700:	d007      	beq.n	800d712 <__any_on+0x26>
 800d702:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d706:	fa24 f001 	lsr.w	r0, r4, r1
 800d70a:	fa00 f101 	lsl.w	r1, r0, r1
 800d70e:	428c      	cmp	r4, r1
 800d710:	d10b      	bne.n	800d72a <__any_on+0x3e>
 800d712:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d716:	4293      	cmp	r3, r2
 800d718:	d803      	bhi.n	800d722 <__any_on+0x36>
 800d71a:	2000      	movs	r0, #0
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	4603      	mov	r3, r0
 800d720:	e7f7      	b.n	800d712 <__any_on+0x26>
 800d722:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d726:	2900      	cmp	r1, #0
 800d728:	d0f5      	beq.n	800d716 <__any_on+0x2a>
 800d72a:	2001      	movs	r0, #1
 800d72c:	e7f6      	b.n	800d71c <__any_on+0x30>

0800d72e <_calloc_r>:
 800d72e:	b538      	push	{r3, r4, r5, lr}
 800d730:	fb02 f401 	mul.w	r4, r2, r1
 800d734:	4621      	mov	r1, r4
 800d736:	f000 f857 	bl	800d7e8 <_malloc_r>
 800d73a:	4605      	mov	r5, r0
 800d73c:	b118      	cbz	r0, 800d746 <_calloc_r+0x18>
 800d73e:	4622      	mov	r2, r4
 800d740:	2100      	movs	r1, #0
 800d742:	f7fc fd40 	bl	800a1c6 <memset>
 800d746:	4628      	mov	r0, r5
 800d748:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d74c <_free_r>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	4605      	mov	r5, r0
 800d750:	2900      	cmp	r1, #0
 800d752:	d045      	beq.n	800d7e0 <_free_r+0x94>
 800d754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d758:	1f0c      	subs	r4, r1, #4
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfb8      	it	lt
 800d75e:	18e4      	addlt	r4, r4, r3
 800d760:	f000 fa36 	bl	800dbd0 <__malloc_lock>
 800d764:	4a1f      	ldr	r2, [pc, #124]	; (800d7e4 <_free_r+0x98>)
 800d766:	6813      	ldr	r3, [r2, #0]
 800d768:	4610      	mov	r0, r2
 800d76a:	b933      	cbnz	r3, 800d77a <_free_r+0x2e>
 800d76c:	6063      	str	r3, [r4, #4]
 800d76e:	6014      	str	r4, [r2, #0]
 800d770:	4628      	mov	r0, r5
 800d772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d776:	f000 ba2c 	b.w	800dbd2 <__malloc_unlock>
 800d77a:	42a3      	cmp	r3, r4
 800d77c:	d90c      	bls.n	800d798 <_free_r+0x4c>
 800d77e:	6821      	ldr	r1, [r4, #0]
 800d780:	1862      	adds	r2, r4, r1
 800d782:	4293      	cmp	r3, r2
 800d784:	bf04      	itt	eq
 800d786:	681a      	ldreq	r2, [r3, #0]
 800d788:	685b      	ldreq	r3, [r3, #4]
 800d78a:	6063      	str	r3, [r4, #4]
 800d78c:	bf04      	itt	eq
 800d78e:	1852      	addeq	r2, r2, r1
 800d790:	6022      	streq	r2, [r4, #0]
 800d792:	6004      	str	r4, [r0, #0]
 800d794:	e7ec      	b.n	800d770 <_free_r+0x24>
 800d796:	4613      	mov	r3, r2
 800d798:	685a      	ldr	r2, [r3, #4]
 800d79a:	b10a      	cbz	r2, 800d7a0 <_free_r+0x54>
 800d79c:	42a2      	cmp	r2, r4
 800d79e:	d9fa      	bls.n	800d796 <_free_r+0x4a>
 800d7a0:	6819      	ldr	r1, [r3, #0]
 800d7a2:	1858      	adds	r0, r3, r1
 800d7a4:	42a0      	cmp	r0, r4
 800d7a6:	d10b      	bne.n	800d7c0 <_free_r+0x74>
 800d7a8:	6820      	ldr	r0, [r4, #0]
 800d7aa:	4401      	add	r1, r0
 800d7ac:	1858      	adds	r0, r3, r1
 800d7ae:	4282      	cmp	r2, r0
 800d7b0:	6019      	str	r1, [r3, #0]
 800d7b2:	d1dd      	bne.n	800d770 <_free_r+0x24>
 800d7b4:	6810      	ldr	r0, [r2, #0]
 800d7b6:	6852      	ldr	r2, [r2, #4]
 800d7b8:	605a      	str	r2, [r3, #4]
 800d7ba:	4401      	add	r1, r0
 800d7bc:	6019      	str	r1, [r3, #0]
 800d7be:	e7d7      	b.n	800d770 <_free_r+0x24>
 800d7c0:	d902      	bls.n	800d7c8 <_free_r+0x7c>
 800d7c2:	230c      	movs	r3, #12
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	e7d3      	b.n	800d770 <_free_r+0x24>
 800d7c8:	6820      	ldr	r0, [r4, #0]
 800d7ca:	1821      	adds	r1, r4, r0
 800d7cc:	428a      	cmp	r2, r1
 800d7ce:	bf04      	itt	eq
 800d7d0:	6811      	ldreq	r1, [r2, #0]
 800d7d2:	6852      	ldreq	r2, [r2, #4]
 800d7d4:	6062      	str	r2, [r4, #4]
 800d7d6:	bf04      	itt	eq
 800d7d8:	1809      	addeq	r1, r1, r0
 800d7da:	6021      	streq	r1, [r4, #0]
 800d7dc:	605c      	str	r4, [r3, #4]
 800d7de:	e7c7      	b.n	800d770 <_free_r+0x24>
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20001cbc 	.word	0x20001cbc

0800d7e8 <_malloc_r>:
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	1ccd      	adds	r5, r1, #3
 800d7ec:	f025 0503 	bic.w	r5, r5, #3
 800d7f0:	3508      	adds	r5, #8
 800d7f2:	2d0c      	cmp	r5, #12
 800d7f4:	bf38      	it	cc
 800d7f6:	250c      	movcc	r5, #12
 800d7f8:	2d00      	cmp	r5, #0
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	db01      	blt.n	800d802 <_malloc_r+0x1a>
 800d7fe:	42a9      	cmp	r1, r5
 800d800:	d903      	bls.n	800d80a <_malloc_r+0x22>
 800d802:	230c      	movs	r3, #12
 800d804:	6033      	str	r3, [r6, #0]
 800d806:	2000      	movs	r0, #0
 800d808:	bd70      	pop	{r4, r5, r6, pc}
 800d80a:	f000 f9e1 	bl	800dbd0 <__malloc_lock>
 800d80e:	4a21      	ldr	r2, [pc, #132]	; (800d894 <_malloc_r+0xac>)
 800d810:	6814      	ldr	r4, [r2, #0]
 800d812:	4621      	mov	r1, r4
 800d814:	b991      	cbnz	r1, 800d83c <_malloc_r+0x54>
 800d816:	4c20      	ldr	r4, [pc, #128]	; (800d898 <_malloc_r+0xb0>)
 800d818:	6823      	ldr	r3, [r4, #0]
 800d81a:	b91b      	cbnz	r3, 800d824 <_malloc_r+0x3c>
 800d81c:	4630      	mov	r0, r6
 800d81e:	f000 f98f 	bl	800db40 <_sbrk_r>
 800d822:	6020      	str	r0, [r4, #0]
 800d824:	4629      	mov	r1, r5
 800d826:	4630      	mov	r0, r6
 800d828:	f000 f98a 	bl	800db40 <_sbrk_r>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d124      	bne.n	800d87a <_malloc_r+0x92>
 800d830:	230c      	movs	r3, #12
 800d832:	6033      	str	r3, [r6, #0]
 800d834:	4630      	mov	r0, r6
 800d836:	f000 f9cc 	bl	800dbd2 <__malloc_unlock>
 800d83a:	e7e4      	b.n	800d806 <_malloc_r+0x1e>
 800d83c:	680b      	ldr	r3, [r1, #0]
 800d83e:	1b5b      	subs	r3, r3, r5
 800d840:	d418      	bmi.n	800d874 <_malloc_r+0x8c>
 800d842:	2b0b      	cmp	r3, #11
 800d844:	d90f      	bls.n	800d866 <_malloc_r+0x7e>
 800d846:	600b      	str	r3, [r1, #0]
 800d848:	50cd      	str	r5, [r1, r3]
 800d84a:	18cc      	adds	r4, r1, r3
 800d84c:	4630      	mov	r0, r6
 800d84e:	f000 f9c0 	bl	800dbd2 <__malloc_unlock>
 800d852:	f104 000b 	add.w	r0, r4, #11
 800d856:	1d23      	adds	r3, r4, #4
 800d858:	f020 0007 	bic.w	r0, r0, #7
 800d85c:	1ac3      	subs	r3, r0, r3
 800d85e:	d0d3      	beq.n	800d808 <_malloc_r+0x20>
 800d860:	425a      	negs	r2, r3
 800d862:	50e2      	str	r2, [r4, r3]
 800d864:	e7d0      	b.n	800d808 <_malloc_r+0x20>
 800d866:	428c      	cmp	r4, r1
 800d868:	684b      	ldr	r3, [r1, #4]
 800d86a:	bf16      	itet	ne
 800d86c:	6063      	strne	r3, [r4, #4]
 800d86e:	6013      	streq	r3, [r2, #0]
 800d870:	460c      	movne	r4, r1
 800d872:	e7eb      	b.n	800d84c <_malloc_r+0x64>
 800d874:	460c      	mov	r4, r1
 800d876:	6849      	ldr	r1, [r1, #4]
 800d878:	e7cc      	b.n	800d814 <_malloc_r+0x2c>
 800d87a:	1cc4      	adds	r4, r0, #3
 800d87c:	f024 0403 	bic.w	r4, r4, #3
 800d880:	42a0      	cmp	r0, r4
 800d882:	d005      	beq.n	800d890 <_malloc_r+0xa8>
 800d884:	1a21      	subs	r1, r4, r0
 800d886:	4630      	mov	r0, r6
 800d888:	f000 f95a 	bl	800db40 <_sbrk_r>
 800d88c:	3001      	adds	r0, #1
 800d88e:	d0cf      	beq.n	800d830 <_malloc_r+0x48>
 800d890:	6025      	str	r5, [r4, #0]
 800d892:	e7db      	b.n	800d84c <_malloc_r+0x64>
 800d894:	20001cbc 	.word	0x20001cbc
 800d898:	20001cc0 	.word	0x20001cc0

0800d89c <__ssputs_r>:
 800d89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a0:	688e      	ldr	r6, [r1, #8]
 800d8a2:	429e      	cmp	r6, r3
 800d8a4:	4682      	mov	sl, r0
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	4690      	mov	r8, r2
 800d8aa:	4699      	mov	r9, r3
 800d8ac:	d837      	bhi.n	800d91e <__ssputs_r+0x82>
 800d8ae:	898a      	ldrh	r2, [r1, #12]
 800d8b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8b4:	d031      	beq.n	800d91a <__ssputs_r+0x7e>
 800d8b6:	6825      	ldr	r5, [r4, #0]
 800d8b8:	6909      	ldr	r1, [r1, #16]
 800d8ba:	1a6f      	subs	r7, r5, r1
 800d8bc:	6965      	ldr	r5, [r4, #20]
 800d8be:	2302      	movs	r3, #2
 800d8c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d8c8:	f109 0301 	add.w	r3, r9, #1
 800d8cc:	443b      	add	r3, r7
 800d8ce:	429d      	cmp	r5, r3
 800d8d0:	bf38      	it	cc
 800d8d2:	461d      	movcc	r5, r3
 800d8d4:	0553      	lsls	r3, r2, #21
 800d8d6:	d530      	bpl.n	800d93a <__ssputs_r+0x9e>
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7ff ff85 	bl	800d7e8 <_malloc_r>
 800d8de:	4606      	mov	r6, r0
 800d8e0:	b950      	cbnz	r0, 800d8f8 <__ssputs_r+0x5c>
 800d8e2:	230c      	movs	r3, #12
 800d8e4:	f8ca 3000 	str.w	r3, [sl]
 800d8e8:	89a3      	ldrh	r3, [r4, #12]
 800d8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f8:	463a      	mov	r2, r7
 800d8fa:	6921      	ldr	r1, [r4, #16]
 800d8fc:	f7fc fc58 	bl	800a1b0 <memcpy>
 800d900:	89a3      	ldrh	r3, [r4, #12]
 800d902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d90a:	81a3      	strh	r3, [r4, #12]
 800d90c:	6126      	str	r6, [r4, #16]
 800d90e:	6165      	str	r5, [r4, #20]
 800d910:	443e      	add	r6, r7
 800d912:	1bed      	subs	r5, r5, r7
 800d914:	6026      	str	r6, [r4, #0]
 800d916:	60a5      	str	r5, [r4, #8]
 800d918:	464e      	mov	r6, r9
 800d91a:	454e      	cmp	r6, r9
 800d91c:	d900      	bls.n	800d920 <__ssputs_r+0x84>
 800d91e:	464e      	mov	r6, r9
 800d920:	4632      	mov	r2, r6
 800d922:	4641      	mov	r1, r8
 800d924:	6820      	ldr	r0, [r4, #0]
 800d926:	f000 f93a 	bl	800db9e <memmove>
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	1b9b      	subs	r3, r3, r6
 800d92e:	60a3      	str	r3, [r4, #8]
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	441e      	add	r6, r3
 800d934:	6026      	str	r6, [r4, #0]
 800d936:	2000      	movs	r0, #0
 800d938:	e7dc      	b.n	800d8f4 <__ssputs_r+0x58>
 800d93a:	462a      	mov	r2, r5
 800d93c:	f000 f94a 	bl	800dbd4 <_realloc_r>
 800d940:	4606      	mov	r6, r0
 800d942:	2800      	cmp	r0, #0
 800d944:	d1e2      	bne.n	800d90c <__ssputs_r+0x70>
 800d946:	6921      	ldr	r1, [r4, #16]
 800d948:	4650      	mov	r0, sl
 800d94a:	f7ff feff 	bl	800d74c <_free_r>
 800d94e:	e7c8      	b.n	800d8e2 <__ssputs_r+0x46>

0800d950 <_svfiprintf_r>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	461d      	mov	r5, r3
 800d956:	898b      	ldrh	r3, [r1, #12]
 800d958:	061f      	lsls	r7, r3, #24
 800d95a:	b09d      	sub	sp, #116	; 0x74
 800d95c:	4680      	mov	r8, r0
 800d95e:	460c      	mov	r4, r1
 800d960:	4616      	mov	r6, r2
 800d962:	d50f      	bpl.n	800d984 <_svfiprintf_r+0x34>
 800d964:	690b      	ldr	r3, [r1, #16]
 800d966:	b96b      	cbnz	r3, 800d984 <_svfiprintf_r+0x34>
 800d968:	2140      	movs	r1, #64	; 0x40
 800d96a:	f7ff ff3d 	bl	800d7e8 <_malloc_r>
 800d96e:	6020      	str	r0, [r4, #0]
 800d970:	6120      	str	r0, [r4, #16]
 800d972:	b928      	cbnz	r0, 800d980 <_svfiprintf_r+0x30>
 800d974:	230c      	movs	r3, #12
 800d976:	f8c8 3000 	str.w	r3, [r8]
 800d97a:	f04f 30ff 	mov.w	r0, #4294967295
 800d97e:	e0c8      	b.n	800db12 <_svfiprintf_r+0x1c2>
 800d980:	2340      	movs	r3, #64	; 0x40
 800d982:	6163      	str	r3, [r4, #20]
 800d984:	2300      	movs	r3, #0
 800d986:	9309      	str	r3, [sp, #36]	; 0x24
 800d988:	2320      	movs	r3, #32
 800d98a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d98e:	2330      	movs	r3, #48	; 0x30
 800d990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d994:	9503      	str	r5, [sp, #12]
 800d996:	f04f 0b01 	mov.w	fp, #1
 800d99a:	4637      	mov	r7, r6
 800d99c:	463d      	mov	r5, r7
 800d99e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d9a2:	b10b      	cbz	r3, 800d9a8 <_svfiprintf_r+0x58>
 800d9a4:	2b25      	cmp	r3, #37	; 0x25
 800d9a6:	d13e      	bne.n	800da26 <_svfiprintf_r+0xd6>
 800d9a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800d9ac:	d00b      	beq.n	800d9c6 <_svfiprintf_r+0x76>
 800d9ae:	4653      	mov	r3, sl
 800d9b0:	4632      	mov	r2, r6
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	f7ff ff71 	bl	800d89c <__ssputs_r>
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	f000 80a4 	beq.w	800db08 <_svfiprintf_r+0x1b8>
 800d9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c2:	4453      	add	r3, sl
 800d9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9c6:	783b      	ldrb	r3, [r7, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	f000 809d 	beq.w	800db08 <_svfiprintf_r+0x1b8>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9d8:	9304      	str	r3, [sp, #16]
 800d9da:	9307      	str	r3, [sp, #28]
 800d9dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9e0:	931a      	str	r3, [sp, #104]	; 0x68
 800d9e2:	462f      	mov	r7, r5
 800d9e4:	2205      	movs	r2, #5
 800d9e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d9ea:	4850      	ldr	r0, [pc, #320]	; (800db2c <_svfiprintf_r+0x1dc>)
 800d9ec:	f7f2 fbf8 	bl	80001e0 <memchr>
 800d9f0:	9b04      	ldr	r3, [sp, #16]
 800d9f2:	b9d0      	cbnz	r0, 800da2a <_svfiprintf_r+0xda>
 800d9f4:	06d9      	lsls	r1, r3, #27
 800d9f6:	bf44      	itt	mi
 800d9f8:	2220      	movmi	r2, #32
 800d9fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9fe:	071a      	lsls	r2, r3, #28
 800da00:	bf44      	itt	mi
 800da02:	222b      	movmi	r2, #43	; 0x2b
 800da04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da08:	782a      	ldrb	r2, [r5, #0]
 800da0a:	2a2a      	cmp	r2, #42	; 0x2a
 800da0c:	d015      	beq.n	800da3a <_svfiprintf_r+0xea>
 800da0e:	9a07      	ldr	r2, [sp, #28]
 800da10:	462f      	mov	r7, r5
 800da12:	2000      	movs	r0, #0
 800da14:	250a      	movs	r5, #10
 800da16:	4639      	mov	r1, r7
 800da18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da1c:	3b30      	subs	r3, #48	; 0x30
 800da1e:	2b09      	cmp	r3, #9
 800da20:	d94d      	bls.n	800dabe <_svfiprintf_r+0x16e>
 800da22:	b1b8      	cbz	r0, 800da54 <_svfiprintf_r+0x104>
 800da24:	e00f      	b.n	800da46 <_svfiprintf_r+0xf6>
 800da26:	462f      	mov	r7, r5
 800da28:	e7b8      	b.n	800d99c <_svfiprintf_r+0x4c>
 800da2a:	4a40      	ldr	r2, [pc, #256]	; (800db2c <_svfiprintf_r+0x1dc>)
 800da2c:	1a80      	subs	r0, r0, r2
 800da2e:	fa0b f000 	lsl.w	r0, fp, r0
 800da32:	4318      	orrs	r0, r3
 800da34:	9004      	str	r0, [sp, #16]
 800da36:	463d      	mov	r5, r7
 800da38:	e7d3      	b.n	800d9e2 <_svfiprintf_r+0x92>
 800da3a:	9a03      	ldr	r2, [sp, #12]
 800da3c:	1d11      	adds	r1, r2, #4
 800da3e:	6812      	ldr	r2, [r2, #0]
 800da40:	9103      	str	r1, [sp, #12]
 800da42:	2a00      	cmp	r2, #0
 800da44:	db01      	blt.n	800da4a <_svfiprintf_r+0xfa>
 800da46:	9207      	str	r2, [sp, #28]
 800da48:	e004      	b.n	800da54 <_svfiprintf_r+0x104>
 800da4a:	4252      	negs	r2, r2
 800da4c:	f043 0302 	orr.w	r3, r3, #2
 800da50:	9207      	str	r2, [sp, #28]
 800da52:	9304      	str	r3, [sp, #16]
 800da54:	783b      	ldrb	r3, [r7, #0]
 800da56:	2b2e      	cmp	r3, #46	; 0x2e
 800da58:	d10c      	bne.n	800da74 <_svfiprintf_r+0x124>
 800da5a:	787b      	ldrb	r3, [r7, #1]
 800da5c:	2b2a      	cmp	r3, #42	; 0x2a
 800da5e:	d133      	bne.n	800dac8 <_svfiprintf_r+0x178>
 800da60:	9b03      	ldr	r3, [sp, #12]
 800da62:	1d1a      	adds	r2, r3, #4
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	9203      	str	r2, [sp, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bfb8      	it	lt
 800da6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800da70:	3702      	adds	r7, #2
 800da72:	9305      	str	r3, [sp, #20]
 800da74:	4d2e      	ldr	r5, [pc, #184]	; (800db30 <_svfiprintf_r+0x1e0>)
 800da76:	7839      	ldrb	r1, [r7, #0]
 800da78:	2203      	movs	r2, #3
 800da7a:	4628      	mov	r0, r5
 800da7c:	f7f2 fbb0 	bl	80001e0 <memchr>
 800da80:	b138      	cbz	r0, 800da92 <_svfiprintf_r+0x142>
 800da82:	2340      	movs	r3, #64	; 0x40
 800da84:	1b40      	subs	r0, r0, r5
 800da86:	fa03 f000 	lsl.w	r0, r3, r0
 800da8a:	9b04      	ldr	r3, [sp, #16]
 800da8c:	4303      	orrs	r3, r0
 800da8e:	3701      	adds	r7, #1
 800da90:	9304      	str	r3, [sp, #16]
 800da92:	7839      	ldrb	r1, [r7, #0]
 800da94:	4827      	ldr	r0, [pc, #156]	; (800db34 <_svfiprintf_r+0x1e4>)
 800da96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da9a:	2206      	movs	r2, #6
 800da9c:	1c7e      	adds	r6, r7, #1
 800da9e:	f7f2 fb9f 	bl	80001e0 <memchr>
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d038      	beq.n	800db18 <_svfiprintf_r+0x1c8>
 800daa6:	4b24      	ldr	r3, [pc, #144]	; (800db38 <_svfiprintf_r+0x1e8>)
 800daa8:	bb13      	cbnz	r3, 800daf0 <_svfiprintf_r+0x1a0>
 800daaa:	9b03      	ldr	r3, [sp, #12]
 800daac:	3307      	adds	r3, #7
 800daae:	f023 0307 	bic.w	r3, r3, #7
 800dab2:	3308      	adds	r3, #8
 800dab4:	9303      	str	r3, [sp, #12]
 800dab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab8:	444b      	add	r3, r9
 800daba:	9309      	str	r3, [sp, #36]	; 0x24
 800dabc:	e76d      	b.n	800d99a <_svfiprintf_r+0x4a>
 800dabe:	fb05 3202 	mla	r2, r5, r2, r3
 800dac2:	2001      	movs	r0, #1
 800dac4:	460f      	mov	r7, r1
 800dac6:	e7a6      	b.n	800da16 <_svfiprintf_r+0xc6>
 800dac8:	2300      	movs	r3, #0
 800daca:	3701      	adds	r7, #1
 800dacc:	9305      	str	r3, [sp, #20]
 800dace:	4619      	mov	r1, r3
 800dad0:	250a      	movs	r5, #10
 800dad2:	4638      	mov	r0, r7
 800dad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dad8:	3a30      	subs	r2, #48	; 0x30
 800dada:	2a09      	cmp	r2, #9
 800dadc:	d903      	bls.n	800dae6 <_svfiprintf_r+0x196>
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d0c8      	beq.n	800da74 <_svfiprintf_r+0x124>
 800dae2:	9105      	str	r1, [sp, #20]
 800dae4:	e7c6      	b.n	800da74 <_svfiprintf_r+0x124>
 800dae6:	fb05 2101 	mla	r1, r5, r1, r2
 800daea:	2301      	movs	r3, #1
 800daec:	4607      	mov	r7, r0
 800daee:	e7f0      	b.n	800dad2 <_svfiprintf_r+0x182>
 800daf0:	ab03      	add	r3, sp, #12
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	4622      	mov	r2, r4
 800daf6:	4b11      	ldr	r3, [pc, #68]	; (800db3c <_svfiprintf_r+0x1ec>)
 800daf8:	a904      	add	r1, sp, #16
 800dafa:	4640      	mov	r0, r8
 800dafc:	f7fc fc00 	bl	800a300 <_printf_float>
 800db00:	f1b0 3fff 	cmp.w	r0, #4294967295
 800db04:	4681      	mov	r9, r0
 800db06:	d1d6      	bne.n	800dab6 <_svfiprintf_r+0x166>
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	065b      	lsls	r3, r3, #25
 800db0c:	f53f af35 	bmi.w	800d97a <_svfiprintf_r+0x2a>
 800db10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db12:	b01d      	add	sp, #116	; 0x74
 800db14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db18:	ab03      	add	r3, sp, #12
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	4622      	mov	r2, r4
 800db1e:	4b07      	ldr	r3, [pc, #28]	; (800db3c <_svfiprintf_r+0x1ec>)
 800db20:	a904      	add	r1, sp, #16
 800db22:	4640      	mov	r0, r8
 800db24:	f7fc fea2 	bl	800a86c <_printf_i>
 800db28:	e7ea      	b.n	800db00 <_svfiprintf_r+0x1b0>
 800db2a:	bf00      	nop
 800db2c:	0800e01c 	.word	0x0800e01c
 800db30:	0800e022 	.word	0x0800e022
 800db34:	0800e026 	.word	0x0800e026
 800db38:	0800a301 	.word	0x0800a301
 800db3c:	0800d89d 	.word	0x0800d89d

0800db40 <_sbrk_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4c06      	ldr	r4, [pc, #24]	; (800db5c <_sbrk_r+0x1c>)
 800db44:	2300      	movs	r3, #0
 800db46:	4605      	mov	r5, r0
 800db48:	4608      	mov	r0, r1
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	f7f4 fb86 	bl	800225c <_sbrk>
 800db50:	1c43      	adds	r3, r0, #1
 800db52:	d102      	bne.n	800db5a <_sbrk_r+0x1a>
 800db54:	6823      	ldr	r3, [r4, #0]
 800db56:	b103      	cbz	r3, 800db5a <_sbrk_r+0x1a>
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	bd38      	pop	{r3, r4, r5, pc}
 800db5c:	20001f60 	.word	0x20001f60

0800db60 <strncmp>:
 800db60:	b510      	push	{r4, lr}
 800db62:	b16a      	cbz	r2, 800db80 <strncmp+0x20>
 800db64:	3901      	subs	r1, #1
 800db66:	1884      	adds	r4, r0, r2
 800db68:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db70:	4293      	cmp	r3, r2
 800db72:	d103      	bne.n	800db7c <strncmp+0x1c>
 800db74:	42a0      	cmp	r0, r4
 800db76:	d001      	beq.n	800db7c <strncmp+0x1c>
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1f5      	bne.n	800db68 <strncmp+0x8>
 800db7c:	1a98      	subs	r0, r3, r2
 800db7e:	bd10      	pop	{r4, pc}
 800db80:	4610      	mov	r0, r2
 800db82:	e7fc      	b.n	800db7e <strncmp+0x1e>

0800db84 <__ascii_wctomb>:
 800db84:	b149      	cbz	r1, 800db9a <__ascii_wctomb+0x16>
 800db86:	2aff      	cmp	r2, #255	; 0xff
 800db88:	bf85      	ittet	hi
 800db8a:	238a      	movhi	r3, #138	; 0x8a
 800db8c:	6003      	strhi	r3, [r0, #0]
 800db8e:	700a      	strbls	r2, [r1, #0]
 800db90:	f04f 30ff 	movhi.w	r0, #4294967295
 800db94:	bf98      	it	ls
 800db96:	2001      	movls	r0, #1
 800db98:	4770      	bx	lr
 800db9a:	4608      	mov	r0, r1
 800db9c:	4770      	bx	lr

0800db9e <memmove>:
 800db9e:	4288      	cmp	r0, r1
 800dba0:	b510      	push	{r4, lr}
 800dba2:	eb01 0302 	add.w	r3, r1, r2
 800dba6:	d807      	bhi.n	800dbb8 <memmove+0x1a>
 800dba8:	1e42      	subs	r2, r0, #1
 800dbaa:	4299      	cmp	r1, r3
 800dbac:	d00a      	beq.n	800dbc4 <memmove+0x26>
 800dbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbb2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dbb6:	e7f8      	b.n	800dbaa <memmove+0xc>
 800dbb8:	4283      	cmp	r3, r0
 800dbba:	d9f5      	bls.n	800dba8 <memmove+0xa>
 800dbbc:	1881      	adds	r1, r0, r2
 800dbbe:	1ad2      	subs	r2, r2, r3
 800dbc0:	42d3      	cmn	r3, r2
 800dbc2:	d100      	bne.n	800dbc6 <memmove+0x28>
 800dbc4:	bd10      	pop	{r4, pc}
 800dbc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dbce:	e7f7      	b.n	800dbc0 <memmove+0x22>

0800dbd0 <__malloc_lock>:
 800dbd0:	4770      	bx	lr

0800dbd2 <__malloc_unlock>:
 800dbd2:	4770      	bx	lr

0800dbd4 <_realloc_r>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	4607      	mov	r7, r0
 800dbd8:	4614      	mov	r4, r2
 800dbda:	460e      	mov	r6, r1
 800dbdc:	b921      	cbnz	r1, 800dbe8 <_realloc_r+0x14>
 800dbde:	4611      	mov	r1, r2
 800dbe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbe4:	f7ff be00 	b.w	800d7e8 <_malloc_r>
 800dbe8:	b922      	cbnz	r2, 800dbf4 <_realloc_r+0x20>
 800dbea:	f7ff fdaf 	bl	800d74c <_free_r>
 800dbee:	4625      	mov	r5, r4
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbf4:	f000 f814 	bl	800dc20 <_malloc_usable_size_r>
 800dbf8:	42a0      	cmp	r0, r4
 800dbfa:	d20f      	bcs.n	800dc1c <_realloc_r+0x48>
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	4638      	mov	r0, r7
 800dc00:	f7ff fdf2 	bl	800d7e8 <_malloc_r>
 800dc04:	4605      	mov	r5, r0
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d0f2      	beq.n	800dbf0 <_realloc_r+0x1c>
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	f7fc facf 	bl	800a1b0 <memcpy>
 800dc12:	4631      	mov	r1, r6
 800dc14:	4638      	mov	r0, r7
 800dc16:	f7ff fd99 	bl	800d74c <_free_r>
 800dc1a:	e7e9      	b.n	800dbf0 <_realloc_r+0x1c>
 800dc1c:	4635      	mov	r5, r6
 800dc1e:	e7e7      	b.n	800dbf0 <_realloc_r+0x1c>

0800dc20 <_malloc_usable_size_r>:
 800dc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc24:	1f18      	subs	r0, r3, #4
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	bfbc      	itt	lt
 800dc2a:	580b      	ldrlt	r3, [r1, r0]
 800dc2c:	18c0      	addlt	r0, r0, r3
 800dc2e:	4770      	bx	lr

0800dc30 <sqrtf>:
 800dc30:	b510      	push	{r4, lr}
 800dc32:	ed2d 8b02 	vpush	{d8}
 800dc36:	b08a      	sub	sp, #40	; 0x28
 800dc38:	eeb0 8a40 	vmov.f32	s16, s0
 800dc3c:	f000 f848 	bl	800dcd0 <__ieee754_sqrtf>
 800dc40:	4b21      	ldr	r3, [pc, #132]	; (800dcc8 <sqrtf+0x98>)
 800dc42:	f993 4000 	ldrsb.w	r4, [r3]
 800dc46:	1c63      	adds	r3, r4, #1
 800dc48:	d02c      	beq.n	800dca4 <sqrtf+0x74>
 800dc4a:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc52:	d627      	bvs.n	800dca4 <sqrtf+0x74>
 800dc54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5c:	d522      	bpl.n	800dca4 <sqrtf+0x74>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	4b1a      	ldr	r3, [pc, #104]	; (800dccc <sqrtf+0x9c>)
 800dc64:	9301      	str	r3, [sp, #4]
 800dc66:	ee18 0a10 	vmov	r0, s16
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	9308      	str	r3, [sp, #32]
 800dc6e:	f7f2 fc6b 	bl	8000548 <__aeabi_f2d>
 800dc72:	2200      	movs	r2, #0
 800dc74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	b9ac      	cbnz	r4, 800dcac <sqrtf+0x7c>
 800dc80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dc84:	4668      	mov	r0, sp
 800dc86:	f000 f826 	bl	800dcd6 <matherr>
 800dc8a:	b1b8      	cbz	r0, 800dcbc <sqrtf+0x8c>
 800dc8c:	9b08      	ldr	r3, [sp, #32]
 800dc8e:	b11b      	cbz	r3, 800dc98 <sqrtf+0x68>
 800dc90:	f7fc fa64 	bl	800a15c <__errno>
 800dc94:	9b08      	ldr	r3, [sp, #32]
 800dc96:	6003      	str	r3, [r0, #0]
 800dc98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc9c:	f7f2 ffa4 	bl	8000be8 <__aeabi_d2f>
 800dca0:	ee00 0a10 	vmov	s0, r0
 800dca4:	b00a      	add	sp, #40	; 0x28
 800dca6:	ecbd 8b02 	vpop	{d8}
 800dcaa:	bd10      	pop	{r4, pc}
 800dcac:	4610      	mov	r0, r2
 800dcae:	4619      	mov	r1, r3
 800dcb0:	f7f2 fdcc 	bl	800084c <__aeabi_ddiv>
 800dcb4:	2c02      	cmp	r4, #2
 800dcb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dcba:	d1e3      	bne.n	800dc84 <sqrtf+0x54>
 800dcbc:	f7fc fa4e 	bl	800a15c <__errno>
 800dcc0:	2321      	movs	r3, #33	; 0x21
 800dcc2:	6003      	str	r3, [r0, #0]
 800dcc4:	e7e2      	b.n	800dc8c <sqrtf+0x5c>
 800dcc6:	bf00      	nop
 800dcc8:	200001e0 	.word	0x200001e0
 800dccc:	0800e12e 	.word	0x0800e12e

0800dcd0 <__ieee754_sqrtf>:
 800dcd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dcd4:	4770      	bx	lr

0800dcd6 <matherr>:
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	4770      	bx	lr
	...

0800dcdc <_init>:
 800dcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcde:	bf00      	nop
 800dce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce2:	bc08      	pop	{r3}
 800dce4:	469e      	mov	lr, r3
 800dce6:	4770      	bx	lr

0800dce8 <_fini>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	bf00      	nop
 800dcec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcee:	bc08      	pop	{r3}
 800dcf0:	469e      	mov	lr, r3
 800dcf2:	4770      	bx	lr
