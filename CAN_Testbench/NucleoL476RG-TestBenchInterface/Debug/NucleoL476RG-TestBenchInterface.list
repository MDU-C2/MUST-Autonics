
NucleoL476RG-TestBenchInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007270  08007270  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007278  08007278  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a5c  20000014  08007294  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  08007294  00021a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d40f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d9  00000000  00000000  0003d453  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00040730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00041e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ec4  00000000  00000000  000433a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012629  00000000  00000000  0004726c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100753  00000000  00000000  00059895  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159fe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006120  00000000  00000000  0015a064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800715c 	.word	0x0800715c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800715c 	.word	0x0800715c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fc24 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f832 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f90e 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f8dc 	bl	80006ac <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004f4:	f000 f8a2 	bl	800063c <MX_CAN1_Init>

  /* USER CODE BEGIN 2 */
  serialMsg("\033[2J");
 80004f8:	480e      	ldr	r0, [pc, #56]	; (8000534 <main+0x54>)
 80004fa:	f000 f9b3 	bl	8000864 <serialMsg>
  serialMsg("\rInit!\n\r");
 80004fe:	480e      	ldr	r0, [pc, #56]	; (8000538 <main+0x58>)
 8000500:	f000 f9b0 	bl	8000864 <serialMsg>
  //CAN_filterConfig();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f004 f83e 	bl	8004584 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x5c>)
 800050a:	2100      	movs	r1, #0
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x60>)
 800050e:	f004 f8a3 	bl	8004658 <osThreadNew>
 8000512:	4602      	mov	r2, r0
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <main+0x64>)
 8000516:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadNew(thread_transmit, NULL, &defaultTask_attributes);
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x5c>)
 800051a:	2100      	movs	r1, #0
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <main+0x68>)
 800051e:	f004 f89b 	bl	8004658 <osThreadNew>
  osThreadNew(thread_receive, NULL, &defaultTask_attributes);
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <main+0x5c>)
 8000524:	2100      	movs	r1, #0
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x6c>)
 8000528:	f004 f896 	bl	8004658 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f004 f85e 	bl	80045ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x50>
 8000532:	bf00      	nop
 8000534:	0800719c 	.word	0x0800719c
 8000538:	080071a4 	.word	0x080071a4
 800053c:	08007204 	.word	0x08007204
 8000540:	080009a5 	.word	0x080009a5
 8000544:	200018f0 	.word	0x200018f0
 8000548:	08000801 	.word	0x08000801
 800054c:	08000845 	.word	0x08000845

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b0b8      	sub	sp, #224	; 0xe0
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fdf3 	bl	800714a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2288      	movs	r2, #136	; 0x88
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 fde5 	bl	800714a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2310      	movs	r3, #16
 8000590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fd6a 	bl	800209c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 fa13 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f936 	bl	8002868 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000602:	f000 f9f9 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000606:	2302      	movs	r3, #2
 8000608:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800060a:	2300      	movs	r3, #0
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fb5f 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800061c:	f000 f9ec 	bl	80009f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000620:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000624:	f001 fce4 	bl	8001ff0 <HAL_PWREx_ControlVoltageScaling>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800062e:	f000 f9e3 	bl	80009f8 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	37e0      	adds	r7, #224	; 0xe0
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000642:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <MX_CAN1_Init+0x6c>)
 8000644:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1000;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_CAN1_Init+0x68>)
 800065c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000660:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_CAN1_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000670:	2200      	movs	r2, #0
 8000672:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000676:	2200      	movs	r2, #0
 8000678:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_CAN1_Init+0x68>)
 800067c:	2200      	movs	r2, #0
 800067e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000682:	2200      	movs	r2, #0
 8000684:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_CAN1_Init+0x68>)
 8000688:	2200      	movs	r2, #0
 800068a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_CAN1_Init+0x68>)
 800068e:	f000 fbb1 	bl	8000df4 <HAL_CAN_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000698:	f000 f9ae 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_filterConfig();
 800069c:	f000 f962 	bl	8000964 <CAN_filterConfig>
  /* USER CODE END CAN1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20001984 	.word	0x20001984
 80006a8:	40006400 	.word	0x40006400

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART2_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006f0:	f003 fa72 	bl	8003bd8 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f97d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20001904 	.word	0x20001904
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_GPIO_Init+0xe4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_GPIO_Init+0xe4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f001 fc0b 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_GPIO_Init+0xe8>)
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4815      	ldr	r0, [pc, #84]	; (80007f8 <MX_GPIO_Init+0xec>)
 80007a4:	f001 fa56 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a8:	2320      	movs	r3, #32
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f001 fa47 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007cc:	2312      	movs	r3, #18
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d8:	2304      	movs	r3, #4
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_GPIO_Init+0xf0>)
 80007e4:	f001 fa36 	bl	8001c54 <HAL_GPIO_Init>

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40021000 	.word	0x40021000
 80007f4:	10210000 	.word	0x10210000
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48000400 	.word	0x48000400

08000800 <thread_transmit>:

/* USER CODE BEGIN 4 */


void thread_transmit(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
	//periodically send CAN messages, also some UART
	while(HAL_CAN_Start(&hcan1)!=HAL_OK){}
 8000806:	bf00      	nop
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <thread_transmit+0x3c>)
 800080a:	f000 fcb8 	bl	800117e <HAL_CAN_Start>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f9      	bne.n	8000808 <thread_transmit+0x8>

	TickType_t pxLastWaketime = xTaskGetTickCount();
 8000814:	f005 f90a 	bl	8005a2c <xTaskGetTickCount>
 8000818:	4603      	mov	r3, r0
 800081a:	60fb      	str	r3, [r7, #12]
	TickType_t xTimeIncrement = 100;
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	617b      	str	r3, [r7, #20]

	int iter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
	char someString[] = "Iter i";
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <thread_transmit+0x40>)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082c:	6018      	str	r0, [r3, #0]
 800082e:	3304      	adds	r3, #4
 8000830:	8019      	strh	r1, [r3, #0]
 8000832:	3302      	adds	r3, #2
 8000834:	0c0a      	lsrs	r2, r1, #16
 8000836:	701a      	strb	r2, [r3, #0]

	for( ;; ){}
 8000838:	e7fe      	b.n	8000838 <thread_transmit+0x38>
 800083a:	bf00      	nop
 800083c:	20001984 	.word	0x20001984
 8000840:	080071b0 	.word	0x080071b0

08000844 <thread_receive>:

		vTaskDelayUntil(&pxLastWaketime, xTimeIncrement);
	}
}

void thread_receive(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
	//check received CAN messages.
	//If received, UART message and send ACK
	TickType_t pxLastWaketime = xTaskGetTickCount();
 800084a:	f005 f8ef 	bl	8005a2c <xTaskGetTickCount>
 800084e:	4603      	mov	r3, r0
 8000850:	603b      	str	r3, [r7, #0]
	TickType_t xTimeIncrement = 500;
 8000852:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000856:	607b      	str	r3, [r7, #4]
	//char someString[] = "Received ";


	for( ;; ){
		//CAN_Rx();
		vTaskDelayUntil(&pxLastWaketime, xTimeIncrement);
 8000858:	463b      	mov	r3, r7
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4618      	mov	r0, r3
 800085e:	f004 ff29 	bl	80056b4 <vTaskDelayUntil>
 8000862:	e7f9      	b.n	8000858 <thread_receive+0x14>

08000864 <serialMsg>:
	}
}


//Send message on USART2 (USB 115200)
void serialMsg(char msg[]){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fcaf 	bl	80001d0 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <serialMsg+0x28>)
 800087e:	f003 f9f9 	bl	8003c74 <HAL_UART_Transmit>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20001904 	.word	0x20001904

08000890 <CAN_Tx>:

void CAN_Tx(char msg[]){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

	if(sizeof(*msg)<=8){
		TxHeader.DLC = 8;                         //Specifies the length of the frame that will be transmitted.
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <CAN_Tx+0x64>)
 800089a:	2208      	movs	r2, #8
 800089c:	611a      	str	r2, [r3, #16]
		//TxHeader.IDE = CAN_ID_EXT;                //Specifies the type of identifier for the message that will be transmitted.
		TxHeader.IDE = CAN_ID_STD;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <CAN_Tx+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;              //Specifies the type of frame for the message that will be transmitted.
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <CAN_Tx+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = OwnID;                   //Specifies the standard identifier.
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <CAN_Tx+0x68>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <CAN_Tx+0x64>)
 80008b2:	601a      	str	r2, [r3, #0]
		TxHeader.TransmitGlobalTime = DISABLE;    
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <CAN_Tx+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	751a      	strb	r2, [r3, #20]
		TxHeader.ExtId = 1;                       //Specifies the extended identifier. 
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <CAN_Tx+0x64>)
 80008bc:	2201      	movs	r2, #1
 80008be:	605a      	str	r2, [r3, #4]
		uint32_t TxMailBox;                       //Outgoing mail box


		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)msg, &TxMailBox) != HAL_OK) {
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	490b      	ldr	r1, [pc, #44]	; (80008f4 <CAN_Tx+0x64>)
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <CAN_Tx+0x6c>)
 80008ca:	f000 fc9c 	bl	8001206 <HAL_CAN_AddTxMessage>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <CAN_Tx+0x48>
			Error_Handler();
 80008d4:	f000 f890 	bl	80009f8 <Error_Handler>
		}

//		if(HAL_CAN_IsSleepActive(&hcan1))
//			HAL_CAN_WakeUp(&hcan1);

		while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));//Wait for message to be sent. 
 80008d8:	bf00      	nop
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4619      	mov	r1, r3
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <CAN_Tx+0x6c>)
 80008e0:	f000 fd6c 	bl	80013bc <HAL_CAN_IsTxMessagePending>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1f7      	bne.n	80008da <CAN_Tx+0x4a>
      serialMsg("CAN Packet size too large. Packet size ");
      serialMsg((char*)sizeof(*msg));
      serialMsg(" Bytes.\n\r");
    }
  }
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200019ac 	.word	0x200019ac
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20001984 	.word	0x20001984

08000900 <CAN_Rx>:

void CAN_Rx(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

	uint8_t receivedData[8];
	RxHeader.DLC = 8;             //Specifies the length of the frame that will be received.
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <CAN_Rx+0x54>)
 8000908:	2208      	movs	r2, #8
 800090a:	611a      	str	r2, [r3, #16]
	//RxHeader.IDE = CAN_ID_EXT;    //Specifies the type of identifier for the message that will be received.
	RxHeader.IDE = CAN_ID_STD;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <CAN_Rx+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;  //Specifies the type of frame for the message that will be received.
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <CAN_Rx+0x54>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x0;         //Specifies the standard identifier. Has no use when receiving. 
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <CAN_Rx+0x54>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]

//Receive the messsage
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, receivedData) != HAL_OK){
 800091e:	463b      	mov	r3, r7
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <CAN_Rx+0x54>)
 8000922:	2100      	movs	r1, #0
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <CAN_Rx+0x58>)
 8000926:	f000 fd6d 	bl	8001404 <HAL_CAN_GetRxMessage>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10d      	bne.n	800094c <CAN_Rx+0x4c>
		//Error_Handler();
		return;
	}
	else {

	HAL_Delay(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fa3d 	bl	8000db0 <HAL_Delay>
	serialMsg("Rx: ");
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <CAN_Rx+0x5c>)
 8000938:	f7ff ff94 	bl	8000864 <serialMsg>
	serialMsg((char*)receivedData);
 800093c:	463b      	mov	r3, r7
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff90 	bl	8000864 <serialMsg>
	serialMsg("\n\r");
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <CAN_Rx+0x60>)
 8000946:	f7ff ff8d 	bl	8000864 <serialMsg>
 800094a:	e000      	b.n	800094e <CAN_Rx+0x4e>
		return;
 800094c:	bf00      	nop
  if(DEBUG_MODE){
		//serialMsg("Received message: ");
		//serialMsg((char*)receivedData);
		//serialMsg("\n\r");
  }
}
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200019c4 	.word	0x200019c4
 8000958:	20001984 	.word	0x20001984
 800095c:	080071b8 	.word	0x080071b8
 8000960:	080071c0 	.word	0x080071c0

08000964 <CAN_filterConfig>:

void CAN_filterConfig(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 0;                              //Specifies the filter bank which will be initialized.
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
	filterConfig.FilterActivation = ENABLE;                   //Enable or disable the filter.
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;     //Specifies the FIFO (0 or 1U) which will be assigned to the filter.
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0x0000;                       //Specifies the filter identification number. 
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;                        //Specifies the filter identification number. 
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;                   //Specifies the filter mask number or identification number, according to the mode.
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;                    //Specifies the filter mask number or identification number, according to the mode.
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;          //Specifies the filter mode to be initialized.
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;         //Specifies the filter scale.
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <CAN_filterConfig+0x3c>)
 8000994:	f000 fb29 	bl	8000fea <HAL_CAN_ConfigFilter>
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20001984 	.word	0x20001984

080009a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	serialMsg("DefaultTask started\n\r");
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <StartDefaultTask+0x24>)
 80009ae:	f7ff ff59 	bl	8000864 <serialMsg>
	/* Infinite loop */
  for(;;)
  {

	  CAN_Tx("Yeet");
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <StartDefaultTask+0x28>)
 80009b4:	f7ff ff6c 	bl	8000890 <CAN_Tx>
	  serialMsg("Yeet\n\r");
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <StartDefaultTask+0x2c>)
 80009ba:	f7ff ff53 	bl	8000864 <serialMsg>
	  osDelay(100);
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f003 fef0 	bl	80047a4 <osDelay>
	  CAN_Tx("Yeet");
 80009c4:	e7f5      	b.n	80009b2 <StartDefaultTask+0xe>
 80009c6:	bf00      	nop
 80009c8:	080071c4 	.word	0x080071c4
 80009cc:	080071dc 	.word	0x080071dc
 80009d0:	080071e4 	.word	0x080071e4

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 f9c3 	bl	8000d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40001000 	.word	0x40001000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fe:	e7fe      	b.n	80009fe <Error_Handler+0x6>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f001 f8df 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_CAN_MspInit+0x90>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d131      	bne.n	8000ad6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ab4:	2309      	movs	r3, #9
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f001 f8c7 	bl	8001c54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2014      	movs	r0, #20
 8000acc:	f001 f898 	bl	8001c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ad0:	2014      	movs	r0, #20
 8000ad2:	f001 f8b1 	bl	8001c38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40006400 	.word	0x40006400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_UART_MspInit+0x7c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d128      	bne.n	8000b5c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x80>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <HAL_UART_MspInit+0x80>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_UART_MspInit+0x80>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x80>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x80>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x80>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f001 f87c 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2036      	movs	r0, #54	; 0x36
 8000b82:	f001 f83d 	bl	8001c00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b86:	2036      	movs	r0, #54	; 0x36
 8000b88:	f001 f856 	bl	8001c38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <HAL_InitTick+0x9c>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <HAL_InitTick+0x9c>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6593      	str	r3, [r2, #88]	; 0x58
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_InitTick+0x9c>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba4:	f107 0210 	add.w	r2, r7, #16
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fffe 	bl	8002bb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bb4:	f001 ffd0 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 8000bb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <HAL_InitTick+0xa0>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	0c9b      	lsrs	r3, r3, #18
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_InitTick+0xa4>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <HAL_InitTick+0xa8>)
 8000bcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_InitTick+0xa4>)
 8000bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_InitTick+0xa4>)
 8000bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_InitTick+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_InitTick+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <HAL_InitTick+0xa4>)
 8000bea:	f002 fd23 	bl	8003634 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d104      	bne.n	8000bfe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <HAL_InitTick+0xa4>)
 8000bf6:	f002 fd7f 	bl	80036f8 <HAL_TIM_Base_Start_IT>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3730      	adds	r7, #48	; 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	200019e0 	.word	0x200019e0
 8000c14:	40001000 	.word	0x40001000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <CAN1_RX0_IRQHandler+0x14>)
 8000c4a:	f000 fced 	bl	8001628 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 8000c4e:	f7ff fe57 	bl	8000900 <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20001984 	.word	0x20001984

08000c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM6_DAC_IRQHandler+0x10>)
 8000c62:	f002 fdb9 	bl	80037d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200019e0 	.word	0x200019e0

08000c70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <SystemInit+0x64>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <SystemInit+0x64>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <SystemInit+0x68>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <SystemInit+0x68>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <SystemInit+0x68>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SystemInit+0x68>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <SystemInit+0x68>)
 8000c9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ca0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ca4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <SystemInit+0x68>)
 8000ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SystemInit+0x68>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <SystemInit+0x68>)
 8000cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <SystemInit+0x68>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SystemInit+0x64>)
 8000cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00
 8000cd8:	40021000 	.word	0x40021000

08000cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce0:	f7ff ffc6 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ce6:	e003      	b.n	8000cf0 <LoopCopyDataInit>

08000ce8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cee:	3104      	adds	r1, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cf8:	d3f6      	bcc.n	8000ce8 <CopyDataInit>
	ldr	r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cfc:	e002      	b.n	8000d04 <LoopFillZerobss>

08000cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d00:	f842 3b04 	str.w	r3, [r2], #4

08000d04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <LoopForever+0x16>)
	cmp	r2, r3
 8000d06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d08:	d3f9      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f006 f9ef 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0e:	f7ff fbe7 	bl	80004e0 <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d14:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d18:	08007280 	.word	0x08007280
	ldr	r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d20:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000d24:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000d28:	20001a70 	.word	0x20001a70

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_Init+0x3c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <HAL_Init+0x3c>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d46:	2003      	movs	r0, #3
 8000d48:	f000 ff4f 	bl	8001bea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff0d 	bl	8000b6c <HAL_InitTick>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	e001      	b.n	8000d62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5e:	f7ff fe4f 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20001a2c 	.word	0x20001a2c

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20001a2c 	.word	0x20001a2c

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_Delay+0x40>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e0ed      	b.n	8000fe2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fe1c 	bl	8000a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0202 	bic.w	r2, r2, #2
 8000e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e28:	f7ff ffb6 	bl	8000d98 <HAL_GetTick>
 8000e2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e2e:	e012      	b.n	8000e56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e30:	f7ff ffb2 	bl	8000d98 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	d90b      	bls.n	8000e56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2205      	movs	r2, #5
 8000e4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0c5      	b.n	8000fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e5      	bne.n	8000e30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0201 	orr.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e74:	f7ff ff90 	bl	8000d98 <HAL_GetTick>
 8000e78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7a:	e012      	b.n	8000ea2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e7c:	f7ff ff8c 	bl	8000d98 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b0a      	cmp	r3, #10
 8000e88:	d90b      	bls.n	8000ea2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2205      	movs	r2, #5
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e09f      	b.n	8000fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0e5      	beq.n	8000e7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7e1b      	ldrb	r3, [r3, #24]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d108      	bne.n	8000eca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e007      	b.n	8000eda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7e5b      	ldrb	r3, [r3, #25]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e007      	b.n	8000f04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7e9b      	ldrb	r3, [r3, #26]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d108      	bne.n	8000f1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0220 	orr.w	r2, r2, #32
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0220 	bic.w	r2, r2, #32
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7edb      	ldrb	r3, [r3, #27]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d108      	bne.n	8000f48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0210 	bic.w	r2, r2, #16
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0210 	orr.w	r2, r2, #16
 8000f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7f1b      	ldrb	r3, [r3, #28]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d108      	bne.n	8000f72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0208 	orr.w	r2, r2, #8
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e007      	b.n	8000f82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0208 	bic.w	r2, r2, #8
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7f5b      	ldrb	r3, [r3, #29]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d108      	bne.n	8000f9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0204 	orr.w	r2, r2, #4
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e007      	b.n	8000fac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0204 	bic.w	r2, r2, #4
 8000faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	ea42 0103 	orr.w	r1, r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	1e5a      	subs	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b087      	sub	sp, #28
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001000:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001002:	7cfb      	ldrb	r3, [r7, #19]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d003      	beq.n	8001010 <HAL_CAN_ConfigFilter+0x26>
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	2b02      	cmp	r3, #2
 800100c:	f040 80aa 	bne.w	8001164 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2201      	movs	r2, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d123      	bne.n	8001092 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	401a      	ands	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800106c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3248      	adds	r2, #72	; 0x48
 8001072:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001086:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001088:	6979      	ldr	r1, [r7, #20]
 800108a:	3348      	adds	r3, #72	; 0x48
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d122      	bne.n	80010e0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3248      	adds	r2, #72	; 0x48
 80010c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d6:	6979      	ldr	r1, [r7, #20]
 80010d8:	3348      	adds	r3, #72	; 0x48
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010fa:	e007      	b.n	800110c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001126:	e007      	b.n	8001138 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	431a      	orrs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d107      	bne.n	8001150 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001156:	f023 0201 	bic.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	e006      	b.n	8001172 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
  }
}
 8001172:	4618      	mov	r0, r3
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d12e      	bne.n	80011f0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011aa:	f7ff fdf5 	bl	8000d98 <HAL_GetTick>
 80011ae:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011b0:	e012      	b.n	80011d8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b2:	f7ff fdf1 	bl	8000d98 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d90b      	bls.n	80011d8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2205      	movs	r2, #5
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e012      	b.n	80011fe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e5      	bne.n	80011b2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e006      	b.n	80011fe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
  }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001206:	b480      	push	{r7}
 8001208:	b089      	sub	sp, #36	; 0x24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d003      	beq.n	8001232 <HAL_CAN_AddTxMessage+0x2c>
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	2b02      	cmp	r3, #2
 800122e:	f040 80b8 	bne.w	80013a2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10a      	bne.n	8001252 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a0 	beq.w	8001392 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	0e1b      	lsrs	r3, r3, #24
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d907      	bls.n	8001272 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e09e      	b.n	80013b0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001272:	2201      	movs	r2, #1
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10d      	bne.n	80012a0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800128e:	68f9      	ldr	r1, [r7, #12]
 8001290:	6809      	ldr	r1, [r1, #0]
 8001292:	431a      	orrs	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3318      	adds	r3, #24
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	440b      	add	r3, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e00f      	b.n	80012c0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012aa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b0:	68f9      	ldr	r1, [r7, #12]
 80012b2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012b4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3318      	adds	r3, #24
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	440b      	add	r3, r1
 80012be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3318      	adds	r3, #24
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	440b      	add	r3, r1
 80012d0:	3304      	adds	r3, #4
 80012d2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	7d1b      	ldrb	r3, [r3, #20]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d111      	bne.n	8001300 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3318      	adds	r3, #24
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	6811      	ldr	r1, [r2, #0]
 80012f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3318      	adds	r3, #24
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	440b      	add	r3, r1
 80012fc:	3304      	adds	r3, #4
 80012fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3307      	adds	r3, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	061a      	lsls	r2, r3, #24
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3306      	adds	r3, #6
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3305      	adds	r3, #5
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	4313      	orrs	r3, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	3204      	adds	r2, #4
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	4610      	mov	r0, r2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	6811      	ldr	r1, [r2, #0]
 8001328:	ea43 0200 	orr.w	r2, r3, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	440b      	add	r3, r1
 8001332:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001336:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3303      	adds	r3, #3
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	061a      	lsls	r2, r3, #24
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3302      	adds	r3, #2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	041b      	lsls	r3, r3, #16
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3301      	adds	r3, #1
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	4313      	orrs	r3, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	4610      	mov	r0, r2
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	6811      	ldr	r1, [r2, #0]
 800135e:	ea43 0200 	orr.w	r2, r3, r0
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	440b      	add	r3, r1
 8001368:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800136c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3318      	adds	r3, #24
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	6811      	ldr	r1, [r2, #0]
 8001380:	f043 0201 	orr.w	r2, r3, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3318      	adds	r3, #24
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	440b      	add	r3, r1
 800138c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e00e      	b.n	80013b0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e006      	b.n	80013b0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
  }
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3724      	adds	r7, #36	; 0x24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d2:	7afb      	ldrb	r3, [r7, #11]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d002      	beq.n	80013de <HAL_CAN_IsTxMessagePending+0x22>
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d10b      	bne.n	80013f6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	069b      	lsls	r3, r3, #26
 80013e8:	401a      	ands	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	069b      	lsls	r3, r3, #26
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d001      	beq.n	80013f6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d003      	beq.n	8001428 <HAL_CAN_GetRxMessage+0x24>
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b02      	cmp	r3, #2
 8001424:	f040 80f3 	bne.w	800160e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10e      	bne.n	800144c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d116      	bne.n	800146a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0e7      	b.n	800161c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d107      	bne.n	800146a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0d8      	b.n	800161c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	331b      	adds	r3, #27
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0204 	and.w	r2, r3, #4
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	331b      	adds	r3, #27
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e00b      	b.n	80014ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	331b      	adds	r3, #27
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	331b      	adds	r3, #27
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0202 	and.w	r2, r3, #2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	331b      	adds	r3, #27
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	3304      	adds	r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 020f 	and.w	r2, r3, #15
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	331b      	adds	r3, #27
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4413      	add	r3, r2
 80014f4:	3304      	adds	r3, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	331b      	adds	r3, #27
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0c1b      	lsrs	r3, r3, #16
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0a1a      	lsrs	r2, r3, #8
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0c1a      	lsrs	r2, r3, #16
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3302      	adds	r3, #2
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0e1a      	lsrs	r2, r3, #24
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3303      	adds	r3, #3
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	4413      	add	r3, r2
 8001586:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3304      	adds	r3, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0a1a      	lsrs	r2, r3, #8
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3305      	adds	r3, #5
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0c1a      	lsrs	r2, r3, #16
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3306      	adds	r3, #6
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0e1a      	lsrs	r2, r3, #24
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3307      	adds	r3, #7
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d108      	bne.n	80015fa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0220 	orr.w	r2, r2, #32
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	e007      	b.n	800160a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0220 	orr.w	r2, r2, #32
 8001608:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e006      	b.n	800161c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
  }
}
 800161c:	4618      	mov	r0, r3
 800161e:	371c      	adds	r7, #28
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d07c      	beq.n	8001768 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f97d 	bl	800198a <HAL_CAN_TxMailbox0CompleteCallback>
 8001690:	e016      	b.n	80016c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	e00c      	b.n	80016c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	e002      	b.n	80016c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f983 	bl	80019c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d024      	beq.n	8001714 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f95d 	bl	800199e <HAL_CAN_TxMailbox1CompleteCallback>
 80016e4:	e016      	b.n	8001714 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e00c      	b.n	8001714 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	e002      	b.n	8001714 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f963 	bl	80019da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d024      	beq.n	8001768 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001726:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f93d 	bl	80019b2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001738:	e016      	b.n	8001768 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	e00c      	b.n	8001768 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
 8001760:	e002      	b.n	8001768 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f943 	bl	80019ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00c      	beq.n	800178c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001782:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2210      	movs	r2, #16
 800178a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2208      	movs	r2, #8
 80017a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f934 	bl	8001a16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d009      	beq.n	80017cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f91b 	bl	8001a02 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2210      	movs	r2, #16
 80017ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2208      	movs	r2, #8
 800180a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f916 	bl	8001a3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	d009      	beq.n	8001830 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f8fd 	bl	8001a2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f900 	bl	8001a52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2208      	movs	r2, #8
 800186c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f8f9 	bl	8001a66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d075      	beq.n	800196a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d06c      	beq.n	8001962 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d008      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03d      	beq.n	8001962 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d038      	beq.n	8001962 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018f6:	2b30      	cmp	r3, #48	; 0x30
 80018f8:	d017      	beq.n	800192a <HAL_CAN_IRQHandler+0x302>
 80018fa:	2b30      	cmp	r3, #48	; 0x30
 80018fc:	d804      	bhi.n	8001908 <HAL_CAN_IRQHandler+0x2e0>
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d009      	beq.n	8001916 <HAL_CAN_IRQHandler+0x2ee>
 8001902:	2b20      	cmp	r3, #32
 8001904:	d00c      	beq.n	8001920 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001906:	e024      	b.n	8001952 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001908:	2b50      	cmp	r3, #80	; 0x50
 800190a:	d018      	beq.n	800193e <HAL_CAN_IRQHandler+0x316>
 800190c:	2b60      	cmp	r3, #96	; 0x60
 800190e:	d01b      	beq.n	8001948 <HAL_CAN_IRQHandler+0x320>
 8001910:	2b40      	cmp	r3, #64	; 0x40
 8001912:	d00f      	beq.n	8001934 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001914:	e01d      	b.n	8001952 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800191e:	e018      	b.n	8001952 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001928:	e013      	b.n	8001952 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001932:	e00e      	b.n	8001952 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193c:	e009      	b.n	8001952 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001946:	e004      	b.n	8001952 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001950:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699a      	ldr	r2, [r3, #24]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001960:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2204      	movs	r2, #4
 8001968:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f87c 	bl	8001a7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff4c 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c12:	f7ff ff61 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	f7ff ffb1 	bl	8001b84 <NVIC_EncodePriority>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff80 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff54 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	e17f      	b.n	8001f64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8171 	beq.w	8001f5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d00b      	beq.n	8001c9c <HAL_GPIO_Init+0x48>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d007      	beq.n	8001c9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c90:	2b11      	cmp	r3, #17
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d130      	bne.n	8001cfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 0201 	and.w	r2, r3, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d118      	bne.n	8001d3c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d10:	2201      	movs	r2, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x128>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d123      	bne.n	8001dc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	6939      	ldr	r1, [r7, #16]
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80ac 	beq.w	8001f5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a5d      	ldr	r2, [pc, #372]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e1e:	4a59      	ldr	r2, [pc, #356]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x242>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x23e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x338>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x23a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x33c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x236>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_GPIO_Init+0x340>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x232>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x344>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x22e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a49      	ldr	r2, [pc, #292]	; (8001f9c <HAL_GPIO_Init+0x348>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x22a>
 8001e7a:	2306      	movs	r3, #6
 8001e7c:	e00c      	b.n	8001e98 <HAL_GPIO_Init+0x244>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00a      	b.n	8001e98 <HAL_GPIO_Init+0x244>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x244>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x244>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x244>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x244>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x244>
 8001e96:	2300      	movs	r3, #0
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	f002 0203 	and.w	r2, r2, #3
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea8:	4936      	ldr	r1, [pc, #216]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eda:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f04:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_GPIO_Init+0x34c>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f ae78 	bne.w	8001c64 <HAL_GPIO_Init+0x10>
  }
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000
 8001f88:	48000400 	.word	0x48000400
 8001f8c:	48000800 	.word	0x48000800
 8001f90:	48000c00 	.word	0x48000c00
 8001f94:	48001000 	.word	0x48001000
 8001f98:	48001400 	.word	0x48001400
 8001f9c:	48001800 	.word	0x48001800
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc0:	e002      	b.n	8001fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <HAL_PWREx_GetVoltageRange+0x18>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40007000 	.word	0x40007000

08001ff0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ffe:	d130      	bne.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800200c:	d038      	beq.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002016:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2232      	movs	r2, #50	; 0x32
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	3301      	adds	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002034:	e002      	b.n	800203c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3b01      	subs	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002048:	d102      	bne.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x60>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f2      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205c:	d110      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e00f      	b.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206e:	d007      	beq.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002078:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40007000 	.word	0x40007000
 8002094:	20000004 	.word	0x20000004
 8002098:	431bde83 	.word	0x431bde83

0800209c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e3d4      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ae:	4ba1      	ldr	r3, [pc, #644]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b8:	4b9e      	ldr	r3, [pc, #632]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80e4 	beq.w	8002298 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_RCC_OscConfig+0x4a>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	f040 808b 	bne.w	80021f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	f040 8087 	bne.w	80021f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e6:	4b93      	ldr	r3, [pc, #588]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x62>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e3ac      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_RCC_OscConfig+0x7c>
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002116:	e005      	b.n	8002124 <HAL_RCC_OscConfig+0x88>
 8002118:	4b86      	ldr	r3, [pc, #536]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002124:	4293      	cmp	r3, r2
 8002126:	d223      	bcs.n	8002170 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fd71 	bl	8002c14 <RCC_SetFlashLatencyFromMSIRange>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e38d      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800213c:	4b7d      	ldr	r3, [pc, #500]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a7c      	ldr	r2, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4977      	ldr	r1, [pc, #476]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215a:	4b76      	ldr	r3, [pc, #472]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4972      	ldr	r1, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
 800216e:	e025      	b.n	80021bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6f      	ldr	r2, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	496a      	ldr	r1, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218e:	4b69      	ldr	r3, [pc, #420]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	4965      	ldr	r1, [pc, #404]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fd31 	bl	8002c14 <RCC_SetFlashLatencyFromMSIRange>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e34d      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021bc:	f000 fc36 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80021c0:	4601      	mov	r1, r0
 80021c2:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	4a5a      	ldr	r2, [pc, #360]	; (8002338 <HAL_RCC_OscConfig+0x29c>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	fa21 f303 	lsr.w	r3, r1, r3
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_RCC_OscConfig+0x2a0>)
 80021da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021dc:	4b58      	ldr	r3, [pc, #352]	; (8002340 <HAL_RCC_OscConfig+0x2a4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fcc3 	bl	8000b6c <HAL_InitTick>
 80021e6:	4603      	mov	r3, r0
 80021e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d052      	beq.n	8002296 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	e331      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d032      	beq.n	8002262 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021fc:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002208:	f7fe fdc6 	bl	8000d98 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002210:	f7fe fdc2 	bl	8000d98 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e31a      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002222:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a40      	ldr	r2, [pc, #256]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	493b      	ldr	r1, [pc, #236]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	4936      	ldr	r1, [pc, #216]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
 8002260:	e01a      	b.n	8002298 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a33      	ldr	r2, [pc, #204]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800226e:	f7fe fd93 	bl	8000d98 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002276:	f7fe fd8f 	bl	8000d98 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e2e7      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x1da>
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002296:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d074      	beq.n	800238e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x21a>
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d10e      	bne.n	80022ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d10b      	bne.n	80022ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d064      	beq.n	800238c <HAL_RCC_OscConfig+0x2f0>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d160      	bne.n	800238c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e2c4      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x24a>
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e01d      	b.n	8002322 <HAL_RCC_OscConfig+0x286>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ee:	d10c      	bne.n	800230a <HAL_RCC_OscConfig+0x26e>
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80022f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e00b      	b.n	8002322 <HAL_RCC_OscConfig+0x286>
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_RCC_OscConfig+0x298>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01c      	beq.n	8002364 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fd35 	bl	8000d98 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002330:	e011      	b.n	8002356 <HAL_RCC_OscConfig+0x2ba>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	08007228 	.word	0x08007228
 800233c:	20000004 	.word	0x20000004
 8002340:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe fd28 	bl	8000d98 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	; 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e280      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002356:	4baf      	ldr	r3, [pc, #700]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x2a8>
 8002362:	e014      	b.n	800238e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fd18 	bl	8000d98 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fd14 	bl	8000d98 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e26c      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	4ba5      	ldr	r3, [pc, #660]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x2d0>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d060      	beq.n	800245c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x310>
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d119      	bne.n	80023da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d116      	bne.n	80023da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ac:	4b99      	ldr	r3, [pc, #612]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_OscConfig+0x328>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e249      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b93      	ldr	r3, [pc, #588]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	4990      	ldr	r1, [pc, #576]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d8:	e040      	b.n	800245c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d023      	beq.n	800242a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e2:	4b8c      	ldr	r3, [pc, #560]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a8b      	ldr	r2, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fcd3 	bl	8000d98 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe fccf 	bl	8000d98 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e227      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	4b82      	ldr	r3, [pc, #520]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	497c      	ldr	r1, [pc, #496]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
 8002428:	e018      	b.n	800245c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	4b7a      	ldr	r3, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a79      	ldr	r2, [pc, #484]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe fcaf 	bl	8000d98 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe fcab 	bl	8000d98 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e203      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002450:	4b70      	ldr	r3, [pc, #448]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01c      	beq.n	80024aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	4a67      	ldr	r2, [pc, #412]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe fc8a 	bl	8000d98 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe fc86 	bl	8000d98 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1de      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249a:	4b5e      	ldr	r3, [pc, #376]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 800249c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ef      	beq.n	8002488 <HAL_RCC_OscConfig+0x3ec>
 80024a8:	e01b      	b.n	80024e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80024ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b0:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe fc6d 	bl	8000d98 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c2:	f7fe fc69 	bl	8000d98 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1c1      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ef      	bne.n	80024c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80a6 	beq.w	800263c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f4:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002500:	4b44      	ldr	r3, [pc, #272]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	4a43      	ldr	r2, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250a:	6593      	str	r3, [r2, #88]	; 0x58
 800250c:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002518:	2301      	movs	r3, #1
 800251a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251c:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCC_OscConfig+0x57c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d118      	bne.n	800255a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x57c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <HAL_RCC_OscConfig+0x57c>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002534:	f7fe fc30 	bl	8000d98 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fc2c 	bl	8000d98 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e184      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCC_OscConfig+0x57c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <HAL_RCC_OscConfig+0x4d8>
 8002562:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002572:	e024      	b.n	80025be <HAL_RCC_OscConfig+0x522>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d110      	bne.n	800259e <HAL_RCC_OscConfig+0x502>
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800258c:	4b21      	ldr	r3, [pc, #132]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a20      	ldr	r2, [pc, #128]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259c:	e00f      	b.n	80025be <HAL_RCC_OscConfig+0x522>
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80025b6:	f023 0304 	bic.w	r3, r3, #4
 80025ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fbe7 	bl	8000d98 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe fbe3 	bl	8000d98 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e139      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x578>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ed      	beq.n	80025ce <HAL_RCC_OscConfig+0x532>
 80025f2:	e01a      	b.n	800262a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fbd0 	bl	8000d98 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025fa:	e00f      	b.n	800261c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe fbcc 	bl	8000d98 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d906      	bls.n	800261c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e122      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261c:	4b90      	ldr	r3, [pc, #576]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e8      	bne.n	80025fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b8b      	ldr	r3, [pc, #556]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	4a8a      	ldr	r2, [pc, #552]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8108 	beq.w	8002856 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	2b02      	cmp	r3, #2
 800264c:	f040 80d0 	bne.w	80027f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002650:	4b83      	ldr	r3, [pc, #524]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d130      	bne.n	80026c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	3b01      	subs	r3, #1
 8002670:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d127      	bne.n	80026c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11f      	bne.n	80026c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002690:	2a07      	cmp	r2, #7
 8002692:	bf14      	ite	ne
 8002694:	2201      	movne	r2, #1
 8002696:	2200      	moveq	r2, #0
 8002698:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269a:	4293      	cmp	r3, r2
 800269c:	d113      	bne.n	80026c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	3b01      	subs	r3, #1
 80026ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d06e      	beq.n	80027a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	d069      	beq.n	80027a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026cc:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026d8:	4b61      	ldr	r3, [pc, #388]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b7      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026e8:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80026ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026f4:	f7fe fb50 	bl	8000d98 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fb4c 	bl	8000d98 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0a4      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270e:	4b54      	ldr	r3, [pc, #336]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271a:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b51      	ldr	r3, [pc, #324]	; (8002864 <HAL_RCC_OscConfig+0x7c8>)
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800272a:	3a01      	subs	r2, #1
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	4311      	orrs	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002734:	0212      	lsls	r2, r2, #8
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800273c:	0852      	lsrs	r2, r2, #1
 800273e:	3a01      	subs	r2, #1
 8002740:	0552      	lsls	r2, r2, #21
 8002742:	4311      	orrs	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002748:	0852      	lsrs	r2, r2, #1
 800274a:	3a01      	subs	r2, #1
 800274c:	0652      	lsls	r2, r2, #25
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002754:	0912      	lsrs	r2, r2, #4
 8002756:	0452      	lsls	r2, r2, #17
 8002758:	430a      	orrs	r2, r1
 800275a:	4941      	ldr	r1, [pc, #260]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800276c:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002778:	f7fe fb0e 	bl	8000d98 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fb0a 	bl	8000d98 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e062      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279e:	e05a      	b.n	8002856 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e059      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d152      	bne.n	8002856 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027bc:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027c8:	f7fe fae6 	bl	8000d98 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fae2 	bl	8000d98 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e03a      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x734>
 80027ee:	e032      	b.n	8002856 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	d02d      	beq.n	8002852 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 80027fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002800:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002814:	f023 0303 	bic.w	r3, r3, #3
 8002818:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002820:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002828:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fab5 	bl	8000d98 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe fab1 	bl	8000d98 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e009      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x7c4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x796>
 8002850:	e001      	b.n	8002856 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	f99d808c 	.word	0xf99d808c

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0c8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4961      	ldr	r1, [pc, #388]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0b0      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d04c      	beq.n	8002952 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c0:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d121      	bne.n	8002910 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e09e      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d115      	bne.n	8002910 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e092      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f0:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e086      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002900:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e07e      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002910:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 0203 	bic.w	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	493f      	ldr	r1, [pc, #252]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002922:	f7fe fa39 	bl	8000d98 <HAL_GetTick>
 8002926:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002928:	e00a      	b.n	8002940 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292a:	f7fe fa35 	bl	8000d98 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e066      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 020c 	and.w	r2, r3, #12
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	429a      	cmp	r2, r3
 8002950:	d1eb      	bne.n	800292a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295e:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	492c      	ldr	r1, [pc, #176]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d210      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4924      	ldr	r1, [pc, #144]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCC_ClockConfig+0x1b0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e036      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4918      	ldr	r1, [pc, #96]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4910      	ldr	r1, [pc, #64]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029de:	f000 f825 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029e2:	4601      	mov	r1, r0
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_RCC_ClockConfig+0x1b4>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	fa21 f303 	lsr.w	r3, r1, r3
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe f8b2 	bl	8000b6c <HAL_InitTick>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08007228 	.word	0x08007228
 8002a24:	20000004 	.word	0x20000004
 8002a28:	20000008 	.word	0x20000008

08002a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x34>
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d121      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d11e      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a60:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a88:	4a2a      	ldr	r2, [pc, #168]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d133      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xa4>
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xaa>
 8002ace:	e005      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ad2:	617b      	str	r3, [r7, #20]
      break;
 8002ad4:	e005      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ad8:	617b      	str	r3, [r7, #20]
      break;
 8002ada:	e002      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	617b      	str	r3, [r7, #20]
      break;
 8002ae0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	3301      	adds	r3, #1
 8002aee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	fb02 f203 	mul.w	r2, r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0e5b      	lsrs	r3, r3, #25
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b22:	69bb      	ldr	r3, [r7, #24]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3724      	adds	r7, #36	; 0x24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08007240 	.word	0x08007240
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	007a1200 	.word	0x007a1200

08002b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b60:	4601      	mov	r1, r0
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08007238 	.word	0x08007238

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b88:	f7ff ffda 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0adb      	lsrs	r3, r3, #11
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08007238 	.word	0x08007238

08002bb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0203 	and.w	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_GetClockConfig+0x5c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	08db      	lsrs	r3, r3, #3
 8002bea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <HAL_RCC_GetClockConfig+0x60>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0207 	and.w	r2, r3, #7
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40022000 	.word	0x40022000

08002c14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c2c:	f7ff f9d2 	bl	8001fd4 <HAL_PWREx_GetVoltageRange>
 8002c30:	6178      	str	r0, [r7, #20]
 8002c32:	e014      	b.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	4a24      	ldr	r2, [pc, #144]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c4c:	f7ff f9c2 	bl	8001fd4 <HAL_PWREx_GetVoltageRange>
 8002c50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c64:	d10b      	bne.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	d919      	bls.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c70:	d902      	bls.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c72:	2302      	movs	r3, #2
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	e013      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e010      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d902      	bls.n	8002c8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c84:	2303      	movs	r3, #3
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	e00a      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d102      	bne.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c90:	2302      	movs	r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e004      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b70      	cmp	r3, #112	; 0x70
 8002c9a:	d101      	bne.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 0207 	bic.w	r2, r3, #7
 8002ca8:	4909      	ldr	r1, [pc, #36]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40022000 	.word	0x40022000

08002cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d03f      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf8:	d01c      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfe:	d802      	bhi.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002d04:	e01f      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0a:	d003      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d10:	d01c      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002d12:	e018      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d14:	4b85      	ldr	r3, [pc, #532]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4a84      	ldr	r2, [pc, #528]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d20:	e015      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fab9 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d32:	e00c      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3320      	adds	r3, #32
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fba0 	bl	8003480 <RCCEx_PLLSAI2_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d44:	e003      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	74fb      	strb	r3, [r7, #19]
      break;
 8002d4a:	e000      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d54:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d62:	4972      	ldr	r1, [pc, #456]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d6a:	e001      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d03f      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d84:	d01c      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8a:	d802      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002d90:	e01f      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d96:	d003      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002d98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002d9e:	e018      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002da0:	4b62      	ldr	r3, [pc, #392]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a61      	ldr	r2, [pc, #388]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dac:	e015      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fa73 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbe:	e00c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3320      	adds	r3, #32
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fb5a 	bl	8003480 <RCCEx_PLLSAI2_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dd0:	e003      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002de0:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dee:	494f      	ldr	r1, [pc, #316]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002df6:	e001      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a0 	beq.w	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e30:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e4c:	f7fd ffa4 	bl	8000d98 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fd ffa0 	bl	8000d98 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	74fb      	strb	r3, [r7, #19]
        break;
 8002e66:	e005      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ef      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d15c      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e7a:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01f      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d019      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea4:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fd ff5f 	bl	8000d98 <HAL_GetTick>
 8002eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fd ff5b 	bl	8000d98 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d902      	bls.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ef4:	e006      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ec      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1a:	4904      	ldr	r1, [pc, #16]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f22:	e009      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
 8002f28:	e006      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f38:	7c7b      	ldrb	r3, [r7, #17]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b9e      	ldr	r3, [pc, #632]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4a9d      	ldr	r2, [pc, #628]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f56:	4b98      	ldr	r3, [pc, #608]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 0203 	bic.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	4994      	ldr	r1, [pc, #592]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f78:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f023 020c 	bic.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	498c      	ldr	r1, [pc, #560]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f9a:	4b87      	ldr	r3, [pc, #540]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	4983      	ldr	r1, [pc, #524]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	497b      	ldr	r1, [pc, #492]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fde:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	4972      	ldr	r1, [pc, #456]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003000:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	496a      	ldr	r1, [pc, #424]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	4961      	ldr	r1, [pc, #388]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003044:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	4959      	ldr	r1, [pc, #356]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003066:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	4950      	ldr	r1, [pc, #320]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	4948      	ldr	r1, [pc, #288]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030aa:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	493f      	ldr	r1, [pc, #252]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d028      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	4937      	ldr	r1, [pc, #220]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ea:	d106      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a31      	ldr	r2, [pc, #196]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
 80030f8:	e011      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003102:	d10c      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f8c8 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d028      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	491f      	ldr	r1, [pc, #124]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003148:	d106      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003154:	60d3      	str	r3, [r2, #12]
 8003156:	e011      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003160:	d10c      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	2101      	movs	r1, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f899 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02b      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a6:	d109      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b2:	60d3      	str	r3, [r2, #12]
 80031b4:	e014      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f867 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02f      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031fa:	4928      	ldr	r1, [pc, #160]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320a:	d10d      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	2102      	movs	r1, #2
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f844 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003222:	7cfb      	ldrb	r3, [r7, #19]
 8003224:	74bb      	strb	r3, [r7, #18]
 8003226:	e011      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003230:	d10c      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3320      	adds	r3, #32
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f921 	bl	8003480 <RCCEx_PLLSAI2_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003266:	490d      	ldr	r1, [pc, #52]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800328a:	4904      	ldr	r1, [pc, #16]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003292:	7cbb      	ldrb	r3, [r7, #18]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000

080032a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ae:	4b73      	ldr	r3, [pc, #460]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ba:	4b70      	ldr	r3, [pc, #448]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0203 	and.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d10d      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
       ||
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032d2:	4b6a      	ldr	r3, [pc, #424]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
       ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d044      	beq.n	8003370 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e041      	b.n	8003370 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d00c      	beq.n	800330e <RCCEx_PLLSAI1_Config+0x6e>
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d013      	beq.n	8003320 <RCCEx_PLLSAI1_Config+0x80>
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d120      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032fc:	4b5f      	ldr	r3, [pc, #380]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d11d      	bne.n	8003344 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330c:	e01a      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800330e:	4b5b      	ldr	r3, [pc, #364]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e013      	b.n	8003348 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003320:	4b56      	ldr	r3, [pc, #344]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10f      	bne.n	800334c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800332c:	4b53      	ldr	r3, [pc, #332]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800333c:	e006      	b.n	800334c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      break;
 8003342:	e004      	b.n	800334e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003344:	bf00      	nop
 8003346:	e002      	b.n	800334e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800334c:	bf00      	nop
    }

    if(status == HAL_OK)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003354:	4b49      	ldr	r3, [pc, #292]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	3b01      	subs	r3, #1
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	430b      	orrs	r3, r1
 800336a:	4944      	ldr	r1, [pc, #272]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d17d      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a40      	ldr	r2, [pc, #256]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 800337c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003382:	f7fd fd09 	bl	8000d98 <HAL_GetTick>
 8003386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003388:	e009      	b.n	800339e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800338a:	f7fd fd05 	bl	8000d98 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d902      	bls.n	800339e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	73fb      	strb	r3, [r7, #15]
        break;
 800339c:	e005      	b.n	80033aa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800339e:	4b37      	ldr	r3, [pc, #220]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ef      	bne.n	800338a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d160      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d111      	bne.n	80033da <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033b6:	4b31      	ldr	r3, [pc, #196]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6892      	ldr	r2, [r2, #8]
 80033c6:	0211      	lsls	r1, r2, #8
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68d2      	ldr	r2, [r2, #12]
 80033cc:	0912      	lsrs	r2, r2, #4
 80033ce:	0452      	lsls	r2, r2, #17
 80033d0:	430a      	orrs	r2, r1
 80033d2:	492a      	ldr	r1, [pc, #168]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	610b      	str	r3, [r1, #16]
 80033d8:	e027      	b.n	800342a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d112      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6892      	ldr	r2, [r2, #8]
 80033f0:	0211      	lsls	r1, r2, #8
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6912      	ldr	r2, [r2, #16]
 80033f6:	0852      	lsrs	r2, r2, #1
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0552      	lsls	r2, r2, #21
 80033fc:	430a      	orrs	r2, r1
 80033fe:	491f      	ldr	r1, [pc, #124]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]
 8003404:	e011      	b.n	800342a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800340e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6892      	ldr	r2, [r2, #8]
 8003416:	0211      	lsls	r1, r2, #8
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6952      	ldr	r2, [r2, #20]
 800341c:	0852      	lsrs	r2, r2, #1
 800341e:	3a01      	subs	r2, #1
 8003420:	0652      	lsls	r2, r2, #25
 8003422:	430a      	orrs	r2, r1
 8003424:	4915      	ldr	r1, [pc, #84]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a13      	ldr	r2, [pc, #76]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003434:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fd fcaf 	bl	8000d98 <HAL_GetTick>
 800343a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800343c:	e009      	b.n	8003452 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800343e:	f7fd fcab 	bl	8000d98 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d902      	bls.n	8003452 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	73fb      	strb	r3, [r7, #15]
          break;
 8003450:	e005      	b.n	800345e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ef      	beq.n	800343e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d106      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <RCCEx_PLLSAI1_Config+0x1dc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000

08003480 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800348e:	4b68      	ldr	r3, [pc, #416]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800349a:	4b65      	ldr	r3, [pc, #404]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d10d      	bne.n	80034c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
       ||
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034b2:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
       ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d044      	beq.n	8003550 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	e041      	b.n	8003550 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d00c      	beq.n	80034ee <RCCEx_PLLSAI2_Config+0x6e>
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d013      	beq.n	8003500 <RCCEx_PLLSAI2_Config+0x80>
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d120      	bne.n	800351e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034dc:	4b54      	ldr	r3, [pc, #336]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11d      	bne.n	8003524 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ec:	e01a      	b.n	8003524 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034ee:	4b50      	ldr	r3, [pc, #320]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fe:	e013      	b.n	8003528 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003500:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10f      	bne.n	800352c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800350c:	4b48      	ldr	r3, [pc, #288]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800351c:	e006      	b.n	800352c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      break;
 8003522:	e004      	b.n	800352e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003524:	bf00      	nop
 8003526:	e002      	b.n	800352e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800352c:	bf00      	nop
    }

    if(status == HAL_OK)
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10d      	bne.n	8003550 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003534:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	3b01      	subs	r3, #1
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	430b      	orrs	r3, r1
 800354a:	4939      	ldr	r1, [pc, #228]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d167      	bne.n	8003626 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a35      	ldr	r2, [pc, #212]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003562:	f7fd fc19 	bl	8000d98 <HAL_GetTick>
 8003566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003568:	e009      	b.n	800357e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800356a:	f7fd fc15 	bl	8000d98 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d902      	bls.n	800357e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	73fb      	strb	r3, [r7, #15]
        break;
 800357c:	e005      	b.n	800358a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ef      	bne.n	800356a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d14a      	bne.n	8003626 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d111      	bne.n	80035ba <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003596:	4b26      	ldr	r3, [pc, #152]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6892      	ldr	r2, [r2, #8]
 80035a6:	0211      	lsls	r1, r2, #8
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68d2      	ldr	r2, [r2, #12]
 80035ac:	0912      	lsrs	r2, r2, #4
 80035ae:	0452      	lsls	r2, r2, #17
 80035b0:	430a      	orrs	r2, r1
 80035b2:	491f      	ldr	r1, [pc, #124]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	614b      	str	r3, [r1, #20]
 80035b8:	e011      	b.n	80035de <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6892      	ldr	r2, [r2, #8]
 80035ca:	0211      	lsls	r1, r2, #8
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6912      	ldr	r2, [r2, #16]
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0652      	lsls	r2, r2, #25
 80035d6:	430a      	orrs	r2, r1
 80035d8:	4915      	ldr	r1, [pc, #84]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a13      	ldr	r2, [pc, #76]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ea:	f7fd fbd5 	bl	8000d98 <HAL_GetTick>
 80035ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035f0:	e009      	b.n	8003606 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035f2:	f7fd fbd1 	bl	8000d98 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d902      	bls.n	8003606 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	73fb      	strb	r3, [r7, #15]
          break;
 8003604:	e005      	b.n	8003612 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ef      	beq.n	80035f2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	4903      	ldr	r1, [pc, #12]	; (8003630 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e049      	b.n	80036da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f841 	bl	80036e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 f9f8 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e04f      	b.n	80037b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_TIM_Base_Start_IT+0xc4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373a:	d018      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x76>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d115      	bne.n	800379a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d015      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0xb4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003786:	d011      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	e008      	b.n	80037ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e000      	b.n	80037ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40013400 	.word	0x40013400
 80037d0:	40014000 	.word	0x40014000
 80037d4:	00010007 	.word	0x00010007

080037d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0202 	mvn.w	r2, #2
 8003804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f905 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8f7 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f908 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0204 	mvn.w	r2, #4
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8db 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8cd 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8de 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0208 	mvn.w	r2, #8
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8b1 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8a3 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8b4 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0210 	mvn.w	r2, #16
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2208      	movs	r2, #8
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f887 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f879 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f88a 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0201 	mvn.w	r2, #1
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd f83c 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f914 	bl	8003bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003996:	d10e      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d107      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f907 	bl	8003bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d10e      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d107      	bne.n	80039e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f838 	bl	8003a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d10e      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d107      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f06f 0220 	mvn.w	r2, #32
 8003a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8c7 	bl	8003b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <TIM_Base_SetConfig+0x114>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3d      	ldr	r2, [pc, #244]	; (8003b80 <TIM_Base_SetConfig+0x118>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3b      	ldr	r2, [pc, #236]	; (8003b88 <TIM_Base_SetConfig+0x120>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3a      	ldr	r2, [pc, #232]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <TIM_Base_SetConfig+0x114>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01f      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d01b      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <TIM_Base_SetConfig+0x118>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d017      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <TIM_Base_SetConfig+0x120>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <TIM_Base_SetConfig+0x128>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <TIM_Base_SetConfig+0x130>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <TIM_Base_SetConfig+0x114>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00f      	beq.n	8003b60 <TIM_Base_SetConfig+0xf8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <TIM_Base_SetConfig+0xf8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <TIM_Base_SetConfig+0x128>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <TIM_Base_SetConfig+0xf8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0xf8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <TIM_Base_SetConfig+0x130>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40013400 	.word	0x40013400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800

08003b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e040      	b.n	8003c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fc ff74 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	; 0x24
 8003c04:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8c0 	bl	8003d9c <UART_SetConfig>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e022      	b.n	8003c6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fb3e 	bl	80042b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fbc5 	bl	80043f4 <UART_CheckIdleState>
 8003c6a:	4603      	mov	r3, r0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	f040 8081 	bne.w	8003d90 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_UART_Transmit+0x26>
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e079      	b.n	8003d92 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Transmit+0x38>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e072      	b.n	8003d92 <HAL_UART_Transmit+0x11e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2221      	movs	r2, #33	; 0x21
 8003cbe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003cc0:	f7fd f86a 	bl	8000d98 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cde:	d108      	bne.n	8003cf2 <HAL_UART_Transmit+0x7e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e003      	b.n	8003cfa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003d02:	e02d      	b.n	8003d60 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fbb5 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e039      	b.n	8003d92 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d30:	b292      	uxth	r2, r2
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	3302      	adds	r3, #2
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	e008      	b.n	8003d4e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b292      	uxth	r2, r2
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1cb      	bne.n	8003d04 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fb81 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e005      	b.n	8003d92 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
  }
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d9c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003da0:	b088      	sub	sp, #32
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4bac      	ldr	r3, [pc, #688]	; (800407c <UART_SetConfig+0x2e0>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4aa2      	ldr	r2, [pc, #648]	; (8004080 <UART_SetConfig+0x2e4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a99      	ldr	r2, [pc, #612]	; (8004084 <UART_SetConfig+0x2e8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d121      	bne.n	8003e68 <UART_SetConfig+0xcc>
 8003e24:	4b98      	ldr	r3, [pc, #608]	; (8004088 <UART_SetConfig+0x2ec>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d816      	bhi.n	8003e60 <UART_SetConfig+0xc4>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0x9c>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003e4f 	.word	0x08003e4f
 8003e44:	08003e5b 	.word	0x08003e5b
 8003e48:	2301      	movs	r3, #1
 8003e4a:	76fb      	strb	r3, [r7, #27]
 8003e4c:	e0e8      	b.n	8004020 <UART_SetConfig+0x284>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	76fb      	strb	r3, [r7, #27]
 8003e52:	e0e5      	b.n	8004020 <UART_SetConfig+0x284>
 8003e54:	2304      	movs	r3, #4
 8003e56:	76fb      	strb	r3, [r7, #27]
 8003e58:	e0e2      	b.n	8004020 <UART_SetConfig+0x284>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	76fb      	strb	r3, [r7, #27]
 8003e5e:	e0df      	b.n	8004020 <UART_SetConfig+0x284>
 8003e60:	2310      	movs	r3, #16
 8003e62:	76fb      	strb	r3, [r7, #27]
 8003e64:	bf00      	nop
 8003e66:	e0db      	b.n	8004020 <UART_SetConfig+0x284>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a87      	ldr	r2, [pc, #540]	; (800408c <UART_SetConfig+0x2f0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d134      	bne.n	8003edc <UART_SetConfig+0x140>
 8003e72:	4b85      	ldr	r3, [pc, #532]	; (8004088 <UART_SetConfig+0x2ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d829      	bhi.n	8003ed4 <UART_SetConfig+0x138>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0xec>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ebd 	.word	0x08003ebd
 8003e8c:	08003ed5 	.word	0x08003ed5
 8003e90:	08003ed5 	.word	0x08003ed5
 8003e94:	08003ed5 	.word	0x08003ed5
 8003e98:	08003ec9 	.word	0x08003ec9
 8003e9c:	08003ed5 	.word	0x08003ed5
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003ed5 	.word	0x08003ed5
 8003ea8:	08003ec3 	.word	0x08003ec3
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003ed5 	.word	0x08003ed5
 8003eb8:	08003ecf 	.word	0x08003ecf
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	76fb      	strb	r3, [r7, #27]
 8003ec0:	e0ae      	b.n	8004020 <UART_SetConfig+0x284>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	76fb      	strb	r3, [r7, #27]
 8003ec6:	e0ab      	b.n	8004020 <UART_SetConfig+0x284>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e0a8      	b.n	8004020 <UART_SetConfig+0x284>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	76fb      	strb	r3, [r7, #27]
 8003ed2:	e0a5      	b.n	8004020 <UART_SetConfig+0x284>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	76fb      	strb	r3, [r7, #27]
 8003ed8:	bf00      	nop
 8003eda:	e0a1      	b.n	8004020 <UART_SetConfig+0x284>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6b      	ldr	r2, [pc, #428]	; (8004090 <UART_SetConfig+0x2f4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d120      	bne.n	8003f28 <UART_SetConfig+0x18c>
 8003ee6:	4b68      	ldr	r3, [pc, #416]	; (8004088 <UART_SetConfig+0x2ec>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d00f      	beq.n	8003f14 <UART_SetConfig+0x178>
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d802      	bhi.n	8003efe <UART_SetConfig+0x162>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <UART_SetConfig+0x16c>
 8003efc:	e010      	b.n	8003f20 <UART_SetConfig+0x184>
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d005      	beq.n	8003f0e <UART_SetConfig+0x172>
 8003f02:	2b30      	cmp	r3, #48	; 0x30
 8003f04:	d009      	beq.n	8003f1a <UART_SetConfig+0x17e>
 8003f06:	e00b      	b.n	8003f20 <UART_SetConfig+0x184>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	76fb      	strb	r3, [r7, #27]
 8003f0c:	e088      	b.n	8004020 <UART_SetConfig+0x284>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	76fb      	strb	r3, [r7, #27]
 8003f12:	e085      	b.n	8004020 <UART_SetConfig+0x284>
 8003f14:	2304      	movs	r3, #4
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e082      	b.n	8004020 <UART_SetConfig+0x284>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	76fb      	strb	r3, [r7, #27]
 8003f1e:	e07f      	b.n	8004020 <UART_SetConfig+0x284>
 8003f20:	2310      	movs	r3, #16
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	bf00      	nop
 8003f26:	e07b      	b.n	8004020 <UART_SetConfig+0x284>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a59      	ldr	r2, [pc, #356]	; (8004094 <UART_SetConfig+0x2f8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d120      	bne.n	8003f74 <UART_SetConfig+0x1d8>
 8003f32:	4b55      	ldr	r3, [pc, #340]	; (8004088 <UART_SetConfig+0x2ec>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d00f      	beq.n	8003f60 <UART_SetConfig+0x1c4>
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d802      	bhi.n	8003f4a <UART_SetConfig+0x1ae>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <UART_SetConfig+0x1b8>
 8003f48:	e010      	b.n	8003f6c <UART_SetConfig+0x1d0>
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d005      	beq.n	8003f5a <UART_SetConfig+0x1be>
 8003f4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f50:	d009      	beq.n	8003f66 <UART_SetConfig+0x1ca>
 8003f52:	e00b      	b.n	8003f6c <UART_SetConfig+0x1d0>
 8003f54:	2300      	movs	r3, #0
 8003f56:	76fb      	strb	r3, [r7, #27]
 8003f58:	e062      	b.n	8004020 <UART_SetConfig+0x284>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	76fb      	strb	r3, [r7, #27]
 8003f5e:	e05f      	b.n	8004020 <UART_SetConfig+0x284>
 8003f60:	2304      	movs	r3, #4
 8003f62:	76fb      	strb	r3, [r7, #27]
 8003f64:	e05c      	b.n	8004020 <UART_SetConfig+0x284>
 8003f66:	2308      	movs	r3, #8
 8003f68:	76fb      	strb	r3, [r7, #27]
 8003f6a:	e059      	b.n	8004020 <UART_SetConfig+0x284>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	76fb      	strb	r3, [r7, #27]
 8003f70:	bf00      	nop
 8003f72:	e055      	b.n	8004020 <UART_SetConfig+0x284>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a47      	ldr	r2, [pc, #284]	; (8004098 <UART_SetConfig+0x2fc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d124      	bne.n	8003fc8 <UART_SetConfig+0x22c>
 8003f7e:	4b42      	ldr	r3, [pc, #264]	; (8004088 <UART_SetConfig+0x2ec>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8c:	d012      	beq.n	8003fb4 <UART_SetConfig+0x218>
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f92:	d802      	bhi.n	8003f9a <UART_SetConfig+0x1fe>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <UART_SetConfig+0x20c>
 8003f98:	e012      	b.n	8003fc0 <UART_SetConfig+0x224>
 8003f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9e:	d006      	beq.n	8003fae <UART_SetConfig+0x212>
 8003fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa4:	d009      	beq.n	8003fba <UART_SetConfig+0x21e>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x224>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	76fb      	strb	r3, [r7, #27]
 8003fac:	e038      	b.n	8004020 <UART_SetConfig+0x284>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	76fb      	strb	r3, [r7, #27]
 8003fb2:	e035      	b.n	8004020 <UART_SetConfig+0x284>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	76fb      	strb	r3, [r7, #27]
 8003fb8:	e032      	b.n	8004020 <UART_SetConfig+0x284>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	76fb      	strb	r3, [r7, #27]
 8003fbe:	e02f      	b.n	8004020 <UART_SetConfig+0x284>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	76fb      	strb	r3, [r7, #27]
 8003fc4:	bf00      	nop
 8003fc6:	e02b      	b.n	8004020 <UART_SetConfig+0x284>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <UART_SetConfig+0x2e4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d124      	bne.n	800401c <UART_SetConfig+0x280>
 8003fd2:	4b2d      	ldr	r3, [pc, #180]	; (8004088 <UART_SetConfig+0x2ec>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe0:	d012      	beq.n	8004008 <UART_SetConfig+0x26c>
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe6:	d802      	bhi.n	8003fee <UART_SetConfig+0x252>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <UART_SetConfig+0x260>
 8003fec:	e012      	b.n	8004014 <UART_SetConfig+0x278>
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff2:	d006      	beq.n	8004002 <UART_SetConfig+0x266>
 8003ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff8:	d009      	beq.n	800400e <UART_SetConfig+0x272>
 8003ffa:	e00b      	b.n	8004014 <UART_SetConfig+0x278>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	76fb      	strb	r3, [r7, #27]
 8004000:	e00e      	b.n	8004020 <UART_SetConfig+0x284>
 8004002:	2302      	movs	r3, #2
 8004004:	76fb      	strb	r3, [r7, #27]
 8004006:	e00b      	b.n	8004020 <UART_SetConfig+0x284>
 8004008:	2304      	movs	r3, #4
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	e008      	b.n	8004020 <UART_SetConfig+0x284>
 800400e:	2308      	movs	r3, #8
 8004010:	76fb      	strb	r3, [r7, #27]
 8004012:	e005      	b.n	8004020 <UART_SetConfig+0x284>
 8004014:	2310      	movs	r3, #16
 8004016:	76fb      	strb	r3, [r7, #27]
 8004018:	bf00      	nop
 800401a:	e001      	b.n	8004020 <UART_SetConfig+0x284>
 800401c:	2310      	movs	r3, #16
 800401e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a16      	ldr	r2, [pc, #88]	; (8004080 <UART_SetConfig+0x2e4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	f040 8087 	bne.w	800413a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800402c:	7efb      	ldrb	r3, [r7, #27]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d836      	bhi.n	80040a0 <UART_SetConfig+0x304>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x29c>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800405d 	.word	0x0800405d
 800403c:	080040a1 	.word	0x080040a1
 8004040:	08004065 	.word	0x08004065
 8004044:	080040a1 	.word	0x080040a1
 8004048:	0800406b 	.word	0x0800406b
 800404c:	080040a1 	.word	0x080040a1
 8004050:	080040a1 	.word	0x080040a1
 8004054:	080040a1 	.word	0x080040a1
 8004058:	08004073 	.word	0x08004073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fe fd7c 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 8004060:	6178      	str	r0, [r7, #20]
        break;
 8004062:	e022      	b.n	80040aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <UART_SetConfig+0x300>)
 8004066:	617b      	str	r3, [r7, #20]
        break;
 8004068:	e01f      	b.n	80040aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7fe fcdf 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 800406e:	6178      	str	r0, [r7, #20]
        break;
 8004070:	e01b      	b.n	80040aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004076:	617b      	str	r3, [r7, #20]
        break;
 8004078:	e017      	b.n	80040aa <UART_SetConfig+0x30e>
 800407a:	bf00      	nop
 800407c:	efff69f3 	.word	0xefff69f3
 8004080:	40008000 	.word	0x40008000
 8004084:	40013800 	.word	0x40013800
 8004088:	40021000 	.word	0x40021000
 800408c:	40004400 	.word	0x40004400
 8004090:	40004800 	.word	0x40004800
 8004094:	40004c00 	.word	0x40004c00
 8004098:	40005000 	.word	0x40005000
 800409c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	76bb      	strb	r3, [r7, #26]
        break;
 80040a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80f1 	beq.w	8004294 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d305      	bcc.n	80040ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d902      	bls.n	80040d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	76bb      	strb	r3, [r7, #26]
 80040d2:	e0df      	b.n	8004294 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4619      	mov	r1, r3
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	f04f 0400 	mov.w	r4, #0
 80040e4:	0214      	lsls	r4, r2, #8
 80040e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040ea:	020b      	lsls	r3, r1, #8
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6852      	ldr	r2, [r2, #4]
 80040f0:	0852      	lsrs	r2, r2, #1
 80040f2:	4611      	mov	r1, r2
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	eb13 0b01 	adds.w	fp, r3, r1
 80040fc:	eb44 0c02 	adc.w	ip, r4, r2
 8004100:	4658      	mov	r0, fp
 8004102:	4661      	mov	r1, ip
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f04f 0400 	mov.w	r4, #0
 800410c:	461a      	mov	r2, r3
 800410e:	4623      	mov	r3, r4
 8004110:	f7fc f866 	bl	80001e0 <__aeabi_uldivmod>
 8004114:	4603      	mov	r3, r0
 8004116:	460c      	mov	r4, r1
 8004118:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004120:	d308      	bcc.n	8004134 <UART_SetConfig+0x398>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004128:	d204      	bcs.n	8004134 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	e0af      	b.n	8004294 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	76bb      	strb	r3, [r7, #26]
 8004138:	e0ac      	b.n	8004294 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004142:	d15b      	bne.n	80041fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004144:	7efb      	ldrb	r3, [r7, #27]
 8004146:	2b08      	cmp	r3, #8
 8004148:	d827      	bhi.n	800419a <UART_SetConfig+0x3fe>
 800414a:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0x3b4>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004175 	.word	0x08004175
 8004154:	0800417d 	.word	0x0800417d
 8004158:	08004185 	.word	0x08004185
 800415c:	0800419b 	.word	0x0800419b
 8004160:	0800418b 	.word	0x0800418b
 8004164:	0800419b 	.word	0x0800419b
 8004168:	0800419b 	.word	0x0800419b
 800416c:	0800419b 	.word	0x0800419b
 8004170:	08004193 	.word	0x08004193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004174:	f7fe fcf0 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 8004178:	6178      	str	r0, [r7, #20]
        break;
 800417a:	e013      	b.n	80041a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7fe fd02 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8004180:	6178      	str	r0, [r7, #20]
        break;
 8004182:	e00f      	b.n	80041a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004184:	4b49      	ldr	r3, [pc, #292]	; (80042ac <UART_SetConfig+0x510>)
 8004186:	617b      	str	r3, [r7, #20]
        break;
 8004188:	e00c      	b.n	80041a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418a:	f7fe fc4f 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 800418e:	6178      	str	r0, [r7, #20]
        break;
 8004190:	e008      	b.n	80041a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004196:	617b      	str	r3, [r7, #20]
        break;
 8004198:	e004      	b.n	80041a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	76bb      	strb	r3, [r7, #26]
        break;
 80041a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d074      	beq.n	8004294 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	005a      	lsls	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	b29b      	uxth	r3, r3
 80041c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b0f      	cmp	r3, #15
 80041c6:	d916      	bls.n	80041f6 <UART_SetConfig+0x45a>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ce:	d212      	bcs.n	80041f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f023 030f 	bic.w	r3, r3, #15
 80041d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	89fb      	ldrh	r3, [r7, #14]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	89fa      	ldrh	r2, [r7, #14]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	e04e      	b.n	8004294 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	76bb      	strb	r3, [r7, #26]
 80041fa:	e04b      	b.n	8004294 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041fc:	7efb      	ldrb	r3, [r7, #27]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d827      	bhi.n	8004252 <UART_SetConfig+0x4b6>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x46c>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800422d 	.word	0x0800422d
 800420c:	08004235 	.word	0x08004235
 8004210:	0800423d 	.word	0x0800423d
 8004214:	08004253 	.word	0x08004253
 8004218:	08004243 	.word	0x08004243
 800421c:	08004253 	.word	0x08004253
 8004220:	08004253 	.word	0x08004253
 8004224:	08004253 	.word	0x08004253
 8004228:	0800424b 	.word	0x0800424b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800422c:	f7fe fc94 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 8004230:	6178      	str	r0, [r7, #20]
        break;
 8004232:	e013      	b.n	800425c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004234:	f7fe fca6 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8004238:	6178      	str	r0, [r7, #20]
        break;
 800423a:	e00f      	b.n	800425c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <UART_SetConfig+0x510>)
 800423e:	617b      	str	r3, [r7, #20]
        break;
 8004240:	e00c      	b.n	800425c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004242:	f7fe fbf3 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8004246:	6178      	str	r0, [r7, #20]
        break;
 8004248:	e008      	b.n	800425c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800424a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424e:	617b      	str	r3, [r7, #20]
        break;
 8004250:	e004      	b.n	800425c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	76bb      	strb	r3, [r7, #26]
        break;
 800425a:	bf00      	nop
    }

    if (pclk != 0U)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	085a      	lsrs	r2, r3, #1
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	441a      	add	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	b29b      	uxth	r3, r3
 8004276:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d908      	bls.n	8004290 <UART_SetConfig+0x4f4>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d204      	bcs.n	8004290 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	e001      	b.n	8004294 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80042a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80042ac:	00f42400 	.word	0x00f42400

080042b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01a      	beq.n	80043c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ae:	d10a      	bne.n	80043c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004402:	f7fc fcc9 	bl	8000d98 <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b08      	cmp	r3, #8
 8004414:	d10e      	bne.n	8004434 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f82a 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e020      	b.n	8004476 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b04      	cmp	r3, #4
 8004440:	d10e      	bne.n	8004460 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f814 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e00a      	b.n	8004476 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448e:	e05d      	b.n	800454c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d059      	beq.n	800454c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004498:	f7fc fc7e 	bl	8000d98 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <UART_WaitOnFlagUntilTimeout+0x30>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11b      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e042      	b.n	800456c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d02b      	beq.n	800454c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004502:	d123      	bne.n	800454c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800450c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800451c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e00f      	b.n	800456c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4013      	ands	r3, r2
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	429a      	cmp	r2, r3
 8004568:	d092      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458a:	f3ef 8305 	mrs	r3, IPSR
 800458e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004590:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004596:	f3ef 8310 	mrs	r3, PRIMASK
 800459a:	607b      	str	r3, [r7, #4]
  return(result);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045a2:	f3ef 8311 	mrs	r3, BASEPRI
 80045a6:	603b      	str	r3, [r7, #0]
  return(result);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <osKernelInitialize+0x3a>
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <osKernelInitialize+0x64>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d103      	bne.n	80045be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045b6:	f06f 0305 	mvn.w	r3, #5
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e00c      	b.n	80045d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <osKernelInitialize+0x64>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <osKernelInitialize+0x64>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e002      	b.n	80045d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000030 	.word	0x20000030

080045ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f2:	f3ef 8305 	mrs	r3, IPSR
 80045f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004602:	607b      	str	r3, [r7, #4]
  return(result);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800460a:	f3ef 8311 	mrs	r3, BASEPRI
 800460e:	603b      	str	r3, [r7, #0]
  return(result);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <osKernelStart+0x3a>
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <osKernelStart+0x68>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d103      	bne.n	8004626 <osKernelStart+0x3a>
    stat = osErrorISR;
 800461e:	f06f 0305 	mvn.w	r3, #5
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e010      	b.n	8004648 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <osKernelStart+0x68>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d109      	bne.n	8004642 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800462e:	f7ff ffa1 	bl	8004574 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <osKernelStart+0x68>)
 8004634:	2202      	movs	r2, #2
 8004636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004638:	f001 f8ea 	bl	8005810 <vTaskStartScheduler>
      stat = osOK;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e002      	b.n	8004648 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004648:	68fb      	ldr	r3, [r7, #12]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000030 	.word	0x20000030

08004658 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b090      	sub	sp, #64	; 0x40
 800465c:	af04      	add	r7, sp, #16
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004668:	f3ef 8305 	mrs	r3, IPSR
 800466c:	61fb      	str	r3, [r7, #28]
  return(result);
 800466e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 808f 	bne.w	8004794 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004676:	f3ef 8310 	mrs	r3, PRIMASK
 800467a:	61bb      	str	r3, [r7, #24]
  return(result);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004682:	f3ef 8311 	mrs	r3, BASEPRI
 8004686:	617b      	str	r3, [r7, #20]
  return(result);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <osThreadNew+0x3e>
 800468e:	4b44      	ldr	r3, [pc, #272]	; (80047a0 <osThreadNew+0x148>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d07e      	beq.n	8004794 <osThreadNew+0x13c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d07b      	beq.n	8004794 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80046a0:	2318      	movs	r3, #24
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d045      	beq.n	8004740 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <osThreadNew+0x6a>
        name = attr->name;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <osThreadNew+0x90>
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	2b38      	cmp	r3, #56	; 0x38
 80046da:	d805      	bhi.n	80046e8 <osThreadNew+0x90>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <osThreadNew+0x94>
        return (NULL);
 80046e8:	2300      	movs	r3, #0
 80046ea:	e054      	b.n	8004796 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00e      	beq.n	8004722 <osThreadNew+0xca>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b5b      	cmp	r3, #91	; 0x5b
 800470a:	d90a      	bls.n	8004722 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <osThreadNew+0xca>
        mem = 1;
 800471c:	2301      	movs	r3, #1
 800471e:	623b      	str	r3, [r7, #32]
 8004720:	e010      	b.n	8004744 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10c      	bne.n	8004744 <osThreadNew+0xec>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <osThreadNew+0xec>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <osThreadNew+0xec>
          mem = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	e001      	b.n	8004744 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d110      	bne.n	800476c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004752:	9202      	str	r2, [sp, #8]
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fe09 	bl	8005378 <xTaskCreateStatic>
 8004766:	4603      	mov	r3, r0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	e013      	b.n	8004794 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d110      	bne.n	8004794 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	b29a      	uxth	r2, r3
 8004776:	f107 0310 	add.w	r3, r7, #16
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fe51 	bl	800542c <xTaskCreate>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d001      	beq.n	8004794 <osThreadNew+0x13c>
          hTask = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004794:	693b      	ldr	r3, [r7, #16]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3730      	adds	r7, #48	; 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000030 	.word	0x20000030

080047a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ac:	f3ef 8305 	mrs	r3, IPSR
 80047b0:	613b      	str	r3, [r7, #16]
  return(result);
 80047b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10f      	bne.n	80047d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8310 	mrs	r3, PRIMASK
 80047bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047c4:	f3ef 8311 	mrs	r3, BASEPRI
 80047c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <osDelay+0x3c>
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <osDelay+0x58>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d103      	bne.n	80047e0 <osDelay+0x3c>
    stat = osErrorISR;
 80047d8:	f06f 0305 	mvn.w	r3, #5
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e007      	b.n	80047f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 ffdc 	bl	80057a8 <vTaskDelay>
    }
  }

  return (stat);
 80047f0:	697b      	ldr	r3, [r7, #20]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000030 	.word	0x20000030

08004800 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <vApplicationGetIdleTaskMemory+0x2c>)
 8004810:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4a06      	ldr	r2, [pc, #24]	; (8004830 <vApplicationGetIdleTaskMemory+0x30>)
 8004816:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	601a      	str	r2, [r3, #0]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000034 	.word	0x20000034
 8004830:	20000090 	.word	0x20000090

08004834 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a07      	ldr	r2, [pc, #28]	; (8004860 <vApplicationGetTimerTaskMemory+0x2c>)
 8004844:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a06      	ldr	r2, [pc, #24]	; (8004864 <vApplicationGetTimerTaskMemory+0x30>)
 800484a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000290 	.word	0x20000290
 8004864:	200002ec 	.word	0x200002ec

08004868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f103 0208 	add.w	r2, r3, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f04f 32ff 	mov.w	r2, #4294967295
 8004880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f103 0208 	add.w	r2, r3, #8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f103 0208 	add.w	r2, r3, #8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d103      	bne.n	800492a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e00c      	b.n	8004944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3308      	adds	r3, #8
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e002      	b.n	8004938 <vListInsert+0x2e>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	d2f6      	bcs.n	8004932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6892      	ldr	r2, [r2, #8]
 8004992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6852      	ldr	r2, [r2, #4]
 800499c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d103      	bne.n	80049b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	1e5a      	subs	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	e7fe      	b.n	80049f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80049f8:	f002 f888 	bl	8006b0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	441a      	add	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	22ff      	movs	r2, #255	; 0xff
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d114      	bne.n	8004a78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01a      	beq.n	8004a8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3310      	adds	r3, #16
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f958 	bl	8005d10 <xTaskRemoveFromEventList>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d012      	beq.n	8004a8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <xQueueGenericReset+0xcc>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	e009      	b.n	8004a8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3310      	adds	r3, #16
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fef3 	bl	8004868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3324      	adds	r3, #36	; 0x24
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff feee 	bl	8004868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a8c:	f002 f86c 	bl	8006b68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a90:	2301      	movs	r3, #1
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08e      	sub	sp, #56	; 0x38
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <xQueueGenericCreateStatic+0x28>
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac6:	e7fe      	b.n	8004ac6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <xQueueGenericCreateStatic+0x42>
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <xQueueGenericCreateStatic+0x4e>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <xQueueGenericCreateStatic+0x52>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueGenericCreateStatic+0x54>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <xQueueGenericCreateStatic+0x6c>
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	e7fe      	b.n	8004b0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <xQueueGenericCreateStatic+0x78>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <xQueueGenericCreateStatic+0x7c>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <xQueueGenericCreateStatic+0x7e>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <xQueueGenericCreateStatic+0x96>
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e7fe      	b.n	8004b34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b36:	2350      	movs	r3, #80	; 0x50
 8004b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d009      	beq.n	8004b54 <xQueueGenericCreateStatic+0xb4>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e7fe      	b.n	8004b52 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00d      	beq.n	8004b7c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f805 	bl	8004b86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3730      	adds	r7, #48	; 0x30
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e002      	b.n	8004ba8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	69b8      	ldr	r0, [r7, #24]
 8004bb8:	f7ff ff0a 	bl	80049d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08e      	sub	sp, #56	; 0x38
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <xQueueGenericSend+0x30>
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bfa:	e7fe      	b.n	8004bfa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <xQueueGenericSend+0x3e>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <xQueueGenericSend+0x42>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueGenericSend+0x44>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <xQueueGenericSend+0x5c>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
 8004c26:	e7fe      	b.n	8004c26 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d103      	bne.n	8004c36 <xQueueGenericSend+0x6a>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <xQueueGenericSend+0x6e>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <xQueueGenericSend+0x70>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <xQueueGenericSend+0x88>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	e7fe      	b.n	8004c52 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c54:	f001 fa12 	bl	800607c <xTaskGetSchedulerState>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <xQueueGenericSend+0x98>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <xQueueGenericSend+0x9c>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <xQueueGenericSend+0x9e>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <xQueueGenericSend+0xb6>
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	e7fe      	b.n	8004c80 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c82:	f001 ff43 	bl	8006b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <xQueueGenericSend+0xcc>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d129      	bne.n	8004cec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c9e:	f000 f9ff 	bl	80050a0 <prvCopyDataToQueue>
 8004ca2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cae:	3324      	adds	r3, #36	; 0x24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 f82d 	bl	8005d10 <xTaskRemoveFromEventList>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cbc:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <xQueueGenericSend+0x1f0>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	e00a      	b.n	8004ce4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <xQueueGenericSend+0x1f0>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ce4:	f001 ff40 	bl	8006b68 <vPortExitCritical>
				return pdPASS;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e063      	b.n	8004db4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cf2:	f001 ff39 	bl	8006b68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e05c      	b.n	8004db4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 f865 	bl	8005dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d0e:	f001 ff2b 	bl	8006b68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d12:	f000 fde1 	bl	80058d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d16:	f001 fef9 	bl	8006b0c <vPortEnterCritical>
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d20:	b25b      	sxtb	r3, r3
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d103      	bne.n	8004d30 <xQueueGenericSend+0x164>
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d103      	bne.n	8004d46 <xQueueGenericSend+0x17a>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d46:	f001 ff0f 	bl	8006b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d4a:	1d3a      	adds	r2, r7, #4
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 f854 	bl	8005e00 <xTaskCheckForTimeOut>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d124      	bne.n	8004da8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d60:	f000 fa96 	bl	8005290 <prvIsQueueFull>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 ff7e 	bl	8005c74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d7a:	f000 fa21 	bl	80051c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d7e:	f000 fdb9 	bl	80058f4 <xTaskResumeAll>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f47f af7c 	bne.w	8004c82 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <xQueueGenericSend+0x1f0>)
 8004d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	e772      	b.n	8004c82 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d9e:	f000 fa0f 	bl	80051c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004da2:	f000 fda7 	bl	80058f4 <xTaskResumeAll>
 8004da6:	e76c      	b.n	8004c82 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004daa:	f000 fa09 	bl	80051c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dae:	f000 fda1 	bl	80058f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004db2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3738      	adds	r7, #56	; 0x38
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08e      	sub	sp, #56	; 0x38
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d109      	bne.n	8004dec <xQueueGenericSendFromISR+0x2c>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dea:	e7fe      	b.n	8004dea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <xQueueGenericSendFromISR+0x3a>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <xQueueGenericSendFromISR+0x3e>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <xQueueGenericSendFromISR+0x40>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <xQueueGenericSendFromISR+0x58>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	e7fe      	b.n	8004e16 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSendFromISR+0x66>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <xQueueGenericSendFromISR+0x6a>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <xQueueGenericSendFromISR+0x6c>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <xQueueGenericSendFromISR+0x84>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	e7fe      	b.n	8004e42 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e44:	f001 ff3e 	bl	8006cc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e48:	f3ef 8211 	mrs	r2, BASEPRI
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	61ba      	str	r2, [r7, #24]
 8004e5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d302      	bcc.n	8004e76 <xQueueGenericSendFromISR+0xb6>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d12c      	bne.n	8004ed0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e86:	f000 f90b 	bl	80050a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d112      	bne.n	8004eba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d016      	beq.n	8004eca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	3324      	adds	r3, #36	; 0x24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 ff35 	bl	8005d10 <xTaskRemoveFromEventList>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00e      	beq.n	8004eca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e007      	b.n	8004eca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	b25a      	sxtb	r2, r3
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ece:	e001      	b.n	8004ed4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3738      	adds	r7, #56	; 0x38
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	; 0x30
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <xQueueReceive+0x2e>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	e7fe      	b.n	8004f14 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <xQueueReceive+0x3c>
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <xQueueReceive+0x40>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <xQueueReceive+0x42>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <xQueueReceive+0x5a>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e7fe      	b.n	8004f40 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f42:	f001 f89b 	bl	800607c <xTaskGetSchedulerState>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <xQueueReceive+0x6a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <xQueueReceive+0x6e>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <xQueueReceive+0x70>
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <xQueueReceive+0x88>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e7fe      	b.n	8004f6e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f70:	f001 fdcc 	bl	8006b0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01f      	beq.n	8004fc0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f84:	f000 f8f6 	bl	8005174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	1e5a      	subs	r2, r3, #1
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00f      	beq.n	8004fb8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	3310      	adds	r3, #16
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 feb7 	bl	8005d10 <xTaskRemoveFromEventList>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fa8:	4b3c      	ldr	r3, [pc, #240]	; (800509c <xQueueReceive+0x1b4>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fb8:	f001 fdd6 	bl	8006b68 <vPortExitCritical>
				return pdPASS;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e069      	b.n	8005094 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fc6:	f001 fdcf 	bl	8006b68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e062      	b.n	8005094 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fd4:	f107 0310 	add.w	r3, r7, #16
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fefb 	bl	8005dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fe2:	f001 fdc1 	bl	8006b68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fe6:	f000 fc77 	bl	80058d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fea:	f001 fd8f 	bl	8006b0c <vPortEnterCritical>
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d103      	bne.n	8005004 <xQueueReceive+0x11c>
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800500a:	b25b      	sxtb	r3, r3
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d103      	bne.n	800501a <xQueueReceive+0x132>
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501a:	f001 fda5 	bl	8006b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800501e:	1d3a      	adds	r2, r7, #4
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f000 feea 	bl	8005e00 <xTaskCheckForTimeOut>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d123      	bne.n	800507a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005034:	f000 f916 	bl	8005264 <prvIsQueueEmpty>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d017      	beq.n	800506e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	3324      	adds	r3, #36	; 0x24
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fe14 	bl	8005c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800504c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504e:	f000 f8b7 	bl	80051c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005052:	f000 fc4f 	bl	80058f4 <xTaskResumeAll>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d189      	bne.n	8004f70 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <xQueueReceive+0x1b4>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	e780      	b.n	8004f70 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800506e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005070:	f000 f8a6 	bl	80051c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005074:	f000 fc3e 	bl	80058f4 <xTaskResumeAll>
 8005078:	e77a      	b.n	8004f70 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800507a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507c:	f000 f8a0 	bl	80051c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005080:	f000 fc38 	bl	80058f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005086:	f000 f8ed 	bl	8005264 <prvIsQueueEmpty>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	f43f af6f 	beq.w	8004f70 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005092:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005094:	4618      	mov	r0, r3
 8005096:	3730      	adds	r7, #48	; 0x30
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d14d      	bne.n	8005162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fff4 	bl	80060b8 <xTaskPriorityDisinherit>
 80050d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	e043      	b.n	8005162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d119      	bne.n	8005114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6858      	ldr	r0, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	461a      	mov	r2, r3
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	f002 f822 	bl	8007134 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	441a      	add	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d32b      	bcc.n	8005162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e026      	b.n	8005162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68d8      	ldr	r0, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	461a      	mov	r2, r3
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	f002 f808 	bl	8007134 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	425b      	negs	r3, r3
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d207      	bcs.n	8005150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	425b      	negs	r3, r3
 800514a:	441a      	add	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d105      	bne.n	8005162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3b01      	subs	r3, #1
 8005160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800516a:	697b      	ldr	r3, [r7, #20]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d018      	beq.n	80051b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	441a      	add	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d303      	bcc.n	80051a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68d9      	ldr	r1, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	461a      	mov	r2, r3
 80051b2:	6838      	ldr	r0, [r7, #0]
 80051b4:	f001 ffbe 	bl	8007134 <memcpy>
	}
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051c8:	f001 fca0 	bl	8006b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051d4:	e011      	b.n	80051fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fd94 	bl	8005d10 <xTaskRemoveFromEventList>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051ee:	f000 fe67 	bl	8005ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dce9      	bgt.n	80051d6 <prvUnlockQueue+0x16>
 8005202:	e000      	b.n	8005206 <prvUnlockQueue+0x46>
					break;
 8005204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	22ff      	movs	r2, #255	; 0xff
 800520a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800520e:	f001 fcab 	bl	8006b68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005212:	f001 fc7b 	bl	8006b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800521c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800521e:	e011      	b.n	8005244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d012      	beq.n	800524e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3310      	adds	r3, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fd6f 	bl	8005d10 <xTaskRemoveFromEventList>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005238:	f000 fe42 	bl	8005ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800523c:	7bbb      	ldrb	r3, [r7, #14]
 800523e:	3b01      	subs	r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dce9      	bgt.n	8005220 <prvUnlockQueue+0x60>
 800524c:	e000      	b.n	8005250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800524e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005258:	f001 fc86 	bl	8006b68 <vPortExitCritical>
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800526c:	f001 fc4e 	bl	8006b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e001      	b.n	8005282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005282:	f001 fc71 	bl	8006b68 <vPortExitCritical>

	return xReturn;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005298:	f001 fc38 	bl	8006b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d102      	bne.n	80052ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e001      	b.n	80052b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052b2:	f001 fc59 	bl	8006b68 <vPortExitCritical>

	return xReturn;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e014      	b.n	80052fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052d0:	4a0e      	ldr	r2, [pc, #56]	; (800530c <vQueueAddToRegistry+0x4c>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052dc:	490b      	ldr	r1, [pc, #44]	; (800530c <vQueueAddToRegistry+0x4c>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <vQueueAddToRegistry+0x4c>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052f2:	e005      	b.n	8005300 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b07      	cmp	r3, #7
 80052fe:	d9e7      	bls.n	80052d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20001a30 	.word	0x20001a30

08005310 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005320:	f001 fbf4 	bl	8006b0c <vPortEnterCritical>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800532a:	b25b      	sxtb	r3, r3
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d103      	bne.n	800533a <vQueueWaitForMessageRestricted+0x2a>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005340:	b25b      	sxtb	r3, r3
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d103      	bne.n	8005350 <vQueueWaitForMessageRestricted+0x40>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005350:	f001 fc0a 	bl	8006b68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fca9 	bl	8005cbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800536a:	6978      	ldr	r0, [r7, #20]
 800536c:	f7ff ff28 	bl	80051c0 <prvUnlockQueue>
	}
 8005370:	bf00      	nop
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	; 0x38
 800537c:	af04      	add	r7, sp, #16
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <xTaskCreateStatic+0x28>
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	e7fe      	b.n	800539e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <xTaskCreateStatic+0x42>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	e7fe      	b.n	80053b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053ba:	235c      	movs	r3, #92	; 0x5c
 80053bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b5c      	cmp	r3, #92	; 0x5c
 80053c2:	d009      	beq.n	80053d8 <xTaskCreateStatic+0x60>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e7fe      	b.n	80053d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <xTaskCreateStatic+0xa6>
 80053e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01b      	beq.n	800541e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053f8:	2300      	movs	r3, #0
 80053fa:	9303      	str	r3, [sp, #12]
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	f107 0314 	add.w	r3, r7, #20
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f850 	bl	80054b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005418:	f000 f8dc 	bl	80055d4 <prvAddNewTaskToReadyList>
 800541c:	e001      	b.n	8005422 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005422:	697b      	ldr	r3, [r7, #20]
	}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	; 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af04      	add	r7, sp, #16
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4618      	mov	r0, r3
 8005442:	f001 fc7d 	bl	8006d40 <pvPortMalloc>
 8005446:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800544e:	205c      	movs	r0, #92	; 0x5c
 8005450:	f001 fc76 	bl	8006d40 <pvPortMalloc>
 8005454:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
 8005462:	e005      	b.n	8005470 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005464:	6978      	ldr	r0, [r7, #20]
 8005466:	f001 fd2d 	bl	8006ec4 <vPortFree>
 800546a:	e001      	b.n	8005470 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d017      	beq.n	80054a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	2300      	movs	r3, #0
 8005482:	9303      	str	r3, [sp, #12]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	9302      	str	r3, [sp, #8]
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f80e 	bl	80054b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800549a:	69f8      	ldr	r0, [r7, #28]
 800549c:	f000 f89a 	bl	80055d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	e002      	b.n	80054ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
 80054aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054ac:	69bb      	ldr	r3, [r7, #24]
	}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b088      	sub	sp, #32
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	461a      	mov	r2, r3
 80054ce:	21a5      	movs	r1, #165	; 0xa5
 80054d0:	f001 fe3b 	bl	800714a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054de:	3b01      	subs	r3, #1
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f023 0307 	bic.w	r3, r3, #7
 80054ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <prvInitialiseNewTask+0x56>
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e7fe      	b.n	800550a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01f      	beq.n	8005552 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
 8005516:	e012      	b.n	800553e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	7819      	ldrb	r1, [r3, #0]
 8005520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	3334      	adds	r3, #52	; 0x34
 8005528:	460a      	mov	r2, r1
 800552a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d006      	beq.n	8005546 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b0f      	cmp	r3, #15
 8005542:	d9e9      	bls.n	8005518 <prvInitialiseNewTask+0x62>
 8005544:	e000      	b.n	8005548 <prvInitialiseNewTask+0x92>
			{
				break;
 8005546:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005550:	e003      	b.n	800555a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	2b37      	cmp	r3, #55	; 0x37
 800555e:	d901      	bls.n	8005564 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005560:	2337      	movs	r3, #55	; 0x37
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005568:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800556e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2200      	movs	r2, #0
 8005574:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	3304      	adds	r3, #4
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff f994 	bl	80048a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	3318      	adds	r3, #24
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff f98f 	bl	80048a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2200      	movs	r2, #0
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f001 f986 	bl	80068c4 <pxPortInitialiseStack>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ca:	bf00      	nop
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055dc:	f001 fa96 	bl	8006b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055e0:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <prvAddNewTaskToReadyList+0xc4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	4a2c      	ldr	r2, [pc, #176]	; (8005698 <prvAddNewTaskToReadyList+0xc4>)
 80055e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055ea:	4b2c      	ldr	r3, [pc, #176]	; (800569c <prvAddNewTaskToReadyList+0xc8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055f2:	4a2a      	ldr	r2, [pc, #168]	; (800569c <prvAddNewTaskToReadyList+0xc8>)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f8:	4b27      	ldr	r3, [pc, #156]	; (8005698 <prvAddNewTaskToReadyList+0xc4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d110      	bne.n	8005622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005600:	f000 fc82 	bl	8005f08 <prvInitialiseTaskLists>
 8005604:	e00d      	b.n	8005622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005606:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <prvAddNewTaskToReadyList+0xcc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800560e:	4b23      	ldr	r3, [pc, #140]	; (800569c <prvAddNewTaskToReadyList+0xc8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d802      	bhi.n	8005622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800561c:	4a1f      	ldr	r2, [pc, #124]	; (800569c <prvAddNewTaskToReadyList+0xc8>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <prvAddNewTaskToReadyList+0xd0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <prvAddNewTaskToReadyList+0xd0>)
 800562a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800562c:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <prvAddNewTaskToReadyList+0xd0>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <prvAddNewTaskToReadyList+0xd4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d903      	bls.n	8005648 <prvAddNewTaskToReadyList+0x74>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <prvAddNewTaskToReadyList+0xd4>)
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4a15      	ldr	r2, [pc, #84]	; (80056ac <prvAddNewTaskToReadyList+0xd8>)
 8005656:	441a      	add	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7ff f92f 	bl	80048c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005664:	f001 fa80 	bl	8006b68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005668:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <prvAddNewTaskToReadyList+0xcc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00e      	beq.n	800568e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <prvAddNewTaskToReadyList+0xc8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	429a      	cmp	r2, r3
 800567c:	d207      	bcs.n	800568e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800567e:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <prvAddNewTaskToReadyList+0xdc>)
 8005680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000bc0 	.word	0x20000bc0
 800569c:	200006ec 	.word	0x200006ec
 80056a0:	20000bcc 	.word	0x20000bcc
 80056a4:	20000bdc 	.word	0x20000bdc
 80056a8:	20000bc8 	.word	0x20000bc8
 80056ac:	200006f0 	.word	0x200006f0
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <vTaskDelayUntil+0x28>
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e7fe      	b.n	80056da <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <vTaskDelayUntil+0x42>
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	e7fe      	b.n	80056f4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80056f6:	4b29      	ldr	r3, [pc, #164]	; (800579c <vTaskDelayUntil+0xe8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <vTaskDelayUntil+0x5e>
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e7fe      	b.n	8005710 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005712:	f000 f8e1 	bl	80058d8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005716:	4b22      	ldr	r3, [pc, #136]	; (80057a0 <vTaskDelayUntil+0xec>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	4413      	add	r3, r2
 8005724:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	429a      	cmp	r2, r3
 800572e:	d20b      	bcs.n	8005748 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	429a      	cmp	r2, r3
 8005738:	d211      	bcs.n	800575e <vTaskDelayUntil+0xaa>
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	429a      	cmp	r2, r3
 8005740:	d90d      	bls.n	800575e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
 8005746:	e00a      	b.n	800575e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	429a      	cmp	r2, r3
 8005750:	d303      	bcc.n	800575a <vTaskDelayUntil+0xa6>
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	429a      	cmp	r2, r3
 8005758:	d901      	bls.n	800575e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fd0c 	bl	8006190 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005778:	f000 f8bc 	bl	80058f4 <xTaskResumeAll>
 800577c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d107      	bne.n	8005794 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <vTaskDelayUntil+0xf0>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005794:	bf00      	nop
 8005796:	3728      	adds	r7, #40	; 0x28
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000be8 	.word	0x20000be8
 80057a0:	20000bc4 	.word	0x20000bc4
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d016      	beq.n	80057e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <vTaskDelay+0x60>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <vTaskDelay+0x2e>
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	e7fe      	b.n	80057d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057d6:	f000 f87f 	bl	80058d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fcd7 	bl	8006190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057e2:	f000 f887 	bl	80058f4 <xTaskResumeAll>
 80057e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <vTaskDelay+0x64>)
 80057f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000be8 	.word	0x20000be8
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800581e:	463a      	mov	r2, r7
 8005820:	1d39      	adds	r1, r7, #4
 8005822:	f107 0308 	add.w	r3, r7, #8
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe ffea 	bl	8004800 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	9202      	str	r2, [sp, #8]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	2300      	movs	r3, #0
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2300      	movs	r3, #0
 800583c:	460a      	mov	r2, r1
 800583e:	4920      	ldr	r1, [pc, #128]	; (80058c0 <vTaskStartScheduler+0xb0>)
 8005840:	4820      	ldr	r0, [pc, #128]	; (80058c4 <vTaskStartScheduler+0xb4>)
 8005842:	f7ff fd99 	bl	8005378 <xTaskCreateStatic>
 8005846:	4602      	mov	r2, r0
 8005848:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <vTaskStartScheduler+0xb8>)
 800584a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800584c:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <vTaskStartScheduler+0xb8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e001      	b.n	800585e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d102      	bne.n	800586a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005864:	f000 fce8 	bl	8006238 <xTimerCreateTimerTask>
 8005868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d115      	bne.n	800589c <vTaskStartScheduler+0x8c>
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <vTaskStartScheduler+0xbc>)
 8005884:	f04f 32ff 	mov.w	r2, #4294967295
 8005888:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <vTaskStartScheduler+0xc0>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005890:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <vTaskStartScheduler+0xc4>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005896:	f001 f89b 	bl	80069d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800589a:	e00d      	b.n	80058b8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d109      	bne.n	80058b8 <vTaskStartScheduler+0xa8>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e7fe      	b.n	80058b6 <vTaskStartScheduler+0xa6>
}
 80058b8:	bf00      	nop
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	080071ec 	.word	0x080071ec
 80058c4:	08005ed9 	.word	0x08005ed9
 80058c8:	20000be4 	.word	0x20000be4
 80058cc:	20000be0 	.word	0x20000be0
 80058d0:	20000bcc 	.word	0x20000bcc
 80058d4:	20000bc4 	.word	0x20000bc4

080058d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <vTaskSuspendAll+0x18>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a03      	ldr	r2, [pc, #12]	; (80058f0 <vTaskSuspendAll+0x18>)
 80058e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80058e6:	bf00      	nop
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000be8 	.word	0x20000be8

080058f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005902:	4b41      	ldr	r3, [pc, #260]	; (8005a08 <xTaskResumeAll+0x114>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <xTaskResumeAll+0x2a>
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	e7fe      	b.n	800591c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800591e:	f001 f8f5 	bl	8006b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005922:	4b39      	ldr	r3, [pc, #228]	; (8005a08 <xTaskResumeAll+0x114>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3b01      	subs	r3, #1
 8005928:	4a37      	ldr	r2, [pc, #220]	; (8005a08 <xTaskResumeAll+0x114>)
 800592a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592c:	4b36      	ldr	r3, [pc, #216]	; (8005a08 <xTaskResumeAll+0x114>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d162      	bne.n	80059fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005934:	4b35      	ldr	r3, [pc, #212]	; (8005a0c <xTaskResumeAll+0x118>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d05e      	beq.n	80059fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800593c:	e02f      	b.n	800599e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593e:	4b34      	ldr	r3, [pc, #208]	; (8005a10 <xTaskResumeAll+0x11c>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3318      	adds	r3, #24
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff f816 	bl	800497c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff f811 	bl	800497c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	4b2d      	ldr	r3, [pc, #180]	; (8005a14 <xTaskResumeAll+0x120>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d903      	bls.n	800596e <xTaskResumeAll+0x7a>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <xTaskResumeAll+0x120>)
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4a27      	ldr	r2, [pc, #156]	; (8005a18 <xTaskResumeAll+0x124>)
 800597c:	441a      	add	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe ff9c 	bl	80048c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <xTaskResumeAll+0x128>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005998:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <xTaskResumeAll+0x12c>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599e:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <xTaskResumeAll+0x11c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1cb      	bne.n	800593e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059ac:	f000 fb46 	bl	800603c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80059b0:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <xTaskResumeAll+0x130>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059bc:	f000 f846 	bl	8005a4c <xTaskIncrementTick>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059c6:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <xTaskResumeAll+0x12c>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f1      	bne.n	80059bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80059d8:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <xTaskResumeAll+0x130>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059de:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xTaskResumeAll+0x12c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059e6:	2301      	movs	r3, #1
 80059e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <xTaskResumeAll+0x134>)
 80059ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059fa:	f001 f8b5 	bl	8006b68 <vPortExitCritical>

	return xAlreadyYielded;
 80059fe:	68bb      	ldr	r3, [r7, #8]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000be8 	.word	0x20000be8
 8005a0c:	20000bc0 	.word	0x20000bc0
 8005a10:	20000b80 	.word	0x20000b80
 8005a14:	20000bc8 	.word	0x20000bc8
 8005a18:	200006f0 	.word	0x200006f0
 8005a1c:	200006ec 	.word	0x200006ec
 8005a20:	20000bd4 	.word	0x20000bd4
 8005a24:	20000bd0 	.word	0x20000bd0
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <xTaskGetTickCount+0x1c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a38:	687b      	ldr	r3, [r7, #4]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000bc4 	.word	0x20000bc4

08005a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a56:	4b4e      	ldr	r3, [pc, #312]	; (8005b90 <xTaskIncrementTick+0x144>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 8088 	bne.w	8005b70 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a60:	4b4c      	ldr	r3, [pc, #304]	; (8005b94 <xTaskIncrementTick+0x148>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a68:	4a4a      	ldr	r2, [pc, #296]	; (8005b94 <xTaskIncrementTick+0x148>)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11f      	bne.n	8005ab4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a74:	4b48      	ldr	r3, [pc, #288]	; (8005b98 <xTaskIncrementTick+0x14c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <xTaskIncrementTick+0x46>
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	e7fe      	b.n	8005a90 <xTaskIncrementTick+0x44>
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <xTaskIncrementTick+0x14c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	4b40      	ldr	r3, [pc, #256]	; (8005b9c <xTaskIncrementTick+0x150>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a3e      	ldr	r2, [pc, #248]	; (8005b98 <xTaskIncrementTick+0x14c>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4a3e      	ldr	r2, [pc, #248]	; (8005b9c <xTaskIncrementTick+0x150>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b3e      	ldr	r3, [pc, #248]	; (8005ba0 <xTaskIncrementTick+0x154>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	4a3c      	ldr	r2, [pc, #240]	; (8005ba0 <xTaskIncrementTick+0x154>)
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	f000 fac4 	bl	800603c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ab4:	4b3b      	ldr	r3, [pc, #236]	; (8005ba4 <xTaskIncrementTick+0x158>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d349      	bcc.n	8005b52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005abe:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <xTaskIncrementTick+0x14c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac8:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <xTaskIncrementTick+0x158>)
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ace:	601a      	str	r2, [r3, #0]
					break;
 8005ad0:	e03f      	b.n	8005b52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad2:	4b31      	ldr	r3, [pc, #196]	; (8005b98 <xTaskIncrementTick+0x14c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d203      	bcs.n	8005af2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005aea:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <xTaskIncrementTick+0x158>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005af0:	e02f      	b.n	8005b52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe ff40 	bl	800497c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe ff37 	bl	800497c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <xTaskIncrementTick+0x15c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d903      	bls.n	8005b22 <xTaskIncrementTick+0xd6>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <xTaskIncrementTick+0x15c>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <xTaskIncrementTick+0x160>)
 8005b30:	441a      	add	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f7fe fec2 	bl	80048c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b42:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <xTaskIncrementTick+0x164>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3b8      	bcc.n	8005abe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b50:	e7b5      	b.n	8005abe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <xTaskIncrementTick+0x164>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	4914      	ldr	r1, [pc, #80]	; (8005bac <xTaskIncrementTick+0x160>)
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d907      	bls.n	8005b7a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e004      	b.n	8005b7a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b70:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <xTaskIncrementTick+0x168>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	4a0f      	ldr	r2, [pc, #60]	; (8005bb4 <xTaskIncrementTick+0x168>)
 8005b78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b7a:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <xTaskIncrementTick+0x16c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005b82:	2301      	movs	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b86:	697b      	ldr	r3, [r7, #20]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000be8 	.word	0x20000be8
 8005b94:	20000bc4 	.word	0x20000bc4
 8005b98:	20000b78 	.word	0x20000b78
 8005b9c:	20000b7c 	.word	0x20000b7c
 8005ba0:	20000bd8 	.word	0x20000bd8
 8005ba4:	20000be0 	.word	0x20000be0
 8005ba8:	20000bc8 	.word	0x20000bc8
 8005bac:	200006f0 	.word	0x200006f0
 8005bb0:	200006ec 	.word	0x200006ec
 8005bb4:	20000bd0 	.word	0x20000bd0
 8005bb8:	20000bd4 	.word	0x20000bd4

08005bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bc2:	4b27      	ldr	r3, [pc, #156]	; (8005c60 <vTaskSwitchContext+0xa4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <vTaskSwitchContext+0xa8>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bd0:	e040      	b.n	8005c54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005bd2:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <vTaskSwitchContext+0xa8>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd8:	4b23      	ldr	r3, [pc, #140]	; (8005c68 <vTaskSwitchContext+0xac>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e00f      	b.n	8005c00 <vTaskSwitchContext+0x44>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <vTaskSwitchContext+0x3e>
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	e7fe      	b.n	8005bf8 <vTaskSwitchContext+0x3c>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	491a      	ldr	r1, [pc, #104]	; (8005c6c <vTaskSwitchContext+0xb0>)
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0e5      	beq.n	8005be0 <vTaskSwitchContext+0x24>
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <vTaskSwitchContext+0xb0>)
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	3308      	adds	r3, #8
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d104      	bne.n	8005c44 <vTaskSwitchContext+0x88>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	605a      	str	r2, [r3, #4]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <vTaskSwitchContext+0xb4>)
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	4a06      	ldr	r2, [pc, #24]	; (8005c68 <vTaskSwitchContext+0xac>)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20000be8 	.word	0x20000be8
 8005c64:	20000bd4 	.word	0x20000bd4
 8005c68:	20000bc8 	.word	0x20000bc8
 8005c6c:	200006f0 	.word	0x200006f0
 8005c70:	200006ec 	.word	0x200006ec

08005c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <vTaskPlaceOnEventList+0x24>
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e7fe      	b.n	8005c96 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <vTaskPlaceOnEventList+0x44>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fe fe32 	bl	800490a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	6838      	ldr	r0, [r7, #0]
 8005caa:	f000 fa71 	bl	8006190 <prvAddCurrentTaskToDelayedList>
}
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200006ec 	.word	0x200006ec

08005cbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <vTaskPlaceOnEventListRestricted+0x26>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e7fe      	b.n	8005ce0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <vTaskPlaceOnEventListRestricted+0x50>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3318      	adds	r3, #24
 8005ce8:	4619      	mov	r1, r3
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f7fe fde9 	bl	80048c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	f000 fa46 	bl	8006190 <prvAddCurrentTaskToDelayedList>
	}
 8005d04:	bf00      	nop
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	200006ec 	.word	0x200006ec

08005d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <xTaskRemoveFromEventList+0x2a>
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e7fe      	b.n	8005d38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3318      	adds	r3, #24
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fe1c 	bl	800497c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d44:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <xTaskRemoveFromEventList+0xac>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11d      	bne.n	8005d88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fe13 	bl	800497c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <xTaskRemoveFromEventList+0xb0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d903      	bls.n	8005d6a <xTaskRemoveFromEventList+0x5a>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <xTaskRemoveFromEventList+0xb0>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <xTaskRemoveFromEventList+0xb4>)
 8005d78:	441a      	add	r2, r3
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7fe fd9e 	bl	80048c2 <vListInsertEnd>
 8005d86:	e005      	b.n	8005d94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	3318      	adds	r3, #24
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	480e      	ldr	r0, [pc, #56]	; (8005dc8 <xTaskRemoveFromEventList+0xb8>)
 8005d90:	f7fe fd97 	bl	80048c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <xTaskRemoveFromEventList+0xbc>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d905      	bls.n	8005dae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005da6:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <xTaskRemoveFromEventList+0xc0>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e001      	b.n	8005db2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005db2:	697b      	ldr	r3, [r7, #20]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000be8 	.word	0x20000be8
 8005dc0:	20000bc8 	.word	0x20000bc8
 8005dc4:	200006f0 	.word	0x200006f0
 8005dc8:	20000b80 	.word	0x20000b80
 8005dcc:	200006ec 	.word	0x200006ec
 8005dd0:	20000bd4 	.word	0x20000bd4

08005dd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <vTaskInternalSetTimeOutState+0x24>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <vTaskInternalSetTimeOutState+0x28>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	605a      	str	r2, [r3, #4]
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20000bd8 	.word	0x20000bd8
 8005dfc:	20000bc4 	.word	0x20000bc4

08005e00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <xTaskCheckForTimeOut+0x24>
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	e7fe      	b.n	8005e22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <xTaskCheckForTimeOut+0x3e>
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e7fe      	b.n	8005e3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005e3e:	f000 fe65 	bl	8006b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <xTaskCheckForTimeOut+0xb8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d102      	bne.n	8005e62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	e023      	b.n	8005eaa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <xTaskCheckForTimeOut+0xbc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d007      	beq.n	8005e7e <xTaskCheckForTimeOut+0x7e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d302      	bcc.n	8005e7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e015      	b.n	8005eaa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d20b      	bcs.n	8005ea0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff9d 	bl	8005dd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
 8005e9e:	e004      	b.n	8005eaa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eaa:	f000 fe5d 	bl	8006b68 <vPortExitCritical>

	return xReturn;
 8005eae:	69fb      	ldr	r3, [r7, #28]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000bc4 	.word	0x20000bc4
 8005ebc:	20000bd8 	.word	0x20000bd8

08005ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ec4:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <vTaskMissedYield+0x14>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000bd4 	.word	0x20000bd4

08005ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ee0:	f000 f852 	bl	8005f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ee4:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <prvIdleTask+0x28>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d9f9      	bls.n	8005ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <prvIdleTask+0x2c>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005efc:	e7f0      	b.n	8005ee0 <prvIdleTask+0x8>
 8005efe:	bf00      	nop
 8005f00:	200006f0 	.word	0x200006f0
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e00c      	b.n	8005f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4a12      	ldr	r2, [pc, #72]	; (8005f68 <prvInitialiseTaskLists+0x60>)
 8005f20:	4413      	add	r3, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fca0 	bl	8004868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b37      	cmp	r3, #55	; 0x37
 8005f32:	d9ef      	bls.n	8005f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f34:	480d      	ldr	r0, [pc, #52]	; (8005f6c <prvInitialiseTaskLists+0x64>)
 8005f36:	f7fe fc97 	bl	8004868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f3a:	480d      	ldr	r0, [pc, #52]	; (8005f70 <prvInitialiseTaskLists+0x68>)
 8005f3c:	f7fe fc94 	bl	8004868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f40:	480c      	ldr	r0, [pc, #48]	; (8005f74 <prvInitialiseTaskLists+0x6c>)
 8005f42:	f7fe fc91 	bl	8004868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f46:	480c      	ldr	r0, [pc, #48]	; (8005f78 <prvInitialiseTaskLists+0x70>)
 8005f48:	f7fe fc8e 	bl	8004868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f4c:	480b      	ldr	r0, [pc, #44]	; (8005f7c <prvInitialiseTaskLists+0x74>)
 8005f4e:	f7fe fc8b 	bl	8004868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvInitialiseTaskLists+0x78>)
 8005f54:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <prvInitialiseTaskLists+0x64>)
 8005f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f58:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <prvInitialiseTaskLists+0x7c>)
 8005f5a:	4a05      	ldr	r2, [pc, #20]	; (8005f70 <prvInitialiseTaskLists+0x68>)
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200006f0 	.word	0x200006f0
 8005f6c:	20000b50 	.word	0x20000b50
 8005f70:	20000b64 	.word	0x20000b64
 8005f74:	20000b80 	.word	0x20000b80
 8005f78:	20000b94 	.word	0x20000b94
 8005f7c:	20000bac 	.word	0x20000bac
 8005f80:	20000b78 	.word	0x20000b78
 8005f84:	20000b7c 	.word	0x20000b7c

08005f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f8e:	e019      	b.n	8005fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f90:	f000 fdbc 	bl	8006b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f94:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <prvCheckTasksWaitingTermination+0x4c>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fceb 	bl	800497c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <prvCheckTasksWaitingTermination+0x50>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <prvCheckTasksWaitingTermination+0x50>)
 8005fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <prvCheckTasksWaitingTermination+0x54>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <prvCheckTasksWaitingTermination+0x54>)
 8005fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fba:	f000 fdd5 	bl	8006b68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f80e 	bl	8005fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <prvCheckTasksWaitingTermination+0x54>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e1      	bne.n	8005f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000b94 	.word	0x20000b94
 8005fd8:	20000bc0 	.word	0x20000bc0
 8005fdc:	20000ba8 	.word	0x20000ba8

08005fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d108      	bne.n	8006004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 ff64 	bl	8006ec4 <vPortFree>
				vPortFree( pxTCB );
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 ff61 	bl	8006ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006002:	e017      	b.n	8006034 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800600a:	2b01      	cmp	r3, #1
 800600c:	d103      	bne.n	8006016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 ff58 	bl	8006ec4 <vPortFree>
	}
 8006014:	e00e      	b.n	8006034 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800601c:	2b02      	cmp	r3, #2
 800601e:	d009      	beq.n	8006034 <prvDeleteTCB+0x54>
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	e7fe      	b.n	8006032 <prvDeleteTCB+0x52>
	}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <prvResetNextTaskUnblockTime+0x38>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <prvResetNextTaskUnblockTime+0x3c>)
 800604e:	f04f 32ff 	mov.w	r2, #4294967295
 8006052:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006054:	e008      	b.n	8006068 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006056:	4b07      	ldr	r3, [pc, #28]	; (8006074 <prvResetNextTaskUnblockTime+0x38>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a04      	ldr	r2, [pc, #16]	; (8006078 <prvResetNextTaskUnblockTime+0x3c>)
 8006066:	6013      	str	r3, [r2, #0]
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20000b78 	.word	0x20000b78
 8006078:	20000be0 	.word	0x20000be0

0800607c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <xTaskGetSchedulerState+0x34>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800608a:	2301      	movs	r3, #1
 800608c:	607b      	str	r3, [r7, #4]
 800608e:	e008      	b.n	80060a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006090:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <xTaskGetSchedulerState+0x38>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d102      	bne.n	800609e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006098:	2302      	movs	r3, #2
 800609a:	607b      	str	r3, [r7, #4]
 800609c:	e001      	b.n	80060a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800609e:	2300      	movs	r3, #0
 80060a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060a2:	687b      	ldr	r3, [r7, #4]
	}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000bcc 	.word	0x20000bcc
 80060b4:	20000be8 	.word	0x20000be8

080060b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d054      	beq.n	8006178 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060ce:	4b2d      	ldr	r3, [pc, #180]	; (8006184 <xTaskPriorityDisinherit+0xcc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d009      	beq.n	80060ec <xTaskPriorityDisinherit+0x34>
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e7fe      	b.n	80060ea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <xTaskPriorityDisinherit+0x50>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	e7fe      	b.n	8006106 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610c:	1e5a      	subs	r2, r3, #1
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611a:	429a      	cmp	r2, r3
 800611c:	d02c      	beq.n	8006178 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006122:	2b00      	cmp	r3, #0
 8006124:	d128      	bne.n	8006178 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	3304      	adds	r3, #4
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc26 	bl	800497c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <xTaskPriorityDisinherit+0xd0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d903      	bls.n	8006158 <xTaskPriorityDisinherit+0xa0>
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <xTaskPriorityDisinherit+0xd0>)
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4a09      	ldr	r2, [pc, #36]	; (800618c <xTaskPriorityDisinherit+0xd4>)
 8006166:	441a      	add	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f7fe fba7 	bl	80048c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006178:	697b      	ldr	r3, [r7, #20]
	}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	200006ec 	.word	0x200006ec
 8006188:	20000bc8 	.word	0x20000bc8
 800618c:	200006f0 	.word	0x200006f0

08006190 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800619a:	4b21      	ldr	r3, [pc, #132]	; (8006220 <prvAddCurrentTaskToDelayedList+0x90>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a0:	4b20      	ldr	r3, [pc, #128]	; (8006224 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fbe8 	bl	800497c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d10a      	bne.n	80061ca <prvAddCurrentTaskToDelayedList+0x3a>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <prvAddCurrentTaskToDelayedList+0x94>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4819      	ldr	r0, [pc, #100]	; (8006228 <prvAddCurrentTaskToDelayedList+0x98>)
 80061c4:	f7fe fb7d 	bl	80048c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061c8:	e026      	b.n	8006218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4413      	add	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <prvAddCurrentTaskToDelayedList+0x94>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d209      	bcs.n	80061f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e2:	4b12      	ldr	r3, [pc, #72]	; (800622c <prvAddCurrentTaskToDelayedList+0x9c>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe fb8b 	bl	800490a <vListInsert>
}
 80061f4:	e010      	b.n	8006218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f6:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <prvAddCurrentTaskToDelayedList+0xa0>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <prvAddCurrentTaskToDelayedList+0x94>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7fe fb81 	bl	800490a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	429a      	cmp	r2, r3
 8006210:	d202      	bcs.n	8006218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006212:	4a08      	ldr	r2, [pc, #32]	; (8006234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6013      	str	r3, [r2, #0]
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000bc4 	.word	0x20000bc4
 8006224:	200006ec 	.word	0x200006ec
 8006228:	20000bac 	.word	0x20000bac
 800622c:	20000b7c 	.word	0x20000b7c
 8006230:	20000b78 	.word	0x20000b78
 8006234:	20000be0 	.word	0x20000be0

08006238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006242:	f000 faff 	bl	8006844 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006246:	4b1c      	ldr	r3, [pc, #112]	; (80062b8 <xTimerCreateTimerTask+0x80>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d021      	beq.n	8006292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006256:	1d3a      	adds	r2, r7, #4
 8006258:	f107 0108 	add.w	r1, r7, #8
 800625c:	f107 030c 	add.w	r3, r7, #12
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fae7 	bl	8004834 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	9202      	str	r2, [sp, #8]
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	2302      	movs	r3, #2
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	460a      	mov	r2, r1
 8006278:	4910      	ldr	r1, [pc, #64]	; (80062bc <xTimerCreateTimerTask+0x84>)
 800627a:	4811      	ldr	r0, [pc, #68]	; (80062c0 <xTimerCreateTimerTask+0x88>)
 800627c:	f7ff f87c 	bl	8005378 <xTaskCreateStatic>
 8006280:	4602      	mov	r2, r0
 8006282:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <xTimerCreateTimerTask+0x8c>)
 8006284:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006286:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <xTimerCreateTimerTask+0x8c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800628e:	2301      	movs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <xTimerCreateTimerTask+0x74>
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	e7fe      	b.n	80062aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80062ac:	697b      	ldr	r3, [r7, #20]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000c1c 	.word	0x20000c1c
 80062bc:	080071f4 	.word	0x080071f4
 80062c0:	080063f9 	.word	0x080063f9
 80062c4:	20000c20 	.word	0x20000c20

080062c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <xTimerGenericCommand+0x2c>
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	e7fe      	b.n	80062f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062f4:	4b19      	ldr	r3, [pc, #100]	; (800635c <xTimerGenericCommand+0x94>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d02a      	beq.n	8006352 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b05      	cmp	r3, #5
 800630c:	dc18      	bgt.n	8006340 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800630e:	f7ff feb5 	bl	800607c <xTaskGetSchedulerState>
 8006312:	4603      	mov	r3, r0
 8006314:	2b02      	cmp	r3, #2
 8006316:	d109      	bne.n	800632c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006318:	4b10      	ldr	r3, [pc, #64]	; (800635c <xTimerGenericCommand+0x94>)
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	f107 0110 	add.w	r1, r7, #16
 8006320:	2300      	movs	r3, #0
 8006322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006324:	f7fe fc52 	bl	8004bcc <xQueueGenericSend>
 8006328:	6278      	str	r0, [r7, #36]	; 0x24
 800632a:	e012      	b.n	8006352 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <xTimerGenericCommand+0x94>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	f107 0110 	add.w	r1, r7, #16
 8006334:	2300      	movs	r3, #0
 8006336:	2200      	movs	r2, #0
 8006338:	f7fe fc48 	bl	8004bcc <xQueueGenericSend>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24
 800633e:	e008      	b.n	8006352 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <xTimerGenericCommand+0x94>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	f107 0110 	add.w	r1, r7, #16
 8006348:	2300      	movs	r3, #0
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	f7fe fd38 	bl	8004dc0 <xQueueGenericSendFromISR>
 8006350:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006354:	4618      	mov	r0, r3
 8006356:	3728      	adds	r7, #40	; 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000c1c 	.word	0x20000c1c

08006360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636a:	4b22      	ldr	r3, [pc, #136]	; (80063f4 <prvProcessExpiredTimer+0x94>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3304      	adds	r3, #4
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe faff 	bl	800497c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d021      	beq.n	80063d0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	18d1      	adds	r1, r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	6978      	ldr	r0, [r7, #20]
 800639a:	f000 f8d1 	bl	8006540 <prvInsertTimerInActiveList>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01e      	beq.n	80063e2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063a4:	2300      	movs	r3, #0
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2300      	movs	r3, #0
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	2100      	movs	r1, #0
 80063ae:	6978      	ldr	r0, [r7, #20]
 80063b0:	f7ff ff8a 	bl	80062c8 <xTimerGenericCommand>
 80063b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d112      	bne.n	80063e2 <prvProcessExpiredTimer+0x82>
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e7fe      	b.n	80063ce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	6978      	ldr	r0, [r7, #20]
 80063e8:	4798      	blx	r3
}
 80063ea:	bf00      	nop
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000c14 	.word	0x20000c14

080063f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006400:	f107 0308 	add.w	r3, r7, #8
 8006404:	4618      	mov	r0, r3
 8006406:	f000 f857 	bl	80064b8 <prvGetNextExpireTime>
 800640a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4619      	mov	r1, r3
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f803 	bl	800641c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006416:	f000 f8d5 	bl	80065c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800641a:	e7f1      	b.n	8006400 <prvTimerTask+0x8>

0800641c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006426:	f7ff fa57 	bl	80058d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f866 	bl	8006500 <prvSampleTimeNow>
 8006434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d130      	bne.n	800649e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <prvProcessTimerOrBlockTask+0x3c>
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	429a      	cmp	r2, r3
 8006448:	d806      	bhi.n	8006458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800644a:	f7ff fa53 	bl	80058f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800644e:	68f9      	ldr	r1, [r7, #12]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ff85 	bl	8006360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006456:	e024      	b.n	80064a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <prvProcessTimerOrBlockTask+0x90>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <prvProcessTimerOrBlockTask+0x50>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <prvProcessTimerOrBlockTask+0x52>
 800646c:	2300      	movs	r3, #0
 800646e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006470:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <prvProcessTimerOrBlockTask+0x94>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	f7fe ff47 	bl	8005310 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006482:	f7ff fa37 	bl	80058f4 <xTaskResumeAll>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <prvProcessTimerOrBlockTask+0x98>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	f3bf 8f6f 	isb	sy
}
 800649c:	e001      	b.n	80064a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800649e:	f7ff fa29 	bl	80058f4 <xTaskResumeAll>
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000c18 	.word	0x20000c18
 80064b0:	20000c1c 	.word	0x20000c1c
 80064b4:	e000ed04 	.word	0xe000ed04

080064b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064c0:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <prvGetNextExpireTime+0x44>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <prvGetNextExpireTime+0x16>
 80064ca:	2201      	movs	r2, #1
 80064cc:	e000      	b.n	80064d0 <prvGetNextExpireTime+0x18>
 80064ce:	2200      	movs	r2, #0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064dc:	4b07      	ldr	r3, [pc, #28]	; (80064fc <prvGetNextExpireTime+0x44>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e001      	b.n	80064ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064ec:	68fb      	ldr	r3, [r7, #12]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000c14 	.word	0x20000c14

08006500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006508:	f7ff fa90 	bl	8005a2c <xTaskGetTickCount>
 800650c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <prvSampleTimeNow+0x3c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	429a      	cmp	r2, r3
 8006516:	d205      	bcs.n	8006524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006518:	f000 f930 	bl	800677c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e002      	b.n	800652a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800652a:	4a04      	ldr	r2, [pc, #16]	; (800653c <prvSampleTimeNow+0x3c>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006530:	68fb      	ldr	r3, [r7, #12]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000c24 	.word	0x20000c24

08006540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d812      	bhi.n	800658c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	1ad2      	subs	r2, r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	429a      	cmp	r2, r3
 8006572:	d302      	bcc.n	800657a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e01b      	b.n	80065b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800657a:	4b10      	ldr	r3, [pc, #64]	; (80065bc <prvInsertTimerInActiveList+0x7c>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f7fe f9c0 	bl	800490a <vListInsert>
 800658a:	e012      	b.n	80065b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d206      	bcs.n	80065a2 <prvInsertTimerInActiveList+0x62>
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d302      	bcc.n	80065a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e007      	b.n	80065b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065a2:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <prvInsertTimerInActiveList+0x80>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f7fe f9ac 	bl	800490a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065b2:	697b      	ldr	r3, [r7, #20]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20000c18 	.word	0x20000c18
 80065c0:	20000c14 	.word	0x20000c14

080065c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08e      	sub	sp, #56	; 0x38
 80065c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ca:	e0c6      	b.n	800675a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da17      	bge.n	8006602 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065d2:	1d3b      	adds	r3, r7, #4
 80065d4:	3304      	adds	r3, #4
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <prvProcessReceivedCommands+0x2e>
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	e7fe      	b.n	80065f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f8:	6850      	ldr	r0, [r2, #4]
 80065fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065fc:	6892      	ldr	r2, [r2, #8]
 80065fe:	4611      	mov	r1, r2
 8006600:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f2c0 80a7 	blt.w	8006758 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	3304      	adds	r3, #4
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe f9ae 	bl	800497c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006620:	463b      	mov	r3, r7
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff ff6c 	bl	8006500 <prvSampleTimeNow>
 8006628:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b09      	cmp	r3, #9
 800662e:	f200 8094 	bhi.w	800675a <prvProcessReceivedCommands+0x196>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <prvProcessReceivedCommands+0x74>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006661 	.word	0x08006661
 800663c:	08006661 	.word	0x08006661
 8006640:	08006661 	.word	0x08006661
 8006644:	080066d3 	.word	0x080066d3
 8006648:	080066e7 	.word	0x080066e7
 800664c:	0800672f 	.word	0x0800672f
 8006650:	08006661 	.word	0x08006661
 8006654:	08006661 	.word	0x08006661
 8006658:	080066d3 	.word	0x080066d3
 800665c:	080066e7 	.word	0x080066e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	18d1      	adds	r1, r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006680:	f7ff ff5e 	bl	8006540 <prvInsertTimerInActiveList>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d067      	beq.n	800675a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d05c      	beq.n	800675a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	441a      	add	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	2300      	movs	r3, #0
 80066ae:	2100      	movs	r1, #0
 80066b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b2:	f7ff fe09 	bl	80062c8 <xTimerGenericCommand>
 80066b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d14d      	bne.n	800675a <prvProcessReceivedCommands+0x196>
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e7fe      	b.n	80066d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80066e4:	e039      	b.n	800675a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <prvProcessReceivedCommands+0x156>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e7fe      	b.n	8006718 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	18d1      	adds	r1, r2, r3
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006728:	f7ff ff0a 	bl	8006540 <prvInsertTimerInActiveList>
					break;
 800672c:	e015      	b.n	800675a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800673c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673e:	f000 fbc1 	bl	8006ec4 <vPortFree>
 8006742:	e00a      	b.n	800675a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006756:	e000      	b.n	800675a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006758:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800675a:	4b07      	ldr	r3, [pc, #28]	; (8006778 <prvProcessReceivedCommands+0x1b4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	1d39      	adds	r1, r7, #4
 8006760:	2200      	movs	r2, #0
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fbc0 	bl	8004ee8 <xQueueReceive>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f47f af2e 	bne.w	80065cc <prvProcessReceivedCommands+0x8>
	}
}
 8006770:	bf00      	nop
 8006772:	3730      	adds	r7, #48	; 0x30
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000c1c 	.word	0x20000c1c

0800677c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006782:	e047      	b.n	8006814 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006784:	4b2d      	ldr	r3, [pc, #180]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678e:	4b2b      	ldr	r3, [pc, #172]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe f8ed 	bl	800497c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02d      	beq.n	8006814 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90e      	bls.n	80067e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067d6:	4b19      	ldr	r3, [pc, #100]	; (800683c <prvSwitchTimerLists+0xc0>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3304      	adds	r3, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f7fe f892 	bl	800490a <vListInsert>
 80067e6:	e015      	b.n	8006814 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	2100      	movs	r1, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fd68 	bl	80062c8 <xTimerGenericCommand>
 80067f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <prvSwitchTimerLists+0x98>
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	603b      	str	r3, [r7, #0]
 8006812:	e7fe      	b.n	8006812 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006814:	4b09      	ldr	r3, [pc, #36]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1b2      	bne.n	8006784 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800681e:	4b07      	ldr	r3, [pc, #28]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <prvSwitchTimerLists+0xc4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <prvSwitchTimerLists+0xc0>)
 800682a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800682c:	4a04      	ldr	r2, [pc, #16]	; (8006840 <prvSwitchTimerLists+0xc4>)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	6013      	str	r3, [r2, #0]
}
 8006832:	bf00      	nop
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000c14 	.word	0x20000c14
 8006840:	20000c18 	.word	0x20000c18

08006844 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800684a:	f000 f95f 	bl	8006b0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <prvCheckForValidListAndQueue+0x60>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d120      	bne.n	8006898 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006856:	4814      	ldr	r0, [pc, #80]	; (80068a8 <prvCheckForValidListAndQueue+0x64>)
 8006858:	f7fe f806 	bl	8004868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800685c:	4813      	ldr	r0, [pc, #76]	; (80068ac <prvCheckForValidListAndQueue+0x68>)
 800685e:	f7fe f803 	bl	8004868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <prvCheckForValidListAndQueue+0x6c>)
 8006864:	4a10      	ldr	r2, [pc, #64]	; (80068a8 <prvCheckForValidListAndQueue+0x64>)
 8006866:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006868:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <prvCheckForValidListAndQueue+0x70>)
 800686a:	4a10      	ldr	r2, [pc, #64]	; (80068ac <prvCheckForValidListAndQueue+0x68>)
 800686c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800686e:	2300      	movs	r3, #0
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <prvCheckForValidListAndQueue+0x74>)
 8006874:	4a11      	ldr	r2, [pc, #68]	; (80068bc <prvCheckForValidListAndQueue+0x78>)
 8006876:	2110      	movs	r1, #16
 8006878:	200a      	movs	r0, #10
 800687a:	f7fe f911 	bl	8004aa0 <xQueueGenericCreateStatic>
 800687e:	4602      	mov	r2, r0
 8006880:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <prvCheckForValidListAndQueue+0x60>)
 8006882:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <prvCheckForValidListAndQueue+0x60>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <prvCheckForValidListAndQueue+0x60>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	490b      	ldr	r1, [pc, #44]	; (80068c0 <prvCheckForValidListAndQueue+0x7c>)
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fd14 	bl	80052c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006898:	f000 f966 	bl	8006b68 <vPortExitCritical>
}
 800689c:	bf00      	nop
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000c1c 	.word	0x20000c1c
 80068a8:	20000bec 	.word	0x20000bec
 80068ac:	20000c00 	.word	0x20000c00
 80068b0:	20000c14 	.word	0x20000c14
 80068b4:	20000c18 	.word	0x20000c18
 80068b8:	20000cc8 	.word	0x20000cc8
 80068bc:	20000c28 	.word	0x20000c28
 80068c0:	080071fc 	.word	0x080071fc

080068c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3b04      	subs	r3, #4
 80068d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3b04      	subs	r3, #4
 80068e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f023 0201 	bic.w	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068f4:	4a0c      	ldr	r2, [pc, #48]	; (8006928 <pxPortInitialiseStack+0x64>)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3b14      	subs	r3, #20
 80068fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3b04      	subs	r3, #4
 800690a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f06f 0202 	mvn.w	r2, #2
 8006912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3b20      	subs	r3, #32
 8006918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	0800692d 	.word	0x0800692d

0800692c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <prvTaskExitError+0x50>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d009      	beq.n	8006954 <prvTaskExitError+0x28>
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e7fe      	b.n	8006952 <prvTaskExitError+0x26>
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006966:	bf00      	nop
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0fc      	beq.n	8006968 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000010 	.word	0x20000010

08006980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <pxCurrentTCBConst2>)
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6808      	ldr	r0, [r1, #0]
 8006986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	f380 8809 	msr	PSP, r0
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	4770      	bx	lr
 800699c:	f3af 8000 	nop.w

080069a0 <pxCurrentTCBConst2>:
 80069a0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069a8:	4808      	ldr	r0, [pc, #32]	; (80069cc <prvPortStartFirstTask+0x24>)
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f380 8808 	msr	MSP, r0
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f380 8814 	msr	CONTROL, r0
 80069ba:	b662      	cpsie	i
 80069bc:	b661      	cpsie	f
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	df00      	svc	0
 80069c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ca:	bf00      	nop
 80069cc:	e000ed08 	.word	0xe000ed08

080069d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069d6:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <xPortStartScheduler+0x118>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a44      	ldr	r2, [pc, #272]	; (8006aec <xPortStartScheduler+0x11c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d109      	bne.n	80069f4 <xPortStartScheduler+0x24>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	e7fe      	b.n	80069f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069f4:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <xPortStartScheduler+0x118>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a3d      	ldr	r2, [pc, #244]	; (8006af0 <xPortStartScheduler+0x120>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d109      	bne.n	8006a12 <xPortStartScheduler+0x42>
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e7fe      	b.n	8006a10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a12:	4b38      	ldr	r3, [pc, #224]	; (8006af4 <xPortStartScheduler+0x124>)
 8006a14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	22ff      	movs	r2, #255	; 0xff
 8006a22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <xPortStartScheduler+0x128>)
 8006a38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a3a:	4b30      	ldr	r3, [pc, #192]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a3c:	2207      	movs	r2, #7
 8006a3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a40:	e009      	b.n	8006a56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006a42:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d0ef      	beq.n	8006a42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a62:	4b26      	ldr	r3, [pc, #152]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f1c3 0307 	rsb	r3, r3, #7
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d009      	beq.n	8006a82 <xPortStartScheduler+0xb2>
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	e7fe      	b.n	8006a80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a82:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006aa0:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <xPortStartScheduler+0x130>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <xPortStartScheduler+0x130>)
 8006aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006aaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aac:	4b14      	ldr	r3, [pc, #80]	; (8006b00 <xPortStartScheduler+0x130>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <xPortStartScheduler+0x130>)
 8006ab2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ab6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ab8:	f000 f8d6 	bl	8006c68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006abc:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <xPortStartScheduler+0x134>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ac2:	f000 f8f5 	bl	8006cb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ac6:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <xPortStartScheduler+0x138>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a0f      	ldr	r2, [pc, #60]	; (8006b08 <xPortStartScheduler+0x138>)
 8006acc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ad0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ad2:	f7ff ff69 	bl	80069a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ad6:	f7ff f871 	bl	8005bbc <vTaskSwitchContext>
	prvTaskExitError();
 8006ada:	f7ff ff27 	bl	800692c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed00 	.word	0xe000ed00
 8006aec:	410fc271 	.word	0x410fc271
 8006af0:	410fc270 	.word	0x410fc270
 8006af4:	e000e400 	.word	0xe000e400
 8006af8:	20000d18 	.word	0x20000d18
 8006afc:	20000d1c 	.word	0x20000d1c
 8006b00:	e000ed20 	.word	0xe000ed20
 8006b04:	20000010 	.word	0x20000010
 8006b08:	e000ef34 	.word	0xe000ef34

08006b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <vPortEnterCritical+0x54>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	4a0d      	ldr	r2, [pc, #52]	; (8006b60 <vPortEnterCritical+0x54>)
 8006b2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <vPortEnterCritical+0x54>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10e      	bne.n	8006b54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b36:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <vPortEnterCritical+0x58>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <vPortEnterCritical+0x48>
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	e7fe      	b.n	8006b52 <vPortEnterCritical+0x46>
	}
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000010 	.word	0x20000010
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b6e:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <vPortExitCritical+0x4c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <vPortExitCritical+0x22>
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	607b      	str	r3, [r7, #4]
 8006b88:	e7fe      	b.n	8006b88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <vPortExitCritical+0x4c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	4a08      	ldr	r2, [pc, #32]	; (8006bb4 <vPortExitCritical+0x4c>)
 8006b92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <vPortExitCritical+0x4c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <vPortExitCritical+0x3e>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000010 	.word	0x20000010
	...

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f7fe ffe4 	bl	8005bbc <vTaskSwitchContext>
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f380 8811 	msr	BASEPRI, r0
 8006bfc:	bc09      	pop	{r0, r3}
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6808      	ldr	r0, [r1, #0]
 8006c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	f01e 0f10 	tst.w	lr, #16
 8006c0a:	bf08      	it	eq
 8006c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c10:	f380 8809 	msr	PSP, r0
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst>:
 8006c20:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c40:	f7fe ff04 	bl	8005a4c <xTaskIncrementTick>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <SysTick_Handler+0x3c>)
 8006c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	2300      	movs	r3, #0
 8006c54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <vPortSetupTimerInterrupt+0x34>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <vPortSetupTimerInterrupt+0x38>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <vPortSetupTimerInterrupt+0x3c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <vPortSetupTimerInterrupt+0x40>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	099b      	lsrs	r3, r3, #6
 8006c84:	4a09      	ldr	r2, [pc, #36]	; (8006cac <vPortSetupTimerInterrupt+0x44>)
 8006c86:	3b01      	subs	r3, #1
 8006c88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c8a:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <vPortSetupTimerInterrupt+0x34>)
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	601a      	str	r2, [r3, #0]
}
 8006c90:	bf00      	nop
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	e000e010 	.word	0xe000e010
 8006ca0:	e000e018 	.word	0xe000e018
 8006ca4:	20000004 	.word	0x20000004
 8006ca8:	10624dd3 	.word	0x10624dd3
 8006cac:	e000e014 	.word	0xe000e014

08006cb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cc0 <vPortEnableVFP+0x10>
 8006cb4:	6801      	ldr	r1, [r0, #0]
 8006cb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cba:	6001      	str	r1, [r0, #0]
 8006cbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cbe:	bf00      	nop
 8006cc0:	e000ed88 	.word	0xe000ed88

08006cc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cca:	f3ef 8305 	mrs	r3, IPSR
 8006cce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b0f      	cmp	r3, #15
 8006cd4:	d913      	bls.n	8006cfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cd6:	4a16      	ldr	r2, [pc, #88]	; (8006d30 <vPortValidateInterruptPriority+0x6c>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ce0:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <vPortValidateInterruptPriority+0x70>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	7afa      	ldrb	r2, [r7, #11]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d209      	bcs.n	8006cfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	607b      	str	r3, [r7, #4]
 8006cfc:	e7fe      	b.n	8006cfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cfe:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <vPortValidateInterruptPriority+0x74>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d06:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <vPortValidateInterruptPriority+0x78>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d909      	bls.n	8006d22 <vPortValidateInterruptPriority+0x5e>
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	e7fe      	b.n	8006d20 <vPortValidateInterruptPriority+0x5c>
	}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e3f0 	.word	0xe000e3f0
 8006d34:	20000d18 	.word	0x20000d18
 8006d38:	e000ed0c 	.word	0xe000ed0c
 8006d3c:	20000d1c 	.word	0x20000d1c

08006d40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	; 0x28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d4c:	f7fe fdc4 	bl	80058d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d50:	4b57      	ldr	r3, [pc, #348]	; (8006eb0 <pvPortMalloc+0x170>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d58:	f000 f90c 	bl	8006f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d5c:	4b55      	ldr	r3, [pc, #340]	; (8006eb4 <pvPortMalloc+0x174>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 808c 	bne.w	8006e82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01c      	beq.n	8006daa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006d70:	2208      	movs	r2, #8
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4413      	add	r3, r2
 8006d76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d013      	beq.n	8006daa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f023 0307 	bic.w	r3, r3, #7
 8006d88:	3308      	adds	r3, #8
 8006d8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <pvPortMalloc+0x6a>
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e7fe      	b.n	8006da8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d068      	beq.n	8006e82 <pvPortMalloc+0x142>
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <pvPortMalloc+0x178>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d863      	bhi.n	8006e82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dba:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <pvPortMalloc+0x17c>)
 8006dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <pvPortMalloc+0x17c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dc4:	e004      	b.n	8006dd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d903      	bls.n	8006de2 <pvPortMalloc+0xa2>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f1      	bne.n	8006dc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006de2:	4b33      	ldr	r3, [pc, #204]	; (8006eb0 <pvPortMalloc+0x170>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d04a      	beq.n	8006e82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	4413      	add	r3, r2
 8006df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	2308      	movs	r3, #8
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d91e      	bls.n	8006e4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d009      	beq.n	8006e34 <pvPortMalloc+0xf4>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e7fe      	b.n	8006e32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	1ad2      	subs	r2, r2, r3
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e46:	69b8      	ldr	r0, [r7, #24]
 8006e48:	f000 f8f6 	bl	8007038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <pvPortMalloc+0x178>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <pvPortMalloc+0x178>)
 8006e58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e5a:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <pvPortMalloc+0x178>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <pvPortMalloc+0x180>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d203      	bcs.n	8006e6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <pvPortMalloc+0x178>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <pvPortMalloc+0x180>)
 8006e6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <pvPortMalloc+0x174>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e82:	f7fe fd37 	bl	80058f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d009      	beq.n	8006ea4 <pvPortMalloc+0x164>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e7fe      	b.n	8006ea2 <pvPortMalloc+0x162>
	return pvReturn;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3728      	adds	r7, #40	; 0x28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	200018e0 	.word	0x200018e0
 8006eb4:	200018ec 	.word	0x200018ec
 8006eb8:	200018e4 	.word	0x200018e4
 8006ebc:	200018d8 	.word	0x200018d8
 8006ec0:	200018e8 	.word	0x200018e8

08006ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d046      	beq.n	8006f64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	425b      	negs	r3, r3
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4b20      	ldr	r3, [pc, #128]	; (8006f6c <vPortFree+0xa8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <vPortFree+0x42>
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e7fe      	b.n	8006f04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <vPortFree+0x5e>
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	60bb      	str	r3, [r7, #8]
 8006f20:	e7fe      	b.n	8006f20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <vPortFree+0xa8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d019      	beq.n	8006f64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d115      	bne.n	8006f64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <vPortFree+0xa8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	43db      	mvns	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f48:	f7fe fcc6 	bl	80058d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <vPortFree+0xac>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4413      	add	r3, r2
 8006f56:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <vPortFree+0xac>)
 8006f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f000 f86c 	bl	8007038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f60:	f7fe fcc8 	bl	80058f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f64:	bf00      	nop
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	200018ec 	.word	0x200018ec
 8006f70:	200018e4 	.word	0x200018e4

08006f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <prvHeapInit+0xac>)
 8006f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00c      	beq.n	8006fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3307      	adds	r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <prvHeapInit+0xac>)
 8006fa4:	4413      	add	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <prvHeapInit+0xb0>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <prvHeapInit+0xb0>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <prvHeapInit+0xb4>)
 8006fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <prvHeapInit+0xb4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <prvHeapInit+0xb4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <prvHeapInit+0xb4>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	4a0a      	ldr	r2, [pc, #40]	; (800702c <prvHeapInit+0xb8>)
 8007002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <prvHeapInit+0xbc>)
 800700a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <prvHeapInit+0xc0>)
 800700e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20000d20 	.word	0x20000d20
 8007024:	200018d8 	.word	0x200018d8
 8007028:	200018e0 	.word	0x200018e0
 800702c:	200018e8 	.word	0x200018e8
 8007030:	200018e4 	.word	0x200018e4
 8007034:	200018ec 	.word	0x200018ec

08007038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <prvInsertBlockIntoFreeList+0xac>)
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e002      	b.n	800704c <prvInsertBlockIntoFreeList+0x14>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d8f7      	bhi.n	8007046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4413      	add	r3, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d108      	bne.n	800707a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d118      	bne.n	80070c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d00d      	beq.n	80070b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e008      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <prvInsertBlockIntoFreeList+0xb0>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e003      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d002      	beq.n	80070d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	200018d8 	.word	0x200018d8
 80070e8:	200018e0 	.word	0x200018e0

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4e0d      	ldr	r6, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1ba4      	subs	r4, r4, r6
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2500      	movs	r5, #0
 80070f8:	42a5      	cmp	r5, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4e0b      	ldr	r6, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f000 f82c 	bl	800715c <_init>
 8007104:	1ba4      	subs	r4, r4, r6
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2500      	movs	r5, #0
 800710a:	42a5      	cmp	r5, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007114:	4798      	blx	r3
 8007116:	3501      	adds	r5, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800711e:	4798      	blx	r3
 8007120:	3501      	adds	r5, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	08007278 	.word	0x08007278
 8007128:	08007278 	.word	0x08007278
 800712c:	08007278 	.word	0x08007278
 8007130:	0800727c 	.word	0x0800727c

08007134 <memcpy>:
 8007134:	b510      	push	{r4, lr}
 8007136:	1e43      	subs	r3, r0, #1
 8007138:	440a      	add	r2, r1
 800713a:	4291      	cmp	r1, r2
 800713c:	d100      	bne.n	8007140 <memcpy+0xc>
 800713e:	bd10      	pop	{r4, pc}
 8007140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007148:	e7f7      	b.n	800713a <memcpy+0x6>

0800714a <memset>:
 800714a:	4402      	add	r2, r0
 800714c:	4603      	mov	r3, r0
 800714e:	4293      	cmp	r3, r2
 8007150:	d100      	bne.n	8007154 <memset+0xa>
 8007152:	4770      	bx	lr
 8007154:	f803 1b01 	strb.w	r1, [r3], #1
 8007158:	e7f9      	b.n	800714e <memset+0x4>
	...

0800715c <_init>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	bf00      	nop
 8007160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007162:	bc08      	pop	{r3}
 8007164:	469e      	mov	lr, r3
 8007166:	4770      	bx	lr

08007168 <_fini>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr
