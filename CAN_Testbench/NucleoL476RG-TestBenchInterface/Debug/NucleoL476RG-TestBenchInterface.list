
NucleoL476RG-TestBenchInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800716c  0800716c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007174  08007174  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800717c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a5c  20000014  08007190  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  08007190  00021a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d40f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d9  00000000  00000000  0003d453  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00040730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00041e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ec4  00000000  00000000  000433a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012629  00000000  00000000  0004726c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100753  00000000  00000000  00059895  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159fe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006120  00000000  00000000  0015a064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800707c 	.word	0x0800707c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800707c 	.word	0x0800707c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fc18 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f828 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f900 	bl	80006f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f8ce 	bl	8000690 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004f4:	f000 f898 	bl	8000628 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f003 ffd0 	bl	800449c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <main+0x48>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0x4c>)
 8000502:	f004 f835 	bl	8004570 <osThreadNew>
 8000506:	4602      	mov	r2, r0
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x50>)
 800050a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadNew(thread_transmit, NULL, &defaultTask_attributes);
 800050c:	4a06      	ldr	r2, [pc, #24]	; (8000528 <main+0x48>)
 800050e:	2100      	movs	r1, #0
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x54>)
 8000512:	f004 f82d 	bl	8004570 <osThreadNew>
  osThreadNew(thread_receive, NULL, &defaultTask_attributes);
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <main+0x48>)
 8000518:	2100      	movs	r1, #0
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x58>)
 800051c:	f004 f828 	bl	8004570 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f003 fff0 	bl	8004504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x44>
 8000526:	bf00      	nop
 8000528:	08007100 	.word	0x08007100
 800052c:	080009a1 	.word	0x080009a1
 8000530:	200018f0 	.word	0x200018f0
 8000534:	080007e5 	.word	0x080007e5
 8000538:	0800086d 	.word	0x0800086d

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0b8      	sub	sp, #224	; 0xe0
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000546:	2244      	movs	r2, #68	; 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fd8d 	bl	800706a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2288      	movs	r2, #136	; 0x88
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f006 fd7f 	bl	800706a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000576:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2310      	movs	r3, #16
 800057c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000592:	230a      	movs	r3, #10
 8000594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000598:	2307      	movs	r3, #7
 800059a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fd00 	bl	8001fb4 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ba:	f000 fa11 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2303      	movs	r3, #3
 80005c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f8cc 	bl	8002780 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ee:	f000 f9f7 	bl	80009e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fa:	463b      	mov	r3, r7
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 faf5 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000608:	f000 f9ea 	bl	80009e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000610:	f001 fc7a 	bl	8001f08 <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800061a:	f000 f9e1 	bl	80009e0 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	37e0      	adds	r7, #224	; 0xe0
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_CAN1_Init+0x60>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_CAN1_Init+0x64>)
 8000630:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 53;
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_CAN1_Init+0x60>)
 8000634:	2235      	movs	r2, #53	; 0x35
 8000636:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_CAN1_Init+0x60>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_CAN1_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_CAN1_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_CAN1_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_CAN1_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_CAN1_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_CAN1_Init+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_CAN1_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_CAN1_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_CAN1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_CAN1_Init+0x60>)
 8000676:	f000 fbb1 	bl	8000ddc <HAL_CAN_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 f9ae 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  //CAN_filterConfig();
  /* USER CODE END CAN1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20001984 	.word	0x20001984
 800068c:	40006400 	.word	0x40006400

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART2_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006d4:	f003 fa0c 	bl	8003af0 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f97f 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20001904 	.word	0x20001904
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a32      	ldr	r2, [pc, #200]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 fba5 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_GPIO_Init+0xe8>)
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4815      	ldr	r0, [pc, #84]	; (80007dc <MX_GPIO_Init+0xec>)
 8000788:	f001 f9f0 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078c:	2320      	movs	r3, #32
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f001 f9e1 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b0:	2312      	movs	r3, #18
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007bc:	2304      	movs	r3, #4
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <MX_GPIO_Init+0xf0>)
 80007c8:	f001 f9d0 	bl	8001b6c <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	10210000 	.word	0x10210000
 80007dc:	48000800 	.word	0x48000800
 80007e0:	48000400 	.word	0x48000400

080007e4 <thread_transmit>:

/* USER CODE BEGIN 4 */


void thread_transmit(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
	//periodically send CAN messages, also some UART
	while(HAL_CAN_Start(&hcan1)!=HAL_OK){}
 80007ea:	bf00      	nop
 80007ec:	481c      	ldr	r0, [pc, #112]	; (8000860 <thread_transmit+0x7c>)
 80007ee:	f000 fbf0 	bl	8000fd2 <HAL_CAN_Start>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f9      	bne.n	80007ec <thread_transmit+0x8>

	TickType_t pxLastWaketime = xTaskGetTickCount();
 80007f8:	f005 f8a4 	bl	8005944 <xTaskGetTickCount>
 80007fc:	4603      	mov	r3, r0
 80007fe:	60fb      	str	r3, [r7, #12]
	TickType_t xTimeIncrement = 1000;
 8000800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000804:	613b      	str	r3, [r7, #16]

	int iter = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
	char someString[] = "Iter i";
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <thread_transmit+0x80>)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000812:	6018      	str	r0, [r3, #0]
 8000814:	3304      	adds	r3, #4
 8000816:	8019      	strh	r1, [r3, #0]
 8000818:	3302      	adds	r3, #2
 800081a:	0c0a      	lsrs	r2, r1, #16
 800081c:	701a      	strb	r2, [r3, #0]


	for( ;; ){
		someString[5] = iter+48;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3330      	adds	r3, #48	; 0x30
 8000824:	b2db      	uxtb	r3, r3
 8000826:	727b      	strb	r3, [r7, #9]

		serialMsg(someString);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f830 	bl	8000890 <serialMsg>
		serialMsg("\n\r");
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <thread_transmit+0x84>)
 8000832:	f000 f82d 	bl	8000890 <serialMsg>

		CAN_Tx(someString);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f83f 	bl	80008bc <CAN_Tx>

		if(iter==9)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	2b09      	cmp	r3, #9
 8000842:	d102      	bne.n	800084a <thread_transmit+0x66>
			iter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e002      	b.n	8000850 <thread_transmit+0x6c>
		else
			iter++;
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3301      	adds	r3, #1
 800084e:	617b      	str	r3, [r7, #20]

		vTaskDelayUntil(&pxLastWaketime, xTimeIncrement);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	6939      	ldr	r1, [r7, #16]
 8000856:	4618      	mov	r0, r3
 8000858:	f004 feb8 	bl	80055cc <vTaskDelayUntil>
		someString[5] = iter+48;
 800085c:	e7df      	b.n	800081e <thread_transmit+0x3a>
 800085e:	bf00      	nop
 8000860:	20001984 	.word	0x20001984
 8000864:	080070c0 	.word	0x080070c0
 8000868:	080070bc 	.word	0x080070bc

0800086c <thread_receive>:
	}
}

void thread_receive(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	//check received CAN messages.
	//If received, UART message and send ACK
	TickType_t pxLastWaketime = xTaskGetTickCount();
 8000872:	f005 f867 	bl	8005944 <xTaskGetTickCount>
 8000876:	4603      	mov	r3, r0
 8000878:	603b      	str	r3, [r7, #0]
	TickType_t xTimeIncrement = 500;
 800087a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800087e:	607b      	str	r3, [r7, #4]
	//char someString[] = "Received ";


	for( ;; ){
		CAN_Rx();
 8000880:	f000 f85c 	bl	800093c <CAN_Rx>
		vTaskDelayUntil(&pxLastWaketime, xTimeIncrement);
 8000884:	463b      	mov	r3, r7
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	f004 fe9f 	bl	80055cc <vTaskDelayUntil>
		CAN_Rx();
 800088e:	e7f7      	b.n	8000880 <thread_receive+0x14>

08000890 <serialMsg>:
	}
}


//Send message on USART2 (USB 115200)
void serialMsg(char msg[]){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fc99 	bl	80001d0 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <serialMsg+0x28>)
 80008aa:	f003 f96f 	bl	8003b8c <HAL_UART_Transmit>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20001904 	.word	0x20001904

080008bc <CAN_Tx>:

void CAN_Tx(char msg[]){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	if(sizeof(*msg)<=8){
		TxHeader.DLC = 8;                         //Specifies the length of the frame that will be transmitted.
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <CAN_Tx+0x74>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;                //Specifies the type of identifier for the message that will be transmitted.
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <CAN_Tx+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;              //Specifies the type of frame for the message that will be transmitted.
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <CAN_Tx+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = OwnID;                   //Specifies the standard identifier.
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <CAN_Tx+0x78>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <CAN_Tx+0x74>)
 80008de:	601a      	str	r2, [r3, #0]
		TxHeader.TransmitGlobalTime = DISABLE;    
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <CAN_Tx+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	751a      	strb	r2, [r3, #20]
		TxHeader.ExtId = 1;                       //Specifies the extended identifier. 
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <CAN_Tx+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
		uint32_t TxMailBox;                       //Outgoing mail box


		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)msg, &TxMailBox) != HAL_OK) {
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	490f      	ldr	r1, [pc, #60]	; (8000930 <CAN_Tx+0x74>)
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <CAN_Tx+0x7c>)
 80008f6:	f000 fc13 	bl	8001120 <HAL_CAN_AddTxMessage>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <CAN_Tx+0x48>
			Error_Handler();
 8000900:	f000 f86e 	bl	80009e0 <Error_Handler>
		}

		if(HAL_CAN_IsSleepActive(&hcan1))
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <CAN_Tx+0x7c>)
 8000906:	f000 fbeb 	bl	80010e0 <HAL_CAN_IsSleepActive>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <CAN_Tx+0x5a>
			HAL_CAN_WakeUp(&hcan1);
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <CAN_Tx+0x7c>)
 8000912:	f000 fba3 	bl	800105c <HAL_CAN_WakeUp>
		while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));//Wait for message to be sent. 
 8000916:	bf00      	nop
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4619      	mov	r1, r3
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <CAN_Tx+0x7c>)
 800091e:	f000 fcda 	bl	80012d6 <HAL_CAN_IsTxMessagePending>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1f7      	bne.n	8000918 <CAN_Tx+0x5c>
      serialMsg("CAN Packet size too large. Packet size ");
      serialMsg((char*)sizeof(*msg));
      serialMsg(" Bytes.\n\r");
    }
  }
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200019ac 	.word	0x200019ac
 8000934:	20000000 	.word	0x20000000
 8000938:	20001984 	.word	0x20001984

0800093c <CAN_Rx>:

void CAN_Rx(void){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

	uint8_t receivedData[8];
	RxHeader.DLC = 8;             //Specifies the length of the frame that will be received.
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <CAN_Rx+0x54>)
 8000944:	2208      	movs	r2, #8
 8000946:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;    //Specifies the type of identifier for the message that will be received.
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <CAN_Rx+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;  //Specifies the type of frame for the message that will be received.
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <CAN_Rx+0x54>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x0;         //Specifies the standard identifier. Has no use when receiving. 
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <CAN_Rx+0x54>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]

//Receive the messsage
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, receivedData) != HAL_OK){
 800095a:	463b      	mov	r3, r7
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <CAN_Rx+0x54>)
 800095e:	2100      	movs	r1, #0
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <CAN_Rx+0x58>)
 8000962:	f000 fcdc 	bl	800131e <HAL_CAN_GetRxMessage>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10d      	bne.n	8000988 <CAN_Rx+0x4c>
		//Error_Handler();
		return;
	}
	else {

	HAL_Delay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 fa13 	bl	8000d98 <HAL_Delay>
	serialMsg("Rx: ");
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <CAN_Rx+0x5c>)
 8000974:	f7ff ff8c 	bl	8000890 <serialMsg>
	serialMsg((char*)receivedData);
 8000978:	463b      	mov	r3, r7
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff88 	bl	8000890 <serialMsg>
	serialMsg("\n\r");
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <CAN_Rx+0x60>)
 8000982:	f7ff ff85 	bl	8000890 <serialMsg>
 8000986:	e000      	b.n	800098a <CAN_Rx+0x4e>
		return;
 8000988:	bf00      	nop
  if(DEBUG_MODE){
		//serialMsg("Received message: ");
		//serialMsg((char*)receivedData);
		//serialMsg("\n\r");
  }
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200019c4 	.word	0x200019c4
 8000994:	20001984 	.word	0x20001984
 8000998:	080070c8 	.word	0x080070c8
 800099c:	080070bc 	.word	0x080070bc

080009a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	serialMsg("DefaultTask started\n\r");
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <StartDefaultTask+0x18>)
 80009aa:	f7ff ff71 	bl	8000890 <serialMsg>
	/* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 80009ae:	2064      	movs	r0, #100	; 0x64
 80009b0:	f003 fe84 	bl	80046bc <osDelay>
 80009b4:	e7fb      	b.n	80009ae <StartDefaultTask+0xe>
 80009b6:	bf00      	nop
 80009b8:	080070d0 	.word	0x080070d0

080009bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ce:	f000 f9c3 	bl	8000d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40001000 	.word	0x40001000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <Error_Handler+0x6>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	; 0x60
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_MspInit+0x4c>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f001 f877 	bl	8001b18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <HAL_CAN_MspInit+0x90>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d131      	bne.n	8000abe <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a64:	6593      	str	r3, [r2, #88]	; 0x58
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_CAN_MspInit+0x94>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f001 f85f 	bl	8001b6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2105      	movs	r1, #5
 8000ab2:	2014      	movs	r0, #20
 8000ab4:	f001 f830 	bl	8001b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ab8:	2014      	movs	r0, #20
 8000aba:	f001 f849 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x7c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d128      	bne.n	8000b44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b22:	230c      	movs	r3, #12
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f001 f814 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2036      	movs	r0, #54	; 0x36
 8000b6a:	f000 ffd5 	bl	8001b18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b6e:	2036      	movs	r0, #54	; 0x36
 8000b70:	f000 ffee 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_InitTick+0x9c>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_InitTick+0x9c>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_InitTick+0x9c>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 ff96 	bl	8002ac8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b9c:	f001 ff68 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_InitTick+0xa0>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0c9b      	lsrs	r3, r3, #18
 8000bac:	3b01      	subs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_InitTick+0xa8>)
 8000bb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bd2:	f002 fcbb 	bl	800354c <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d104      	bne.n	8000be6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bde:	f002 fd17 	bl	8003610 <HAL_TIM_Base_Start_IT>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	200019e0 	.word	0x200019e0
 8000bfc:	40001000 	.word	0x40001000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <CAN1_RX0_IRQHandler+0x14>)
 8000c32:	f000 fc86 	bl	8001542 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 8000c36:	f7ff fe81 	bl	800093c <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20001984 	.word	0x20001984

08000c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM6_DAC_IRQHandler+0x10>)
 8000c4a:	f002 fd51 	bl	80036f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200019e0 	.word	0x200019e0

08000c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <SystemInit+0x64>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <SystemInit+0x64>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <SystemInit+0x68>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <SystemInit+0x68>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <SystemInit+0x68>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <SystemInit+0x68>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <SystemInit+0x68>)
 8000c84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <SystemInit+0x68>)
 8000c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <SystemInit+0x68>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <SystemInit+0x68>)
 8000c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <SystemInit+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SystemInit+0x64>)
 8000caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc8:	f7ff ffc6 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ccc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cce:	e003      	b.n	8000cd8 <LoopCopyDataInit>

08000cd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cd6:	3104      	adds	r1, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ce0:	d3f6      	bcc.n	8000cd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ce4:	e002      	b.n	8000cec <LoopFillZerobss>

08000ce6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ce6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ce8:	f842 3b04 	str.w	r3, [r2], #4

08000cec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <LoopForever+0x16>)
	cmp	r2, r3
 8000cee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cf0:	d3f9      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f006 f98b 	bl	800700c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf6:	f7ff fbf3 	bl	80004e0 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cfc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d00:	0800717c 	.word	0x0800717c
	ldr	r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d08:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000d0c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000d10:	20001a70 	.word	0x20001a70

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_Init+0x3c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_Init+0x3c>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2e:	2003      	movs	r0, #3
 8000d30:	f000 fee7 	bl	8001b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff ff0d 	bl	8000b54 <HAL_InitTick>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	e001      	b.n	8000d4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d46:	f7ff fe4f 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	20001a2c 	.word	0x20001a2c

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20001a2c 	.word	0x20001a2c

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_Delay+0x40>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000000c 	.word	0x2000000c

08000ddc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0ed      	b.n	8000fca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fe1c 	bl	8000a38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0202 	bic.w	r2, r2, #2
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e10:	f7ff ffb6 	bl	8000d80 <HAL_GetTick>
 8000e14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e16:	e012      	b.n	8000e3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e18:	f7ff ffb2 	bl	8000d80 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	d90b      	bls.n	8000e3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2205      	movs	r2, #5
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0c5      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1e5      	bne.n	8000e18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e5c:	f7ff ff90 	bl	8000d80 <HAL_GetTick>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e62:	e012      	b.n	8000e8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e64:	f7ff ff8c 	bl	8000d80 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b0a      	cmp	r3, #10
 8000e70:	d90b      	bls.n	8000e8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2205      	movs	r2, #5
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e09f      	b.n	8000fca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0e5      	beq.n	8000e64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7e1b      	ldrb	r3, [r3, #24]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7e5b      	ldrb	r3, [r3, #25]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e007      	b.n	8000eec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e9b      	ldrb	r3, [r3, #26]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0220 	orr.w	r2, r2, #32
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0220 	bic.w	r2, r2, #32
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7edb      	ldrb	r3, [r3, #27]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d108      	bne.n	8000f30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0210 	bic.w	r2, r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0210 	orr.w	r2, r2, #16
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7f1b      	ldrb	r3, [r3, #28]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0208 	orr.w	r2, r2, #8
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0208 	bic.w	r2, r2, #8
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7f5b      	ldrb	r3, [r3, #29]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0204 	bic.w	r2, r2, #4
 8000f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	ea42 0103 	orr.w	r1, r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d12e      	bne.n	8001044 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ffe:	f7ff febf 	bl	8000d80 <HAL_GetTick>
 8001002:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001004:	e012      	b.n	800102c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001006:	f7ff febb 	bl	8000d80 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b0a      	cmp	r3, #10
 8001012:	d90b      	bls.n	800102c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2205      	movs	r2, #5
 8001024:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e012      	b.n	8001052 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1e5      	bne.n	8001006 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	e006      	b.n	8001052 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
  }
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_CAN_WakeUp+0x80>)
 800106a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001072:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001074:	7cfb      	ldrb	r3, [r7, #19]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d002      	beq.n	8001080 <HAL_CAN_WakeUp+0x24>
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d11f      	bne.n	80010c0 <HAL_CAN_WakeUp+0x64>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0202 	bic.w	r2, r2, #2
 800108e:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	429a      	cmp	r2, r3
 800109c:	d207      	bcs.n	80010ae <HAL_CAN_WakeUp+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <HAL_CAN_WakeUp+0x72>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <HAL_CAN_WakeUp+0x34>

    /* Return function status */
    return HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	e006      	b.n	80010ce <HAL_CAN_WakeUp+0x72>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
  }
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	000f4240 	.word	0x000f4240

080010e0 <HAL_CAN_IsSleepActive>:
  * @retval Status
  *          - 0 : Sleep mode is not active.
  *          - 1 : Sleep mode is active.
  */
uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d002      	beq.n	8001100 <HAL_CAN_IsSleepActive+0x20>
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d108      	bne.n	8001112 <HAL_CAN_IsSleepActive+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Sleep mode */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_CAN_IsSleepActive+0x32>
    {
      status = 1U;
 800110e:	2301      	movs	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return function status */
  return status;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001134:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800113e:	7ffb      	ldrb	r3, [r7, #31]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d003      	beq.n	800114c <HAL_CAN_AddTxMessage+0x2c>
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	2b02      	cmp	r3, #2
 8001148:	f040 80b8 	bne.w	80012bc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10a      	bne.n	800116c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800115c:	2b00      	cmp	r3, #0
 800115e:	d105      	bne.n	800116c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80a0 	beq.w	80012ac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	0e1b      	lsrs	r3, r3, #24
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d907      	bls.n	800118c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e09e      	b.n	80012ca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800118c:	2201      	movs	r2, #1
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	409a      	lsls	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3318      	adds	r3, #24
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	440b      	add	r3, r1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e00f      	b.n	80011da <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011c4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ca:	68f9      	ldr	r1, [r7, #12]
 80011cc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011ce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3318      	adds	r3, #24
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	440b      	add	r3, r1
 80011d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3318      	adds	r3, #24
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	440b      	add	r3, r1
 80011ea:	3304      	adds	r3, #4
 80011ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	7d1b      	ldrb	r3, [r3, #20]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d111      	bne.n	800121a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3318      	adds	r3, #24
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4413      	add	r3, r2
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	6811      	ldr	r1, [r2, #0]
 800120a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3318      	adds	r3, #24
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	440b      	add	r3, r1
 8001216:	3304      	adds	r3, #4
 8001218:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3307      	adds	r3, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	061a      	lsls	r2, r3, #24
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3306      	adds	r3, #6
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	041b      	lsls	r3, r3, #16
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3305      	adds	r3, #5
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	4313      	orrs	r3, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	3204      	adds	r2, #4
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	4610      	mov	r0, r2
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	6811      	ldr	r1, [r2, #0]
 8001242:	ea43 0200 	orr.w	r2, r3, r0
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	440b      	add	r3, r1
 800124c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001250:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3303      	adds	r3, #3
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	061a      	lsls	r2, r3, #24
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3302      	adds	r3, #2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	041b      	lsls	r3, r3, #16
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	4313      	orrs	r3, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	4610      	mov	r0, r2
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	6811      	ldr	r1, [r2, #0]
 8001278:	ea43 0200 	orr.w	r2, r3, r0
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	440b      	add	r3, r1
 8001282:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001286:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3318      	adds	r3, #24
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3318      	adds	r3, #24
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e00e      	b.n	80012ca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e006      	b.n	80012ca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
  }
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ea:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d002      	beq.n	80012f8 <HAL_CAN_IsTxMessagePending+0x22>
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d10b      	bne.n	8001310 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	069b      	lsls	r3, r3, #26
 8001302:	401a      	ands	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	069b      	lsls	r3, r3, #26
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800130c:	2301      	movs	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800131e:	b480      	push	{r7}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001332:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d003      	beq.n	8001342 <HAL_CAN_GetRxMessage+0x24>
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	2b02      	cmp	r3, #2
 800133e:	f040 80f3 	bne.w	8001528 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10e      	bne.n	8001366 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0e7      	b.n	8001536 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d107      	bne.n	8001384 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0d8      	b.n	8001536 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	331b      	adds	r3, #27
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0204 	and.w	r2, r3, #4
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	331b      	adds	r3, #27
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0d5b      	lsrs	r3, r3, #21
 80013b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	e00b      	b.n	80013d4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	331b      	adds	r3, #27
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	331b      	adds	r3, #27
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0202 	and.w	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	3304      	adds	r3, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 020f 	and.w	r2, r3, #15
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	331b      	adds	r3, #27
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b2da      	uxtb	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	331b      	adds	r3, #27
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0a1a      	lsrs	r2, r3, #8
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0c1a      	lsrs	r2, r3, #16
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3302      	adds	r3, #2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0e1a      	lsrs	r2, r3, #24
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3303      	adds	r3, #3
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3304      	adds	r3, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0a1a      	lsrs	r2, r3, #8
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3305      	adds	r3, #5
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0c1a      	lsrs	r2, r3, #16
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3306      	adds	r3, #6
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0e1a      	lsrs	r2, r3, #24
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3307      	adds	r3, #7
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d108      	bne.n	8001514 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0220 	orr.w	r2, r2, #32
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	e007      	b.n	8001524 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0220 	orr.w	r2, r2, #32
 8001522:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	e006      	b.n	8001536 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b08a      	sub	sp, #40	; 0x28
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d07c      	beq.n	8001682 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d023      	beq.n	80015da <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2201      	movs	r2, #1
 8001598:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f97d 	bl	80018a4 <HAL_CAN_TxMailbox0CompleteCallback>
 80015aa:	e016      	b.n	80015da <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d004      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	e00c      	b.n	80015da <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
 80015d2:	e002      	b.n	80015da <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f983 	bl	80018e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d024      	beq.n	800162e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f95d 	bl	80018b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80015fe:	e016      	b.n	800162e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	e00c      	b.n	800162e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	e002      	b.n	800162e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f963 	bl	80018f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d024      	beq.n	8001682 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001640:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f93d 	bl	80018cc <HAL_CAN_TxMailbox2CompleteCallback>
 8001652:	e016      	b.n	8001682 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	e00c      	b.n	8001682 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	e002      	b.n	8001682 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f943 	bl	8001908 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2210      	movs	r2, #16
 80016a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2208      	movs	r2, #8
 80016c0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f934 	bl	8001930 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f91b 	bl	800191c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00c      	beq.n	800170a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001700:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2210      	movs	r2, #16
 8001708:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00b      	beq.n	800172c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2208      	movs	r2, #8
 8001724:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f916 	bl	8001958 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8fd 	bl	8001944 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2210      	movs	r2, #16
 8001764:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f900 	bl	800196c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2208      	movs	r2, #8
 8001786:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8f9 	bl	8001980 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d075      	beq.n	8001884 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d06c      	beq.n	800187c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03d      	beq.n	800187c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001806:	2b00      	cmp	r3, #0
 8001808:	d038      	beq.n	800187c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001810:	2b30      	cmp	r3, #48	; 0x30
 8001812:	d017      	beq.n	8001844 <HAL_CAN_IRQHandler+0x302>
 8001814:	2b30      	cmp	r3, #48	; 0x30
 8001816:	d804      	bhi.n	8001822 <HAL_CAN_IRQHandler+0x2e0>
 8001818:	2b10      	cmp	r3, #16
 800181a:	d009      	beq.n	8001830 <HAL_CAN_IRQHandler+0x2ee>
 800181c:	2b20      	cmp	r3, #32
 800181e:	d00c      	beq.n	800183a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001820:	e024      	b.n	800186c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001822:	2b50      	cmp	r3, #80	; 0x50
 8001824:	d018      	beq.n	8001858 <HAL_CAN_IRQHandler+0x316>
 8001826:	2b60      	cmp	r3, #96	; 0x60
 8001828:	d01b      	beq.n	8001862 <HAL_CAN_IRQHandler+0x320>
 800182a:	2b40      	cmp	r3, #64	; 0x40
 800182c:	d00f      	beq.n	800184e <HAL_CAN_IRQHandler+0x30c>
            break;
 800182e:	e01d      	b.n	800186c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001838:	e018      	b.n	800186c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001842:	e013      	b.n	800186c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	f043 0320 	orr.w	r3, r3, #32
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800184c:	e00e      	b.n	800186c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001856:	e009      	b.n	800186c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001860:	e004      	b.n	800186c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800186a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800187a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2204      	movs	r2, #4
 8001882:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f87c 	bl	8001994 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4907      	ldr	r1, [pc, #28]	; (8001a44 <__NVIC_EnableIRQ+0x38>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	; (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff4c 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2a:	f7ff ff61 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f7ff ffb1 	bl	8001a9c <NVIC_EncodePriority>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff80 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff54 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e17f      	b.n	8001e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8171 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_GPIO_Init+0x48>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d007      	beq.n	8001bb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba8:	2b11      	cmp	r3, #17
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 0201 	and.w	r2, r3, #1
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d118      	bne.n	8001c54 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x128>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ac 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b5e      	ldr	r3, [pc, #376]	; (8001e98 <HAL_GPIO_Init+0x32c>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4a5d      	ldr	r2, [pc, #372]	; (8001e98 <HAL_GPIO_Init+0x32c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2a:	4b5b      	ldr	r3, [pc, #364]	; (8001e98 <HAL_GPIO_Init+0x32c>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d36:	4a59      	ldr	r2, [pc, #356]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d60:	d025      	beq.n	8001dae <HAL_GPIO_Init+0x242>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4e      	ldr	r2, [pc, #312]	; (8001ea0 <HAL_GPIO_Init+0x334>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <HAL_GPIO_Init+0x338>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_GPIO_Init+0x33c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4b      	ldr	r2, [pc, #300]	; (8001eac <HAL_GPIO_Init+0x340>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_GPIO_Init+0x344>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_GPIO_Init+0x348>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x22a>
 8001d92:	2306      	movs	r3, #6
 8001d94:	e00c      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00a      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e008      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001dae:	2300      	movs	r3, #0
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	f002 0203 	and.w	r2, r2, #3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc0:	4936      	ldr	r1, [pc, #216]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dce:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df2:	4a31      	ldr	r2, [pc, #196]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e1c:	4a26      	ldr	r2, [pc, #152]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e22:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae78 	bne.w	8001b7c <HAL_GPIO_Init+0x10>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	48000800 	.word	0x48000800
 8001ea8:	48000c00 	.word	0x48000c00
 8001eac:	48001000 	.word	0x48001000
 8001eb0:	48001400 	.word	0x48001400
 8001eb4:	48001800 	.word	0x48001800
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f16:	d130      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f24:	d038      	beq.n	8001f98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2232      	movs	r2, #50	; 0x32
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9b      	lsrs	r3, r3, #18
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f4c:	e002      	b.n	8001f54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f60:	d102      	bne.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f2      	bne.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f74:	d110      	bne.n	8001f98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e00f      	b.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d007      	beq.n	8001f98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	431bde83 	.word	0x431bde83

08001fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e3d4      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc6:	4ba1      	ldr	r3, [pc, #644]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd0:	4b9e      	ldr	r3, [pc, #632]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80e4 	beq.w	80021b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_RCC_OscConfig+0x4a>
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	f040 808b 	bne.w	800210c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	f040 8087 	bne.w	800210c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ffe:	4b93      	ldr	r3, [pc, #588]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x62>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e3ac      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1a      	ldr	r2, [r3, #32]
 800201a:	4b8c      	ldr	r3, [pc, #560]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_RCC_OscConfig+0x7c>
 8002026:	4b89      	ldr	r3, [pc, #548]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202e:	e005      	b.n	800203c <HAL_RCC_OscConfig+0x88>
 8002030:	4b86      	ldr	r3, [pc, #536]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203c:	4293      	cmp	r3, r2
 800203e:	d223      	bcs.n	8002088 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fd71 	bl	8002b2c <RCC_SetFlashLatencyFromMSIRange>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e38d      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002054:	4b7d      	ldr	r3, [pc, #500]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a7c      	ldr	r2, [pc, #496]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b7a      	ldr	r3, [pc, #488]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4977      	ldr	r1, [pc, #476]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	4972      	ldr	r1, [pc, #456]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
 8002086:	e025      	b.n	80020d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002088:	4b70      	ldr	r3, [pc, #448]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6f      	ldr	r2, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800208e:	f043 0308 	orr.w	r3, r3, #8
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b6d      	ldr	r3, [pc, #436]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	496a      	ldr	r1, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a6:	4b69      	ldr	r3, [pc, #420]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	4965      	ldr	r1, [pc, #404]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fd31 	bl	8002b2c <RCC_SetFlashLatencyFromMSIRange>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e34d      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020d4:	f000 fc36 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80020d8:	4601      	mov	r1, r0
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_RCC_OscConfig+0x29c>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa21 f303 	lsr.w	r3, r1, r3
 80020f0:	4a58      	ldr	r2, [pc, #352]	; (8002254 <HAL_RCC_OscConfig+0x2a0>)
 80020f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020f4:	4b58      	ldr	r3, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x2a4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fd2b 	bl	8000b54 <HAL_InitTick>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d052      	beq.n	80021ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	e331      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d032      	beq.n	800217a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002114:	4b4d      	ldr	r3, [pc, #308]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a4c      	ldr	r2, [pc, #304]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002120:	f7fe fe2e 	bl	8000d80 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002128:	f7fe fe2a 	bl	8000d80 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e31a      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a40      	ldr	r2, [pc, #256]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	493b      	ldr	r1, [pc, #236]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002164:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	4936      	ldr	r1, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e01a      	b.n	80021b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800217a:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a33      	ldr	r2, [pc, #204]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002186:	f7fe fdfb 	bl	8000d80 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800218e:	f7fe fdf7 	bl	8000d80 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e2e7      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x1da>
 80021ac:	e000      	b.n	80021b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d074      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d005      	beq.n	80021ce <HAL_RCC_OscConfig+0x21a>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d10e      	bne.n	80021e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d10b      	bne.n	80021e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d064      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2f0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d160      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e2c4      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x24a>
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a15      	ldr	r2, [pc, #84]	; (800224c <HAL_RCC_OscConfig+0x298>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e01d      	b.n	800223a <HAL_RCC_OscConfig+0x286>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002206:	d10c      	bne.n	8002222 <HAL_RCC_OscConfig+0x26e>
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800220e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_RCC_OscConfig+0x298>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e00b      	b.n	800223a <HAL_RCC_OscConfig+0x286>
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_RCC_OscConfig+0x298>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01c      	beq.n	800227c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fd9d 	bl	8000d80 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002248:	e011      	b.n	800226e <HAL_RCC_OscConfig+0x2ba>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	08007124 	.word	0x08007124
 8002254:	20000004 	.word	0x20000004
 8002258:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe fd90 	bl	8000d80 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e280      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226e:	4baf      	ldr	r3, [pc, #700]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x2a8>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fd80 	bl	8000d80 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fd7c 	bl	8000d80 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e26c      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002296:	4ba5      	ldr	r3, [pc, #660]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x2d0>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d060      	beq.n	8002374 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_OscConfig+0x310>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d119      	bne.n	80022f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d116      	bne.n	80022f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c4:	4b99      	ldr	r3, [pc, #612]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_OscConfig+0x328>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e249      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b93      	ldr	r3, [pc, #588]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	4990      	ldr	r1, [pc, #576]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f0:	e040      	b.n	8002374 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d023      	beq.n	8002342 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fa:	4b8c      	ldr	r3, [pc, #560]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a8b      	ldr	r2, [pc, #556]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fd3b 	bl	8000d80 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe fd37 	bl	8000d80 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e227      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002320:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b7f      	ldr	r3, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	497c      	ldr	r1, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
 8002340:	e018      	b.n	8002374 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	4b7a      	ldr	r3, [pc, #488]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe fd17 	bl	8000d80 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe fd13 	bl	8000d80 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e203      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002368:	4b70      	ldr	r3, [pc, #448]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d03c      	beq.n	80023fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238e:	4a67      	ldr	r2, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7fe fcf2 	bl	8000d80 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7fe fcee 	bl	8000d80 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1de      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b2:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80023b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ef      	beq.n	80023a0 <HAL_RCC_OscConfig+0x3ec>
 80023c0:	e01b      	b.n	80023fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c2:	4b5a      	ldr	r3, [pc, #360]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80023c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe fcd5 	bl	8000d80 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023da:	f7fe fcd1 	bl	8000d80 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1c1      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ef      	bne.n	80023da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80a6 	beq.w	8002554 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	4b44      	ldr	r3, [pc, #272]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	4a43      	ldr	r2, [pc, #268]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	6593      	str	r3, [r2, #88]	; 0x58
 8002424:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002430:	2301      	movs	r3, #1
 8002432:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002434:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <HAL_RCC_OscConfig+0x57c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d118      	bne.n	8002472 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_OscConfig+0x57c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <HAL_RCC_OscConfig+0x57c>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244c:	f7fe fc98 	bl	8000d80 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002454:	f7fe fc94 	bl	8000d80 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e184      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x57c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d108      	bne.n	800248c <HAL_RCC_OscConfig+0x4d8>
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248a:	e024      	b.n	80024d6 <HAL_RCC_OscConfig+0x522>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b05      	cmp	r3, #5
 8002492:	d110      	bne.n	80024b6 <HAL_RCC_OscConfig+0x502>
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_OscConfig+0x578>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x578>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b4:	e00f      	b.n	80024d6 <HAL_RCC_OscConfig+0x522>
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80024ce:	f023 0304 	bic.w	r3, r3, #4
 80024d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fc4f 	bl	8000d80 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fc4b 	bl	8000d80 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e139      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x578>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ed      	beq.n	80024e6 <HAL_RCC_OscConfig+0x532>
 800250a:	e01a      	b.n	8002542 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fc38 	bl	8000d80 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002512:	e00f      	b.n	8002534 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fc34 	bl	8000d80 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d906      	bls.n	8002534 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e122      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002534:	4b90      	ldr	r3, [pc, #576]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e8      	bne.n	8002514 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002548:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	4a8a      	ldr	r2, [pc, #552]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800254e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002552:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8108 	beq.w	800276e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	2b02      	cmp	r3, #2
 8002564:	f040 80d0 	bne.w	8002708 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002568:	4b83      	ldr	r3, [pc, #524]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	429a      	cmp	r2, r3
 800257a:	d130      	bne.n	80025de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	3b01      	subs	r3, #1
 8002588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d127      	bne.n	80025de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d11f      	bne.n	80025de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a8:	2a07      	cmp	r2, #7
 80025aa:	bf14      	ite	ne
 80025ac:	2201      	movne	r2, #1
 80025ae:	2200      	moveq	r2, #0
 80025b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d113      	bne.n	80025de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	3b01      	subs	r3, #1
 80025c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d109      	bne.n	80025de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	3b01      	subs	r3, #1
 80025d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d06e      	beq.n	80026bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	d069      	beq.n	80026b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b7      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002600:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a5c      	ldr	r2, [pc, #368]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800260c:	f7fe fbb8 	bl	8000d80 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fbb4 	bl	8000d80 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0a4      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002626:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_RCC_OscConfig+0x7c8>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002642:	3a01      	subs	r2, #1
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800264c:	0212      	lsls	r2, r2, #8
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002654:	0852      	lsrs	r2, r2, #1
 8002656:	3a01      	subs	r2, #1
 8002658:	0552      	lsls	r2, r2, #21
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002660:	0852      	lsrs	r2, r2, #1
 8002662:	3a01      	subs	r2, #1
 8002664:	0652      	lsls	r2, r2, #25
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800266c:	0912      	lsrs	r2, r2, #4
 800266e:	0452      	lsls	r2, r2, #17
 8002670:	430a      	orrs	r2, r1
 8002672:	4941      	ldr	r1, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002678:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a3e      	ldr	r2, [pc, #248]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002684:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002690:	f7fe fb76 	bl	8000d80 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fb72 	bl	8000d80 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e062      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b6:	e05a      	b.n	800276e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e059      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026bc:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d152      	bne.n	800276e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026e0:	f7fe fb4e 	bl	8000d80 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fb4a 	bl	8000d80 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e03a      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x734>
 8002706:	e032      	b.n	800276e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d02d      	beq.n	800276a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002718:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800272c:	f023 0303 	bic.w	r3, r3, #3
 8002730:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 8002738:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fb1d 	bl	8000d80 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fb19 	bl	8000d80 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e009      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x7c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x796>
 8002768:	e001      	b.n	800276e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	f99d808c 	.word	0xf99d808c

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0c8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b66      	ldr	r3, [pc, #408]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d910      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4961      	ldr	r1, [pc, #388]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b0      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d04c      	beq.n	800286a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d8:	4b56      	ldr	r3, [pc, #344]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d121      	bne.n	8002828 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e09e      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d115      	bne.n	8002828 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e092      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002808:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e086      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002818:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e07e      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002828:	4b42      	ldr	r3, [pc, #264]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 0203 	bic.w	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	493f      	ldr	r1, [pc, #252]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283a:	f7fe faa1 	bl	8000d80 <HAL_GetTick>
 800283e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002840:	e00a      	b.n	8002858 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002842:	f7fe fa9d 	bl	8000d80 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e066      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 020c 	and.w	r2, r3, #12
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	429a      	cmp	r2, r3
 8002868:	d1eb      	bne.n	8002842 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	492c      	ldr	r1, [pc, #176]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b29      	ldr	r3, [pc, #164]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d210      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 0207 	bic.w	r2, r3, #7
 800289e:	4924      	ldr	r1, [pc, #144]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1b0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e036      	b.n	8002926 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4918      	ldr	r1, [pc, #96]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4910      	ldr	r1, [pc, #64]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028f6:	f000 f825 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80028fa:	4601      	mov	r1, r0
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCC_ClockConfig+0x1b4>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	fa21 f303 	lsr.w	r3, r1, r3
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f91a 	bl	8000b54 <HAL_InitTick>
 8002920:	4603      	mov	r3, r0
 8002922:	72fb      	strb	r3, [r7, #11]

  return status;
 8002924:	7afb      	ldrb	r3, [r7, #11]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08007124 	.word	0x08007124
 800293c:	20000004 	.word	0x20000004
 8002940:	20000008 	.word	0x20000008

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295c:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x34>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d121      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d11e      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002984:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e005      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002994:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029a0:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10d      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e004      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	d133      	bne.n	8002a3a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d002      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0xaa>
 80029e6:	e005      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ea:	617b      	str	r3, [r7, #20]
      break;
 80029ec:	e005      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x110>)
 80029f0:	617b      	str	r3, [r7, #20]
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	617b      	str	r3, [r7, #20]
      break;
 80029f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	3301      	adds	r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	fb02 f203 	mul.w	r2, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0e5b      	lsrs	r3, r3, #25
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3724      	adds	r7, #36	; 0x24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	0800713c 	.word	0x0800713c
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a74:	f7ff fff0 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a78:	4601      	mov	r1, r0
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08007134 	.word	0x08007134

08002a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aa0:	f7ff ffda 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0adb      	lsrs	r3, r3, #11
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08007134 	.word	0x08007134

08002ac8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_RCC_GetClockConfig+0x60>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0207 	and.w	r2, r3, #7
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40022000 	.word	0x40022000

08002b2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b38:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b44:	f7ff f9d2 	bl	8001eec <HAL_PWREx_GetVoltageRange>
 8002b48:	6178      	str	r0, [r7, #20]
 8002b4a:	e014      	b.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b56:	6593      	str	r3, [r2, #88]	; 0x58
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b64:	f7ff f9c2 	bl	8001eec <HAL_PWREx_GetVoltageRange>
 8002b68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7c:	d10b      	bne.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d919      	bls.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2ba0      	cmp	r3, #160	; 0xa0
 8002b88:	d902      	bls.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e013      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b90:	2301      	movs	r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e010      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d902      	bls.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	e00a      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d102      	bne.n	8002bae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba8:	2302      	movs	r3, #2
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	e004      	b.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b70      	cmp	r3, #112	; 0x70
 8002bb2:	d101      	bne.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 0207 	bic.w	r2, r3, #7
 8002bc0:	4909      	ldr	r1, [pc, #36]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40022000 	.word	0x40022000

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d03f      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c10:	d01c      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c16:	d802      	bhi.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002c1c:	e01f      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c22:	d003      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c28:	d01c      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002c2a:	e018      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c2c:	4b85      	ldr	r3, [pc, #532]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a84      	ldr	r2, [pc, #528]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c38:	e015      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fab9 	bl	80031b8 <RCCEx_PLLSAI1_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c4a:	e00c      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3320      	adds	r3, #32
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fba0 	bl	8003398 <RCCEx_PLLSAI2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	74fb      	strb	r3, [r7, #19]
      break;
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6c:	4b75      	ldr	r3, [pc, #468]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c7a:	4972      	ldr	r1, [pc, #456]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c82:	e001      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d01c      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca2:	d802      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ca8:	e01f      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cae:	d003      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002cb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cb4:	d01c      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002cb6:	e018      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cb8:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a61      	ldr	r2, [pc, #388]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fa73 	bl	80031b8 <RCCEx_PLLSAI1_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cd6:	e00c      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3320      	adds	r3, #32
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fb5a 	bl	8003398 <RCCEx_PLLSAI2_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ce8:	e003      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	74fb      	strb	r3, [r7, #19]
      break;
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf2:	7cfb      	ldrb	r3, [r7, #19]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d06:	494f      	ldr	r1, [pc, #316]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d0e:	e001      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80a0 	beq.w	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3c:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6593      	str	r3, [r2, #88]	; 0x58
 8002d48:	4b3e      	ldr	r3, [pc, #248]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d64:	f7fe f80c 	bl	8000d80 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d6a:	e009      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe f808 	bl	8000d80 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d902      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d7e:	e005      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d15c      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d92:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01f      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d019      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ddc:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fd ffc7 	bl	8000d80 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df4:	e00b      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fd ffc3 	bl	8000d80 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d902      	bls.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002e0c:	e006      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ec      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e32:	4904      	ldr	r1, [pc, #16]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e3a:	e009      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
 8002e40:	e006      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e50:	7c7b      	ldrb	r3, [r7, #17]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b9e      	ldr	r3, [pc, #632]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	4a9d      	ldr	r2, [pc, #628]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e6e:	4b98      	ldr	r3, [pc, #608]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f023 0203 	bic.w	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	4994      	ldr	r1, [pc, #592]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e90:	4b8f      	ldr	r3, [pc, #572]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f023 020c 	bic.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	498c      	ldr	r1, [pc, #560]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb2:	4b87      	ldr	r3, [pc, #540]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4983      	ldr	r1, [pc, #524]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ed4:	4b7e      	ldr	r3, [pc, #504]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	497b      	ldr	r1, [pc, #492]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef6:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f04:	4972      	ldr	r1, [pc, #456]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f18:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	496a      	ldr	r1, [pc, #424]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	4961      	ldr	r1, [pc, #388]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f5c:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	4959      	ldr	r1, [pc, #356]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f7e:	4b54      	ldr	r3, [pc, #336]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8c:	4950      	ldr	r1, [pc, #320]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	4948      	ldr	r1, [pc, #288]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc2:	4b43      	ldr	r3, [pc, #268]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	493f      	ldr	r1, [pc, #252]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d028      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fe4:	4b3a      	ldr	r3, [pc, #232]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff2:	4937      	ldr	r1, [pc, #220]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003002:	d106      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a31      	ldr	r2, [pc, #196]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800300a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300e:	60d3      	str	r3, [r2, #12]
 8003010:	e011      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003016:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301a:	d10c      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f8c8 	bl	80031b8 <RCCEx_PLLSAI1_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d028      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	491f      	ldr	r1, [pc, #124]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003060:	d106      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003062:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306c:	60d3      	str	r3, [r2, #12]
 800306e:	e011      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f899 	bl	80031b8 <RCCEx_PLLSAI1_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02b      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030be:	d109      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a02      	ldr	r2, [pc, #8]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]
 80030cc:	e014      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2101      	movs	r1, #1
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f867 	bl	80031b8 <RCCEx_PLLSAI1_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02f      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003112:	4928      	ldr	r1, [pc, #160]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003122:	d10d      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f844 	bl	80031b8 <RCCEx_PLLSAI1_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d014      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	74bb      	strb	r3, [r7, #18]
 800313e:	e011      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3320      	adds	r3, #32
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f921 	bl	8003398 <RCCEx_PLLSAI2_Config>
 8003156:	4603      	mov	r3, r0
 8003158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317e:	490d      	ldr	r1, [pc, #52]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a2:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000

080031b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031c6:	4b73      	ldr	r3, [pc, #460]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d018      	beq.n	8003204 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031d2:	4b70      	ldr	r3, [pc, #448]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0203 	and.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d10d      	bne.n	80031fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
       ||
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
       ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d044      	beq.n	8003288 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	e041      	b.n	8003288 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d00c      	beq.n	8003226 <RCCEx_PLLSAI1_Config+0x6e>
 800320c:	2b03      	cmp	r3, #3
 800320e:	d013      	beq.n	8003238 <RCCEx_PLLSAI1_Config+0x80>
 8003210:	2b01      	cmp	r3, #1
 8003212:	d120      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003214:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11d      	bne.n	800325c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003224:	e01a      	b.n	800325c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322e:	2b00      	cmp	r3, #0
 8003230:	d116      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003236:	e013      	b.n	8003260 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003238:	4b56      	ldr	r3, [pc, #344]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10f      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003244:	4b53      	ldr	r3, [pc, #332]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003254:	e006      	b.n	8003264 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
      break;
 800325a:	e004      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800325c:	bf00      	nop
 800325e:	e002      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003264:	bf00      	nop
    }

    if(status == HAL_OK)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	3b01      	subs	r3, #1
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	430b      	orrs	r3, r1
 8003282:	4944      	ldr	r1, [pc, #272]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d17d      	bne.n	800338a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800328e:	4b41      	ldr	r3, [pc, #260]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a40      	ldr	r2, [pc, #256]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003294:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329a:	f7fd fd71 	bl	8000d80 <HAL_GetTick>
 800329e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032a0:	e009      	b.n	80032b6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a2:	f7fd fd6d 	bl	8000d80 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d902      	bls.n	80032b6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	73fb      	strb	r3, [r7, #15]
        break;
 80032b4:	e005      	b.n	80032c2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032b6:	4b37      	ldr	r3, [pc, #220]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ef      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d160      	bne.n	800338a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d111      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ce:	4b31      	ldr	r3, [pc, #196]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6892      	ldr	r2, [r2, #8]
 80032de:	0211      	lsls	r1, r2, #8
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68d2      	ldr	r2, [r2, #12]
 80032e4:	0912      	lsrs	r2, r2, #4
 80032e6:	0452      	lsls	r2, r2, #17
 80032e8:	430a      	orrs	r2, r1
 80032ea:	492a      	ldr	r1, [pc, #168]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	610b      	str	r3, [r1, #16]
 80032f0:	e027      	b.n	8003342 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d112      	bne.n	800331e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f8:	4b26      	ldr	r3, [pc, #152]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	0211      	lsls	r1, r2, #8
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6912      	ldr	r2, [r2, #16]
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0552      	lsls	r2, r2, #21
 8003314:	430a      	orrs	r2, r1
 8003316:	491f      	ldr	r1, [pc, #124]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
 800331c:	e011      	b.n	8003342 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003326:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	0211      	lsls	r1, r2, #8
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6952      	ldr	r2, [r2, #20]
 8003334:	0852      	lsrs	r2, r2, #1
 8003336:	3a01      	subs	r2, #1
 8003338:	0652      	lsls	r2, r2, #25
 800333a:	430a      	orrs	r2, r1
 800333c:	4915      	ldr	r1, [pc, #84]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800334c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fd fd17 	bl	8000d80 <HAL_GetTick>
 8003352:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003354:	e009      	b.n	800336a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003356:	f7fd fd13 	bl	8000d80 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d902      	bls.n	800336a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	73fb      	strb	r3, [r7, #15]
          break;
 8003368:	e005      	b.n	8003376 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ef      	beq.n	8003356 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000

08003398 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033a6:	4b68      	ldr	r3, [pc, #416]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d018      	beq.n	80033e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0203 	and.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d10d      	bne.n	80033de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
       ||
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
       ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d044      	beq.n	8003468 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	e041      	b.n	8003468 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d00c      	beq.n	8003406 <RCCEx_PLLSAI2_Config+0x6e>
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d013      	beq.n	8003418 <RCCEx_PLLSAI2_Config+0x80>
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d120      	bne.n	8003436 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033f4:	4b54      	ldr	r3, [pc, #336]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11d      	bne.n	800343c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e01a      	b.n	800343c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003406:	4b50      	ldr	r3, [pc, #320]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003416:	e013      	b.n	8003440 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003424:	4b48      	ldr	r3, [pc, #288]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003434:	e006      	b.n	8003444 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      break;
 800343a:	e004      	b.n	8003446 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800343c:	bf00      	nop
 800343e:	e002      	b.n	8003446 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003444:	bf00      	nop
    }

    if(status == HAL_OK)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800344c:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	3b01      	subs	r3, #1
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	430b      	orrs	r3, r1
 8003462:	4939      	ldr	r1, [pc, #228]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d167      	bne.n	800353e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a35      	ldr	r2, [pc, #212]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347a:	f7fd fc81 	bl	8000d80 <HAL_GetTick>
 800347e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003480:	e009      	b.n	8003496 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003482:	f7fd fc7d 	bl	8000d80 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d902      	bls.n	8003496 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	73fb      	strb	r3, [r7, #15]
        break;
 8003494:	e005      	b.n	80034a2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003496:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ef      	bne.n	8003482 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d14a      	bne.n	800353e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d111      	bne.n	80034d2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	0211      	lsls	r1, r2, #8
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68d2      	ldr	r2, [r2, #12]
 80034c4:	0912      	lsrs	r2, r2, #4
 80034c6:	0452      	lsls	r2, r2, #17
 80034c8:	430a      	orrs	r2, r1
 80034ca:	491f      	ldr	r1, [pc, #124]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	614b      	str	r3, [r1, #20]
 80034d0:	e011      	b.n	80034f6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6892      	ldr	r2, [r2, #8]
 80034e2:	0211      	lsls	r1, r2, #8
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6912      	ldr	r2, [r2, #16]
 80034e8:	0852      	lsrs	r2, r2, #1
 80034ea:	3a01      	subs	r2, #1
 80034ec:	0652      	lsls	r2, r2, #25
 80034ee:	430a      	orrs	r2, r1
 80034f0:	4915      	ldr	r1, [pc, #84]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003500:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fd fc3d 	bl	8000d80 <HAL_GetTick>
 8003506:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003508:	e009      	b.n	800351e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800350a:	f7fd fc39 	bl	8000d80 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d902      	bls.n	800351e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	73fb      	strb	r3, [r7, #15]
          break;
 800351c:	e005      	b.n	800352a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ef      	beq.n	800350a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d106      	bne.n	800353e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	4903      	ldr	r1, [pc, #12]	; (8003548 <RCCEx_PLLSAI2_Config+0x1b0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000

0800354c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e049      	b.n	80035f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f841 	bl	80035fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f000 f9f8 	bl	8003980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d001      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e04f      	b.n	80036c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01d      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x76>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003652:	d018      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x76>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x76>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x76>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x76>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIM_Base_Start_IT+0x76>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d115      	bne.n	80036b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	4b17      	ldr	r3, [pc, #92]	; (80036ec <HAL_TIM_Base_Start_IT+0xdc>)
 800368e:	4013      	ands	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d015      	beq.n	80036c4 <HAL_TIM_Base_Start_IT+0xb4>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369e:	d011      	beq.n	80036c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	e008      	b.n	80036c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e000      	b.n	80036c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40013400 	.word	0x40013400
 80036e8:	40014000 	.word	0x40014000
 80036ec:	00010007 	.word	0x00010007

080036f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0202 	mvn.w	r2, #2
 800371c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f905 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8f7 	bl	800392e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f908 	bl	8003956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b04      	cmp	r3, #4
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0204 	mvn.w	r2, #4
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8db 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8cd 	bl	800392e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8de 	bl	8003956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0208 	mvn.w	r2, #8
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2204      	movs	r2, #4
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8b1 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8a3 	bl	800392e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8b4 	bl	8003956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f887 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f879 	bl	800392e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f88a 	bl	8003956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10e      	bne.n	8003874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0201 	mvn.w	r2, #1
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd f8a4 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b80      	cmp	r3, #128	; 0x80
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f914 	bl	8003ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ae:	d10e      	bne.n	80038ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b80      	cmp	r3, #128	; 0x80
 80038bc:	d107      	bne.n	80038ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f907 	bl	8003adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d10e      	bne.n	80038fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d107      	bne.n	80038fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f838 	bl	800396a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b20      	cmp	r3, #32
 8003906:	d10e      	bne.n	8003926 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d107      	bne.n	8003926 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0220 	mvn.w	r2, #32
 800391e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8c7 	bl	8003ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a40      	ldr	r2, [pc, #256]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d00f      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <TIM_Base_SetConfig+0x118>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3c      	ldr	r2, [pc, #240]	; (8003a9c <TIM_Base_SetConfig+0x11c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <TIM_Base_SetConfig+0x120>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d01b      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <TIM_Base_SetConfig+0x118>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <TIM_Base_SetConfig+0x11c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <TIM_Base_SetConfig+0x120>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <TIM_Base_SetConfig+0x128>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a27      	ldr	r2, [pc, #156]	; (8003aac <TIM_Base_SetConfig+0x12c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <TIM_Base_SetConfig+0x130>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00f      	beq.n	8003a78 <TIM_Base_SetConfig+0xf8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <TIM_Base_SetConfig+0xf8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <TIM_Base_SetConfig+0x128>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <TIM_Base_SetConfig+0xf8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a10      	ldr	r2, [pc, #64]	; (8003aac <TIM_Base_SetConfig+0x12c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0xf8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <TIM_Base_SetConfig+0x130>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d103      	bne.n	8003a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	615a      	str	r2, [r3, #20]
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800

08003ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e040      	b.n	8003b84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fc ffdc 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2224      	movs	r2, #36	; 0x24
 8003b1c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8c0 	bl	8003cb4 <UART_SetConfig>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e022      	b.n	8003b84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fb3e 	bl	80041c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fbc5 	bl	800430c <UART_CheckIdleState>
 8003b82:	4603      	mov	r3, r0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f040 8081 	bne.w	8003ca8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_Transmit+0x26>
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e079      	b.n	8003caa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_UART_Transmit+0x38>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e072      	b.n	8003caa <HAL_UART_Transmit+0x11e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2221      	movs	r2, #33	; 0x21
 8003bd6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003bd8:	f7fd f8d2 	bl	8000d80 <HAL_GetTick>
 8003bdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf6:	d108      	bne.n	8003c0a <HAL_UART_Transmit+0x7e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e003      	b.n	8003c12 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003c1a:	e02d      	b.n	8003c78 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2200      	movs	r2, #0
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fbb5 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e039      	b.n	8003caa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	881a      	ldrh	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	3302      	adds	r3, #2
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e008      	b.n	8003c66 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	781a      	ldrb	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1cb      	bne.n	8003c1c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2140      	movs	r1, #64	; 0x40
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fb81 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e005      	b.n	8003caa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e000      	b.n	8003caa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003cb8:	b088      	sub	sp, #32
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4bac      	ldr	r3, [pc, #688]	; (8003f94 <UART_SetConfig+0x2e0>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	430b      	orrs	r3, r1
 8003cec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4aa2      	ldr	r2, [pc, #648]	; (8003f98 <UART_SetConfig+0x2e4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a99      	ldr	r2, [pc, #612]	; (8003f9c <UART_SetConfig+0x2e8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d121      	bne.n	8003d80 <UART_SetConfig+0xcc>
 8003d3c:	4b98      	ldr	r3, [pc, #608]	; (8003fa0 <UART_SetConfig+0x2ec>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d816      	bhi.n	8003d78 <UART_SetConfig+0xc4>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0x9c>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d6d 	.word	0x08003d6d
 8003d58:	08003d67 	.word	0x08003d67
 8003d5c:	08003d73 	.word	0x08003d73
 8003d60:	2301      	movs	r3, #1
 8003d62:	76fb      	strb	r3, [r7, #27]
 8003d64:	e0e8      	b.n	8003f38 <UART_SetConfig+0x284>
 8003d66:	2302      	movs	r3, #2
 8003d68:	76fb      	strb	r3, [r7, #27]
 8003d6a:	e0e5      	b.n	8003f38 <UART_SetConfig+0x284>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	76fb      	strb	r3, [r7, #27]
 8003d70:	e0e2      	b.n	8003f38 <UART_SetConfig+0x284>
 8003d72:	2308      	movs	r3, #8
 8003d74:	76fb      	strb	r3, [r7, #27]
 8003d76:	e0df      	b.n	8003f38 <UART_SetConfig+0x284>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	76fb      	strb	r3, [r7, #27]
 8003d7c:	bf00      	nop
 8003d7e:	e0db      	b.n	8003f38 <UART_SetConfig+0x284>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a87      	ldr	r2, [pc, #540]	; (8003fa4 <UART_SetConfig+0x2f0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d134      	bne.n	8003df4 <UART_SetConfig+0x140>
 8003d8a:	4b85      	ldr	r3, [pc, #532]	; (8003fa0 <UART_SetConfig+0x2ec>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	d829      	bhi.n	8003dec <UART_SetConfig+0x138>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0xec>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003ded 	.word	0x08003ded
 8003da8:	08003ded 	.word	0x08003ded
 8003dac:	08003ded 	.word	0x08003ded
 8003db0:	08003de1 	.word	0x08003de1
 8003db4:	08003ded 	.word	0x08003ded
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003ded 	.word	0x08003ded
 8003dc0:	08003ddb 	.word	0x08003ddb
 8003dc4:	08003ded 	.word	0x08003ded
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003ded 	.word	0x08003ded
 8003dd0:	08003de7 	.word	0x08003de7
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	e0ae      	b.n	8003f38 <UART_SetConfig+0x284>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	76fb      	strb	r3, [r7, #27]
 8003dde:	e0ab      	b.n	8003f38 <UART_SetConfig+0x284>
 8003de0:	2304      	movs	r3, #4
 8003de2:	76fb      	strb	r3, [r7, #27]
 8003de4:	e0a8      	b.n	8003f38 <UART_SetConfig+0x284>
 8003de6:	2308      	movs	r3, #8
 8003de8:	76fb      	strb	r3, [r7, #27]
 8003dea:	e0a5      	b.n	8003f38 <UART_SetConfig+0x284>
 8003dec:	2310      	movs	r3, #16
 8003dee:	76fb      	strb	r3, [r7, #27]
 8003df0:	bf00      	nop
 8003df2:	e0a1      	b.n	8003f38 <UART_SetConfig+0x284>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6b      	ldr	r2, [pc, #428]	; (8003fa8 <UART_SetConfig+0x2f4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d120      	bne.n	8003e40 <UART_SetConfig+0x18c>
 8003dfe:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <UART_SetConfig+0x2ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d00f      	beq.n	8003e2c <UART_SetConfig+0x178>
 8003e0c:	2b10      	cmp	r3, #16
 8003e0e:	d802      	bhi.n	8003e16 <UART_SetConfig+0x162>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <UART_SetConfig+0x16c>
 8003e14:	e010      	b.n	8003e38 <UART_SetConfig+0x184>
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d005      	beq.n	8003e26 <UART_SetConfig+0x172>
 8003e1a:	2b30      	cmp	r3, #48	; 0x30
 8003e1c:	d009      	beq.n	8003e32 <UART_SetConfig+0x17e>
 8003e1e:	e00b      	b.n	8003e38 <UART_SetConfig+0x184>
 8003e20:	2300      	movs	r3, #0
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e088      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e26:	2302      	movs	r3, #2
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e085      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e082      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e32:	2308      	movs	r3, #8
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e07f      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	bf00      	nop
 8003e3e:	e07b      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a59      	ldr	r2, [pc, #356]	; (8003fac <UART_SetConfig+0x2f8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d120      	bne.n	8003e8c <UART_SetConfig+0x1d8>
 8003e4a:	4b55      	ldr	r3, [pc, #340]	; (8003fa0 <UART_SetConfig+0x2ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d00f      	beq.n	8003e78 <UART_SetConfig+0x1c4>
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d802      	bhi.n	8003e62 <UART_SetConfig+0x1ae>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <UART_SetConfig+0x1b8>
 8003e60:	e010      	b.n	8003e84 <UART_SetConfig+0x1d0>
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	d005      	beq.n	8003e72 <UART_SetConfig+0x1be>
 8003e66:	2bc0      	cmp	r3, #192	; 0xc0
 8003e68:	d009      	beq.n	8003e7e <UART_SetConfig+0x1ca>
 8003e6a:	e00b      	b.n	8003e84 <UART_SetConfig+0x1d0>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e062      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e72:	2302      	movs	r3, #2
 8003e74:	76fb      	strb	r3, [r7, #27]
 8003e76:	e05f      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e05c      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e059      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e84:	2310      	movs	r3, #16
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	bf00      	nop
 8003e8a:	e055      	b.n	8003f38 <UART_SetConfig+0x284>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a47      	ldr	r2, [pc, #284]	; (8003fb0 <UART_SetConfig+0x2fc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d124      	bne.n	8003ee0 <UART_SetConfig+0x22c>
 8003e96:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <UART_SetConfig+0x2ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea4:	d012      	beq.n	8003ecc <UART_SetConfig+0x218>
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eaa:	d802      	bhi.n	8003eb2 <UART_SetConfig+0x1fe>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <UART_SetConfig+0x20c>
 8003eb0:	e012      	b.n	8003ed8 <UART_SetConfig+0x224>
 8003eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb6:	d006      	beq.n	8003ec6 <UART_SetConfig+0x212>
 8003eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebc:	d009      	beq.n	8003ed2 <UART_SetConfig+0x21e>
 8003ebe:	e00b      	b.n	8003ed8 <UART_SetConfig+0x224>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	76fb      	strb	r3, [r7, #27]
 8003ec4:	e038      	b.n	8003f38 <UART_SetConfig+0x284>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	76fb      	strb	r3, [r7, #27]
 8003eca:	e035      	b.n	8003f38 <UART_SetConfig+0x284>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e032      	b.n	8003f38 <UART_SetConfig+0x284>
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	76fb      	strb	r3, [r7, #27]
 8003ed6:	e02f      	b.n	8003f38 <UART_SetConfig+0x284>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	76fb      	strb	r3, [r7, #27]
 8003edc:	bf00      	nop
 8003ede:	e02b      	b.n	8003f38 <UART_SetConfig+0x284>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <UART_SetConfig+0x2e4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d124      	bne.n	8003f34 <UART_SetConfig+0x280>
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <UART_SetConfig+0x2ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef8:	d012      	beq.n	8003f20 <UART_SetConfig+0x26c>
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d802      	bhi.n	8003f06 <UART_SetConfig+0x252>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <UART_SetConfig+0x260>
 8003f04:	e012      	b.n	8003f2c <UART_SetConfig+0x278>
 8003f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0a:	d006      	beq.n	8003f1a <UART_SetConfig+0x266>
 8003f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f10:	d009      	beq.n	8003f26 <UART_SetConfig+0x272>
 8003f12:	e00b      	b.n	8003f2c <UART_SetConfig+0x278>
 8003f14:	2300      	movs	r3, #0
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e00e      	b.n	8003f38 <UART_SetConfig+0x284>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	76fb      	strb	r3, [r7, #27]
 8003f1e:	e00b      	b.n	8003f38 <UART_SetConfig+0x284>
 8003f20:	2304      	movs	r3, #4
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	e008      	b.n	8003f38 <UART_SetConfig+0x284>
 8003f26:	2308      	movs	r3, #8
 8003f28:	76fb      	strb	r3, [r7, #27]
 8003f2a:	e005      	b.n	8003f38 <UART_SetConfig+0x284>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	bf00      	nop
 8003f32:	e001      	b.n	8003f38 <UART_SetConfig+0x284>
 8003f34:	2310      	movs	r3, #16
 8003f36:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <UART_SetConfig+0x2e4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	f040 8087 	bne.w	8004052 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f44:	7efb      	ldrb	r3, [r7, #27]
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d836      	bhi.n	8003fb8 <UART_SetConfig+0x304>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0x29c>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003fb9 	.word	0x08003fb9
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003fb9 	.word	0x08003fb9
 8003f60:	08003f83 	.word	0x08003f83
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003fb9 	.word	0x08003fb9
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003f8b 	.word	0x08003f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7fe fd7c 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8003f78:	6178      	str	r0, [r7, #20]
        break;
 8003f7a:	e022      	b.n	8003fc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f7c:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <UART_SetConfig+0x300>)
 8003f7e:	617b      	str	r3, [r7, #20]
        break;
 8003f80:	e01f      	b.n	8003fc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f82:	f7fe fcdf 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8003f86:	6178      	str	r0, [r7, #20]
        break;
 8003f88:	e01b      	b.n	8003fc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f8e:	617b      	str	r3, [r7, #20]
        break;
 8003f90:	e017      	b.n	8003fc2 <UART_SetConfig+0x30e>
 8003f92:	bf00      	nop
 8003f94:	efff69f3 	.word	0xefff69f3
 8003f98:	40008000 	.word	0x40008000
 8003f9c:	40013800 	.word	0x40013800
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40004400 	.word	0x40004400
 8003fa8:	40004800 	.word	0x40004800
 8003fac:	40004c00 	.word	0x40004c00
 8003fb0:	40005000 	.word	0x40005000
 8003fb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	76bb      	strb	r3, [r7, #26]
        break;
 8003fc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80f1 	beq.w	80041ac <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d305      	bcc.n	8003fe6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d902      	bls.n	8003fec <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	76bb      	strb	r3, [r7, #26]
 8003fea:	e0df      	b.n	80041ac <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	f04f 0400 	mov.w	r4, #0
 8003ffc:	0214      	lsls	r4, r2, #8
 8003ffe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004002:	020b      	lsls	r3, r1, #8
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6852      	ldr	r2, [r2, #4]
 8004008:	0852      	lsrs	r2, r2, #1
 800400a:	4611      	mov	r1, r2
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	eb13 0b01 	adds.w	fp, r3, r1
 8004014:	eb44 0c02 	adc.w	ip, r4, r2
 8004018:	4658      	mov	r0, fp
 800401a:	4661      	mov	r1, ip
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f04f 0400 	mov.w	r4, #0
 8004024:	461a      	mov	r2, r3
 8004026:	4623      	mov	r3, r4
 8004028:	f7fc f8da 	bl	80001e0 <__aeabi_uldivmod>
 800402c:	4603      	mov	r3, r0
 800402e:	460c      	mov	r4, r1
 8004030:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004038:	d308      	bcc.n	800404c <UART_SetConfig+0x398>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004040:	d204      	bcs.n	800404c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e0af      	b.n	80041ac <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	76bb      	strb	r3, [r7, #26]
 8004050:	e0ac      	b.n	80041ac <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d15b      	bne.n	8004114 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800405c:	7efb      	ldrb	r3, [r7, #27]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d827      	bhi.n	80040b2 <UART_SetConfig+0x3fe>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x3b4>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800408d 	.word	0x0800408d
 800406c:	08004095 	.word	0x08004095
 8004070:	0800409d 	.word	0x0800409d
 8004074:	080040b3 	.word	0x080040b3
 8004078:	080040a3 	.word	0x080040a3
 800407c:	080040b3 	.word	0x080040b3
 8004080:	080040b3 	.word	0x080040b3
 8004084:	080040b3 	.word	0x080040b3
 8004088:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fcf0 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8004090:	6178      	str	r0, [r7, #20]
        break;
 8004092:	e013      	b.n	80040bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fd02 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 8004098:	6178      	str	r0, [r7, #20]
        break;
 800409a:	e00f      	b.n	80040bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409c:	4b49      	ldr	r3, [pc, #292]	; (80041c4 <UART_SetConfig+0x510>)
 800409e:	617b      	str	r3, [r7, #20]
        break;
 80040a0:	e00c      	b.n	80040bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a2:	f7fe fc4f 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80040a6:	6178      	str	r0, [r7, #20]
        break;
 80040a8:	e008      	b.n	80040bc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	617b      	str	r3, [r7, #20]
        break;
 80040b0:	e004      	b.n	80040bc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	76bb      	strb	r3, [r7, #26]
        break;
 80040ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d074      	beq.n	80041ac <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	005a      	lsls	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d916      	bls.n	800410e <UART_SetConfig+0x45a>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d212      	bcs.n	800410e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f023 030f 	bic.w	r3, r3, #15
 80040f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	4313      	orrs	r3, r2
 8004102:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	89fa      	ldrh	r2, [r7, #14]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	e04e      	b.n	80041ac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	76bb      	strb	r3, [r7, #26]
 8004112:	e04b      	b.n	80041ac <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004114:	7efb      	ldrb	r3, [r7, #27]
 8004116:	2b08      	cmp	r3, #8
 8004118:	d827      	bhi.n	800416a <UART_SetConfig+0x4b6>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0x46c>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004145 	.word	0x08004145
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800416b 	.word	0x0800416b
 8004130:	0800415b 	.word	0x0800415b
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800416b 	.word	0x0800416b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe fc94 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8004148:	6178      	str	r0, [r7, #20]
        break;
 800414a:	e013      	b.n	8004174 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7fe fca6 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 8004150:	6178      	str	r0, [r7, #20]
        break;
 8004152:	e00f      	b.n	8004174 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <UART_SetConfig+0x510>)
 8004156:	617b      	str	r3, [r7, #20]
        break;
 8004158:	e00c      	b.n	8004174 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe fbf3 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 800415e:	6178      	str	r0, [r7, #20]
        break;
 8004160:	e008      	b.n	8004174 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	617b      	str	r3, [r7, #20]
        break;
 8004168:	e004      	b.n	8004174 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	76bb      	strb	r3, [r7, #26]
        break;
 8004172:	bf00      	nop
    }

    if (pclk != 0U)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	085a      	lsrs	r2, r3, #1
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	441a      	add	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	b29b      	uxth	r3, r3
 800418e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d908      	bls.n	80041a8 <UART_SetConfig+0x4f4>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d204      	bcs.n	80041a8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	e001      	b.n	80041ac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80041b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80041c4:	00f42400 	.word	0x00f42400

080041c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01a      	beq.n	80042de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c6:	d10a      	bne.n	80042de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800431a:	f7fc fd31 	bl	8000d80 <HAL_GetTick>
 800431e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	d10e      	bne.n	800434c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800432e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f82a 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e020      	b.n	800438e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d10e      	bne.n	8004378 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f814 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e00a      	b.n	800438e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	e05d      	b.n	8004464 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d059      	beq.n	8004464 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7fc fce6 	bl	8000d80 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11b      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e042      	b.n	8004484 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02b      	beq.n	8004464 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441a:	d123      	bne.n	8004464 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004424:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004434:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e00f      	b.n	8004484 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	429a      	cmp	r2, r3
 8004480:	d092      	beq.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a2:	f3ef 8305 	mrs	r3, IPSR
 80044a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80044a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ae:	f3ef 8310 	mrs	r3, PRIMASK
 80044b2:	607b      	str	r3, [r7, #4]
  return(result);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d105      	bne.n	80044c6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044ba:	f3ef 8311 	mrs	r3, BASEPRI
 80044be:	603b      	str	r3, [r7, #0]
  return(result);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <osKernelInitialize+0x3a>
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <osKernelInitialize+0x64>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d103      	bne.n	80044d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80044ce:	f06f 0305 	mvn.w	r3, #5
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e00c      	b.n	80044f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <osKernelInitialize+0x64>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <osKernelInitialize+0x64>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e002      	b.n	80044f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044f0:	68fb      	ldr	r3, [r7, #12]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000030 	.word	0x20000030

08004504 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800450a:	f3ef 8305 	mrs	r3, IPSR
 800450e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004510:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004516:	f3ef 8310 	mrs	r3, PRIMASK
 800451a:	607b      	str	r3, [r7, #4]
  return(result);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004522:	f3ef 8311 	mrs	r3, BASEPRI
 8004526:	603b      	str	r3, [r7, #0]
  return(result);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <osKernelStart+0x3a>
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <osKernelStart+0x68>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d103      	bne.n	800453e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004536:	f06f 0305 	mvn.w	r3, #5
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e010      	b.n	8004560 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <osKernelStart+0x68>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d109      	bne.n	800455a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004546:	f7ff ffa1 	bl	800448c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <osKernelStart+0x68>)
 800454c:	2202      	movs	r2, #2
 800454e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004550:	f001 f8ea 	bl	8005728 <vTaskStartScheduler>
      stat = osOK;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e002      	b.n	8004560 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004560:	68fb      	ldr	r3, [r7, #12]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000030 	.word	0x20000030

08004570 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b090      	sub	sp, #64	; 0x40
 8004574:	af04      	add	r7, sp, #16
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004580:	f3ef 8305 	mrs	r3, IPSR
 8004584:	61fb      	str	r3, [r7, #28]
  return(result);
 8004586:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 808f 	bne.w	80046ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458e:	f3ef 8310 	mrs	r3, PRIMASK
 8004592:	61bb      	str	r3, [r7, #24]
  return(result);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d105      	bne.n	80045a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800459a:	f3ef 8311 	mrs	r3, BASEPRI
 800459e:	617b      	str	r3, [r7, #20]
  return(result);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <osThreadNew+0x3e>
 80045a6:	4b44      	ldr	r3, [pc, #272]	; (80046b8 <osThreadNew+0x148>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d07e      	beq.n	80046ac <osThreadNew+0x13c>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d07b      	beq.n	80046ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80045b8:	2318      	movs	r3, #24
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d045      	beq.n	8004658 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <osThreadNew+0x6a>
        name = attr->name;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <osThreadNew+0x90>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	2b38      	cmp	r3, #56	; 0x38
 80045f2:	d805      	bhi.n	8004600 <osThreadNew+0x90>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <osThreadNew+0x94>
        return (NULL);
 8004600:	2300      	movs	r3, #0
 8004602:	e054      	b.n	80046ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00e      	beq.n	800463a <osThreadNew+0xca>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b5b      	cmp	r3, #91	; 0x5b
 8004622:	d90a      	bls.n	800463a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <osThreadNew+0xca>
        mem = 1;
 8004634:	2301      	movs	r3, #1
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	e010      	b.n	800465c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10c      	bne.n	800465c <osThreadNew+0xec>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d108      	bne.n	800465c <osThreadNew+0xec>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <osThreadNew+0xec>
          mem = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	e001      	b.n	800465c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d110      	bne.n	8004684 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800466a:	9202      	str	r2, [sp, #8]
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fe09 	bl	8005290 <xTaskCreateStatic>
 800467e:	4603      	mov	r3, r0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e013      	b.n	80046ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d110      	bne.n	80046ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	b29a      	uxth	r2, r3
 800468e:	f107 0310 	add.w	r3, r7, #16
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fe51 	bl	8005344 <xTaskCreate>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <osThreadNew+0x13c>
          hTask = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046ac:	693b      	ldr	r3, [r7, #16]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3730      	adds	r7, #48	; 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000030 	.word	0x20000030

080046bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c4:	f3ef 8305 	mrs	r3, IPSR
 80046c8:	613b      	str	r3, [r7, #16]
  return(result);
 80046ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10f      	bne.n	80046f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d0:	f3ef 8310 	mrs	r3, PRIMASK
 80046d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046dc:	f3ef 8311 	mrs	r3, BASEPRI
 80046e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <osDelay+0x3c>
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <osDelay+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d103      	bne.n	80046f8 <osDelay+0x3c>
    stat = osErrorISR;
 80046f0:	f06f 0305 	mvn.w	r3, #5
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e007      	b.n	8004708 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 ffdc 	bl	80056c0 <vTaskDelay>
    }
  }

  return (stat);
 8004708:	697b      	ldr	r3, [r7, #20]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000030 	.word	0x20000030

08004718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a07      	ldr	r2, [pc, #28]	; (8004744 <vApplicationGetIdleTaskMemory+0x2c>)
 8004728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a06      	ldr	r2, [pc, #24]	; (8004748 <vApplicationGetIdleTaskMemory+0x30>)
 800472e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2280      	movs	r2, #128	; 0x80
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000034 	.word	0x20000034
 8004748:	20000090 	.word	0x20000090

0800474c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a07      	ldr	r2, [pc, #28]	; (8004778 <vApplicationGetTimerTaskMemory+0x2c>)
 800475c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a06      	ldr	r2, [pc, #24]	; (800477c <vApplicationGetTimerTaskMemory+0x30>)
 8004762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800476a:	601a      	str	r2, [r3, #0]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000290 	.word	0x20000290
 800477c:	200002ec 	.word	0x200002ec

08004780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f103 0208 	add.w	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f103 0208 	add.w	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f103 0208 	add.w	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d103      	bne.n	8004842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e00c      	b.n	800485c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3308      	adds	r3, #8
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e002      	b.n	8004850 <vListInsert+0x2e>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	d2f6      	bcs.n	800484a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6892      	ldr	r2, [r2, #8]
 80048aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6852      	ldr	r2, [r2, #4]
 80048b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d103      	bne.n	80048c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	1e5a      	subs	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	e7fe      	b.n	800490e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004910:	f002 f88c 	bl	8006a2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	441a      	add	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004940:	3b01      	subs	r3, #1
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	441a      	add	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	22ff      	movs	r2, #255	; 0xff
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	22ff      	movs	r2, #255	; 0xff
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d114      	bne.n	8004990 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01a      	beq.n	80049a4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3310      	adds	r3, #16
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f958 	bl	8005c28 <xTaskRemoveFromEventList>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d012      	beq.n	80049a4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <xQueueGenericReset+0xcc>)
 8004980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	e009      	b.n	80049a4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3310      	adds	r3, #16
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fef3 	bl	8004780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3324      	adds	r3, #36	; 0x24
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff feee 	bl	8004780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049a4:	f002 f870 	bl	8006a88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049a8:	2301      	movs	r3, #1
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	; 0x38
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <xQueueGenericCreateStatic+0x28>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049de:	e7fe      	b.n	80049de <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <xQueueGenericCreateStatic+0x42>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <xQueueGenericCreateStatic+0x4e>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <xQueueGenericCreateStatic+0x52>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueGenericCreateStatic+0x54>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <xQueueGenericCreateStatic+0x6c>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	e7fe      	b.n	8004a22 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <xQueueGenericCreateStatic+0x78>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <xQueueGenericCreateStatic+0x7c>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <xQueueGenericCreateStatic+0x7e>
 8004a34:	2300      	movs	r3, #0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <xQueueGenericCreateStatic+0x96>
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e7fe      	b.n	8004a4c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a4e:	2350      	movs	r3, #80	; 0x50
 8004a50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b50      	cmp	r3, #80	; 0x50
 8004a56:	d009      	beq.n	8004a6c <xQueueGenericCreateStatic+0xb4>
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e7fe      	b.n	8004a6a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00d      	beq.n	8004a94 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f805 	bl	8004a9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3730      	adds	r7, #48	; 0x30
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e002      	b.n	8004ac0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004acc:	2101      	movs	r1, #1
 8004ace:	69b8      	ldr	r0, [r7, #24]
 8004ad0:	f7ff ff0a 	bl	80048e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08e      	sub	sp, #56	; 0x38
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004af2:	2300      	movs	r3, #0
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <xQueueGenericSend+0x30>
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b12:	e7fe      	b.n	8004b12 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <xQueueGenericSend+0x3e>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <xQueueGenericSend+0x42>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <xQueueGenericSend+0x44>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <xQueueGenericSend+0x5c>
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3e:	e7fe      	b.n	8004b3e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d103      	bne.n	8004b4e <xQueueGenericSend+0x6a>
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <xQueueGenericSend+0x6e>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <xQueueGenericSend+0x70>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <xQueueGenericSend+0x88>
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	e7fe      	b.n	8004b6a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b6c:	f001 fa12 	bl	8005f94 <xTaskGetSchedulerState>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <xQueueGenericSend+0x98>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueGenericSend+0x9c>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueGenericSend+0x9e>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <xQueueGenericSend+0xb6>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e7fe      	b.n	8004b98 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b9a:	f001 ff47 	bl	8006a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <xQueueGenericSend+0xcc>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d129      	bne.n	8004c04 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb6:	f000 f9ff 	bl	8004fb8 <prvCopyDataToQueue>
 8004bba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	3324      	adds	r3, #36	; 0x24
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 f82d 	bl	8005c28 <xTaskRemoveFromEventList>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	; (8004cd4 <xQueueGenericSend+0x1f0>)
 8004bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	e00a      	b.n	8004bfc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bec:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <xQueueGenericSend+0x1f0>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bfc:	f001 ff44 	bl	8006a88 <vPortExitCritical>
				return pdPASS;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e063      	b.n	8004ccc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c0a:	f001 ff3d 	bl	8006a88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e05c      	b.n	8004ccc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f865 	bl	8005cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c22:	2301      	movs	r3, #1
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c26:	f001 ff2f 	bl	8006a88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c2a:	f000 fde1 	bl	80057f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c2e:	f001 fefd 	bl	8006a2c <vPortEnterCritical>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3e:	d103      	bne.n	8004c48 <xQueueGenericSend+0x164>
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSend+0x17a>
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c5e:	f001 ff13 	bl	8006a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c62:	1d3a      	adds	r2, r7, #4
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 f854 	bl	8005d18 <xTaskCheckForTimeOut>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d124      	bne.n	8004cc0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c78:	f000 fa96 	bl	80051a8 <prvIsQueueFull>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d018      	beq.n	8004cb4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	3310      	adds	r3, #16
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 ff7e 	bl	8005b8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c92:	f000 fa21 	bl	80050d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c96:	f000 fdb9 	bl	800580c <xTaskResumeAll>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f47f af7c 	bne.w	8004b9a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <xQueueGenericSend+0x1f0>)
 8004ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	e772      	b.n	8004b9a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb6:	f000 fa0f 	bl	80050d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cba:	f000 fda7 	bl	800580c <xTaskResumeAll>
 8004cbe:	e76c      	b.n	8004b9a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc2:	f000 fa09 	bl	80050d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cc6:	f000 fda1 	bl	800580c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3738      	adds	r7, #56	; 0x38
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <xQueueGenericSendFromISR+0x2c>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSendFromISR+0x3a>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSendFromISR+0x3e>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSendFromISR+0x40>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <xQueueGenericSendFromISR+0x58>
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	e7fe      	b.n	8004d2e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d103      	bne.n	8004d3e <xQueueGenericSendFromISR+0x66>
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <xQueueGenericSendFromISR+0x6a>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <xQueueGenericSendFromISR+0x6c>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d109      	bne.n	8004d5c <xQueueGenericSendFromISR+0x84>
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e7fe      	b.n	8004d5a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d5c:	f001 ff42 	bl	8006be4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d60:	f3ef 8211 	mrs	r2, BASEPRI
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	61ba      	str	r2, [r7, #24]
 8004d76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <xQueueGenericSendFromISR+0xb6>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d12c      	bne.n	8004de8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d9e:	f000 f90b 	bl	8004fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004da2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d112      	bne.n	8004dd2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d016      	beq.n	8004de2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	3324      	adds	r3, #36	; 0x24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 ff35 	bl	8005c28 <xTaskRemoveFromEventList>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00e      	beq.n	8004de2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e007      	b.n	8004de2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	b25a      	sxtb	r2, r3
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004de2:	2301      	movs	r3, #1
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004de6:	e001      	b.n	8004dec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3738      	adds	r7, #56	; 0x38
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <xQueueReceive+0x2e>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	e7fe      	b.n	8004e2c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <xQueueReceive+0x3c>
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <xQueueReceive+0x40>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <xQueueReceive+0x42>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <xQueueReceive+0x5a>
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e7fe      	b.n	8004e58 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e5a:	f001 f89b 	bl	8005f94 <xTaskGetSchedulerState>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <xQueueReceive+0x6a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueReceive+0x6e>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueReceive+0x70>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <xQueueReceive+0x88>
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e7fe      	b.n	8004e86 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e88:	f001 fdd0 	bl	8006a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01f      	beq.n	8004ed8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9c:	f000 f8f6 	bl	800508c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1e5a      	subs	r2, r3, #1
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00f      	beq.n	8004ed0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	3310      	adds	r3, #16
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 feb7 	bl	8005c28 <xTaskRemoveFromEventList>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ec0:	4b3c      	ldr	r3, [pc, #240]	; (8004fb4 <xQueueReceive+0x1b4>)
 8004ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ed0:	f001 fdda 	bl	8006a88 <vPortExitCritical>
				return pdPASS;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e069      	b.n	8004fac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ede:	f001 fdd3 	bl	8006a88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e062      	b.n	8004fac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eec:	f107 0310 	add.w	r3, r7, #16
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fefb 	bl	8005cec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efa:	f001 fdc5 	bl	8006a88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004efe:	f000 fc77 	bl	80057f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f02:	f001 fd93 	bl	8006a2c <vPortEnterCritical>
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0c:	b25b      	sxtb	r3, r3
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d103      	bne.n	8004f1c <xQueueReceive+0x11c>
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d103      	bne.n	8004f32 <xQueueReceive+0x132>
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f32:	f001 fda9 	bl	8006a88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f36:	1d3a      	adds	r2, r7, #4
 8004f38:	f107 0310 	add.w	r3, r7, #16
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 feea 	bl	8005d18 <xTaskCheckForTimeOut>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d123      	bne.n	8004f92 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4c:	f000 f916 	bl	800517c <prvIsQueueEmpty>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	3324      	adds	r3, #36	; 0x24
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fe14 	bl	8005b8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f66:	f000 f8b7 	bl	80050d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f6a:	f000 fc4f 	bl	800580c <xTaskResumeAll>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d189      	bne.n	8004e88 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004f74:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <xQueueReceive+0x1b4>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	e780      	b.n	8004e88 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f88:	f000 f8a6 	bl	80050d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f8c:	f000 fc3e 	bl	800580c <xTaskResumeAll>
 8004f90:	e77a      	b.n	8004e88 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f94:	f000 f8a0 	bl	80050d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f98:	f000 fc38 	bl	800580c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9e:	f000 f8ed 	bl	800517c <prvIsQueueEmpty>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f43f af6f 	beq.w	8004e88 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004faa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3730      	adds	r7, #48	; 0x30
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10d      	bne.n	8004ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d14d      	bne.n	800507a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fff4 	bl	8005fd0 <xTaskPriorityDisinherit>
 8004fe8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	e043      	b.n	800507a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d119      	bne.n	800502c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6858      	ldr	r0, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	461a      	mov	r2, r3
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	f002 f826 	bl	8007054 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d32b      	bcc.n	800507a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	e026      	b.n	800507a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68d8      	ldr	r0, [r3, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	461a      	mov	r2, r3
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	f002 f80c 	bl	8007054 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	425b      	negs	r3, r3
 8005046:	441a      	add	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d207      	bcs.n	8005068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	425b      	negs	r3, r3
 8005062:	441a      	add	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d105      	bne.n	800507a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	3b01      	subs	r3, #1
 8005078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	441a      	add	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d303      	bcc.n	80050c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68d9      	ldr	r1, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	461a      	mov	r2, r3
 80050ca:	6838      	ldr	r0, [r7, #0]
 80050cc:	f001 ffc2 	bl	8007054 <memcpy>
	}
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050e0:	f001 fca4 	bl	8006a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ec:	e011      	b.n	8005112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d012      	beq.n	800511c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3324      	adds	r3, #36	; 0x24
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fd94 	bl	8005c28 <xTaskRemoveFromEventList>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005106:	f000 fe67 	bl	8005dd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	3b01      	subs	r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005116:	2b00      	cmp	r3, #0
 8005118:	dce9      	bgt.n	80050ee <prvUnlockQueue+0x16>
 800511a:	e000      	b.n	800511e <prvUnlockQueue+0x46>
					break;
 800511c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005126:	f001 fcaf 	bl	8006a88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800512a:	f001 fc7f 	bl	8006a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005136:	e011      	b.n	800515c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d012      	beq.n	8005166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3310      	adds	r3, #16
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fd6f 	bl	8005c28 <xTaskRemoveFromEventList>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005150:	f000 fe42 	bl	8005dd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005154:	7bbb      	ldrb	r3, [r7, #14]
 8005156:	3b01      	subs	r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800515c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005160:	2b00      	cmp	r3, #0
 8005162:	dce9      	bgt.n	8005138 <prvUnlockQueue+0x60>
 8005164:	e000      	b.n	8005168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005170:	f001 fc8a 	bl	8006a88 <vPortExitCritical>
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005184:	f001 fc52 	bl	8006a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e001      	b.n	800519a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800519a:	f001 fc75 	bl	8006a88 <vPortExitCritical>

	return xReturn;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051b0:	f001 fc3c 	bl	8006a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	429a      	cmp	r2, r3
 80051be:	d102      	bne.n	80051c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e001      	b.n	80051ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ca:	f001 fc5d 	bl	8006a88 <vPortExitCritical>

	return xReturn;
 80051ce:	68fb      	ldr	r3, [r7, #12]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e014      	b.n	8005212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051e8:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <vQueueAddToRegistry+0x4c>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051f4:	490b      	ldr	r1, [pc, #44]	; (8005224 <vQueueAddToRegistry+0x4c>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051fe:	4a09      	ldr	r2, [pc, #36]	; (8005224 <vQueueAddToRegistry+0x4c>)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800520a:	e005      	b.n	8005218 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b07      	cmp	r3, #7
 8005216:	d9e7      	bls.n	80051e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20001a30 	.word	0x20001a30

08005228 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005238:	f001 fbf8 	bl	8006a2c <vPortEnterCritical>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005242:	b25b      	sxtb	r3, r3
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d103      	bne.n	8005252 <vQueueWaitForMessageRestricted+0x2a>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005258:	b25b      	sxtb	r3, r3
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d103      	bne.n	8005268 <vQueueWaitForMessageRestricted+0x40>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005268:	f001 fc0e 	bl	8006a88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3324      	adds	r3, #36	; 0x24
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fca9 	bl	8005bd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005282:	6978      	ldr	r0, [r7, #20]
 8005284:	f7ff ff28 	bl	80050d8 <prvUnlockQueue>
	}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	; 0x38
 8005294:	af04      	add	r7, sp, #16
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <xTaskCreateStatic+0x28>
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	623b      	str	r3, [r7, #32]
 80052b6:	e7fe      	b.n	80052b6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <xTaskCreateStatic+0x42>
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	e7fe      	b.n	80052d0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052d2:	235c      	movs	r3, #92	; 0x5c
 80052d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b5c      	cmp	r3, #92	; 0x5c
 80052da:	d009      	beq.n	80052f0 <xTaskCreateStatic+0x60>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	e7fe      	b.n	80052ee <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01e      	beq.n	8005336 <xTaskCreateStatic+0xa6>
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01b      	beq.n	8005336 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005306:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005310:	2300      	movs	r3, #0
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	9302      	str	r3, [sp, #8]
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f850 	bl	80053ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800532e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005330:	f000 f8dc 	bl	80054ec <prvAddNewTaskToReadyList>
 8005334:	e001      	b.n	800533a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800533a:	697b      	ldr	r3, [r7, #20]
	}
 800533c:	4618      	mov	r0, r3
 800533e:	3728      	adds	r7, #40	; 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af04      	add	r7, sp, #16
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4618      	mov	r0, r3
 800535a:	f001 fc81 	bl	8006c60 <pvPortMalloc>
 800535e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005366:	205c      	movs	r0, #92	; 0x5c
 8005368:	f001 fc7a 	bl	8006c60 <pvPortMalloc>
 800536c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
 800537a:	e005      	b.n	8005388 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800537c:	6978      	ldr	r0, [r7, #20]
 800537e:	f001 fd31 	bl	8006de4 <vPortFree>
 8005382:	e001      	b.n	8005388 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d017      	beq.n	80053be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	2300      	movs	r3, #0
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	9302      	str	r3, [sp, #8]
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f80e 	bl	80053ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053b2:	69f8      	ldr	r0, [r7, #28]
 80053b4:	f000 f89a 	bl	80054ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053b8:	2301      	movs	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	e002      	b.n	80053c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053c4:	69bb      	ldr	r3, [r7, #24]
	}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b088      	sub	sp, #32
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	461a      	mov	r2, r3
 80053e6:	21a5      	movs	r1, #165	; 0xa5
 80053e8:	f001 fe3f 	bl	800706a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053f6:	3b01      	subs	r3, #1
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f023 0307 	bic.w	r3, r3, #7
 8005404:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <prvInitialiseNewTask+0x56>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e7fe      	b.n	8005422 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01f      	beq.n	800546a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	e012      	b.n	8005456 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	7819      	ldrb	r1, [r3, #0]
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	3334      	adds	r3, #52	; 0x34
 8005440:	460a      	mov	r2, r1
 8005442:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d9e9      	bls.n	8005430 <prvInitialiseNewTask+0x62>
 800545c:	e000      	b.n	8005460 <prvInitialiseNewTask+0x92>
			{
				break;
 800545e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005468:	e003      	b.n	8005472 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	2b37      	cmp	r3, #55	; 0x37
 8005476:	d901      	bls.n	800547c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005478:	2337      	movs	r3, #55	; 0x37
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005486:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	2200      	movs	r2, #0
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff f994 	bl	80047c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	3318      	adds	r3, #24
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff f98f 	bl	80047c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2200      	movs	r2, #0
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	69b8      	ldr	r0, [r7, #24]
 80054cc:	f001 f986 	bl	80067dc <pxPortInitialiseStack>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e2:	bf00      	nop
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f4:	f001 fa9a 	bl	8006a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d110      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005518:	f000 fc82 	bl	8005e20 <prvInitialiseTaskLists>
 800551c:	e00d      	b.n	800553a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800551e:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005526:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d802      	bhi.n	800553a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <prvAddNewTaskToReadyList+0x74>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <prvAddNewTaskToReadyList+0xd8>)
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7ff f92f 	bl	80047da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800557c:	f001 fa84 	bl	8006a88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	429a      	cmp	r2, r3
 8005594:	d207      	bcs.n	80055a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <prvAddNewTaskToReadyList+0xdc>)
 8005598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000bc0 	.word	0x20000bc0
 80055b4:	200006ec 	.word	0x200006ec
 80055b8:	20000bcc 	.word	0x20000bcc
 80055bc:	20000bdc 	.word	0x20000bdc
 80055c0:	20000bc8 	.word	0x20000bc8
 80055c4:	200006f0 	.word	0x200006f0
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <vTaskDelayUntil+0x28>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e7fe      	b.n	80055f2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <vTaskDelayUntil+0x42>
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	e7fe      	b.n	800560c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <vTaskDelayUntil+0xe8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <vTaskDelayUntil+0x5e>
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e7fe      	b.n	8005628 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800562a:	f000 f8e1 	bl	80057f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800562e:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <vTaskDelayUntil+0xec>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	4413      	add	r3, r2
 800563c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	429a      	cmp	r2, r3
 8005646:	d20b      	bcs.n	8005660 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	429a      	cmp	r2, r3
 8005650:	d211      	bcs.n	8005676 <vTaskDelayUntil+0xaa>
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	429a      	cmp	r2, r3
 8005658:	d90d      	bls.n	8005676 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800565a:	2301      	movs	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	e00a      	b.n	8005676 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	429a      	cmp	r2, r3
 8005668:	d303      	bcc.n	8005672 <vTaskDelayUntil+0xa6>
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	429a      	cmp	r2, r3
 8005670:	d901      	bls.n	8005676 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fd0c 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005690:	f000 f8bc 	bl	800580c <xTaskResumeAll>
 8005694:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d107      	bne.n	80056ac <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <vTaskDelayUntil+0xf0>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056ac:	bf00      	nop
 80056ae:	3728      	adds	r7, #40	; 0x28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000be8 	.word	0x20000be8
 80056b8:	20000bc4 	.word	0x20000bc4
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d016      	beq.n	8005700 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <vTaskDelay+0x60>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <vTaskDelay+0x2e>
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	e7fe      	b.n	80056ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80056ee:	f000 f87f 	bl	80057f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056f2:	2100      	movs	r1, #0
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fcd7 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056fa:	f000 f887 	bl	800580c <xTaskResumeAll>
 80056fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d107      	bne.n	8005716 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <vTaskDelay+0x64>)
 8005708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000be8 	.word	0x20000be8
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005736:	463a      	mov	r2, r7
 8005738:	1d39      	adds	r1, r7, #4
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe ffea 	bl	8004718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	9202      	str	r2, [sp, #8]
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	2300      	movs	r3, #0
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	460a      	mov	r2, r1
 8005756:	4920      	ldr	r1, [pc, #128]	; (80057d8 <vTaskStartScheduler+0xb0>)
 8005758:	4820      	ldr	r0, [pc, #128]	; (80057dc <vTaskStartScheduler+0xb4>)
 800575a:	f7ff fd99 	bl	8005290 <xTaskCreateStatic>
 800575e:	4602      	mov	r2, r0
 8005760:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <vTaskStartScheduler+0xb8>)
 8005762:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005764:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <vTaskStartScheduler+0xb8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e001      	b.n	8005776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800577c:	f000 fce8 	bl	8006150 <xTimerCreateTimerTask>
 8005780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d115      	bne.n	80057b4 <vTaskStartScheduler+0x8c>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <vTaskStartScheduler+0xbc>)
 800579c:	f04f 32ff 	mov.w	r2, #4294967295
 80057a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <vTaskStartScheduler+0xc0>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057a8:	4b10      	ldr	r3, [pc, #64]	; (80057ec <vTaskStartScheduler+0xc4>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ae:	f001 f89f 	bl	80068f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057b2:	e00d      	b.n	80057d0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d109      	bne.n	80057d0 <vTaskStartScheduler+0xa8>
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e7fe      	b.n	80057ce <vTaskStartScheduler+0xa6>
}
 80057d0:	bf00      	nop
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	080070e8 	.word	0x080070e8
 80057dc:	08005df1 	.word	0x08005df1
 80057e0:	20000be4 	.word	0x20000be4
 80057e4:	20000be0 	.word	0x20000be0
 80057e8:	20000bcc 	.word	0x20000bcc
 80057ec:	20000bc4 	.word	0x20000bc4

080057f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <vTaskSuspendAll+0x18>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	4a03      	ldr	r2, [pc, #12]	; (8005808 <vTaskSuspendAll+0x18>)
 80057fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80057fe:	bf00      	nop
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20000be8 	.word	0x20000be8

0800580c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800581a:	4b41      	ldr	r3, [pc, #260]	; (8005920 <xTaskResumeAll+0x114>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <xTaskResumeAll+0x2a>
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	e7fe      	b.n	8005834 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005836:	f001 f8f9 	bl	8006a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800583a:	4b39      	ldr	r3, [pc, #228]	; (8005920 <xTaskResumeAll+0x114>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3b01      	subs	r3, #1
 8005840:	4a37      	ldr	r2, [pc, #220]	; (8005920 <xTaskResumeAll+0x114>)
 8005842:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005844:	4b36      	ldr	r3, [pc, #216]	; (8005920 <xTaskResumeAll+0x114>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d162      	bne.n	8005912 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800584c:	4b35      	ldr	r3, [pc, #212]	; (8005924 <xTaskResumeAll+0x118>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d05e      	beq.n	8005912 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005854:	e02f      	b.n	80058b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005856:	4b34      	ldr	r3, [pc, #208]	; (8005928 <xTaskResumeAll+0x11c>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3318      	adds	r3, #24
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff f816 	bl	8004894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3304      	adds	r3, #4
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff f811 	bl	8004894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005876:	4b2d      	ldr	r3, [pc, #180]	; (800592c <xTaskResumeAll+0x120>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d903      	bls.n	8005886 <xTaskResumeAll+0x7a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	4a2a      	ldr	r2, [pc, #168]	; (800592c <xTaskResumeAll+0x120>)
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4a27      	ldr	r2, [pc, #156]	; (8005930 <xTaskResumeAll+0x124>)
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3304      	adds	r3, #4
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f7fe ff9c 	bl	80047da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	4b23      	ldr	r3, [pc, #140]	; (8005934 <xTaskResumeAll+0x128>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d302      	bcc.n	80058b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058b0:	4b21      	ldr	r3, [pc, #132]	; (8005938 <xTaskResumeAll+0x12c>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058b6:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <xTaskResumeAll+0x11c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1cb      	bne.n	8005856 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058c4:	f000 fb46 	bl	8005f54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058c8:	4b1c      	ldr	r3, [pc, #112]	; (800593c <xTaskResumeAll+0x130>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058d4:	f000 f846 	bl	8005964 <xTaskIncrementTick>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058de:	4b16      	ldr	r3, [pc, #88]	; (8005938 <xTaskResumeAll+0x12c>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f1      	bne.n	80058d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80058f0:	4b12      	ldr	r3, [pc, #72]	; (800593c <xTaskResumeAll+0x130>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <xTaskResumeAll+0x12c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058fe:	2301      	movs	r3, #1
 8005900:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <xTaskResumeAll+0x134>)
 8005904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005912:	f001 f8b9 	bl	8006a88 <vPortExitCritical>

	return xAlreadyYielded;
 8005916:	68bb      	ldr	r3, [r7, #8]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000be8 	.word	0x20000be8
 8005924:	20000bc0 	.word	0x20000bc0
 8005928:	20000b80 	.word	0x20000b80
 800592c:	20000bc8 	.word	0x20000bc8
 8005930:	200006f0 	.word	0x200006f0
 8005934:	200006ec 	.word	0x200006ec
 8005938:	20000bd4 	.word	0x20000bd4
 800593c:	20000bd0 	.word	0x20000bd0
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <xTaskGetTickCount+0x1c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005950:	687b      	ldr	r3, [r7, #4]
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000bc4 	.word	0x20000bc4

08005964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800596e:	4b4e      	ldr	r3, [pc, #312]	; (8005aa8 <xTaskIncrementTick+0x144>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 8088 	bne.w	8005a88 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005978:	4b4c      	ldr	r3, [pc, #304]	; (8005aac <xTaskIncrementTick+0x148>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005980:	4a4a      	ldr	r2, [pc, #296]	; (8005aac <xTaskIncrementTick+0x148>)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11f      	bne.n	80059cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800598c:	4b48      	ldr	r3, [pc, #288]	; (8005ab0 <xTaskIncrementTick+0x14c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <xTaskIncrementTick+0x46>
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	e7fe      	b.n	80059a8 <xTaskIncrementTick+0x44>
 80059aa:	4b41      	ldr	r3, [pc, #260]	; (8005ab0 <xTaskIncrementTick+0x14c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	4b40      	ldr	r3, [pc, #256]	; (8005ab4 <xTaskIncrementTick+0x150>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3e      	ldr	r2, [pc, #248]	; (8005ab0 <xTaskIncrementTick+0x14c>)
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4a3e      	ldr	r2, [pc, #248]	; (8005ab4 <xTaskIncrementTick+0x150>)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	4b3e      	ldr	r3, [pc, #248]	; (8005ab8 <xTaskIncrementTick+0x154>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a3c      	ldr	r2, [pc, #240]	; (8005ab8 <xTaskIncrementTick+0x154>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	f000 fac4 	bl	8005f54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059cc:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <xTaskIncrementTick+0x158>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d349      	bcc.n	8005a6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d6:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <xTaskIncrementTick+0x14c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e0:	4b36      	ldr	r3, [pc, #216]	; (8005abc <xTaskIncrementTick+0x158>)
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	601a      	str	r2, [r3, #0]
					break;
 80059e8:	e03f      	b.n	8005a6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ea:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <xTaskIncrementTick+0x14c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d203      	bcs.n	8005a0a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a02:	4a2e      	ldr	r2, [pc, #184]	; (8005abc <xTaskIncrementTick+0x158>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a08:	e02f      	b.n	8005a6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe ff40 	bl	8004894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	3318      	adds	r3, #24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe ff37 	bl	8004894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <xTaskIncrementTick+0x15c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d903      	bls.n	8005a3a <xTaskIncrementTick+0xd6>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <xTaskIncrementTick+0x15c>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <xTaskIncrementTick+0x160>)
 8005a48:	441a      	add	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7fe fec2 	bl	80047da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <xTaskIncrementTick+0x164>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d3b8      	bcc.n	80059d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a68:	e7b5      	b.n	80059d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a6a:	4b17      	ldr	r3, [pc, #92]	; (8005ac8 <xTaskIncrementTick+0x164>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a70:	4914      	ldr	r1, [pc, #80]	; (8005ac4 <xTaskIncrementTick+0x160>)
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d907      	bls.n	8005a92 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e004      	b.n	8005a92 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a88:	4b10      	ldr	r3, [pc, #64]	; (8005acc <xTaskIncrementTick+0x168>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a0f      	ldr	r2, [pc, #60]	; (8005acc <xTaskIncrementTick+0x168>)
 8005a90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a92:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <xTaskIncrementTick+0x16c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a9e:	697b      	ldr	r3, [r7, #20]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000be8 	.word	0x20000be8
 8005aac:	20000bc4 	.word	0x20000bc4
 8005ab0:	20000b78 	.word	0x20000b78
 8005ab4:	20000b7c 	.word	0x20000b7c
 8005ab8:	20000bd8 	.word	0x20000bd8
 8005abc:	20000be0 	.word	0x20000be0
 8005ac0:	20000bc8 	.word	0x20000bc8
 8005ac4:	200006f0 	.word	0x200006f0
 8005ac8:	200006ec 	.word	0x200006ec
 8005acc:	20000bd0 	.word	0x20000bd0
 8005ad0:	20000bd4 	.word	0x20000bd4

08005ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ada:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <vTaskSwitchContext+0xa4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ae2:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <vTaskSwitchContext+0xa8>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ae8:	e040      	b.n	8005b6c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <vTaskSwitchContext+0xa8>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af0:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <vTaskSwitchContext+0xac>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e00f      	b.n	8005b18 <vTaskSwitchContext+0x44>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <vTaskSwitchContext+0x3e>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	e7fe      	b.n	8005b10 <vTaskSwitchContext+0x3c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	491a      	ldr	r1, [pc, #104]	; (8005b84 <vTaskSwitchContext+0xb0>)
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0e5      	beq.n	8005af8 <vTaskSwitchContext+0x24>
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <vTaskSwitchContext+0xb0>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d104      	bne.n	8005b5c <vTaskSwitchContext+0x88>
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <vTaskSwitchContext+0xb4>)
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	4a06      	ldr	r2, [pc, #24]	; (8005b80 <vTaskSwitchContext+0xac>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20000be8 	.word	0x20000be8
 8005b7c:	20000bd4 	.word	0x20000bd4
 8005b80:	20000bc8 	.word	0x20000bc8
 8005b84:	200006f0 	.word	0x200006f0
 8005b88:	200006ec 	.word	0x200006ec

08005b8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <vTaskPlaceOnEventList+0x24>
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e7fe      	b.n	8005bae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <vTaskPlaceOnEventList+0x44>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3318      	adds	r3, #24
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fe fe32 	bl	8004822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	6838      	ldr	r0, [r7, #0]
 8005bc2:	f000 fa71 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200006ec 	.word	0x200006ec

08005bd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <vTaskPlaceOnEventListRestricted+0x26>
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e7fe      	b.n	8005bf8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <vTaskPlaceOnEventListRestricted+0x50>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3318      	adds	r3, #24
 8005c00:	4619      	mov	r1, r3
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7fe fde9 	bl	80047da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f000 fa46 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
	}
 8005c1c:	bf00      	nop
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	200006ec 	.word	0x200006ec

08005c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <xTaskRemoveFromEventList+0x2a>
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e7fe      	b.n	8005c50 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	3318      	adds	r3, #24
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fe1c 	bl	8004894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <xTaskRemoveFromEventList+0xac>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11d      	bne.n	8005ca0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe fe13 	bl	8004894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <xTaskRemoveFromEventList+0xb0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <xTaskRemoveFromEventList+0x5a>
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <xTaskRemoveFromEventList+0xb0>)
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <xTaskRemoveFromEventList+0xb4>)
 8005c90:	441a      	add	r2, r3
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7fe fd9e 	bl	80047da <vListInsertEnd>
 8005c9e:	e005      	b.n	8005cac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	480e      	ldr	r0, [pc, #56]	; (8005ce0 <xTaskRemoveFromEventList+0xb8>)
 8005ca8:	f7fe fd97 	bl	80047da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <xTaskRemoveFromEventList+0xbc>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d905      	bls.n	8005cc6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <xTaskRemoveFromEventList+0xc0>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e001      	b.n	8005cca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cca:	697b      	ldr	r3, [r7, #20]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20000be8 	.word	0x20000be8
 8005cd8:	20000bc8 	.word	0x20000bc8
 8005cdc:	200006f0 	.word	0x200006f0
 8005ce0:	20000b80 	.word	0x20000b80
 8005ce4:	200006ec 	.word	0x200006ec
 8005ce8:	20000bd4 	.word	0x20000bd4

08005cec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cf4:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <vTaskInternalSetTimeOutState+0x24>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <vTaskInternalSetTimeOutState+0x28>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	605a      	str	r2, [r3, #4]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	20000bd8 	.word	0x20000bd8
 8005d14:	20000bc4 	.word	0x20000bc4

08005d18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <xTaskCheckForTimeOut+0x24>
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	e7fe      	b.n	8005d3a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <xTaskCheckForTimeOut+0x3e>
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e7fe      	b.n	8005d54 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005d56:	f000 fe69 	bl	8006a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d5a:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <xTaskCheckForTimeOut+0xb8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d102      	bne.n	8005d7a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e023      	b.n	8005dc2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <xTaskCheckForTimeOut+0xbc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d007      	beq.n	8005d96 <xTaskCheckForTimeOut+0x7e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	e015      	b.n	8005dc2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d20b      	bcs.n	8005db8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1ad2      	subs	r2, r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff ff9d 	bl	8005cec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	e004      	b.n	8005dc2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dc2:	f000 fe61 	bl	8006a88 <vPortExitCritical>

	return xReturn;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000bc4 	.word	0x20000bc4
 8005dd4:	20000bd8 	.word	0x20000bd8

08005dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ddc:	4b03      	ldr	r3, [pc, #12]	; (8005dec <vTaskMissedYield+0x14>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
}
 8005de2:	bf00      	nop
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	20000bd4 	.word	0x20000bd4

08005df0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005df8:	f000 f852 	bl	8005ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <prvIdleTask+0x28>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d9f9      	bls.n	8005df8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <prvIdleTask+0x2c>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e14:	e7f0      	b.n	8005df8 <prvIdleTask+0x8>
 8005e16:	bf00      	nop
 8005e18:	200006f0 	.word	0x200006f0
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e26:	2300      	movs	r3, #0
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	e00c      	b.n	8005e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4a12      	ldr	r2, [pc, #72]	; (8005e80 <prvInitialiseTaskLists+0x60>)
 8005e38:	4413      	add	r3, r2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fca0 	bl	8004780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3301      	adds	r3, #1
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b37      	cmp	r3, #55	; 0x37
 8005e4a:	d9ef      	bls.n	8005e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e4c:	480d      	ldr	r0, [pc, #52]	; (8005e84 <prvInitialiseTaskLists+0x64>)
 8005e4e:	f7fe fc97 	bl	8004780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e52:	480d      	ldr	r0, [pc, #52]	; (8005e88 <prvInitialiseTaskLists+0x68>)
 8005e54:	f7fe fc94 	bl	8004780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e58:	480c      	ldr	r0, [pc, #48]	; (8005e8c <prvInitialiseTaskLists+0x6c>)
 8005e5a:	f7fe fc91 	bl	8004780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e5e:	480c      	ldr	r0, [pc, #48]	; (8005e90 <prvInitialiseTaskLists+0x70>)
 8005e60:	f7fe fc8e 	bl	8004780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e64:	480b      	ldr	r0, [pc, #44]	; (8005e94 <prvInitialiseTaskLists+0x74>)
 8005e66:	f7fe fc8b 	bl	8004780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <prvInitialiseTaskLists+0x78>)
 8005e6c:	4a05      	ldr	r2, [pc, #20]	; (8005e84 <prvInitialiseTaskLists+0x64>)
 8005e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <prvInitialiseTaskLists+0x7c>)
 8005e72:	4a05      	ldr	r2, [pc, #20]	; (8005e88 <prvInitialiseTaskLists+0x68>)
 8005e74:	601a      	str	r2, [r3, #0]
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200006f0 	.word	0x200006f0
 8005e84:	20000b50 	.word	0x20000b50
 8005e88:	20000b64 	.word	0x20000b64
 8005e8c:	20000b80 	.word	0x20000b80
 8005e90:	20000b94 	.word	0x20000b94
 8005e94:	20000bac 	.word	0x20000bac
 8005e98:	20000b78 	.word	0x20000b78
 8005e9c:	20000b7c 	.word	0x20000b7c

08005ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ea6:	e019      	b.n	8005edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ea8:	f000 fdc0 	bl	8006a2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <prvCheckTasksWaitingTermination+0x4c>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fceb 	bl	8004894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <prvCheckTasksWaitingTermination+0x50>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <prvCheckTasksWaitingTermination+0x50>)
 8005ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <prvCheckTasksWaitingTermination+0x54>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <prvCheckTasksWaitingTermination+0x54>)
 8005ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ed2:	f000 fdd9 	bl	8006a88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f80e 	bl	8005ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <prvCheckTasksWaitingTermination+0x54>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e1      	bne.n	8005ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000b94 	.word	0x20000b94
 8005ef0:	20000bc0 	.word	0x20000bc0
 8005ef4:	20000ba8 	.word	0x20000ba8

08005ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 ff68 	bl	8006de4 <vPortFree>
				vPortFree( pxTCB );
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 ff65 	bl	8006de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f1a:	e017      	b.n	8005f4c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d103      	bne.n	8005f2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 ff5c 	bl	8006de4 <vPortFree>
	}
 8005f2c:	e00e      	b.n	8005f4c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d009      	beq.n	8005f4c <prvDeleteTCB+0x54>
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	e7fe      	b.n	8005f4a <prvDeleteTCB+0x52>
	}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <prvResetNextTaskUnblockTime+0x38>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <prvResetNextTaskUnblockTime+0x3c>)
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f6c:	e008      	b.n	8005f80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <prvResetNextTaskUnblockTime+0x38>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <prvResetNextTaskUnblockTime+0x3c>)
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	20000b78 	.word	0x20000b78
 8005f90:	20000be0 	.word	0x20000be0

08005f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <xTaskGetSchedulerState+0x34>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	e008      	b.n	8005fba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <xTaskGetSchedulerState+0x38>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	607b      	str	r3, [r7, #4]
 8005fb4:	e001      	b.n	8005fba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fba:	687b      	ldr	r3, [r7, #4]
	}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	20000bcc 	.word	0x20000bcc
 8005fcc:	20000be8 	.word	0x20000be8

08005fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d054      	beq.n	8006090 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fe6:	4b2d      	ldr	r3, [pc, #180]	; (800609c <xTaskPriorityDisinherit+0xcc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d009      	beq.n	8006004 <xTaskPriorityDisinherit+0x34>
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	e7fe      	b.n	8006002 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <xTaskPriorityDisinherit+0x50>
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	e7fe      	b.n	800601e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006032:	429a      	cmp	r2, r3
 8006034:	d02c      	beq.n	8006090 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603a:	2b00      	cmp	r3, #0
 800603c:	d128      	bne.n	8006090 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3304      	adds	r3, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fc26 	bl	8004894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <xTaskPriorityDisinherit+0xd0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d903      	bls.n	8006070 <xTaskPriorityDisinherit+0xa0>
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <xTaskPriorityDisinherit+0xd0>)
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <xTaskPriorityDisinherit+0xd4>)
 800607e:	441a      	add	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fe fba7 	bl	80047da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006090:	697b      	ldr	r3, [r7, #20]
	}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200006ec 	.word	0x200006ec
 80060a0:	20000bc8 	.word	0x20000bc8
 80060a4:	200006f0 	.word	0x200006f0

080060a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060b2:	4b21      	ldr	r3, [pc, #132]	; (8006138 <prvAddCurrentTaskToDelayedList+0x90>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b8:	4b20      	ldr	r3, [pc, #128]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fbe8 	bl	8004894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d10a      	bne.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4619      	mov	r1, r3
 80060da:	4819      	ldr	r0, [pc, #100]	; (8006140 <prvAddCurrentTaskToDelayedList+0x98>)
 80060dc:	f7fe fb7d 	bl	80047da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060e0:	e026      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d209      	bcs.n	800610e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fe fb8b 	bl	8004822 <vListInsert>
}
 800610c:	e010      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f7fe fb81 	bl	8004822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d202      	bcs.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800612a:	4a08      	ldr	r2, [pc, #32]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6013      	str	r3, [r2, #0]
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000bc4 	.word	0x20000bc4
 800613c:	200006ec 	.word	0x200006ec
 8006140:	20000bac 	.word	0x20000bac
 8006144:	20000b7c 	.word	0x20000b7c
 8006148:	20000b78 	.word	0x20000b78
 800614c:	20000be0 	.word	0x20000be0

08006150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800615a:	f000 faff 	bl	800675c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800615e:	4b1c      	ldr	r3, [pc, #112]	; (80061d0 <xTimerCreateTimerTask+0x80>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d021      	beq.n	80061aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800616e:	1d3a      	adds	r2, r7, #4
 8006170:	f107 0108 	add.w	r1, r7, #8
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe fae7 	bl	800474c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	9202      	str	r2, [sp, #8]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	2302      	movs	r3, #2
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	460a      	mov	r2, r1
 8006190:	4910      	ldr	r1, [pc, #64]	; (80061d4 <xTimerCreateTimerTask+0x84>)
 8006192:	4811      	ldr	r0, [pc, #68]	; (80061d8 <xTimerCreateTimerTask+0x88>)
 8006194:	f7ff f87c 	bl	8005290 <xTaskCreateStatic>
 8006198:	4602      	mov	r2, r0
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <xTimerCreateTimerTask+0x8c>)
 800619c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <xTimerCreateTimerTask+0x8c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061a6:	2301      	movs	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <xTimerCreateTimerTask+0x74>
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e7fe      	b.n	80061c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80061c4:	697b      	ldr	r3, [r7, #20]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000c1c 	.word	0x20000c1c
 80061d4:	080070f0 	.word	0x080070f0
 80061d8:	08006311 	.word	0x08006311
 80061dc:	20000c20 	.word	0x20000c20

080061e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d109      	bne.n	800620c <xTimerGenericCommand+0x2c>
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	623b      	str	r3, [r7, #32]
 800620a:	e7fe      	b.n	800620a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <xTimerGenericCommand+0x94>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d02a      	beq.n	800626a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b05      	cmp	r3, #5
 8006224:	dc18      	bgt.n	8006258 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006226:	f7ff feb5 	bl	8005f94 <xTaskGetSchedulerState>
 800622a:	4603      	mov	r3, r0
 800622c:	2b02      	cmp	r3, #2
 800622e:	d109      	bne.n	8006244 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <xTimerGenericCommand+0x94>)
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	f107 0110 	add.w	r1, r7, #16
 8006238:	2300      	movs	r3, #0
 800623a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623c:	f7fe fc52 	bl	8004ae4 <xQueueGenericSend>
 8006240:	6278      	str	r0, [r7, #36]	; 0x24
 8006242:	e012      	b.n	800626a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <xTimerGenericCommand+0x94>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	f107 0110 	add.w	r1, r7, #16
 800624c:	2300      	movs	r3, #0
 800624e:	2200      	movs	r2, #0
 8006250:	f7fe fc48 	bl	8004ae4 <xQueueGenericSend>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24
 8006256:	e008      	b.n	800626a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <xTimerGenericCommand+0x94>)
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	f107 0110 	add.w	r1, r7, #16
 8006260:	2300      	movs	r3, #0
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	f7fe fd38 	bl	8004cd8 <xQueueGenericSendFromISR>
 8006268:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800626c:	4618      	mov	r0, r3
 800626e:	3728      	adds	r7, #40	; 0x28
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000c1c 	.word	0x20000c1c

08006278 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006282:	4b22      	ldr	r3, [pc, #136]	; (800630c <prvProcessExpiredTimer+0x94>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	3304      	adds	r3, #4
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe faff 	bl	8004894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d021      	beq.n	80062e8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	18d1      	adds	r1, r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	6978      	ldr	r0, [r7, #20]
 80062b2:	f000 f8d1 	bl	8006458 <prvInsertTimerInActiveList>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01e      	beq.n	80062fa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062bc:	2300      	movs	r3, #0
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2300      	movs	r3, #0
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	2100      	movs	r1, #0
 80062c6:	6978      	ldr	r0, [r7, #20]
 80062c8:	f7ff ff8a 	bl	80061e0 <xTimerGenericCommand>
 80062cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d112      	bne.n	80062fa <prvProcessExpiredTimer+0x82>
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e7fe      	b.n	80062e6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	4798      	blx	r3
}
 8006302:	bf00      	nop
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000c14 	.word	0x20000c14

08006310 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006318:	f107 0308 	add.w	r3, r7, #8
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f857 	bl	80063d0 <prvGetNextExpireTime>
 8006322:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4619      	mov	r1, r3
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f803 	bl	8006334 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800632e:	f000 f8d5 	bl	80064dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006332:	e7f1      	b.n	8006318 <prvTimerTask+0x8>

08006334 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800633e:	f7ff fa57 	bl	80057f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006342:	f107 0308 	add.w	r3, r7, #8
 8006346:	4618      	mov	r0, r3
 8006348:	f000 f866 	bl	8006418 <prvSampleTimeNow>
 800634c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d130      	bne.n	80063b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <prvProcessTimerOrBlockTask+0x3c>
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	429a      	cmp	r2, r3
 8006360:	d806      	bhi.n	8006370 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006362:	f7ff fa53 	bl	800580c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff ff85 	bl	8006278 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800636e:	e024      	b.n	80063ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006376:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <prvProcessTimerOrBlockTask+0x90>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <prvProcessTimerOrBlockTask+0x50>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <prvProcessTimerOrBlockTask+0x52>
 8006384:	2300      	movs	r3, #0
 8006386:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <prvProcessTimerOrBlockTask+0x94>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	4619      	mov	r1, r3
 8006396:	f7fe ff47 	bl	8005228 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800639a:	f7ff fa37 	bl	800580c <xTaskResumeAll>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <prvProcessTimerOrBlockTask+0x98>)
 80063a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	f3bf 8f6f 	isb	sy
}
 80063b4:	e001      	b.n	80063ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063b6:	f7ff fa29 	bl	800580c <xTaskResumeAll>
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000c18 	.word	0x20000c18
 80063c8:	20000c1c 	.word	0x20000c1c
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063d8:	4b0e      	ldr	r3, [pc, #56]	; (8006414 <prvGetNextExpireTime+0x44>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <prvGetNextExpireTime+0x16>
 80063e2:	2201      	movs	r2, #1
 80063e4:	e000      	b.n	80063e8 <prvGetNextExpireTime+0x18>
 80063e6:	2200      	movs	r2, #0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <prvGetNextExpireTime+0x44>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e001      	b.n	8006404 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000c14 	.word	0x20000c14

08006418 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006420:	f7ff fa90 	bl	8005944 <xTaskGetTickCount>
 8006424:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <prvSampleTimeNow+0x3c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	429a      	cmp	r2, r3
 800642e:	d205      	bcs.n	800643c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006430:	f000 f930 	bl	8006694 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e002      	b.n	8006442 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006442:	4a04      	ldr	r2, [pc, #16]	; (8006454 <prvSampleTimeNow+0x3c>)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000c24 	.word	0x20000c24

08006458 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	d812      	bhi.n	80064a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	429a      	cmp	r2, r3
 800648a:	d302      	bcc.n	8006492 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e01b      	b.n	80064ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <prvInsertTimerInActiveList+0x7c>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3304      	adds	r3, #4
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f7fe f9c0 	bl	8004822 <vListInsert>
 80064a2:	e012      	b.n	80064ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d206      	bcs.n	80064ba <prvInsertTimerInActiveList+0x62>
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e007      	b.n	80064ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <prvInsertTimerInActiveList+0x80>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe f9ac 	bl	8004822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064ca:	697b      	ldr	r3, [r7, #20]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20000c18 	.word	0x20000c18
 80064d8:	20000c14 	.word	0x20000c14

080064dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08e      	sub	sp, #56	; 0x38
 80064e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064e2:	e0c6      	b.n	8006672 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da17      	bge.n	800651a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	3304      	adds	r3, #4
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <prvProcessReceivedCommands+0x2e>
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	e7fe      	b.n	8006508 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006510:	6850      	ldr	r0, [r2, #4]
 8006512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006514:	6892      	ldr	r2, [r2, #8]
 8006516:	4611      	mov	r1, r2
 8006518:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f2c0 80a7 	blt.w	8006670 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	3304      	adds	r3, #4
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe f9ae 	bl	8004894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006538:	463b      	mov	r3, r7
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ff6c 	bl	8006418 <prvSampleTimeNow>
 8006540:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b09      	cmp	r3, #9
 8006546:	f200 8094 	bhi.w	8006672 <prvProcessReceivedCommands+0x196>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <prvProcessReceivedCommands+0x74>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006579 	.word	0x08006579
 8006554:	08006579 	.word	0x08006579
 8006558:	08006579 	.word	0x08006579
 800655c:	080065eb 	.word	0x080065eb
 8006560:	080065ff 	.word	0x080065ff
 8006564:	08006647 	.word	0x08006647
 8006568:	08006579 	.word	0x08006579
 800656c:	08006579 	.word	0x08006579
 8006570:	080065eb 	.word	0x080065eb
 8006574:	080065ff 	.word	0x080065ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	18d1      	adds	r1, r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006598:	f7ff ff5e 	bl	8006458 <prvInsertTimerInActiveList>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d067      	beq.n	8006672 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d05c      	beq.n	8006672 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	441a      	add	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	2100      	movs	r1, #0
 80065c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ca:	f7ff fe09 	bl	80061e0 <xTimerGenericCommand>
 80065ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d14d      	bne.n	8006672 <prvProcessReceivedCommands+0x196>
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e7fe      	b.n	80065e8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065fc:	e039      	b.n	8006672 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	b2da      	uxtb	r2, r3
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <prvProcessReceivedCommands+0x156>
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e7fe      	b.n	8006630 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	18d1      	adds	r1, r2, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006640:	f7ff ff0a 	bl	8006458 <prvInsertTimerInActiveList>
					break;
 8006644:	e015      	b.n	8006672 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	f000 fbc5 	bl	8006de4 <vPortFree>
 800665a:	e00a      	b.n	8006672 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800666e:	e000      	b.n	8006672 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006670:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006672:	4b07      	ldr	r3, [pc, #28]	; (8006690 <prvProcessReceivedCommands+0x1b4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	1d39      	adds	r1, r7, #4
 8006678:	2200      	movs	r2, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fbc0 	bl	8004e00 <xQueueReceive>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	f47f af2e 	bne.w	80064e4 <prvProcessReceivedCommands+0x8>
	}
}
 8006688:	bf00      	nop
 800668a:	3730      	adds	r7, #48	; 0x30
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000c1c 	.word	0x20000c1c

08006694 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800669a:	e047      	b.n	800672c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800669c:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <prvSwitchTimerLists+0xc0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a6:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <prvSwitchTimerLists+0xc0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fe f8ed 	bl	8004894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d02d      	beq.n	800672c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d90e      	bls.n	8006700 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066ee:	4b19      	ldr	r3, [pc, #100]	; (8006754 <prvSwitchTimerLists+0xc0>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe f892 	bl	8004822 <vListInsert>
 80066fe:	e015      	b.n	800672c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006700:	2300      	movs	r3, #0
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	2100      	movs	r1, #0
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fd68 	bl	80061e0 <xTimerGenericCommand>
 8006710:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <prvSwitchTimerLists+0x98>
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	603b      	str	r3, [r7, #0]
 800672a:	e7fe      	b.n	800672a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <prvSwitchTimerLists+0xc0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1b2      	bne.n	800669c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <prvSwitchTimerLists+0xc0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <prvSwitchTimerLists+0xc4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a04      	ldr	r2, [pc, #16]	; (8006754 <prvSwitchTimerLists+0xc0>)
 8006742:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <prvSwitchTimerLists+0xc4>)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	6013      	str	r3, [r2, #0]
}
 800674a:	bf00      	nop
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000c14 	.word	0x20000c14
 8006758:	20000c18 	.word	0x20000c18

0800675c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006762:	f000 f963 	bl	8006a2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006766:	4b15      	ldr	r3, [pc, #84]	; (80067bc <prvCheckForValidListAndQueue+0x60>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d120      	bne.n	80067b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800676e:	4814      	ldr	r0, [pc, #80]	; (80067c0 <prvCheckForValidListAndQueue+0x64>)
 8006770:	f7fe f806 	bl	8004780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006774:	4813      	ldr	r0, [pc, #76]	; (80067c4 <prvCheckForValidListAndQueue+0x68>)
 8006776:	f7fe f803 	bl	8004780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800677a:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <prvCheckForValidListAndQueue+0x6c>)
 800677c:	4a10      	ldr	r2, [pc, #64]	; (80067c0 <prvCheckForValidListAndQueue+0x64>)
 800677e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006780:	4b12      	ldr	r3, [pc, #72]	; (80067cc <prvCheckForValidListAndQueue+0x70>)
 8006782:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <prvCheckForValidListAndQueue+0x68>)
 8006784:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006786:	2300      	movs	r3, #0
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <prvCheckForValidListAndQueue+0x74>)
 800678c:	4a11      	ldr	r2, [pc, #68]	; (80067d4 <prvCheckForValidListAndQueue+0x78>)
 800678e:	2110      	movs	r1, #16
 8006790:	200a      	movs	r0, #10
 8006792:	f7fe f911 	bl	80049b8 <xQueueGenericCreateStatic>
 8006796:	4602      	mov	r2, r0
 8006798:	4b08      	ldr	r3, [pc, #32]	; (80067bc <prvCheckForValidListAndQueue+0x60>)
 800679a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <prvCheckForValidListAndQueue+0x60>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <prvCheckForValidListAndQueue+0x60>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	490b      	ldr	r1, [pc, #44]	; (80067d8 <prvCheckForValidListAndQueue+0x7c>)
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fd14 	bl	80051d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067b0:	f000 f96a 	bl	8006a88 <vPortExitCritical>
}
 80067b4:	bf00      	nop
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000c1c 	.word	0x20000c1c
 80067c0:	20000bec 	.word	0x20000bec
 80067c4:	20000c00 	.word	0x20000c00
 80067c8:	20000c14 	.word	0x20000c14
 80067cc:	20000c18 	.word	0x20000c18
 80067d0:	20000cc8 	.word	0x20000cc8
 80067d4:	20000c28 	.word	0x20000c28
 80067d8:	080070f8 	.word	0x080070f8

080067dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3b04      	subs	r3, #4
 80067ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3b04      	subs	r3, #4
 800680a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800680c:	4a0c      	ldr	r2, [pc, #48]	; (8006840 <pxPortInitialiseStack+0x64>)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b14      	subs	r3, #20
 8006816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b04      	subs	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f06f 0202 	mvn.w	r2, #2
 800682a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3b20      	subs	r3, #32
 8006830:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006832:	68fb      	ldr	r3, [r7, #12]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	08006845 	.word	0x08006845

08006844 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800684e:	4b11      	ldr	r3, [pc, #68]	; (8006894 <prvTaskExitError+0x50>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d009      	beq.n	800686c <prvTaskExitError+0x28>
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	e7fe      	b.n	800686a <prvTaskExitError+0x26>
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800687e:	bf00      	nop
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0fc      	beq.n	8006880 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010
	...

080068a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <pxCurrentTCBConst2>)
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	6808      	ldr	r0, [r1, #0]
 80068a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	f380 8809 	msr	PSP, r0
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8811 	msr	BASEPRI, r0
 80068ba:	4770      	bx	lr
 80068bc:	f3af 8000 	nop.w

080068c0 <pxCurrentTCBConst2>:
 80068c0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068c8:	4808      	ldr	r0, [pc, #32]	; (80068ec <prvPortStartFirstTask+0x24>)
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	6800      	ldr	r0, [r0, #0]
 80068ce:	f380 8808 	msr	MSP, r0
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8814 	msr	CONTROL, r0
 80068da:	b662      	cpsie	i
 80068dc:	b661      	cpsie	f
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	df00      	svc	0
 80068e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ea:	bf00      	nop
 80068ec:	e000ed08 	.word	0xe000ed08

080068f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068f6:	4b44      	ldr	r3, [pc, #272]	; (8006a08 <xPortStartScheduler+0x118>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a44      	ldr	r2, [pc, #272]	; (8006a0c <xPortStartScheduler+0x11c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d109      	bne.n	8006914 <xPortStartScheduler+0x24>
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	613b      	str	r3, [r7, #16]
 8006912:	e7fe      	b.n	8006912 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006914:	4b3c      	ldr	r3, [pc, #240]	; (8006a08 <xPortStartScheduler+0x118>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a3d      	ldr	r2, [pc, #244]	; (8006a10 <xPortStartScheduler+0x120>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d109      	bne.n	8006932 <xPortStartScheduler+0x42>
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e7fe      	b.n	8006930 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006932:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <xPortStartScheduler+0x124>)
 8006934:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	22ff      	movs	r2, #255	; 0xff
 8006942:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006954:	b2da      	uxtb	r2, r3
 8006956:	4b30      	ldr	r3, [pc, #192]	; (8006a18 <xPortStartScheduler+0x128>)
 8006958:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800695a:	4b30      	ldr	r3, [pc, #192]	; (8006a1c <xPortStartScheduler+0x12c>)
 800695c:	2207      	movs	r2, #7
 800695e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006960:	e009      	b.n	8006976 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006962:	4b2e      	ldr	r3, [pc, #184]	; (8006a1c <xPortStartScheduler+0x12c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3b01      	subs	r3, #1
 8006968:	4a2c      	ldr	r2, [pc, #176]	; (8006a1c <xPortStartScheduler+0x12c>)
 800696a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	b2db      	uxtb	r3, r3
 8006974:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b80      	cmp	r3, #128	; 0x80
 8006980:	d0ef      	beq.n	8006962 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006982:	4b26      	ldr	r3, [pc, #152]	; (8006a1c <xPortStartScheduler+0x12c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1c3 0307 	rsb	r3, r3, #7
 800698a:	2b04      	cmp	r3, #4
 800698c:	d009      	beq.n	80069a2 <xPortStartScheduler+0xb2>
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	e7fe      	b.n	80069a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <xPortStartScheduler+0x12c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <xPortStartScheduler+0x12c>)
 80069aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069ac:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <xPortStartScheduler+0x12c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069b4:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <xPortStartScheduler+0x12c>)
 80069b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <xPortStartScheduler+0x130>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <xPortStartScheduler+0x130>)
 80069c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <xPortStartScheduler+0x130>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <xPortStartScheduler+0x130>)
 80069d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069d8:	f000 f8d6 	bl	8006b88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <xPortStartScheduler+0x134>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069e2:	f000 f8f5 	bl	8006bd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069e6:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <xPortStartScheduler+0x138>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a0f      	ldr	r2, [pc, #60]	; (8006a28 <xPortStartScheduler+0x138>)
 80069ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069f2:	f7ff ff69 	bl	80068c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069f6:	f7ff f86d 	bl	8005ad4 <vTaskSwitchContext>
	prvTaskExitError();
 80069fa:	f7ff ff23 	bl	8006844 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed00 	.word	0xe000ed00
 8006a0c:	410fc271 	.word	0x410fc271
 8006a10:	410fc270 	.word	0x410fc270
 8006a14:	e000e400 	.word	0xe000e400
 8006a18:	20000d18 	.word	0x20000d18
 8006a1c:	20000d1c 	.word	0x20000d1c
 8006a20:	e000ed20 	.word	0xe000ed20
 8006a24:	20000010 	.word	0x20000010
 8006a28:	e000ef34 	.word	0xe000ef34

08006a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <vPortEnterCritical+0x54>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	4a0d      	ldr	r2, [pc, #52]	; (8006a80 <vPortEnterCritical+0x54>)
 8006a4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <vPortEnterCritical+0x54>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d10e      	bne.n	8006a74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a56:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <vPortEnterCritical+0x58>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <vPortEnterCritical+0x48>
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	e7fe      	b.n	8006a72 <vPortEnterCritical+0x46>
	}
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20000010 	.word	0x20000010
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <vPortExitCritical+0x4c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <vPortExitCritical+0x22>
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	e7fe      	b.n	8006aa8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <vPortExitCritical+0x4c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <vPortExitCritical+0x4c>)
 8006ab2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <vPortExitCritical+0x4c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <vPortExitCritical+0x3e>
 8006abc:	2300      	movs	r3, #0
 8006abe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20000010 	.word	0x20000010
	...

08006ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ae0:	f3ef 8009 	mrs	r0, PSP
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <pxCurrentTCBConst>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f01e 0f10 	tst.w	lr, #16
 8006af0:	bf08      	it	eq
 8006af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	6010      	str	r0, [r2, #0]
 8006afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b04:	f380 8811 	msr	BASEPRI, r0
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f7fe ffe0 	bl	8005ad4 <vTaskSwitchContext>
 8006b14:	f04f 0000 	mov.w	r0, #0
 8006b18:	f380 8811 	msr	BASEPRI, r0
 8006b1c:	bc09      	pop	{r0, r3}
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	6808      	ldr	r0, [r1, #0]
 8006b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b26:	f01e 0f10 	tst.w	lr, #16
 8006b2a:	bf08      	it	eq
 8006b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b30:	f380 8809 	msr	PSP, r0
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst>:
 8006b40:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b60:	f7fe ff00 	bl	8005964 <xTaskIncrementTick>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <SysTick_Handler+0x3c>)
 8006b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	2300      	movs	r3, #0
 8006b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <vPortSetupTimerInterrupt+0x34>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b92:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <vPortSetupTimerInterrupt+0x38>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <vPortSetupTimerInterrupt+0x3c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <vPortSetupTimerInterrupt+0x40>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	099b      	lsrs	r3, r3, #6
 8006ba4:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <vPortSetupTimerInterrupt+0x44>)
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006baa:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <vPortSetupTimerInterrupt+0x34>)
 8006bac:	2207      	movs	r2, #7
 8006bae:	601a      	str	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	e000e010 	.word	0xe000e010
 8006bc0:	e000e018 	.word	0xe000e018
 8006bc4:	20000004 	.word	0x20000004
 8006bc8:	10624dd3 	.word	0x10624dd3
 8006bcc:	e000e014 	.word	0xe000e014

08006bd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006be0 <vPortEnableVFP+0x10>
 8006bd4:	6801      	ldr	r1, [r0, #0]
 8006bd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bda:	6001      	str	r1, [r0, #0]
 8006bdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bde:	bf00      	nop
 8006be0:	e000ed88 	.word	0xe000ed88

08006be4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bea:	f3ef 8305 	mrs	r3, IPSR
 8006bee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b0f      	cmp	r3, #15
 8006bf4:	d913      	bls.n	8006c1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bf6:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <vPortValidateInterruptPriority+0x6c>)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c00:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <vPortValidateInterruptPriority+0x70>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	7afa      	ldrb	r2, [r7, #11]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d209      	bcs.n	8006c1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
 8006c1c:	e7fe      	b.n	8006c1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <vPortValidateInterruptPriority+0x74>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <vPortValidateInterruptPriority+0x78>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d909      	bls.n	8006c42 <vPortValidateInterruptPriority+0x5e>
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	e7fe      	b.n	8006c40 <vPortValidateInterruptPriority+0x5c>
	}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	e000e3f0 	.word	0xe000e3f0
 8006c54:	20000d18 	.word	0x20000d18
 8006c58:	e000ed0c 	.word	0xe000ed0c
 8006c5c:	20000d1c 	.word	0x20000d1c

08006c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08a      	sub	sp, #40	; 0x28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c6c:	f7fe fdc0 	bl	80057f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c70:	4b57      	ldr	r3, [pc, #348]	; (8006dd0 <pvPortMalloc+0x170>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c78:	f000 f90c 	bl	8006e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c7c:	4b55      	ldr	r3, [pc, #340]	; (8006dd4 <pvPortMalloc+0x174>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f040 808c 	bne.w	8006da2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01c      	beq.n	8006cca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006c90:	2208      	movs	r2, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d013      	beq.n	8006cca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f023 0307 	bic.w	r3, r3, #7
 8006ca8:	3308      	adds	r3, #8
 8006caa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <pvPortMalloc+0x6a>
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e7fe      	b.n	8006cc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d068      	beq.n	8006da2 <pvPortMalloc+0x142>
 8006cd0:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <pvPortMalloc+0x178>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d863      	bhi.n	8006da2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cda:	4b40      	ldr	r3, [pc, #256]	; (8006ddc <pvPortMalloc+0x17c>)
 8006cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cde:	4b3f      	ldr	r3, [pc, #252]	; (8006ddc <pvPortMalloc+0x17c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ce4:	e004      	b.n	8006cf0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d903      	bls.n	8006d02 <pvPortMalloc+0xa2>
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f1      	bne.n	8006ce6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d02:	4b33      	ldr	r3, [pc, #204]	; (8006dd0 <pvPortMalloc+0x170>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d04a      	beq.n	8006da2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2208      	movs	r2, #8
 8006d12:	4413      	add	r3, r2
 8006d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	1ad2      	subs	r2, r2, r3
 8006d26:	2308      	movs	r3, #8
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d91e      	bls.n	8006d6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <pvPortMalloc+0xf4>
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	e7fe      	b.n	8006d52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f000 f8f6 	bl	8006f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <pvPortMalloc+0x178>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	4a18      	ldr	r2, [pc, #96]	; (8006dd8 <pvPortMalloc+0x178>)
 8006d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d7a:	4b17      	ldr	r3, [pc, #92]	; (8006dd8 <pvPortMalloc+0x178>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b18      	ldr	r3, [pc, #96]	; (8006de0 <pvPortMalloc+0x180>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d203      	bcs.n	8006d8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <pvPortMalloc+0x178>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <pvPortMalloc+0x180>)
 8006d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <pvPortMalloc+0x174>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006da2:	f7fe fd33 	bl	800580c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <pvPortMalloc+0x164>
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e7fe      	b.n	8006dc2 <pvPortMalloc+0x162>
	return pvReturn;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3728      	adds	r7, #40	; 0x28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	200018e0 	.word	0x200018e0
 8006dd4:	200018ec 	.word	0x200018ec
 8006dd8:	200018e4 	.word	0x200018e4
 8006ddc:	200018d8 	.word	0x200018d8
 8006de0:	200018e8 	.word	0x200018e8

08006de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d046      	beq.n	8006e84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006df6:	2308      	movs	r3, #8
 8006df8:	425b      	negs	r3, r3
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <vPortFree+0xa8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <vPortFree+0x42>
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e7fe      	b.n	8006e24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <vPortFree+0x5e>
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	60bb      	str	r3, [r7, #8]
 8006e40:	e7fe      	b.n	8006e40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <vPortFree+0xa8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d115      	bne.n	8006e84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <vPortFree+0xa8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	401a      	ands	r2, r3
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e68:	f7fe fcc2 	bl	80057f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <vPortFree+0xac>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4413      	add	r3, r2
 8006e76:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <vPortFree+0xac>)
 8006e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f000 f86c 	bl	8006f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e80:	f7fe fcc4 	bl	800580c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	200018ec 	.word	0x200018ec
 8006e90:	200018e4 	.word	0x200018e4

08006e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <prvHeapInit+0xac>)
 8006ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0307 	bic.w	r3, r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <prvHeapInit+0xac>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <prvHeapInit+0xb0>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <prvHeapInit+0xb0>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <prvHeapInit+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f14:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <prvHeapInit+0xb4>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <prvHeapInit+0xb8>)
 8006f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <prvHeapInit+0xbc>)
 8006f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <prvHeapInit+0xc0>)
 8006f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000d20 	.word	0x20000d20
 8006f44:	200018d8 	.word	0x200018d8
 8006f48:	200018e0 	.word	0x200018e0
 8006f4c:	200018e8 	.word	0x200018e8
 8006f50:	200018e4 	.word	0x200018e4
 8006f54:	200018ec 	.word	0x200018ec

08006f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f60:	4b28      	ldr	r3, [pc, #160]	; (8007004 <prvInsertBlockIntoFreeList+0xac>)
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e002      	b.n	8006f6c <prvInsertBlockIntoFreeList+0x14>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d8f7      	bhi.n	8006f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d108      	bne.n	8006f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d118      	bne.n	8006fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d00d      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e008      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e003      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d002      	beq.n	8006ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	200018d8 	.word	0x200018d8
 8007008:	200018e0 	.word	0x200018e0

0800700c <__libc_init_array>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e0d      	ldr	r6, [pc, #52]	; (8007044 <__libc_init_array+0x38>)
 8007010:	4c0d      	ldr	r4, [pc, #52]	; (8007048 <__libc_init_array+0x3c>)
 8007012:	1ba4      	subs	r4, r4, r6
 8007014:	10a4      	asrs	r4, r4, #2
 8007016:	2500      	movs	r5, #0
 8007018:	42a5      	cmp	r5, r4
 800701a:	d109      	bne.n	8007030 <__libc_init_array+0x24>
 800701c:	4e0b      	ldr	r6, [pc, #44]	; (800704c <__libc_init_array+0x40>)
 800701e:	4c0c      	ldr	r4, [pc, #48]	; (8007050 <__libc_init_array+0x44>)
 8007020:	f000 f82c 	bl	800707c <_init>
 8007024:	1ba4      	subs	r4, r4, r6
 8007026:	10a4      	asrs	r4, r4, #2
 8007028:	2500      	movs	r5, #0
 800702a:	42a5      	cmp	r5, r4
 800702c:	d105      	bne.n	800703a <__libc_init_array+0x2e>
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007034:	4798      	blx	r3
 8007036:	3501      	adds	r5, #1
 8007038:	e7ee      	b.n	8007018 <__libc_init_array+0xc>
 800703a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800703e:	4798      	blx	r3
 8007040:	3501      	adds	r5, #1
 8007042:	e7f2      	b.n	800702a <__libc_init_array+0x1e>
 8007044:	08007174 	.word	0x08007174
 8007048:	08007174 	.word	0x08007174
 800704c:	08007174 	.word	0x08007174
 8007050:	08007178 	.word	0x08007178

08007054 <memcpy>:
 8007054:	b510      	push	{r4, lr}
 8007056:	1e43      	subs	r3, r0, #1
 8007058:	440a      	add	r2, r1
 800705a:	4291      	cmp	r1, r2
 800705c:	d100      	bne.n	8007060 <memcpy+0xc>
 800705e:	bd10      	pop	{r4, pc}
 8007060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007068:	e7f7      	b.n	800705a <memcpy+0x6>

0800706a <memset>:
 800706a:	4402      	add	r2, r0
 800706c:	4603      	mov	r3, r0
 800706e:	4293      	cmp	r3, r2
 8007070:	d100      	bne.n	8007074 <memset+0xa>
 8007072:	4770      	bx	lr
 8007074:	f803 1b01 	strb.w	r1, [r3], #1
 8007078:	e7f9      	b.n	800706e <memset+0x4>
	...

0800707c <_init>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr

08007088 <_fini>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr
